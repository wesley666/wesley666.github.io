<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>句子里的花园:来自微博用户吹牛大王孟豪森</title>
    <link href="/article/b6477895/"/>
    <url>/article/b6477895/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>很久很久很久以前，我经常觉得孤单，我就走到全世界最低洼的地方，大哭一场，这样不会惊动恐龙们，后来，人类把那个地方叫死海。 </p>          </div><div class="note note-info">            <p>有只小狗，它听说很远很远的地方有一座骨头山，有吃不完的骨头，它挑着行李兴冲冲就上路了，历经千辛万苦，几次差点送命，终于到了骨头山。这是一具恐龙化石，早就不能吃了。它哭了一场，但很快想到一个办法，它建了一个有趣的化石公园，门票是一根骨头。——不要放弃，生活总会用它的方式回报我们。 </p>          </div><div class="note note-success">            <p>我的冰箱制冷太强，把时间都冻住了，现在还是妇女节。女士们还可以嚣张一会儿。 </p>          </div><div class="note note-info">            <p>你光速离去，我龟速追赶，我还是追的上你，你信么？因为我知道什么叫永远。 </p>          </div><div class="note note-success">            <p>海笑是海哭的声音，海肯定是得了精神分裂症，我往海里撒点镇静剂，它就安静了。 </p>          </div><div class="note note-info">            <p>爱就是地震来了你快走，我帮你挡住海啸；相信爱就是我留下来陪你，反正你挡得住。 </p>          </div><div class="note note-success">            <p>吹牛大王公告，发字第004号：催眠灯，挂在床头，到了睡眠时间会自动变暗，以柔和的光线带您入梦；再睡不着，会散发出沁人心脾的花香助眠；再睡不着，会播放轻柔的晚安音乐；还睡不着，灯会自动掉下来把你砸晕。 </p>          </div><div class="note note-info">            <p>你伤害了我，我就给蚊子装上GPS，只咬你。 </p>          </div><div class="note note-success">            <p>被女朋友骂了，说好她一吹哨子，我五分钟之内必到，结果用了六分钟。可我是从太阳跑回来的啊！光也要八分钟啊！鞋都跑掉了！砸到月亮上多一个环形山，科学家又要嚷嚷2012了！结果就是为了看你睫毛膏有没有花！专情的人你伤不起！有木有！ </p>          </div><div class="note note-info">            <p>想到一个很严肃的问题，如果猫真的会飞，一定天下大乱。它们会糟蹋每一棵树，尸体挂满电线和高压电塔，飞得低一点的鸟都会进化出鹰一样的利喙和雨燕一样的速度，它们还会半夜敲你的窗户要吃的，大摇大摆刨掉你阳台上的花，钻进花盆睡觉……感谢主。 </p>          </div><div class="note note-success">            <p>昨天参加了一个PARTY，把热闹打包，回来分成四份放冰箱，太闲的时候拿出来用。 </p>          </div><div class="note note-info">            <p>熄灯一小时，不如把全世界的灯都打开一小时，在夜空看，地球是个发出柔和光线的小煤球。 </p>          </div><div class="note note-success">            <p>什么叫胸怀大志？同样是在地上刨坑，有的人要种树，有的人要打井，有的人要钻石油，有的人只是要解大手，我呢，要把地球做成保龄球。 </p>          </div><div class="note note-info">            <p>迄今为止所有水变油的发明思路都错了，重要的不是让别人相信水可以变成油，而是让车相信，给它加的就是汽油，所以只需要建造一个一模一样的加油站，价钱啦标号啦都一样，大家交易的时候也得说“加多少油？”但油枪里出来的是水，骗过车才是最重要的，我试验过，它们都装着一箱水高高兴兴跑了几百公里。 </p>          </div><div class="note note-success">            <p>当我还是狮身人面像的时候，把每一次对你的思念，变成一个水分子，后来，我就有了一滴眼泪。 </p>          </div><div class="note note-info">            <p>她走了，笑容凝固在空气中。如果你穿过那个路口，碰到她的笑容，一定让它留在脸上，那是世界上最美丽的表情。 </p>          </div><div class="note note-success">            <p>我写了个最伟大的悲剧，却无法排演，剧本哭的把字都洇湿了。 </p>          </div><div class="note note-info">            <p>苹果排队点卯：亚当夏娃吃的苹果、砸牛顿的苹果、乔布斯的苹果、挑起特洛伊群殴的金苹果，白雪公主啃过的毒苹果，“大苹果”纽约……都在我水果筐里，我先吃哪个捏？ </p>          </div><div class="note note-success">            <p>一个小女孩非要见她的奶奶，我只好把奶奶从天上找来，说好就一晚上，小女孩跟我商量，能不能借用我的梦一下，她们在我梦里第四层相聚，滑堕到潜意识的边缘，一晚上就是五十年……我能说什么呢？晚安，诸位。 </p>          </div><div class="note note-info">            <p>还记得年少时的猛犸，没有猩猩的夜里，维尼我受冷风吹。——这是我给动物园写的歌词，真好，要是嘴够得着，我就亲自己一口。 </p>          </div><div class="note note-success">            <p>我在太平洋上插了个红绿灯，本来想疏导鱼群，可海水见红灯也停了，后浪叠前浪已经摞了两千多米，怎么办啊，我可不想再来一场海啸！ </p>          </div><div class="note note-info">            <p>愚人节大伙儿一起合伙骗太阳吧，所有灯都开着，出门打手电筒，假装撞在电线杆上，然后大骂路灯怎么不亮，情侣们在树后卿卿我我，说没人看见，组织人在湖心岛冲着太阳赏月，白领们出门看看天回去接着睡觉。看能不能把它弄疯。 </p>          </div><div class="note note-success">            <p>长胖了，每回坐飞机天文学家都以为发生了日食。 </p>          </div><div class="note note-info">            <p>假如生活抛弃了我，我就去做全世界最开心的垃圾。 </p>          </div><div class="note note-success">            <p>美丽的夫人参观我的酒窖，问为什么所有的酒瓶子都横七竖八躺着，跟刚打过保龄球似的。我说因为酒太好，它们都醉了。 </p>          </div><div class="note note-info">            <p>世界自闭症日，我的九个人格举办选秀大赛，看谁最自闭，没赶上报名的那个赢了。 </p>          </div><div class="note note-success">            <p>为应对北京停车费暴涨，本大王特推出停车服务，方法是先用万吨水压机把您的爱车压成薄片，取车时本大王亲自把车吹回原状，保证车里所有东西完好如初，宠物孩子都能吹的不走样，收费低廉空间有限。当然，如果您想销毁什么，也可偷偷告诉我…… </p>          </div><div class="note note-info">            <p>日本警方宣布抓到了一个非常危险的恐怖分子，他带了一筐蜥蜴在前往福岛的路上被警方截获，警方宣称此人计划让蜥蜴受到核辐射，变成哥斯拉，对日本全境发动恐怖袭击。在他身上还搜到一辆玩具汽车，他辩称这是给儿子的生日礼物，日本警视厅说你以为我们没看过变形金刚么？ </p>          </div><div class="note note-success">            <p>我在海边钓鱼，好多人围观，说我钓了条鲸鱼，那是我的鱼饵好不好。 </p>          </div><div class="note note-info">            <p>明天要做个大媒，把蜘蛛侠和蜘蛛精撮合到一起，头一回张罗跨国恋，有点紧张。一个住在纽约，一个住在盘丝洞，一个成天出风头，一个和孙悟空有点扯不清楚，怎么把话说周到，是个问题。 </p>          </div><div class="note note-success">            <p>清明节，怀念我的爷爷，小时候，爷爷指着天上对我说，我们的职责就是让天空飘满牛，只要人们还能看到一线天空，就是我们的失败。我说，那他们怎么分辨白天和黑夜呢。爷爷说，我们吹奶牛，让他们同时拥有白天和黑夜。 </p>          </div><div class="note note-info">            <p>失眠的时候，用一把梳子作筛子，把风拉成龙须面，月光如水好当汤，若不是星星塞牙，这餐就完美了。 </p>          </div><div class="note note-success">            <p>今天开始晨跑，跑得太快，老要停下来等自己的影子。 </p>          </div><div class="note note-info">            <p>子爵来家借东西，走进厨房大喊一声：好大的微波炉啊！我说那是冰箱。他说冰箱怎么会这么烫！我说我想她想得心滚烫，把心拿出来放进冰箱，让它冷静一下，就成这样了。 </p>          </div><div class="note note-success">            <p>我干过最没效率的事是训练蚊子叮油箱偷汽油，再到我的油箱吐出来，一百万只蚊子才偷满一箱油，而且路上两只蚊子搞对象，热情似火，肚子里的汽油着了，引燃整支编队，一片火云之后，渣都不剩。 </p>          </div><div class="note note-info">            <p>警察问我为什么在门口划个大圆圈，我说那是车位，警察问谁的，我说给朋友的，警察问朋友开什么车，我说，飞碟。 </p>          </div><div class="note note-success">            <p>小时候有一次我失踪，后来在天上找到了，原来我睡觉的时候吹了个大鼻涕泡，鼻涕泡越来越大越来越大，就把我带到天上了。 </p>          </div><div class="note note-info">            <p>12生肖都在邀请我加入它们的名人堂，但只有老鼠最有诚意，它自愿让出名额，以后属鼠的都改叫属吹牛大王的，我还在考虑。 </p>          </div><div class="note note-success">            <p>二战的时候美国人求我带领他们潜入德军敌后，但行动失败了。虽然每次都在深夜进行，但我到哪儿哪儿的公鸡都打鸣–它们以为太阳出来了。 </p>          </div><div class="note note-info">            <p>我妹妹嗲豪森小姐放牧一群云彩，有些云彩睡着了，掉到地上，变成了绵羊。 </p>          </div><div class="note note-success">            <p>公爵想吃炒疙瘩，但要吃他从没吃过的口味，我就把他洗澡时唱歌的录音放给大家听，然后炒了一大盘鸡皮疙瘩。 </p>          </div><div class="note note-info">            <p>我梦见我梦见我梦见了她。 </p>          </div><div class="note note-success">            <p>我在天上养一群奶牛，夏天下牛奶，酸雨严重的地方下酸奶，冬天下冰淇淋，雹子天下冰棍，沙尘天下冰沙，2012下蒙牛。 –2011&#x2F;04&#x2F;28</p>          </div><div class="note note-info">            <p>别人的灵魂21克，我的灵魂21公里。 </p>          </div><div class="note note-success">            <p>我做的饭太好吃了，没到嘴里就被牙齿抢着吃了，现在我的牙都撑的像象牙那么大。 </p>          </div><div class="note note-info">            <p>你是飞刀，杀死我的年华。 </p>          </div><div class="note note-success">            <p>威廉王子的新媳妇以前追我，昨天费了好大劲才说服她不要在婚礼上唱&lt;可惜不是你&gt;。 </p>          </div><div class="note note-info">            <p>你的呼吸铺成我的路，你的眼睛把我烧成灰，爱是我的伤口，你是我的盐，我戴着思念的腮，在记忆的河流里，寻找你的航标。 </p>          </div><div class="note note-success">            <p>你们每天看到的太阳其实都不是同一个，是我点击了一颗星星给美丽的夫人看，它们在天空的屏幕上被放大了而已，流星就是我的鼠标箭头。 </p>          </div><div class="note note-info">            <p>我最失败的职业经历是婚礼牧师，新娘见了我都不嫁人了。这回英国人派了007盯我，怕我去婚礼现场，007见了我也不泡妞了。 </p>          </div><div class="note note-success">            <p>我弹过的钢琴都没有黑键，它们知道我来，都化了妆打了粉底。 </p>          </div><div class="note note-info">            <p>我的妹妹嗲豪森小姐有一个酒窝，微笑时会淌出美酒，交警查酒驾，她一笑，警察就倒地不起，大醉三天，现在她常经过的路口交警都配防毒面具。 </p>          </div><div class="note note-success">            <p>我妹妹嗲豪森小姐在湖边一站，一池子鱼汤就做好了，因为湖水一见她就沸腾了。 </p>          </div><div class="note note-info">            <p>我的妹妹嗲豪森小姐如果在泰坦尼克上，悲剧就不会发生了，因为冰山一见她就会融化。 </p>          </div><div class="note note-success">            <p>申请了个qq号，别人的小企鹅闪就闪，我的每闪一次就蹦出只活的来，据说是vip待遇，我赶紧关注了一堆美女头像，结果这些美女都长发曳地地爬出来。贞子… </p>          </div><div class="note note-info">            <p>我去演话剧，所有灯光都聚集在我身上，看不见其他人，我跟舞台监督说这样不好，舞台监督说光都是正常打的，它们被吸引到你身上，我也没辙。 </p>          </div><div class="note note-success">            <p>“我客串了一把丘比特，用箭射被选中得到爱情的人。”“好浪漫。”“浪漫个P，我把他们都射死了。” </p>          </div><div class="note note-info">            <p>公爵说他打个喷嚏，方圆十里还以为地震了，我说我冲月亮打个喷嚏，月亮上就多一座环形山。 </p>          </div><div class="note note-success">            <p>我的妹妹嗲豪森小姐有一双大眼睛，她眨眼，上眼皮半个小时才能碰到下眼皮。 </p>          </div><div class="note note-info">            <p>我的妹妹嗲豪森小姐被请到国家登山队帮助强化适应性训练，因为男人只要看见她，马上会觉得大脑缺氧。 </p>          </div><div class="note note-success">            <p>捉住一段风的教程：打开相机，静候风吹过，及时按快门，注意要打开闪光灯，风知道你在给它拍照，马上会停下不动，然后用袋子把它兜住就可以了。注意按风的级数选择相应的袋子，四级以下用塑料袋，五到七级用编织袋，八到十级用军用帆布袋，十级以上用LV，非因结实，是因为风看见名牌逃跑的欲望比较小。 </p>          </div><div class="note note-info">            <p>这会儿，如果你出门看不见星星，你一定会看见我的妹妹嗲豪森小姐，星星都跑到她的眼睛里去了。 </p>          </div><div class="note note-success">            <p>我睡菠萝床单失眠了，因为我们家床单是3D的。 </p>          </div><div class="note note-info">            <p>十年前我用圆珠笔在一个小女孩手腕上画了块表，昨天她找到我，说表一周前不走了，我问那天你遇到了什么人？她说邂逅一男孩，我说这是姻缘表，遇到对的人，时间就停止了。 </p>          </div><div class="note note-success">            <p>超光速简易方案：先找个可以围绕圆心转一圈的东西，如自行车轮，然后在车轮辐的延长线上引出一根五万公里长的细线，在细线顶端放一个小灯泡，然后把车轮转一圈，注意速度保持在一秒内，这时小灯泡走过的距离是直径乘以圆周率，半径五万公里，直径就是10万公里，乘以圆周率，超过31万4千公里，耶！ </p>          </div><div class="note note-info">            <p>小时候过六一，没礼物，我和妹妹嗲豪森小姐只能把绳子扔到云上，把云当风筝放。 </p>          </div><div class="note note-success">            <p>有一年儿童节，我和妹妹嗲豪森小姐去动物园偷小长颈鹿，拿一根棍子挑着，假装是气球带回家了。 </p>          </div><div class="note note-info">            <p>（嗲豪森小姐日记）我哥哥孟豪森男爵小时候想扮成天使请女孩跳舞，但没翅膀，我说可以用鸡翅膀粘在背上代替，他照办了，晚上哭着回来。我让你用鸡的翅膀代替，不是用肯德基的鸡翅代替！ </p>          </div><div class="note note-success">            <p>假装睡着，假装睡着，装得够像，我就杀死了失眠。 </p>          </div><div class="note note-info">            <p>千万别下雨啊，不下雨，我就没法攀着雨线回到天上，就可以名正言顺旷课了。开学，开你妹！ </p>          </div><div class="note note-success">            <p>我造了一架世界上最快的电梯，你可以在楼顶把老婆推下去，然后坐电梯到一层把她接住，当然，如果你想接的话。 </p>          </div><div class="note note-info">            <p>我还想造一架更快的电梯，你进一层的时候是9点，从顶楼出来的时候是8点59分。 </p>          </div><div class="note note-success">            <p>有人问我有没在开车时睡着，我记不清了，不过倒是有几次醒来发现自己在开车。 </p>          </div><div class="note note-info">            <p>我，我的几个人格，别打架了。让我们出发吧。 </p>          </div><div class="note note-success">            <p>命运这支贱，你射穿我也罢了，还是个飞去来器，回头再来一遍。 </p>          </div><div class="note note-info">            <p>身为伟人，我每天照镜子都要使劲抬头才能看得见自己。 </p>          </div><div class="note note-success">            <p>发改委日前决定向过桥米线征收过桥费，向现场喊加油的球迷征收燃油税。 </p>          </div><div class="note note-info">            <p>雾好大，抓一把撒点白糖就有棉花糖吃。 </p>          </div><div class="note note-success">            <p>你想抽我？抽我这个风一样的男子，你就是在抽风！ </p>          </div><div class="note note-info">            <p>雪一片一片一片一片……我是涮着吃呢还是上铁板呢？ </p>          </div><div class="note note-success">            <p>我是你的雪人，虽然我只有一根胡萝卜两个煤球一把破笤帚，但至少你饿了有吃的，冷了能取暖，进门有人扫雪，渴了我就化成一盆水。我很穷，但我对你全心全意。 </p>          </div><div class="note note-info">            <p>全世界的雪，也埋不住一颗犯贱的心！雪花见我就变八瓣儿了，它们要多两只手向偶像欢呼！Good night! </p>          </div><div class="note note-success">            <p>我的妹妹，美丽的嗲豪森小姐没见过下雪，一半雪花见了她就融化了，变成雨，另一半全身冻住，变成冰雹。显然前一半是公的，后一半是母的。 </p>          </div><div class="note note-info">            <p>这个世界上最远的距离，是我的第一顿和第二顿宵夜。 </p>          </div><div class="note note-success">            <p>晚饭请了几位女士在泰坦尼克上吃火锅，这才叫海底捞嘛。 </p>          </div><div class="note note-info">            <p>别再问我为什么不去上班了！今天是国际睡眠日！ –2012&#x2F;03&#x2F;21</p>          </div><div class="note note-success">            <p>你若安好，便是晴天。为了求雨的百姓，你快挂了吧。 </p>          </div><div class="note note-info">            <p>你不爱我，这是病，得治。 </p>          </div><div class="note note-success">            <p>这一场三分球命中率只有90%，怪我弄错了规则，以为得从本方三分线出手。 </p>          </div><div class="note note-info">            <p>我用富士山点烟，等了几百年才知道是死火山，要不要把它叫醒呢。 </p>          </div><div class="note note-success">            <p>它自杀了，用毛巾在挂钩上结束了年轻的生命，它吐了很多泡沫，死的一定很痛苦，但不管我怎么搓它，它都不再冒一个泡。它在镜子上给我留下一封信，轻生的原因竟然是虽然它一天天瘦下去，我还是叫它肥皂。 </p>          </div><div class="note note-info">            <p>我的厨子很实在，我说要减肥，他就真的不给我做宵夜。我只好告诉他，我的话得反过来听。今天我想吃西梅，然后，巴塞罗那就没有然后了…… </p>          </div><div class="note note-success">            <p>海上有漩涡是我在洗衣服，大洋环流是我在洗被罩。 </p>          </div><div class="note note-info">            <p>风太大了，我设好的频道全刮乱了。 </p>          </div><div class="note note-success">            <p>土星是我媳妇，她的戒指是我给买的。 </p>          </div><div class="note note-info">            <p>听说清明节有僵尸出没，现在种豌豆还来得及么…… </p>          </div><div class="note note-success">            <p>我跑得有多快？心仪女孩喝醉了发给前男友的胡言乱语，都是我在半路拦截的，用自己的手机拦下来给她看，她以为都是发给我的，后来就从了我了。 </p>          </div><div class="note note-info">            <p>我对她说：我希望星星变成雨洒下来。她眼里闪着惊喜的光，后来，她和其它恐龙一起灭绝了。有些事情随便说说是浪漫，千万别成真。 </p>          </div><div class="note note-success">            <p>我请美丽的夫人喝酒，一人干一壶，她说我太不绅士，我说你误会了，是你一壶，我一湖。 </p>          </div><div class="note note-info">            <p>大脸大脸，你若朝南，挡住了季风；你若朝北，阻止了寒流；你一抬头，卫星还以为板块又漂移了。 </p>          </div><div class="note note-success">            <p>坦白讲我不喜欢我的星座，夜里去改改星空的形状，把天秤改成机器猫或者梦露的样子。梦露比较好吧，有流星划过裙子还能飞起来•••••• </p>          </div><div class="note note-info">            <p>我在屋顶上拴了几万个汽球，想学飞屋环游，没想到地基太结实，现在地球已经飘到冥王星轨道外了。 </p>          </div><div class="note note-success">            <p>僵尸粉也搞快闪么？谁闪我跟谁急。“不要拿一个可怜人的希望开玩笑！”——卡德罗斯，《基督山伯爵》 </p>          </div><div class="note note-info">            <p>崇拜我的人，希望你们慎重，这是一条不归路，你们会越走越远的。 </p>          </div><div class="note note-success">            <p>喝了管胶水，想粘好破碎的心，没想到粘住了胃……老天，我求你不要让我伤心而死，你就让我饿死是吗？ </p>          </div><div class="note note-info">            <p>一衰人追求我的妹妹嗲豪森小姐，嗲豪森小姐让他送只龙猫，他去了很久，满头大汗地带回来一只猫，说试了好几千只，终于找到一只聋的。 </p>          </div><div class="note note-success">            <p>我的伯爵朋友的爷爷三月份挂了，我劝他先把遗体搁冰柜里，下个月再拿出来。清明节孝子贤孙们烧冥币，烧iphone，烧二奶，咱烧真人，那些都弱爆了。 </p>          </div><div class="note note-info">            <p>天热得太快，躲在自己的影子里凉快会儿。 </p>          </div><div class="note note-success">            <p>我长的每个心眼，都是你捅的窟窿眼儿。 </p>          </div><div class="note note-info">            <p>女人都没谱，美丽的夫人说本大王只要练成豹的身材，她就答应我，我练成了，她又说海豹不是豹。 </p>          </div><div class="note note-success">            <p>想铸个井盖，一头在北京一头在洛杉矶，让太平洋成我们家下水道。 </p>          </div><div class="note note-info">            <p>我的妹妹嗲豪森小姐有把无弦琴，白天阳光是琴弦，晚上月光是琴弦，都能弹出美妙的音乐。她不在的时候我就用它拍蒜，做炸酱面吃。 </p>          </div><div class="note note-success">            <p>以前玫瑰是没有刺的，后来有些花嚷嚷着要减肥，减啊减啊就瘦成了一根刺。摘玫瑰的时候，刺扎你，是因为她们嫉妒那些没减肥的花。——致女孩们 </p>          </div><div class="note note-info">            <p>斑点狗身上的才叫斑，斑马应该叫条形马，我开的超市每样东西上都捆一只，这是工商的规定。 </p>          </div><div class="note note-success">            <p>我的好朋友王小波走了15年了，他是我见过最搞笑的人，我很想念他。“天已经晚了，饭厅里只剩了几桌客人。有一个服务员双手叉腰站在厨房门口，好像孙二娘在看包子馅。”写的多好啊，啊啊啊啊啊啊啊啊啊！ </p>          </div><div class="note note-info">            <p>我从月亮上蹦极，蹦到你的心里，地球把你转走，我就砸穿大地，我不在乎恐龙再死一次，也不在乎第二个冰川纪。宇宙是个果核，我难道没有松鼠的勇气…… </p>          </div><div class="note note-success">            <p>太阳系是一局我没有打完的台球。 </p>          </div><div class="note note-info">            <p>上次不淡定的时候，狂奔一夜，破坏了地球的微表情，招来外星人。这次不会了。主啊，给我力量沉默吧。晚安。都别梦见我，我累了。 </p>          </div><div class="note note-success">            <p>夜里睡不着，把卢沟桥的狮子都换成真的，手贱的人小心了。 </p>          </div><div class="note note-info">            <p>你的心跳，是我的地震；你的呼吸，是我的飓风；你的安睡，是我在沙漠中，沉默守护的星空。晚安。 </p>          </div><div class="note note-success">            <p>我的妹妹嗲豪森小姐有个贝壳存钱罐，今天扔进去一粒沙子，明天就能取出一颗珍珠。我扔了一把沙子和一根绳子进去，想取出珍珠项链，结果把存钱罐胀破了。 </p>          </div><div class="note note-info">            <p>我在地球上贴了邮票，等快递把我送回天枰座。 </p>          </div><div class="note note-success">            <p>100年前，我和一帮维京海盗刷夜，让仆人把多余的冰块扔到洗手间里，仆人偷懒倒在海上，其中一冰块撞上了一艘船，那艘船叫泰坦尼克。 </p>          </div><div class="note note-info">            <p>有一次遭遇空难，我毅然把降落伞让给了邻座的女士，用她饮料柠檬片上的伞逃生了。 </p>          </div><div class="note note-success">            <p>春天就是放风筝的季节啊，我怎么能想到风筝线会刮到人家的火箭呢？ </p>          </div><p class="note note-info">我发明了一部电梯，里面的数字不是楼层，是你的年龄，你按下哪个数字，它就会把你带到那时的家门口，你会遇见还很年轻的父母，或者已经长大的孩子。他们会诧异，为什么一个陌生人在门口哭泣...... 2012/04/14</p><div class="note note-success">            <p>突然降温，没暖气了，只好把家里的钻石变成煤炭来烤火。 </p>          </div><div class="note note-info">            <p>我当蜘蛛人的时候，专业擦洗卫星，喜欢在卫星上刻小王八什么的，还把卫星的正式名字擦掉，写上喜欢的女孩的名字。想她的时候就抬头，虽然看不见，但知道她在哪儿。 </p>          </div><div class="note note-success">            <p>如果脑电波真的带电，你早被我想死了。晚安。 </p>          </div><div class="note note-info">            <p>我在每个脚印里洒下一粒种子，等它们长成参天大树，把树砍掉，为师的梅花桩大阵就布成了。 </p>          </div><div class="note note-success">            <p>人类出现之前，我和月亮玩跷跷板打发时光。 </p>          </div><div class="note note-info">            <p>我的轮胎是神户牛皮做的，到目的地正好牛皮磨穿，里面的牛肉烫熟，拿把小刀就可以割着吃了。  </p>          </div><div class="note note-success">            <p>十全十美如我是很痛苦的，因为不再有奋斗目标。 </p>          </div><div class="note note-info">            <p>小时候我在课桌上给她刻了张唱片，她说很好听。我说将来我会刻一张世界上最大的唱片给你，她说：“那我就嫁给你。”后来她和别人结婚了，婚礼上她对我说：“你没有给我刻世界上最大的唱片哦。”走的时候我留了张字条：“到土星环上看看。”（晚安。）–2012&#x2F;04&#x2F;16 </p>          </div><div class="note note-success">            <p>小时候我骗我妹妹嗲豪森小姐说每天早上要有人叫太阳起床，太阳一次忘了起床，就永远是黑夜了。后来我带她去南极偷企鹅蛋，我喝醉了，喝醉的时候，极夜刚开始。半年后，被她摇醒了。她高兴地说：“我叫了半年，它终于起床了！”（晚安） </p>          </div><div class="note note-info">            <p>有时候累了，就让影子起来走，我躺下。 </p>          </div><div class="note note-success">            <p>打雷是王母娘娘逮小三，闪电是记者在偷拍。真正的冒险家，从不想征服沙漠或跨越高山，只想去翻邻居的墙。晚安。 </p>          </div><div class="note note-info">            <p>早上和女友遛弯，看见一只猫咪溺水，我摘下女友腰上的游泳圈，猫咪得救了。我对女友说：“看见了么露丝，当初杰克真心可以活下来的。” </p>          </div><div class="note note-success">            <p>小时候我和妹妹嗲豪森小姐每天在家画毛票，去路口的老奶奶那儿买糖，每次都能骗过她，我俩以为自己是画画天才，长大了才发现不是的。 </p>          </div><div class="note note-info">            <p>你是水银海上的巨浪，扑灭了太阳，把我拍成肉酱，我变成了一封信，还盖着心形的章。晚安。 </p>          </div><div class="note note-success">            <p>我叔叔是个财迷，每次被婶婶打破鼻子，就飞奔去卖血。 </p>          </div><div class="note note-info">            <p>我妹妹嗲豪森小姐很白，北极熊站在她旁边，别人都以为是头黑熊。 </p>          </div><div class="note note-success">            <p>有一年我环游世界，捡了只猴子。医生说它失忆了。它的确行为异常，我们每经过一个瀑布，它就不管不顾往里跳，有时头破血流，有时差点淹死，谁也不知道它为什么这么做。一天我看着它头顶的印记，突然知道它是谁了。我中止旅行，把它送回了那座山。 </p>          </div><div class="note note-info">            <p>吃完早饭去跳水，十米高台，快扎到底了才发现池子里没水，赶紧朝池底吹了口气，连续6个后空翻才回到跳台上。 </p>          </div><div class="note note-success">            <p>我吞了只蜘蛛，让它在我心里结网，假装你从未来过；结果这只文艺女蜘蛛把它的心上人织在我心里，现在我每天看着各种版本的《蜘蛛侠》流口水。 </p>          </div><div class="note note-info">            <p>困了，骑肥皂泡去云里，睡个饱觉。 </p>          </div><div class="note note-success">            <p>我去过一个星球，那里的闪电会凝成固体，从几万米高空落下来，星球上全是各种形状的闪电，新的砸到旧的上面，发出电火花和类似工地的动静。我捡了两根最小的送给妹妹嗲豪森小姐，她别在头发上，再也不怕手机没电了。 </p>          </div><div class="note note-info">            <p>夏天的时候我和妹妹嗲豪森小姐会缩成一棵草那么高，去和青蛙赌钱，荷叶作赌桌，捉一星到六星瓢虫粘在一起当骰子，谁输了就去吓唬池塘边的情侣。青蛙的办法是往女孩脖子里跳，我和妹妹就假装警察大喊一声“往哪儿摸呢！”听说有几个吓出了后遗症，我们就不玩了。 </p>          </div><div class="note note-success">            <p>夸父其实是送快递的，如果不能日落之前送到，手里的货物就得免单；后羿其实是城管，为配合修建银河高速公路，强拆了九个太阳；女娲其实是美容医院的，拿五色石补天是宇宙最大的整形广告；我骑着流星在你们头顶乱窜，其实是发小广告的，天秤座新开盘了，欲购从速。 </p>          </div><div class="note note-info">            <p>我发明了一种汽车产房，两辆车开进去，第二天就能生下一个孩子，一辆奔驰和一辆宝马有很大机会生下好车比如英菲尼迪；一辆夏利和一辆松花江很可能就生下个奥拓；但也会基因突变，比如夏利和松花江配一百次能出个兰博基尼；如果奔驰配夏利，生出什么完全没谱，大多数是不能要的杂牌，门当户对很重要啊。 </p>          </div><div class="note note-success">            <p>包公额头上一个月牙就生具异相不是凡人了，我舅舅脸上一整条银河呢，别人还是只叫他大麻子。这个社会怎么了？ </p>          </div><div class="note note-info">            <p>我去过一个星球，那里雨是从地面往天空下，你哭的时候，眼泪飞上天空变成一朵云，这朵云会找到你的另一半，把眼泪洒到他身上。不管隔多远，他都会来找到你。 –2012&#x2F;04&#x2F;24</p>          </div><div class="note note-success">            <p>我养过一小猫，立志要做世界上第一只抓到鲨鱼的猫，天天在海边蹲着，此事轰动鲨鱼界，发展出好几门产业，有“围观傻猫一日游”旅行团，有赌小猫哪天放弃的博彩公司。小猫一直没放弃，鲨鱼们感动了，选了只拍过戏的鲨鱼，假装被小猫抓住咬死，横“尸”沙滩。小猫高高兴兴走了，鲨鱼们给小猫立了座铜像。 </p>          </div><div class="note note-info">            <p>人类出现之前，我每晚开演唱会，假装星星是观众席上的打火机。 </p>          </div><div class="note note-success">            <p>岁月是人生的说明书，我好不容易读懂，已经要挂了。 </p>          </div><div class="note note-info">            <p>夏天到了，我在领地四个角发射了四颗卫星，挂蚊帐。 </p>          </div><div class="note note-success">            <p>我白天假装是你的好朋友，晚上入睡前都攥着戒指，等着梦见你。晚安。  –2012&#x2F;04&#x2F;29</p>          </div><div class="note note-info">            <p>结婚的人真多啊，刚才参加一个婚礼，两对新人用一个厅，客人拼桌，台上俩司仪说相声，其中一家人安排了个环节，新人熄灯拥吻。等开灯发现吻错了，俩新郎抱一块，后来就乱了，我趁乱抢回红包回家了。 </p>          </div><div class="note note-success">            <p>我参加过的最极品的婚礼是在麦当劳，92年吧，那时候刚有麦当劳，车队、花门、气球、彩带什么都有，一对新人山盟海誓之后，宾客们排队去点餐。 </p>          </div><div class="note note-info">            <p>我把月亮改成声控的，你醒的时候它陪着你，你困了，拍拍手，只留下满天的星星。晚安。  –2012&#x2F;05&#x2F;01</p>          </div><div class="note note-success">            <p>每次看到我的猫，我都会不由自主思考生活的意义：原来完全没有意义也是一种意义。 </p>          </div><div class="note note-info">            <p>那年我去旅行，在小树林里发现一头自卑的黑熊，浆果绝收，它已经快饿死了，但死活不肯离开树林。我好说歹说带它出来，后来我不小心掉河里，它跳下去把我救上来。我看着它发呆，它说：“明白我为什么自卑了吧，我从小有白癜风，用颜料遮住的。别歧视我好吗？”——这个二货，它从来没见过自己的同类…… </p>          </div><div class="note note-success">            <p>给我的龙设计食盆，画图遇到问题，负数阶的球谐函数按理可由正数阶函数对 z-轴转 90&#x2F;m 度得到，可代入拉普拉斯方程后，无法归一化因子，删掉虚数单位也不行。这必然导致我的龙把水喝到鼻子里，郁闷，睡了。有明白的给我留言吧，想引入玻色.爱因斯坦积分的就别费劲了。试过了，没用。 </p>          </div><div class="note note-info">            <p>长城其实是烧烤一条街，古时候游牧民族负责牛羊肉，汉人负责场地——那些箭垛子明摆着是架烤串的，木炭一边出一半。隔一段时间就开个大趴替，在最大的烧烤台上烤全羊，怕来的人太多，骗大伙说是在打仗，点狼烟呢。 </p>          </div><div class="note note-success">            <p>我没放风筝，我在钓龙。 </p>          </div><div class="note note-info">            <p>我没放风筝，我在给天空贴创可贴。 </p>          </div><div class="note note-success">            <p>小时候保姆给我和妹妹讲故事，月亮本来身材很苗条，后来怀孕了，肚子就越来越圆，到最圆的时候，开始分娩，生小星星，流产的就是流星。星星爹是太阳，太阳抛妻弃子，只在白天出现，到晚上就躲了，只有月亮和孩子们孤独地挂在天上。她说的声情并茂，我想月亮逊弊了，这种男人还每个月让它搞大一次肚子。 </p>          </div><div class="note note-info">            <p>有一年雨夜，一个面罩轻纱的女郎来敲门，自称是个真正的公主。我想起豌豆公主的故事，就在床上放了粒豌豆，上面摞了无数床垫和鸭绒被。半夜我被凄厉的尖叫惊醒，她冲进来，嘶哑地问屋里为什么有豌豆。我正在高兴，突然一股凉意升起：“能被豌豆伤害的，不一定是公主，也可能是……”她缓缓撩开面纱……  </p>          </div><div class="note note-success">            <p>给美丽的夫人的情书写完了，用墨鱼汁写在羊皮上，用了二十只螃蟹做订书钉，她就算不接受我的心，至少可以扔进锅里，不至于亏待自己的胃。 </p>          </div><div class="note note-info">            <p>如果和日本打赢了，我就在富士山上罩个大铜烟囱，绕山挖一圈河，扔导弹把火山点着，等河水开了，往里扔神户牛肉、鱼片、葱段、辣椒、白菜、豆腐、粉丝……对，就是你们，本大王的粉丝，你们坐着特制木船“鲜肉丸”，船舱里放着麻酱香油海鲜汁味噌，船桨是大木勺，想吃什么捞什么……  –2012&#x2F;05&#x2F;21</p>          </div><div class="note note-success">            <p>如果你在暗恋一个人，并下决心要实现梦想，你可以来找大王。大王把“XX爱XX”刻在刚出生的大鹏鸟的翅膀上。你有两年的时间，两年之后，大鹏鸟的翅膀会长到500米宽，这行字全世界都看得见。希望那时候你觉得幸福，她觉得荣耀。 </p>          </div><div class="note note-info">            <p>我吹着笛子向你进发，星星在头顶排成一行。晚安。 </p>          </div><div class="note note-success">            <p>我的妹妹嗲豪森小姐想干掉一个专杀流浪狗的混蛋，请教我怎么在30公里外打中目标，我说30公里的狙击学问太大了，要计算光线、风速、地球自转、地球引力、空气湿度、大气扰动、生物活动等参数……刚才她说把那个混蛋狙掉了，我说谁教你的，她说很简单，做个30公里长的枪管就行了。 </p>          </div><div class="note note-info">            <p>0点之后，拨打麦当劳订餐电话，对订餐员说：请给我来一份煎饼果子，双份蛋，加千岛汁。不管对方怎么解释，你都重复这句话，挂掉再拨，再挂掉再拨，第三次的时候，会有一个悦耳的英国口音问你：“男爵殿下，您来点什么？”这是我私人独享的订餐热线，刚才点了煮菱鲆鱼浇牡蛎汁和小牛肉，你们都试试吧。 </p>          </div><div class="note note-success">            <p>绿巨人为什么是绿色的，还很生气？我请他吃刺身，说一人一半，后来我吃了所有鱼肉，他吃了所有芥末。 </p>          </div><div class="note note-info">            <p>我把每次和你的回忆切碎，装进万花筒，这样我永远有新的回忆。晚安。  –2012&#x2F;05&#x2F;24 00:49</p>          </div><div class="note note-success">            <p>有一回我和妹妹嗲豪森小姐过大峡谷，峡谷太宽过不去，我拿出口香糖吹了个无比大的泡泡，把妹妹和月亮都装进去，月亮把我们带过去了。 </p>          </div><div class="note note-info">            <p>我最潦倒的时候摆摊卖过冥币，一天一个老太太找到我，说能不能定制，别印阎王，印她的头像，我说这对您可不吉利，她说就是想给下面带个信，让他知道她想他。我答应了，她又给我一张纸条，说能不能把这个也印上，我一看密密麻麻十几条，都是我妈常跟我说的话。原来下面是她儿子…… </p>          </div><div class="note note-success">            <p>出了趟远门，帮北斗七星打架去了，近日会有陨石雨，是敌人碎尸，倒时差先睡了，晚安。 </p>          </div><div class="note note-info">            <p>这次去了不减肥会死星，星球地表是压力感应的，超重的会压垮地壳，掉到地心里当燃料；还去了瘦子让你得瑟星，地表也是压力感应，分量不够的会被弹射到大气层外当卫星，星球最盛大的节日是胖子们吃着蛋糕，拿望远镜观赏天上的瘦子。小胖子们把食物塞到炮膛里射上天，运气好的瘦子吃胖了有机会复活。 </p>          </div><div class="note note-success">            <p>我送给美丽的夫人一挺机枪，她想我的时候，把吻装进每一颗子弹，向我倾泻过来。如果我满身口红失去知觉，不要抢救我，我是爽死的。  </p>          </div><div class="note note-info">            <p>我寂寞的时候，跟回声聊天，给它讲段子，然后假装头一次听到。 </p>          </div><div class="note note-success">            <p>我的宇宙是个宏伟的肥皂泡，你是一根针。 </p>          </div><div class="note note-info">            <p>把这场雨添加到我的收藏了，下次失恋拿出来。  2012&#x2F;07&#x2F;24 00:51</p>          </div><div class="note note-success">            <p>我造了艘玻璃飞船，发射之后，就是银河里的漂流瓶，给你的话写在里面了，希望有外星人拾到。地球上我找不到答案。 </p>          </div><div class="note note-info">            <p>北京还没下雨，是我正在给每个雨点拴降落伞。 </p>          </div><div class="note note-success">            <p>经过我驯化的龙卷风，扔建筑材料进去，所过之处能盖起一座城市。 </p>          </div><div class="note note-info">            <p>如果入水后竖着游1500米，本大王有信心拿世界第一。 </p>          </div><div class="note note-success">            <p>为什么我没有活在我得到了你的那个平行宇宙里？晚安。 </p>          </div><div class="note note-info">            <p>怎样才能让地球不转？举办一个太阳系好声音，本大王上去献唱。 </p>          </div><div class="note note-success">            <p>王尔德说：人生有两大悲剧，一个是没有得到想要的东西，一个是得到了想要的东西。萧伯纳说：人生有两大悲剧，一是万念俱灰，一是踌躇满志。但本大王更喜欢这句话：“悲观主义者认为所有女人都是坏女人，乐观主义者希望这是真的。” </p>          </div><div class="note note-info">            <p>我把关于你的一切记忆都扔进黑洞了，那为什么我还要写这条微博？晚安。  2012&#x2F;09&#x2F;03 01:24</p>          </div><div class="note note-success">            <p>想把人类浪费的食物都运到北极去，浇成一个大冰山，北极熊就不会饿死了。把不爱本大王的人也浇进去。 </p>          </div><div class="note note-info">            <p>赠人肉丝，手有鱼香。 </p>          </div><div class="note note-success">            <p>“饿的时候我会摊一张足球场那么大的煎饼，上面铺满菜叶子。”“大王您改吃素啦。”“不是，菜叶子把牛羊都吸引来，一卷就可以吃了。” </p>          </div><div class="note note-info">            <p>后羿说他射下九个太阳，吹牛，实际情况是他参加相亲节目，十个太阳全灭，只有月亮没灭，他才娶了嫦娥。现在你们看到的太阳是他们害死了猪八戒，点着了冒充的，它油多嘛，也比较圆。 </p>          </div><div class="note note-success">            <p>雪是穿婚纱的雨。   2012:11:04 10:45</p>          </div><div class="note note-info">            <p>想你的时候我会点支蜡烛，把手影投到月亮上。晚安。</p>          </div><div class="note note-success">            <p>又下雪了！老天你不知道堆雪人很累的吗？你就不能直接下雪人吗？ </p>          </div><div class="note note-info">            <p>小时候本大王被抓去当童工，发给一粒粒钻石让我嚼，吹出来的泡泡挂在天上，替换那些坏掉的星星。晚安。 </p>          </div><div class="note note-success">            <p>雾太浓了，可以堆雪人。 </p>          </div><div class="note note-info">            <p>我以为我的心是铁打的，遇见你才发现，原来它是泡腾片做的。  2013:01:14 09:07</p>          </div><div class="note note-success">            <p>风大的把地球都吹跑了。 </p>          </div><div class="note note-info">            <p>幸福是欲望的暂时停止，所以一切梦想都不要变成现实。 </p>          </div><div class="note note-success">            <p>从今天开始好好练枪法、练扔雪球、练拉电线绊人，争取七个月后成功打劫圣诞老人。立此存照！[拳头]  2013&#x2F;05&#x2F;11</p>          </div><div class="note note-info">            <p>地震是寂寞的地球在用摇一摇。 </p>          </div><div class="note note-success">            <p>本大王当年养过一窝小香猪，长不大的那种，有一只长到600斤，没脸见人，躲到树林里去了，不幸树林里有整整一群狼，它谎称自己是个扑满，狼正好没有银行，把辛苦攒下的钱都存到它嘴里，它装了满满一肚子钱跑回来，成了大富翁。这个故事告诉我们，只要你有智慧，越胖越好。 </p>          </div><div class="note note-info">            <p>如果你去了冥王星，我就把太阳变成路由器。晚安。 </p>          </div><div class="note note-success">            <p>我时日无多了，香蕉都不敢买绿的。 </p>          </div><div class="note note-info">            <p>月亮是天空的处女膜，看到它，我就依然相信爱情。晚安。 </p>          </div><div class="note note-success">            <p>小时候比赛谁尿得高，本大王尿出了银河。 </p>          </div><div class="note note-info">            <p>流星是有强烈个人诉求的屌丝天使烧掉的星际大巴。 </p>          </div><div class="note note-success">            <p>伯爵说他那里的空气很差，病人手术的时候如果没有麻醉药，脑袋伸出窗外就可以了；我说我们这里的空气可以扔到嘴里嚼。 </p>          </div><div class="note note-info">            <p>我往银河扔了好多贝壳，明天所有的行星都会变成珍珠，晚安。 </p>          </div><div class="note note-success">            <p>本大王遇到过一个活了三万年的人，他说地球那时候是方的，走到边缘就会掉下去，后来人们无意中发现地下是空的，经过好几千年的努力，终于剥掉了大地的外壳，露出里面真正的地球。其实地球原本装在一个盒子里，是一个礼物，但不知道是谁送的，也不知要送给谁。 </p>          </div><div class="note note-info">            <p>我妹妹嗲豪森小姐养过一只猫，它只会往前走，不会回头也不会拐弯，我妹妹把它养在一个特制的笼子里。有一天笼子破了，它走了出去，七十年以后，我妹妹发现它趴在门口，它绕地球一圈回来了，而且它当初是往北走的，所以经过了北极和南极。所以，就算方向错了，只要你一直走，依然能得偿所愿。 </p>          </div><div class="note note-success">            <p>#那些年我们上过的当#女朋友发誓要瘦成一道闪电，后来本大王才知道真有一种闪电叫球形闪电。⚡⚡⚡[衰] </p>          </div><div class="note note-info">            <p>人类出现之前，我用小刀把月亮切成58个面的钻石。 </p>          </div><div class="note note-success">            <p>怀念在蟠桃会门口倒假票的日子，怀念和八戒降低云头看嫦娥裙底春光的日子，怀念偷二郎神家宠物狗的日子，怀念在如来佛手指上写拆的日子，可惜天上没有不散的筵席，卷支大麻，吐成云，希望灵霄中街还流传我的传说。 </p>          </div><div class="note note-info">            <p>以前我认识一颗流星，它爱上一个女孩，每天从她阳台外面飞一遍，给女孩许愿的机会。有一天它发现女孩的心愿实现了，阳台上多了个男孩，它颓了一阵，不飞了。有一天我看见它又要飞，问为什么，它说：我要给自己许一个愿。  –2013&#x2F;11&#x2F;09</p>          </div><div class="note note-success">            <p>别对流星许愿了！一个没跑到厕所就飙屎的倒霉蛋，你们觉得它有心情帮你解决问题吗？？  –2014&#x2F;04&#x2F;03</p>          </div><div class="note note-info">            <p>我小时候有一次挨打是因为骗我弟说吃肥皂泡会飞，他吃光家里所有的肥皂，从二楼跳出去了。 </p>          </div><div class="note note-success">            <p>我挺好，太阳系是一伙孤独的碰瓷党，在凌晨3点的宇宙十字街头踯躅。   –2014&#x2F;07&#x2F;22</p>          </div><div class="note note-info">            <p>想到嫦娥也正在赏月，我决定挖一个心形的大湖，一半种玫瑰，一半种胡萝卜。 </p>          </div><div class="note note-success">            <p>沙是地球的骨灰，钻石是舍利子。 </p>          </div><div class="note note-info">            <p>蜘蛛和蟑螂哪个更恶心？蟑螂。有蜘蛛侠，你能想像蟑螂侠吗？ </p>          </div><div class="note note-success">            <p>本大王认识一个超级英雄，被基因突变的蚕咬过，成了蚕侠，虽然也有吐丝技能，但行动迟缓，吐丝很慢，随身需带大把桑叶，必杀技是把自己裹起来，所以怎么也不红。看着蜘蛛侠成了大明星，他终于得了抑郁症，吐出来的是烦恼丝，大受女文青欢迎，从此不敢开心，多拧巴。 </p>          </div><div class="note note-info">            <p>本大王为防心碎，把自己的心做成橡胶的，可它还是碎了，我才知道所有的心掉在地上之前，都已经冻得像玻璃一样了。 </p>          </div><div class="note note-success">            <p>本大王去过一个古怪的地方，那里的人经常跟你说着说着话，突然浑身打战，然后就消失了。后来才知道，我进了一部手机。 </p>          </div><div class="note note-info">            <p>我用烟火截断银河，召唤来一场大雨。 </p>          </div><div class="note note-success">            <p>我当年收养过一头小鲸鱼，我们一起在海里游泳唱歌，后来它离开我找同伴去了。最近听说科学家在找一头鲸鱼，它孤独地唱了二十年，没有一头鲸回应，我猛然醒悟，就是它，它跟我学会了用人的频率唱歌，200赫兹，可鲸鱼的频率不到20，没有鲸鱼能听到它的声音。我决定放弃假期去找它。小鲸鱼，你在哪里？ </p>          </div><div class="note note-info">            <p>我认识一只小猫，它把紫菜做的保健腰带卖给鲨鱼，肚子的位置有一坨饭团，说是信息大米。然后它又把这些鲨鱼卖了，说是鲨鱼寿司，赚了很多钱。 </p>          </div><div class="note note-success">            <p>我吃光了全世界的橡皮擦，她的名字还是在我心里。晚安。  2015&#x2F;03&#x2F;01 00:28</p>          </div><div class="note note-info">            <p>一个岛爱上了另一个岛，他开始收养珊瑚虫，珊瑚虫明白他的意思。很多很多年以后，一条珊瑚礁把两个岛永远连接在了一起。 </p>          </div><div class="note note-success">            <p>还有一个岛也爱上了另一个岛，但他找不到珊瑚虫，爱情郁积在心中，心越来越烫，终于有一天，他的心猛烈地喷发了，遮天蔽日。烟雾散尽，火山灰把两个岛变成了一个岛，他们从此幸福地生活在一起，岛上铺满了钻石。 </p>          </div><div class="note note-info">            <p>我把星星装进沙漏，时间就变成了银河。晚安。  2015&#x2F;03&#x2F;03 03:30</p>          </div><div class="note note-success">            <p>我一堂哥太高了，食物落到胃里之前就饿死了。 </p>          </div><div class="note note-info">            <p>液体就是形状随容器改变的物体，所以猫是一种液体。 </p>          </div><div class="note note-success">            <p>我们的宇宙直径其实只有0.7光年，人类看见的浩瀚星空是全息影像，我们生活在外星人制造的一枚巨蛋中，外面真正的宇宙图景是我们完全无法想象的，人类将在2033年发现这一事实，并组织舰队试图冲破牢笼。  </p>          </div><div class="note note-info">            <p>我把关于你的记忆从动脉里抽出来，想你的时候再输回去，我就这样成了瘾君子。 2015&#x2F;03&#x2F;14 01:10</p>          </div><div class="note note-success">            <p>冰淇淋是南极工厂的雪人制造出来的，准确说是拉出来的，正常的时候是冰淇淋，大便干燥的时候是冰棍，闹肚子的时候是奶昔，半稀半干的时候是珍珠奶茶，闹得最厉害的时候会拉出一杯热巧克力，这时雪人的热量耗尽，就挂了。不喝热巧，就没有杀害。 </p>          </div><p class="note note-info">有一年冬天，出现了一个正能量雪人，又热情又滑稽，所有见过它的人都开心得不得了，是个荷尔蒙版的大白。后来才知道它是一帮毒贩子用海洛因堆成的。</p><div class="note note-success">            <p>一条道走到黑，再走几个小时，天就亮了。 2015&#x2F;03&#x2F;17 23:52</p>          </div><p>自从以后的微博都不是他写的了。<a href="https://weibo.com/1658197767/4897263031683749">https://weibo.com/1658197767/4897263031683749</a></p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>诗</tag>
      
      <tag>collection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重读《百年孤独》后的回忆</title>
    <link href="/article/6eef96b2/"/>
    <url>/article/6eef96b2/</url>
    
    <content type="html"><![CDATA[<p>多年以后，面对电子相册的往年今日，面对从未丢失却沉寂已久的短信，他会清晰地回忆起十年前那段旧时光——在人来人往的教室长廊里与她欢乐交谈，铃声响起仍然感觉意犹未尽，青春的低语混合着尘埃的微光飘浮；在黄色的信纸上写下过书籍读后感，写下过彼此的美好祝愿与鼓励，也写下过对生活的感悟，黑色的墨迹承载了一段青春舞曲；在上学前，他有意无意地望向窗外，看到她的身影经过，心里飘忽不定；在一个无常的周末，他坐在教室里曾重复听着某一首歌，内心充满着纠结，直到今天再次唱起仍然感慨万千。后来，他意识到过分的关心可能引起了她的逃避和无心的无视，他决定画好界限。在一个夜晚相聚后，他骑自行车送她回家，可能是因为大风或者沙子进了眼睛，有热泪流了出来，他感觉后面可能再也没有见面的机会了。</p><p>此后的过年期间，有一次他们在超市相遇，好像陌生人一样，彼此问候后就此别过。还是太年轻，如果可以重来，他们可以一起坐下来喝杯奶茶，聚聚旧。他和朋友的聚会中，还是能经常听到她的消息，他不作声，只是聆听。</p><p>孤独来自脆弱的敏感。</p><p>现在，他们不经常联络了。年初他看着她毕业的照片时，看到了和十年前一样纯真动人的笑容，岁月掩盖不住她明亮的眼睛，祝愿她平安快乐！</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>说说9月8号以来的短学期</title>
    <link href="/article/daa12744/"/>
    <url>/article/daa12744/</url>
    
    <content type="html"><![CDATA[<blockquote><p>翻看便签看到了一篇旧文，写于2017年9月16号下午1点35分</p></blockquote><p>嗯……或者可以说是一次“假研究生”“假学长”的经历……，因为他们是准备读大三大四的真学长学姐……</p><p>这个短学期主要是由我们实验室承担的一个pic单片机短学期学习任务，我们开始是给他们讲讲课，讲一些软件操作和一些基本问题，后来基本就是一个助教的角色，辅助他们解决一些问题，最后再负责验收一下就ok了……</p><p>这期间发生了两次尴尬的事，一次是老师介绍我们时，说我们是研究生😂，当时的反应就是尴尬地笑笑……第二次尴尬发生在今天，有一位同学问我一些关于研究生导师的问题，我勉强说了一些，最后还是否认了这个身份，勉强地绕出去了，也没说是大一的……</p><blockquote><p>嗯……让我想起了老罗的一个故事<br>我小的时候呢，脸皮厚叫“脸皮厚”，无耻叫“无耻”，现在都叫心理素质好。(lol…) 真奇怪！像我跟几个朋友去爬山，然后下来累了，在那个长凳上，我们5、6个坐成一排休息，然后大家拿了一些瓜子，然后拿了个塑料袋，嗑完了瓜子就扔到塑料袋里去了，但是吃完手不黑了吗？于是大家掏出一点纸巾，互相分，然后把手擦一擦。然后把那个就放到座位上了，结果一阵风一吹呢都刮地上了，不是故意扔地上的，被刮到地上去了，然后坐在那儿没走嘛，一懒，暂时就没拣，都下了山，挺累的。结果清洁人员就过来了，说“哎～这个纸是不是你们给扔的啊？”然后我脸一下就红了，然后他们几个都没事，(lol…) 然后我说“是”，然后他说“罚款”，我说“好”，然后我就把罚款交了，我又自己把那纸给拣起来了。然后那个罚款的人走了以后，他们几个人就看着我说“哎，老罗你怎么心理素质那么差？”(lol…) “不承认不就行了么？”但是你脸已经红了，所以你不承认也不行。“你怎么心理素质那么差？”好我就奇怪了，我才知道“心理素质”是这个意思。过去我们叫“无耻”，现在叫“心理素质”。明明是你干的，你怎么能心理素质那么好呢？(lol…) 好……这是……题还没讲呢！(lol…) 向大家郑重道歉！(lol…)</p></blockquote><p>哎呀，诚实是一个奢侈的品质！</p><p>短学期总体来说感觉还是不错的，虽然头三天可能是因为生物钟没调节过来，连续失眠，精神不好，但后来慢慢就很快睡着了……给他们讲课，辅助他们，有种回到高中帮别人解题的感觉，对，那种感觉特别美好！哈哈！</p><p>哦，期间实验室举行了“孵化器杯”的第一届羽毛球比赛，那天是9月9号，那天由于一些人弃赛，我直接就跳过第一轮，直接晋级了……下午，连打了三局，都比较幸运惊险地获胜了，我都没想到得到了一等奖😜……虽然学了一学期的羽毛球，但感觉高远球这些都没怎么运用，还是任重道远……</p><p>那些年，曾经在孵化器杯上走过这么一个血肉之躯……<img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250706225434744.jpg" alt="Notes_1751813220024"></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓对外发布工程源码:怎么做到仅UI层公布</title>
    <link href="/article/9f1bc6ae/"/>
    <url>/article/9f1bc6ae/</url>
    
    <content type="html"><![CDATA[<p>最近新客户要求将软件的代码公开给他们，允许他们自己修改 UI，进行定制。由于我们工程包含其他核心模块，不能全部开放，所以需要将非 UI 模块进行整合并混淆再发布。</p><p>由于工程具有良好的模块化，所以一开始想到的是参考<a href="https://iwesley.top/article/a43c0ba5/">安卓官方版fat-aar:使用Fused Library将多个Android库发布为一个库 - Wesley’s Blog</a>将非 UI 模块合并成一个 aar。</p><p>但有挑战：</p><ul><li><p>依赖传递很难处理，就算处理了也不方便后续维护</p></li><li><p>存在部分内网 SDK 依赖</p></li></ul><p>为了不改变 maven 的管理方式，决定使用本地 maven 的方式。</p><p>可以先用<code>gradlew build --scan</code>生成一棵依赖树，网页版方便查看 app 有哪些依赖，还可以定位内网的依赖来自于哪个地址。</p><h2 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h2><p>在gradle.properties 定义本地 maven 路径</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">LOCAL_MAVEN_URL=maven_repo<br>GROUP_ID=com.wesley.test<br>SDK_VERSION=<span class="hljs-number">1.0</span><span class="hljs-number">.0</span> #统一控制所有模块版本<br></code></pre></td></tr></table></figure><p>settings.gradle引入本地依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy">maven &#123;<br>            url = uri(<span class="hljs-string">&quot;file://$&#123;rootProject.projectDir&#125;/$&#123;LOCAL_MAVEN_URL&#125;&quot;</span>)<br><br>        &#125;<br></code></pre></td></tr></table></figure><p>各自模块接入maven-publish</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    alias(libs.plugins.android.library)<br>    alias(libs.plugins.kotlin.android)<br>    id <span class="hljs-string">&#x27;maven-publish&#x27;</span><br>&#125;<br><span class="hljs-keyword">def</span> ARTIFACT_ID=<span class="hljs-string">&#x27;base-base&#x27;</span><br>android &#123;<br>    <span class="hljs-comment">//不能发布源码给第三方</span><br>    publishing &#123;<br>        singleVariant(<span class="hljs-string">&#x27;release&#x27;</span>) <span class="hljs-comment">// 不生成 sources JAR</span><br>    &#125;<br><br>    ...............<br><br>     <span class="hljs-comment">//如果有模块重名，比如 feature:base, base:base, 需要定义</span><br>    compileOptions &#123;<br>        kotlinOptions.freeCompilerArgs += [<span class="hljs-string">&#x27;-module-name&#x27;</span>, <span class="hljs-string">&quot;$GROUP_ID.$ARTIFACT_ID&quot;</span>]<br>    &#125;<br>    <br>&#125;<br><br><br>publishing &#123;<br>    publications &#123;<br>        maven(MavenPublication) &#123;<br>            groupId GROUP_ID<br>            artifactId ARTIFACT_ID<br>            version SDK_VERSION<br><br>            afterEvaluate &#123;<br>                from components.release<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    repositories &#123;<br>        maven &#123;<br>            url rootProject.file(LOCAL_MAVEN_URL).toURI()<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果模块存在多个 flavor：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    alias(libs.plugins.android.library)<br>    alias(libs.plugins.kotlin.android)<br>    id <span class="hljs-string">&#x27;maven-publish&#x27;</span><br>&#125;<br>android &#123;<br>    publishing &#123;<br>        multipleVariants &#123;<br>            allVariants()<br>            <span class="hljs-comment">//withJavadocJar()</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>publishing &#123;<br>    publications &#123;<br>        maven(MavenPublication) &#123;<br>            groupId GROUP_ID<br>            artifactId <span class="hljs-string">&quot;feature-xxx&quot;</span><br>            version SDK_VERSION<br><br>            afterEvaluate &#123;<br>                from components.<span class="hljs-keyword">default</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    repositories &#123;<br>        maven &#123;<br>            url rootProject.file(LOCAL_MAVEN_URL).toURI()<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要在发布时控制某些代码不混淆或者依赖方式变更：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// 在根项目的 build.gradle 中</span><br>ext &#123;<br>    <span class="hljs-comment">// 定义判断是否是发布任务的方法</span><br>    isPublishTask = &#123; -&gt;<br>        gradle.startParameter.taskNames.any &#123;<br>            it.startsWith(<span class="hljs-string">&quot;publish&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">if</span> (isPublishTask()) &#123;<br>        <span class="hljs-comment">// 发布时将 aar 打包进 sdk</span><br>        println(<span class="hljs-string">&quot;wesley publish&quot;</span>)<br>        <span class="hljs-comment">//embed(project( &quot;:feature:testAAR&quot; ))</span><br>        <span class="hljs-comment">// id(&quot;com.kezong.fat-aar&quot;)</span><br>        embed project(<span class="hljs-attr">path:</span> <span class="hljs-string">&quot;:feature:testAAR&quot;</span>, <span class="hljs-attr">configuration:</span> <span class="hljs-string">&#x27;default&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        implementation(project( <span class="hljs-string">&quot;:feature:testAAR&quot;</span> ))<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>对于不携带 aar 包的模块，比如某 B 模块implementation(project( “:base:base” ))，如果:base:base 也配置了 publish 任务，依赖它的模块不需要修改成远程依赖方式。为什么呢？问了一下 AI：</p><blockquote><h3 id="核心原因：项目内依赖（Project-Dependency）-vs-Maven-依赖（Maven-Dependency）的转换"><a href="#核心原因：项目内依赖（Project-Dependency）-vs-Maven-依赖（Maven-Dependency）的转换" class="headerlink" title="核心原因：项目内依赖（Project Dependency） vs. Maven 依赖（Maven Dependency）的转换"></a>核心原因：项目内依赖（Project Dependency） vs. Maven 依赖（Maven Dependency）的转换</h3><ol><li><strong>在模块 A 的构建期间： (<code>implementation project(&quot;:base:base&quot;)</code>)</strong><ul><li>当 Gradle 构建你的 <code>A</code> 模块时，它看到了 <code>implementation project(&quot;:base:base&quot;)</code>。</li><li>这里的 <code>project(...)</code> 告诉 Gradle：“这是一个<strong>项目内依赖</strong>。你不需要去远程仓库下载任何东西，直接在本次构建中找到 <code>:base:base</code> 模块，编译它，然后让 <code>A</code> 模块使用它的代码即可。”</li><li>在这个阶段，一切都在你的本地项目中进行，与 Maven 仓库和版本 <code>1.1</code> 是否已发布<strong>完全无关</strong>。</li></ul></li><li><strong>在发布模块 A 时：（生成 <code>pom.xml</code>）</strong><ul><li>当你运行 <code>publish</code> 任务时，<code>maven-publish</code> 插件的职责是为模块 <code>A</code> 创建一个元数据文件，也就是 <code>pom.xml</code>。</li><li>这个 POM 文件是给<strong>外部用户</strong>看的。外部用户（比如你的同事或者一个CI服务器）没有你项目的完整源码，他们需要通过 Maven 坐标（groupId:artifactId:version）来下载依赖。</li><li>因此，<code>maven-publish</code> 插件必须将项目内依赖 <code>project(&quot;:base:base&quot;)</code> <strong>“翻译”</strong> 成一个外部用户可以理解的 Maven 依赖。</li></ul></li></ol><h3 id="“翻译”的过程是怎样的？"><a href="#“翻译”的过程是怎样的？" class="headerlink" title="“翻译”的过程是怎样的？"></a>“翻译”的过程是怎样的？</h3><p><code>maven-publish</code> 插件非常智能，它会执行以下操作：</p><ol><li><p>它发现 <code>A</code> 依赖于 <code>project(&quot;:base:base&quot;)</code>。</p></li><li><p>它会去检查 <code>:base:base</code> 模块的 <code>build.gradle.kts</code> 文件。</p></li><li><p>它在文件中找到了 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">publishing</span><br></code></pre></td></tr></table></figure><p> 配置块，并读取了里面定义的 Maven 坐标：</p><ul><li><code>groupId: &quot;com.wesley.test&quot;</code></li><li><code>artifactId: &quot;base-base&quot;</code></li><li><code>version: &quot;1.1&quot;</code></li></ul></li><li><p>然后，它将这些信息忠实地写入 <code>A</code> 模块的 <code>pom.xml</code> 文件中，生成了你看到的 <code>&lt;dependency&gt;</code> 块。</p></li></ol><blockquote><p><strong>一个形象的比喻：</strong> 这就像你在写一份菜谱（发布模块 A）。你在菜谱里写到需要“我祖母的秘制酱料”（项目内依赖 <code>:base:base</code>）。为了让别人也能做出这道菜，你必须在菜谱的配料表上写清楚这种酱料在超市里的商品名和品牌（Maven坐标 <code>com.wesley.test:base-base:1.1</code>），而不是只写“我祖母的秘制酱料”。</p><p><code>maven-publish</code> 就是那个负责把“我祖母的秘制酱料”翻译成商品名的角色。它并不关心此刻超市里到底有没有货（<code>1.1</code> 版本是否已发布），它只负责正确地翻译菜谱。</p></blockquote><hr><h3 id="为什么它不关心-1-1-是否已发布？"><a href="#为什么它不关心-1-1-是否已发布？" class="headerlink" title="为什么它不关心 1.1 是否已发布？"></a>为什么它不关心 <code>1.1</code> 是否已发布？</h3><p><code>publish</code> 任务的职责是<strong>生成并上传当前模块的构件和元数据</strong>。它假设你（开发者）会确保所有声明的依赖项最终都是可用的。</p><ul><li><strong>后果的承担者是消费者：</strong> 如果你发布了 <code>A</code>，但没有发布 <code>:base:base</code> 的 <code>1.1</code> 版本，那么问题不会在你发布时出现，而是在<strong>别人使用你的 <code>A</code> 模块时</strong>出现。当他们的项目尝试根据 <code>A</code> 的 <code>pom.xml</code> 去下载 com.wesley.test:base-base:1.1&#96; 时，Maven 会因为找不到这个依赖而构建失败。</li><li><strong>责任在你：</strong> Gradle 将保证依赖关系链正确的责任交给了开发者。你需要在发布 <code>A</code> 之前，先将它的所有依赖（如 <code>:base:base</code>）发布到 Maven 仓库。</li></ul></blockquote><p>最后执行 publish任务，所有模块都发布到maven_repo 里面了，以后向客户更新这个目录就行。</p><p>而对于内网 SDK，可以在网页版依赖树找到他们，然后通过类似</p><p><code>wget -r -np -nH --cut-dirs=8 -R &quot;index.html*&quot;      http://172.20.135.19:8080/nexus/content/repositories/releases/com/wesley/sdk/protocol/2.1.8/</code>的命令下载，把文件丢进maven_repo（注意目录结构），这样依赖也可以正确传递了。（如果包含源码，可以考虑删除）</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>删掉工程签名文件。</p><p>如果有些模块不能公开，混淆后不能发布源码。</p><p>不能携带 .git 目录。</p><p>注意处理 UI 模块依赖其他模块的方法或者类，不能混淆。</p><p>注意处理一些配置信息或者关键代码，可以考虑转移到 native 层。</p>]]></content>
    
    
    <categories>
      
      <category>AppBuild</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓官方版fat-aar:使用Fused Library将多个Android库发布为一个库</title>
    <link href="/article/a43c0ba5/"/>
    <url>/article/a43c0ba5/</url>
    
    <content type="html"><![CDATA[<p>在开发 sdk 时，内部一般会划分好几个模块。但当需要打包成一个模块发布时，往往需要依赖第三方插件。比如著名的 fat-aar：<a href="https://github.com/kezong/fat-aar-android%EF%BC%8C%E4%BD%86%E8%AF%A5%E5%BA%93%E4%B8%8D%E6%94%AF%E6%8C%81">https://github.com/kezong/fat-aar-android，但该库不支持</a> AGP8.0 了，有其他开发者单独fork了一个仓库来进行维护，支持 AGP8.0+：<a href="https://github.com/aasitnikov/fat-aar-android">aasitnikov&#x2F;fat-aar-android: Gradle plugin for merging android libraries (AAR)</a>。</p><p>现在安卓官方终于支持将多个库打包成一个aar 了：<a href="https://developer.android.com/build/publish-library/fused-library">Publish multiple Android libraries as one with Fused Library  |  Android Studio  |  Android Developers</a>。宣布从 AGP8.12 开始可以使用<code>com.android.fused-library</code>来进行合并多模块。不过从<a href="https://mvnrepository.com/artifact/com.android.fused-library/com.android.fused-library.gradle.plugin">Maven Repository: com.android.fused-library » com.android.fused-library.gradle.plugin</a>上面可以看到，一些早期版本也可以支持的，不过可能有 bug，我试了 AGP8.10 也是可以的。</p><p>相比 fat-aar 的优点是：</p><ul><li>官方支持</li><li>合并模块时支持依赖传递，也就是子模块的依赖树会出现在 pom 文件里面。fat-aar 需要通过pom.withXml 来处理。</li></ul><p>缺点是：</p><ul><li>支持插件版本有限，官方表示是AGP8.12 开始才支持。</li><li>传递依赖项不会打包。需要逐个指定打包进 aar 的依赖。</li></ul><p>后面还会继续说该库目前的问题，先看看怎么用。</p><p>官方的工程示范：</p><blockquote><p>readme 的插件名称目前是写错了的：应该是<code>com.android.fused-library</code></p></blockquote><p><a href="https://github.com/android/gradle-recipes/tree/agp-8.10/applyFusedLibraryPlugin">gradle-recipes&#x2F;applyFusedLibraryPlugin at agp-8.10 · android&#x2F;gradle-recipes</a></p><p>可以参考这个进行插件引入：</p><p><a href="https://developer.android.com/build/publish-library/fused-library">Publish multiple Android libraries as one with Fused Library  |  Android Studio  |  Android Developers</a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="嵌套依赖不支持打包"><a href="#嵌套依赖不支持打包" class="headerlink" title="嵌套依赖不支持打包"></a>嵌套依赖不支持打包</h3><p>官方的例子是支持嵌套的：</p><blockquote><p><code>*</code> indicates an <code>include</code> dependency of the <code>:fusedLibrary</code> module</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs elixir">┌─────────────────────────────────────────┐<br>│             <span class="hljs-symbol">:app</span>                        │<br>│               ▲                         │<br>│               │                         │<br>│         <span class="hljs-symbol">:fusedLibrary</span>                   │<br>│         ▲           ▲                   │<br>│         │           │                   │<br>│    <span class="hljs-symbol">:androidLib2*</span>  <span class="hljs-symbol">:androidLib1*</span>         │<br>│         ▲            ▲                  │<br>│         │            │                  │<br>│ <span class="hljs-symbol">:androidLib3</span> <span class="hljs-symbol">com.google.code.gson:</span>gson* │<br>└─────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">dependencies &#123;<br>    include(project(<span class="hljs-string">&quot;:androidLib1&quot;</span>))<br>    include(project(<span class="hljs-string">&quot;:androidLib2&quot;</span>))<br>    include(<span class="hljs-string">&quot;com.google.code.gson:gson:2.10.1&quot;</span>)<br>    include(files(<span class="hljs-string">&quot;libs/simple-jar-with-A_DoIExist-class.jar&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上androidLib3 没有被打包，变成了一个依赖fused-library-samples:androidLib3:unspecified：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;included&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;project :androidLib1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;project :androidLib2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;com.google.code.gson:gson:2.10.1&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-stdlib:1.9.22&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;org.jetbrains:annotations:13.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;fused-library-samples:androidLib3:unspecified&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="有一些远程包暂时打包不了"><a href="#有一些远程包暂时打包不了" class="headerlink" title="有一些远程包暂时打包不了"></a>有一些远程包暂时打包不了</h3><p>A failure occurred while executing com.android.build.gradle.tasks.FusedLibraryMergeArtifactTask$FusedLibraryMergeArtifactWorkAction</p><p>   &gt; java.lang.NullPointerException (no error message)</p><h3 id="暂不支持携带源码发布"><a href="#暂不支持携带源码发布" class="headerlink" title="暂不支持携带源码发布"></a>暂不支持携带源码发布</h3><h3 id="暂不能混淆"><a href="#暂不能混淆" class="headerlink" title="暂不能混淆"></a>暂不能混淆</h3><h3 id="不支持Databinding"><a href="#不支持Databinding" class="headerlink" title="不支持Databinding"></a>不支持Databinding</h3><h3 id="无法在单个融合库中融合多个-build-类型和产品变种。需要为不同的变体创建单独的融合库。"><a href="#无法在单个融合库中融合多个-build-类型和产品变种。需要为不同的变体创建单独的融合库。" class="headerlink" title="无法在单个融合库中融合多个 build 类型和产品变种。需要为不同的变体创建单独的融合库。"></a>无法在单个融合库中融合多个 build 类型和产品变种。需要为不同的变体创建单独的融合库。</h3><h3 id="kotlin-module冲突"><a href="#kotlin-module冲突" class="headerlink" title="kotlin_module冲突"></a>kotlin_module冲突</h3><p>如果有两个base模块会产生冲突， base&#x2F;base ，feature&#x2F;base</p><p>2 files found with path ‘META-INF&#x2F;base_release.kotlin_module’ from inputs:</p><p>需要修改一下kotlin_module 的名字</p><p><a href="https://stackoverflow.com/questions/44509608/duplicate-files-copied-in-apk-meta-inf-library-release-kotlin-module">android - Duplicate files copied in APK META-INF&#x2F;library_release.kotlin_module - Stack Overflow</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs groovy">ext &#123;<br>    GROUP_ID = <span class="hljs-string">&#x27;custom.group.id&#x27;</span><br>    ARTIFACT_ID = <span class="hljs-string">&#x27;artifactid&#x27;</span><br>&#125;<br><br>android &#123;<br>    compileSdkVersion <span class="hljs-number">25</span><br>    buildToolsVersion <span class="hljs-string">&quot;25.0.0&quot;</span><br><br>    compileOptions &#123;<br>        kotlinOptions.freeCompilerArgs += [<span class="hljs-string">&#x27;-module-name&#x27;</span>, <span class="hljs-string">&quot;$GROUP_ID.$ARTIFACT_ID&quot;</span>]<br>    &#125;<br><br>    defaultConfig &#123;<br>        ...<br>    &#125;<br>    buildTypes &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="官方已知问题"><a href="#官方已知问题" class="headerlink" title="官方已知问题"></a>官方已知问题</h3><p>融合库是一个新插件，我们正在解决一些已知问题，以实现所有用例。</p><ul><li>合并的 AAR 中未包含 <code>lint.jar</code> 文件</li><li>向其他 .aar 文件添加文件依赖项</li><li>不支持合并 RenderScript 和 Prefab 工件</li></ul><p>期待官方进一步完善。</p>]]></content>
    
    
    <categories>
      
      <category>AppBuild</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手机厂商的应用列表权限管控真的起效了吗</title>
    <link href="/article/e6389157/"/>
    <url>/article/e6389157/</url>
    
    <content type="html"><![CDATA[<p>昨天使用<strong>做你的图标包</strong>制作图标包的时候发现我并没有授予它获取应用列表的权限，但是依然可以获取到我安装的应用列表。</p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250511190040532.jpg" style="zoom:25%;" /><p>然后发现它的 targetSDK 是 33 并申请了<code>&lt;uses-permission android:name=&quot;android.permission.QUERY_ALL_PACKAGES&quot;/&gt;</code>权限和使用了如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PackageManager</span> <span class="hljs-variable">packageManager</span> <span class="hljs-operator">=</span> context2.getPackageManager();<br><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span>);<br>intent.addCategory(<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span>);<br>List&lt;ResolveInfo&gt; queryIntentActivities = packageManager.queryIntentActivities(intent, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250511190439764.png" alt="image-20250511190439462" style="zoom: 50%;" /><p>正常拿到了我手机上的设备应用安装列表并且权限监控里面没有看到记录。这是怎么回事？</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>通过下面的代码进行实验</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getInstalledPackages</span><span class="hljs-params">(context: <span class="hljs-type">Context</span>)</span></span>: List&lt;String&gt; &#123;<br>        <span class="hljs-keyword">val</span> installedPackageList: MutableList&lt;String&gt; = ArrayList()<br>        <span class="hljs-keyword">val</span> installedPackageInfoList = context.packageManager.getInstalledPackages(PackageManager.MATCH_UNINSTALLED_PACKAGES)<br>        <span class="hljs-keyword">for</span> (packageInfo <span class="hljs-keyword">in</span> installedPackageInfoList) &#123;<br>            installedPackageList.add(packageInfo.packageName)<br>        &#125;<br>        Log.e(TAG, <span class="hljs-string">&quot;getInstalledPackages: size：<span class="hljs-subst">$&#123;installedPackageList.size&#125;</span> pkg:<span class="hljs-variable">$installedPackageList</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> installedPackageList<br>    &#125;<br><br>    <span class="hljs-comment">//获取所有带有桌面属性的APK</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getAllLauncherIconPackages</span><span class="hljs-params">(context: <span class="hljs-type">Context</span>)</span></span>: List&lt;String&gt; &#123;<br>        <span class="hljs-keyword">val</span> launcherIconPackageList: MutableList&lt;String&gt; = ArrayList()<br>        <span class="hljs-keyword">val</span> intent = Intent()<br>        intent.setAction(Intent.ACTION_MAIN)<br>        intent.addCategory(Intent.CATEGORY_LAUNCHER)<br>        <span class="hljs-keyword">val</span> resolveInfos = context.packageManager.queryIntentActivities(intent, PackageManager.MATCH_ALL)<br>        <span class="hljs-keyword">for</span> (info <span class="hljs-keyword">in</span> resolveInfos) &#123;<br>            launcherIconPackageList.add(info.activityInfo.packageName)<br>        &#125;<br>        Log.e(TAG, <span class="hljs-string">&quot;getAllLauncherIconPackages: size:<span class="hljs-subst">$&#123;launcherIconPackageList.size&#125;</span> pkg:<span class="hljs-variable">$launcherIconPackageList</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> launcherIconPackageList<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="在禁止应用列表权限情况下测试"><a href="#在禁止应用列表权限情况下测试" class="headerlink" title="在禁止应用列表权限情况下测试"></a>在禁止应用列表权限情况下测试</h3><p>Oppo find8u Xiaomi13 都是安卓 15</p><h4 id="情况1-不申请QUERY-ALL-PACKAGES"><a href="#情况1-不申请QUERY-ALL-PACKAGES" class="headerlink" title="情况1 不申请QUERY_ALL_PACKAGES"></a>情况1 不申请<code>QUERY_ALL_PACKAGES</code></h4><p>oppo</p><blockquote><p>PermissionInjector: Permission denied: uid: 10445 or pid: 14074 have no permission: com.android.permission.GET_INSTALLED_APPS to access: get_installed</p><p>ApplicationPackageManagerExtImpl: com.example.myapplication in userId&#x3D;0 doesn’t have GET_INSTALLED_APPS perm, return self!</p><p>getInstalledPackages: size：1 pkg:[com.example.myapplication]</p><p>getAllLauncherIconPackages: size:8 pkg:[com.android.settings, com.android.vending, com.coloros.gallery3d, com.oplus.camera, com.android.documentsui, com.android.stk, com.android.stk, com.example.myapplication]</p></blockquote><p>xiaomi</p><blockquote><p>MIUILOG- Permission Denied getInstalledPackages. pkg : com.example.myapplication uid : 10236<br>getInstalledPackages: size：1 pkg:[com.example.myapplication]<br>getAllLauncherIconPackages: size:13 pkg:[com.android.browser, com.android.camera, com.android.fileexplorer, com.android.settings, com.android.thememanager, com.android.vending, com.miui.miservice, com.xiaomi.market, com.miui.notes, com.miui.securitycenter, com.miui.voiceassist, com.example.myapplication, com.miui.huanji]</p></blockquote><p><code>getInstalledPackages</code> 只能获取到自己的应用，且会被权限监控记录，<code>queryIntentActivities</code> 可以获取部分系统应用</p><h4 id="情况2-申请QUERY-ALL-PACKAGES"><a href="#情况2-申请QUERY-ALL-PACKAGES" class="headerlink" title="情况2 申请QUERY_ALL_PACKAGES"></a>情况2 申请<code>QUERY_ALL_PACKAGES</code></h4><p>oppo</p><blockquote><p>getInstalledPackages: size：1 pkg:[com.example.myapplication]</p><p>getAllLauncherIconPackages: size:<strong>155</strong> pkg:[com.android.contacts………….</p></blockquote><p>xiaomi</p><blockquote><p>getInstalledPackages: size：1 pkg:[com.example.myapplication]<br>getAllLauncherIconPackages: size:<strong>279</strong> pkg:[com.android.browser, com.android.camera, com.android.contacts…………</p></blockquote><p><code>getInstalledPackages</code> 只能获取到自己的应用，且会被权限监控记录，<code>queryIntentActivities</code> 可以获取所有带有桌面属性的应用</p><h4 id="情况3-不申请QUERY-ALL-PACKAGES但声明queries"><a href="#情况3-不申请QUERY-ALL-PACKAGES但声明queries" class="headerlink" title="情况3 不申请QUERY_ALL_PACKAGES但声明queries"></a>情况3 不申请<code>QUERY_ALL_PACKAGES</code>但声明queries</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">queries</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">queries</span>&gt;</span><br></code></pre></td></tr></table></figure><p>oppo</p><blockquote><p>getInstalledPackages: size：1 pkg:[com.example.myapplication]</p><p>getAllLauncherIconPackages: size:<strong>155</strong> pkg:[com.android.contacts,……………</p></blockquote><p>xiaomi</p><blockquote><p>getInstalledPackages: size：1 pkg:[com.example.myapplication]<br>getAllLauncherIconPackages: size:<strong>279</strong> pkg:[com.android.browser………..</p></blockquote><p><code>getInstalledPackages</code> 只能获取到自己的应用，且会被权限监控记录，<code>queryIntentActivities</code> 可以获取所有带有桌面属性的应用</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>还是很多应用申请了QUERY_ALL_PACKAGES 权限的，意味着很容易收集手机里面的安装列表。或者不申请QUERY_ALL_PACKAGES，直接声明queries，比如微信就是这么干的。所以厂商的这个应用列表管控能起到的作用可能不大。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">intent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">action</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">category</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">intent</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250511204049921.jpg" alt="IMG_20250511_203845" style="zoom:25%;" /><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>一般来说，这些权限都是通过 <strong>AppOps</strong>管控的，当初安卓 6 加入运行时权限时，对于那些没有适配运行时权限的应用，就是通过<strong>AppOps</strong>管控的。</p><p>oppo</p><blockquote><p>OP5DD3L1:&#x2F; $ appops get com.example.myapplication</p><p>GET_INSTALLED_APPS: ignore</p></blockquote><p>xiaomi</p><blockquote><p>fuxi:&#x2F; $ appops get com.example.myapplication</p><p>MIUIOP(10022): ignore; time&#x3D;+7h1m54s781ms ago; rejectTime&#x3D;+32m9s128ms ago</p></blockquote><p><code>public static final int OP_GET_INSTALLED_APPS = 10022;</code></p><p>他们都是只针对getInstalledPackages 权限做管控。有兴趣的可以 pull 手机里面的 framework 和 service jar 包来看一下他们的源代码。</p><h3 id="包可见性"><a href="#包可见性" class="headerlink" title="包可见性"></a>包可见性</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>Google官网特性介绍:</p><p><a href="https://developer.android.google.cn/preview/privacy/package-visibility">https://developer.android.google.cn/preview/privacy/package-visibility</a></p><p>Android 11 更改了应用查询用户已在设备上安装的其他应用以及与之交互的方式。使用 <queries> 元素，应用可以定义一组自身可访问的其他软件包。通过告知系统应向您的应用显示哪些其他软件包，此元素有助于鼓励最小权限原则。此外，此元素还可帮助 Google Play 等应用商店评估应用为用户提供的隐私权和安全性。</p><p>如果您的应用以 Android 11 或更高版本为目标平台，您可能需要在应用的清单文件中添加 <queries> 元素。在 <queries> 元素中，您可以按软件包名称、intent 签名或提供程序授权指定软件包。</p><h4 id="兼容性影响"><a href="#兼容性影响" class="headerlink" title="兼容性影响"></a>兼容性影响</h4><ol><li>SDK接口行为变更</li></ol><p>app默认不再能通过SDK接口获取其他app的信息，例如：</p><p><code>getPackageInfo(getPackageName(), 0)</code> 仍能正常返回应用自身的<code>PackageInfo</code>,但<code>getPackageInfo(“com.another.app”,0)</code>将抛出NameNotFoundException，即使<code>com.another.app</code>已经被安装到设备上。<code>getInstalledPackages(0)</code>，只能返回应用自身，以及少数的核心AOSP应用的信息。</p><ol start="2"><li>其他变更</li></ol><p>app不能感知<code>/data/data/com.another.app</code>等目录的存在。即使<code>com.another.app</code>已经被安装到设备上，app尝试访问<code>/data/data/com.another.app</code>也将提示“File not found”，而不是“Permission denied”。</p><p>类似的目录还有<code>/data/misc/profiles/cur/$&#123;userId&#125;/com.another.app</code>。此变更，可以防止app通过访问目录文件返回的错误不同，来判断特定app是否已被安装。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.android.google.cn/training/package-visibility?hl=zh-cn">Android 上的软件包可见性过滤  |  App architecture  |  Android Developers</a></p><p><a href="https://developer.android.com/training/package-visibility/automatic?hl=zh-cn">了解自动可见的软件包  |  App architecture  |  Android Developers</a></p><p><a href="https://developer.android.com/training/package-visibility/declaring?hl=zh-cn">声明软件包可见性需求  |  App architecture  |  Android Developers</a></p><p><a href="https://developer.android.com/training/package-visibility/testing?hl=zh-cn">测试软件包可见性行为  |  App architecture  |  Android Developers</a></p><p><a href="https://dev.mi.com/xiaomihyperos/documentation/detail?pId=1738">应用TargetSdkVersion 30升级适配指南 | 小米澎湃OS开发者平台</a></p><p><a href="https://open.oppomobile.com/new/developmentDoc/info?id=10724">OPPO 开放平台-OPPO开发者服务中心</a></p><p><a href="https://gddhy.net/2023/android-11-gua-pei-ruan-jian-bao-ke-jian-xing/">Android 11 适配 软件包可见性 | Gddhy’s Blog</a></p><p><a href="https://bbs.kanxue.com/thread-280415.htm">绕过 Android11新特性之 “包的可见性“-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://juejin.cn/post/7353292009086173218">Android11“包可见性”—动态修改queries方案Android 11引入了“包可见性”限制，默认情况下应用 - 掘金</a></p><p><a href="https://www.taf.org.cn/upload/AssociationStandard/TTAF%20108-2022%20%E7%A7%BB%E5%8A%A8%E7%BB%88%E7%AB%AF%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8%E6%9D%83%E9%99%90%E5%AE%9E%E6%96%BD%E6%8C%87%E5%8D%97.pdf">移动终端应用软件列表权限实施指南</a></p><p><a href="https://github.com/getActivity/XXPermissions/blob/master/library/src/main/java/com/hjq/permissions/Permission.java">XXPermissions&#x2F;library&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;hjq&#x2F;permissions&#x2F;Permission.java at master · getActivity&#x2F;XXPermissions</a></p><p><a href="https://gist.github.com/0awawa0/65bf88e43159750f596da194ed923522">XiaomiUtilities.java</a></p><p><a href="https://cn-sec.com/archives/2255540.html">隐私合规之MIUI自启动的监控原理分析 | CN-SEC 中文网</a></p><p><a href="https://juejin.cn/post/7189533089897381944">Android 获取应用列表方法记录</a></p>]]></content>
    
    
    <categories>
      
      <category>安卓安全和逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jadx</tag>
      
      <tag>反编译</tag>
      
      <tag>安卓权限</tag>
      
      <tag>安卓安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好用软件推荐</title>
    <link href="/article/9e5c606d/"/>
    <url>/article/9e5c606d/</url>
    
    <content type="html"><![CDATA[<h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><ul><li>锤子便签：最美便签</li><li>微信读书：最好用的电子书软件，设计用心，涵盖书籍多，随时随地阅读。</li><li>纸间书摘：方便回顾曾经记录的书摘，支持微信读书、电子书等</li><li>Share：最好用的第三方微博客户端</li><li>Cellular-Z：看 WiFi 信号、干扰等</li><li>DevCheck：查看手机硬件信息</li><li>手机性能排行：方便比较不同手机的硬件差异</li><li>LibChecker：方便查看 app 信息，依赖的库等。</li><li>Keepass2Android：记录银行卡密码等，数据自己掌握。</li><li>flomo浮墨笔记：记录新想法，怀念 Smartisan 的闪念胶囊。</li><li>酷安：数码爱好者社区</li><li>李跳跳：跳过软件开屏广告等，目前为止我遇到的交互提示最有爱、得意的软件。</li><li>微信输入法：干净、简洁，多端复制同步方便，发微信表情包方便。可惜目前不支持光标快速选择、复制。</li><li>星空视频壁纸：纯粹好用的视频壁纸 APP</li><li>Shazam：音乐识别，比网易云识别正确率高。</li></ul><h2 id="Universal"><a href="#Universal" class="headerlink" title="Universal"></a>Universal</h2><h3 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h3><ul><li><p>截图：<a href="https://zh.snipaste.com/#">Snipaste - 截图 + 贴图</a></p></li><li><p>NAS 视频播放器：<a href="https://bmh.163.com/">网易爆米花（原网易Filmly） - 智能媒体库&amp;全能播放器</a></p></li><li><p>NAS 音乐播放器：音流，<a href="https://github.com/gitbobobo/StreamMusic">gitbobobo&#x2F;StreamMusic: 支持 Android、iOS、macOS、Windows 平台的 Subsonic&#x2F;Navidrome&#x2F;Jellyfin&#x2F;Emby&#x2F;AudioStation 客户端。</a></p></li><li><p>录屏或者直播：<a href="https://obsproject.com/">Open Broadcaster Software | OBS</a></p></li></ul><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><ul><li><p>klogg：日志查看工具，之前在 Windows 一直用notepad++，它可以高亮标记选中的字符串。但在 Mac 上面，我试了好几个类似的软件都没有该功能，后来，我发现了 klogg，基本满足了我的需求。</p><p>地址：<a href="https://github.com/variar/klogg">variar&#x2F;klogg: Really fast log explorer based on glogg project</a></p></li><li><p>NotepadNext：<a href="https://github.com/dail8859/NotepadNext">dail8859&#x2F;NotepadNext: A cross-platform, reimplementation of Notepad++</a>（V0.12 已经支持高亮了，我提的 issue 如下：<a href="https://github.com/dail8859/NotepadNext/issues/748">hightlight the select text with different color · Issue #748 · dail8859&#x2F;NotepadNext</a>）</p></li><li><p>语雀：高中的时候用有道笔记记录知识点和错题，大学的时候用 OneNote 来记录读书笔记，工作后刚开始用的是印象笔记，后面就转向语雀了。主要用来记录安卓相关的知识点。</p><p>地址：<a href="https://www.yuque.com/">语雀，为每一个人提供优秀的文档和知识库工具</a></p></li><li><p>反编译工具：<a href="https://github.com/skylot/jadx/releases">Releases · skylot&#x2F;jadx</a></p></li></ul><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="开发-1"><a href="#开发-1" class="headerlink" title="开发"></a>开发</h3><ul><li>MobaXterm：命令行工具，支持远程服务器图形界面，比如Android Studio、Clion等，方便开发系统功能。</li></ul><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><h3 id="日常-1"><a href="#日常-1" class="headerlink" title="日常"></a>日常</h3><ul><li><p>视频播放：<a href="https://github.com/iina/iina">iina&#x2F;iina: The modern video player for macOS.</a></p></li><li><p>性能监控：<a href="https://github.com/exelban/stats">exelban&#x2F;stats: macOS system monitor in your menu bar</a></p></li><li><p>鼠标控制：自定义滚轮方向和自定义按键功能 <a href="https://github.com/noah-nuebling/mac-mouse-fix/">noah-nuebling&#x2F;mac-mouse-fix: Mac Mouse Fix - Make Your $10 Mouse Better Than an Apple Trackpad!</a></p></li><li><p>显示器控制：<a href="https://github.com/waydabber/BetterDisplay">waydabber&#x2F;BetterDisplay: Unlock your displays on your Mac! Flexible HiDPI scaling, XDR&#x2F;HDR extra brightness, virtual screens, DDC control, extra dimming, PIP&#x2F;streaming, EDID override and lots more!</a></p></li><li><p>moonlight：方便局域网控制 windows 电脑 <a href="https://github.com/moonlight-stream/moonlight-qt">moonlight-stream&#x2F;moonlight-qt: GameStream client for PCs (Windows, Mac, Linux, and Steam Link)</a></p></li></ul><h3 id="开发-2"><a href="#开发-2" class="headerlink" title="开发"></a>开发</h3><ul><li>iTerm：命令行终端工具 <a href="https://iterm2.com/">iTerm2 - macOS Terminal Replacement</a></li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="开发-3"><a href="#开发-3" class="headerlink" title="开发"></a>开发</h3>]]></content>
    
    
    <categories>
      
      <category>非技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件</tag>
      
      <tag>Mac</tag>
      
      <tag>Windows</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内存性能测试方法</title>
    <link href="/article/f42b9418/"/>
    <url>/article/f42b9418/</url>
    
    <content type="html"><![CDATA[<blockquote><p>写于 2022 年 6 月 24 日</p></blockquote><h2 id="dd方法测试"><a href="#dd方法测试" class="headerlink" title="dd方法测试"></a>dd方法测试</h2><p>cat proc&#x2F;meminfo </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # cat proc/meminfo <br>MemTotal:        3858576 kB<br>MemFree:          675328 kB<br>MemAvailable:    1142452 kB<br>Buffers:           65280 kB<br>Cached:           992252 kB<br>SwapCached:           40 kB<br>Active:          1144480 kB<br>Inactive:         923220 kB<br>Active(anon):     875244 kB<br>Inactive(anon):   667400 kB<br>Active(file):     269236 kB<br>Inactive(file):   255820 kB<br>Unevictable:        4436 kB<br>Mlocked:            4436 kB<br>SwapTotal:        614396 kB<br>SwapFree:         601596 kB<br>Dirty:                 4 kB<br>Writeback:             0 kB<br>AnonPages:       1014744 kB<br>Mapped:           301460 kB<br>Shmem:            530712 kB<br>KReclaimable:      39912 kB<br>Slab:             142104 kB<br>SReclaimable:      39912 kB<br>SUnreclaim:       102192 kB<br>KernelStack:       33088 kB<br>ShadowCallStack:    2078 kB<br>PageTables:        39964 kB<br>NFS_Unstable:          0 kB<br>Bounce:                0 kB<br>WritebackTmp:          0 kB<br>CommitLimit:     2263732 kB<br>Committed_AS:   47064316 kB<br>VmallocTotal:   262930368 kB<br>VmallocUsed:       56632 kB<br>VmallocChunk:          0 kB<br>Percpu:             2768 kB<br>CmaTotal:        1921024 kB<br>CmaFree:          158092 kB<br></code></pre></td></tr></table></figure><p>剩1.1G左右，所以，我们创建一个挂载在内存上面的分区，大小为可用内存的一半左右。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">mount -o rw,remount /<br>mkdir memtest<br>mount -t tmpfs tmpfs /memtest  -o size=600m<br></code></pre></td></tr></table></figure><h3 id="内存写测试"><a href="#内存写测试" class="headerlink" title="内存写测试"></a>内存写测试</h3><p>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;memtest&#x2F;testfile bs&#x3D;1M count&#x3D;500</p><p>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;memtest&#x2F;testfile bs&#x3D;500M count&#x3D;1</p><p>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;memtest&#x2F;testfile bs&#x3D;512K count&#x3D;1000</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # dd if=/dev/zero of=/memtest/testfile bs=1M count=500<br>500+0 records in<br>500+0 records out<br>524288000 bytes (500 M) copied, 0.782312 s, 639 M/s<br>console:/ # dd if=/dev/zero of=/memtest/testfile bs=500M count=1<br>1+0 records in<br>1+0 records out<br>524288000 bytes (500 M) copied, 1.272919 s, 393 M/s<br>console:/ # dd if=/dev/zero of=/memtest/testfile bs=512K count=1000<br>1000+0 records in<br>1000+0 records out<br>524288000 bytes (500 M) copied, 0.794319 s, 629 M/s<br></code></pre></td></tr></table></figure><h3 id="内存读测试"><a href="#内存读测试" class="headerlink" title="内存读测试"></a>内存读测试</h3><p>dd if&#x3D;&#x2F;memtest&#x2F;testfile  of&#x3D;&#x2F;dev&#x2F;null bs&#x3D;1M count&#x3D;500 </p><p>dd if&#x3D;&#x2F;memtest&#x2F;testfile  of&#x3D;&#x2F;dev&#x2F;null bs&#x3D;500M count&#x3D;1       </p><p>dd if&#x3D;&#x2F;memtest&#x2F;testfile  of&#x3D;&#x2F;dev&#x2F;null bs&#x3D;512K count&#x3D;1000      </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # dd if=/memtest/testfile  of=/dev/null bs=1M count=500              <br>500+0 records in<br>500+0 records out<br>524288000 bytes (500 M) copied, 0.340277 s, 1.4 G/s<br>console:/ # dd if=/memtest/testfile  of=/dev/null bs=500M count=1                          &lt;<br>1+0 records in<br>1+0 records out<br>524288000 bytes (500 M) copied, 0.682501 s, 733 M/s<br>console:/ # dd if=/memtest/testfile  of=/dev/null bs=512K count=1000                       &lt;<br>1000+0 records in<br>1000+0 records out<br>524288000 bytes (500 M) copied, 0.226277 s, 2.1 G/s<br></code></pre></td></tr></table></figure><h2 id="Steam-benchmark（推荐）"><a href="#Steam-benchmark（推荐）" class="headerlink" title="Steam benchmark（推荐）"></a>Steam benchmark（推荐）</h2><p><a href="https://github.com/wesley666/source/blob/main/stream_benchmark">source&#x2F;stream_benchmark at main · wesley666&#x2F;source</a></p><p>Adb push到data&#x2F;local&#x2F;tmp目录，赋予执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/data/local/tmp # ./stream_benchmark                                   <br>-------------------------------------------------------------<br>STREAM version $Revision: 5.10 $<br>-------------------------------------------------------------<br>This system uses 8 bytes per array element.<br>-------------------------------------------------------------<br>Array size = 10000000 (elements), Offset = 0 (elements)<br>Memory per array = 76.3 MiB (= 0.1 GiB).<br>Total memory required = 228.9 MiB (= 0.2 GiB).<br>Each kernel will be executed 10 times.<br> The *best* time for each kernel (excluding the first iteration)<br> will be used to compute the reported bandwidth.<br>-------------------------------------------------------------<br>Your clock granularity/precision appears to be 1 microseconds.<br>Each test below will take on the order of 21376 microseconds.<br>   (= 21376 clock ticks)<br>Increase the size of the arrays if this shows that<br>you are not getting at least 20 clock ticks per test.<br>-------------------------------------------------------------<br>WARNING -- The above is only a rough guideline.<br>For best results, please be sure you know the<br>precision of your system timer.<br>-------------------------------------------------------------<br>Function    Best Rate MB/s  Avg time     Min time     Max time<br>Copy:           10748.4     0.015937     0.014886     0.017156<br>Scale:           8149.9     0.020030     0.019632     0.020463<br>Add:             9070.6     0.027085     0.026459     0.028024<br>Triad:           8255.9     0.029891     0.029070     0.030490<br>-------------------------------------------------------------<br>Solution Validates: avg error less than 1.000000e-13 on all three arrays<br>-------------------------------------------------------------<br></code></pre></td></tr></table></figure><p>Copy操作最为简单，它先访问一个内存单元读出其中的值，再将值写入到另一个内存单元。</p><p>Scale操作先从内存单元读出其中的值，作一个乘法运算，再将结果写入到另一个内存单元。</p><p>Add操作先从内存单元读出两个值，做加法运算， 再将结果写入到另一个内存单元。</p><p>Triad的中文含义是将三个组合起来，在本测试中表示的意思是将Copy、Scale、Add三种操作组合起来进行测试。具体操作方式是：先从内存单元中中读两个值a、b，对其进行乘加混合运算（a + 因子 * b ） ，将运算结果写入到另一个内存单元。</p>]]></content>
    
    
    <categories>
      
      <category>Android性能优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内存</tag>
      
      <tag>性能工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EMMC存储性能测试方法</title>
    <link href="/article/7cf0bd29/"/>
    <url>/article/7cf0bd29/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记于 2022 年 9 月 15 日</p></blockquote><p>参考<a href="https://qiushao.net/2020/02/12/Android/emmc-performance-test/index.html">Android-emmc性能测试 | 一叶知秋</a>进行实践操作</p><h1 id="dd-命令"><a href="#dd-命令" class="headerlink" title="dd 命令"></a>dd 命令</h1><h2 id="页面缓存"><a href="#页面缓存" class="headerlink" title="页面缓存"></a>页面缓存</h2><p>为了测试 emmc 的真实读写性能，我们需要先把页面缓存给清理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Shell">echo 1 &gt; /proc/sys/vm/drop_caches<br>console:/ # echo 1 &gt; /proc/sys/vm/drop_caches                                  <br>console:/ # busybox dd if=/dev/block/mmcblk0 of=/dev/null bs=1M count=512                          &lt;<br>512+0 records in<br>512+0 records out<br>536870912 bytes (512.0MB) copied, 2.491718 seconds, 205.5MB/s<br>console:/ # busybox dd if=/dev/block/mmcblk0 of=/dev/null bs=1M count=512                          &lt;<br>512+0 records in<br>512+0 records out<br>536870912 bytes (512.0MB) copied, 0.290948 seconds, 1.7GB/s<br><br>console:/ # echo 1 &gt; /proc/sys/vm/drop_caches <br>console:/ # busybox  dd if=/dev/block/mmcblk0 of=/dev/null bs=1M count=512                          &lt;<br>512+0 records in<br>512+0 records out<br>536870912 bytes (512.0MB) copied, 2.508393 seconds, 204.1MB/s<br>console:/ # <br></code></pre></td></tr></table></figure><p>连续执行两次 <code>busybox  dd if=/dev/block/mmcblk0 of=/dev/null bs=1M count=512</code> ，从 &#x2F;dev&#x2F;block&#x2F;mmcblk0 (即emmc) 块设备中读取内容，写到 <code>/dev/null</code> 。</p><p><code>/dev/null</code> 是一个虚拟设备，写入这个路径并不会保存数据，可以认为这个设备的写入速度无限大，也就是写入速度不会成为这个命令的瓶颈，我们这个命令主要是为了测试 emmc 的读取速度。可以看到第一次执行的结果是 205.5MB&#x2F;s，第二次执行的结果是 1.7GB&#x2F;s。从这个数据来看，页面缓存极大的提高了热点文件的读取速度。然后我们用 <code>echo 1 &gt; /proc/sys/vm/drop_caches</code>命令清除一下页面缓存，再执行同样的 <code>dd</code>命令，发现速度跟第一次差不多了。</p><h2 id="写入性能测试"><a href="#写入性能测试" class="headerlink" title="写入性能测试"></a>写入性能测试</h2><h3 id="写入块设备"><a href="#写入块设备" class="headerlink" title="写入块设备"></a>写入块设备</h3><p>cache 分区一般是用来存放 OTA 升级包的，正常状态下挂载失败也不影响系统的正常运行，所以我们拿 cache 分区来作写入测试，先找到 cache 对应的块设备文件（df -h命令显示异常的话，可以执行<code>ls -l /dev/block/platform/*/by-name/cache</code>）</p><p><strong>注意：本测试方法可能会损坏cache分区导致ota失败，出现这种情况建议恢复出厂设置或者线刷。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # df -h<br>Filesystem            Size  Used Avail Use% Mounted on<br>tmpfs                 1.5G  892K  1.5G   1% /dev<br>tmpfs                 1.5G     0  1.5G   0% /mnt<br>/dev/block/mmcblk0p26  14M  168K   14M   2% /metadata<br>/dev/block/dm-1       1.1G  0.9G  199M  84% /<br>/dev/block/mmcblk0p40 379M   24M  356M   7% /wesley<br>/dev/block/mmcblk0p38 379M  154M  226M  41% /factory<br>/dev/block/mmcblk0p39  18M  1.3M   17M   8% /atv<br>/dev/block/mmcblk0p36 9.1M   24K  9.0M   1% /oem<br>/dev/block/dm-2       340M  240M  100M  71% /vendor<br>/dev/block/dm-0       167M   84K  167M   1% /mnt/scratch<br>overlay               167M   84K  167M   1% /system_ext<br>overlay               167M   84K  167M   1% /product<br>overlay               167M   84K  167M   1% /odm<br>tmpfs                 1.5G     0  1.5G   0% /apex<br>tmpfs                 1.5G  248K  1.5G   1% /linkerconfig<br>tmpfs                  20M  1.0M   19M   6% /mnt/vendor/rtdlog<br>tmpfs                  20M  8.0K   20M   1% /tmp<br>/dev/block/mmcblk0p23 1.4G  3.9M  1.4G   1% /cache<br>/dev/block/mmcblk0p31 236M   12M  224M   6% /mnt/vendor/tvconfigs<br>/dev/block/mmcblk0p32  26M   84K   26M   1% /mnt/vendor/tvdata<br>/dev/block/mmcblk0p33  18M   36K   18M   1% /mnt/vendor/impdata<br>/dev/block/mmcblk0p4  976K  228K  748K  24% /mnt/vendor/factory<br>/dev/block/mmcblk0p6  976K   28K  948K   3% /mnt/vendor/factory_ro<br>tmpfs                  20M     0   20M   0% /shm<br>tmpfs                 8.0M     0  8.0M   0% /mnt/EPGdb<br>/dev/block/mmcblk0p42 107G  4.8G  102G   5% /data<br>tmpfs                 1.5G     0  1.5G   0% /data_mirror<br>/dev/fuse             107G  4.8G  102G   5% /mnt/user/0/emulated<br>console:/ # <br></code></pre></td></tr></table></figure><p>cache分区的块设备文件为&#x2F;dev&#x2F;block&#x2F;mmcblk0p23。</p><p>写入测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ #  echo 1 &gt; /proc/sys/vm/drop_caches    <br>console:/ #  busybox dd if=/dev/zero of=/dev/block/mmcblk0p23 bs=1M count=1024 conv=fsync<br>1024+0 records in<br>1024+0 records out<br>1073741824 bytes (1.0GB) copied, 11.371810 seconds, 90.0MB/s<br></code></pre></td></tr></table></figure><p>输入文件为 &#x2F;dev&#x2F;zero，是一个虚拟设备，我们可以认为这个设备的读取速度无限大，也就是读取速度不会影响到写入的速度。</p><p>bs&#x3D;1M : 一次写入 1M</p><p>count&#x3D;1024 : 写入 1024 次，也就是写入的数据总量为 1G</p><p>conv&#x3D;fsync : dd 结束前，把数据同步到 emmc，如果没加这个参数的话，数据可能还在缓存之中。为了确保数据准确，一定要加这个参数。</p><p>可以重复测试几次</p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # echo 1 &gt; /proc/sys/vm/drop_caches<br>console:/ # busybox dd if=/dev/zero of=/data/ddtest.bin bs=1M count=1024 conv=fsync                   <br>1024+0 records in<br>1024+0 records out<br>1073741824 bytes (1.0GB) copied, 15.211609 seconds, 67.3MB/s<br>console:/ #<br></code></pre></td></tr></table></figure><p>要重复测试几次。相对直接写块设备文件慢了 30M&#x2F;s 左右。这可能是文件系统带来的影响。</p><h2 id="读取测试"><a href="#读取测试" class="headerlink" title="读取测试"></a>读取测试</h2><h3 id="读取块设备"><a href="#读取块设备" class="headerlink" title="读取块设备"></a>读取块设备</h3><p>直接用我们上面介绍清除缓存的例子就行，这里就不再重复了。</p><p>从上面的例子得到的数据为 205M&#x2F;s 左右。</p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # echo 1 &gt; /proc/sys/vm/drop_caches        <br>console:/ # busybox dd if=/data/ddtest.bin of=/dev/null bs=1M count=1024<br>1024+0 records in<br>1024+0 records out<br>1073741824 bytes (1.0GB) copied, 5.464306 seconds, 187.4MB/s<br>console:/ # <br></code></pre></td></tr></table></figure><p>直接拿测试写入速度时生成的文件，重复测试几次，速度基本上在 187MB&#x2F;s 左右。</p><h1 id="iozone"><a href="#iozone" class="headerlink" title="iozone"></a>iozone</h1><p>Android 系统源码中并没有 iozone，我们从官网上下载编译，我下载时最新版本为iozone3_493，这个版本已经有 Android.mk 在代码里面了，将源码放到 Android系统源码里面 mm 即可。下面已经是我编译好的文件。对应不同硬件使用对应版本即可，把文件push到&#x2F;data&#x2F;local&#x2F;tmp&#x2F;，并赋予执行权限。</p><p><a href="https://github.com/wesley666/source/blob/main/izone.zip">source&#x2F;izone.zip at main · wesley666&#x2F;source</a></p><h2 id="随机读写测试"><a href="#随机读写测试" class="headerlink" title="随机读写测试"></a>随机读写测试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console: echo 1 &gt; /proc/sys/vm/drop_caches                                              &lt;<br>console:/data/local/tmp # ./iozone -azecI -+n -L64 -S32 -r1m -s1024m -i0 -i1 -i2 -w -f /data/iozonetest.bin <br>        Iozone: Performance Test of File I/O<br>                Version $Revision: 3.493 $<br>                Compiled for 32 bit mode.<br>                Build: linux-arm <br><br>        Contributors:William Norcott, Don Capps, Isom Crawford, Kirby Collins<br>                     Al Slater, Scott Rhine, Mike Wisner, Ken Goss<br>                     Steve Landherr, Brad Smith, Mark Kelly, Dr. Alain CYR,<br>                     Randy Dunlap, Mark Montague, Dan Million, Gavin Brebner,<br>                     Jean-Marc Zucconi, Jeff Blomberg, Benny Halevy, Dave Boone,<br>                     Erik Habbinga, Kris Strecker, Walter Wong, Joshua Root,<br>                     Fabrice Bacchella, Zhenghua Xue, Qin Li, Darren Sawyer,<br>                     Vangel Bojaxhi, Ben England, Vikentsi Lapa,<br>                     Alexey Skidanov, Sudhir Kumar.<br><br>        Run began: Fri Jun 10 19:34:04 2022<br><br>        Auto Mode<br>        Cross over of record size disabled.<br>        Include fsync in write timing<br>        Include close in write timing<br>        O_DIRECT feature enabled<br>        No retest option selected<br>        Record Size 1024 kB<br>        File size set to 1048576 kB<br>        Setting no_unlink<br>        Command line used: ./iozone -azecI -+n -L64 -S32 -r1m -s1024m -i0 -i1 -i2 -w -f /data/iozonetest.bin<br>        Output is in kBytes/sec<br>        Time Resolution = 0.000001 seconds.<br>        Processor cache size set to 32 kBytes.<br>        Processor cache line size set to 64 bytes.<br>        File stride size set to 17 * record size.<br>                                                              random    random     bkwd    record    stride                                    <br>              kB  reclen    write  rewrite    read    reread    read     write     read   rewrite      read   fwrite frewrite    fread  freread<br>         1048576    1024   150737        0   210429        0   208681   173348                                                                <br><br>iozone test complete.<br>console:/data/local/tmp # <br></code></pre></td></tr></table></figure><p>从结果来看，写速度为150MB&#x2F;s，读速度为210MB&#x2F;s，随机读速度为208MB&#x2F;s。　随机写速度为 173MB&#x2F;s。</p><p>重复测试几次结果差不多，读的速度基本跟 dd 的一致。写入比 dd 的快了一倍几，这里面的差距待研究，可能跟参数设置有关。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./iozone -azecI -+n -L64 -S32 -r1m -s1024m -i0 -i1 -i2 -w -f /data/iozonetest.bin [-Rb /sdcard/emmc_test.xls] <br></code></pre></td></tr></table></figure><p>各个参数定义如下：</p><p>a: 使用全自动模式。生成涵盖所有测试操作的输出，记录大小为4k到16M，文件大小为64k到512M。</p><p>z: 与-a一起使用以测试所有可能的记录大小。通常，Iozone在全自动模式下使用时会忽略对非常大的文件的小记录大小的测试。此选项强制iozone在自动测试中也包括小记录大小。</p><p>e: 在时间计算中包括flush（fsync，fflush）</p><p>c: 在计时计算中包括close（）。 仅当您怀疑当前正在测试的操作系统中的close（）被破坏时，这才有用。 它对于NFS3测试也很有用，可以帮助识别nfs3_commit是否运行良好。</p><p>I: 对所有文件操作使用DIRECT I&#x2F;O. 告诉文件系统所有操作都绕过缓冲区缓存并直接转到磁盘。 这也将在VxFS上使用VX_DIRECT，在Linux上使用O_DIRECT，在Solaris上使用directio（）。</p><p>-+n: 没有选择重新测试。使用此选项可防止重新测试运行。</p><p>L64: Set processor cache line size to 64 Bytes</p><p>S32: Set processor cache size to 32KBytes</p><p>r2m: block size 指定一次写入&#x2F;读出的块大小：1M</p><p>s1024m: 用于指定要测试的文件的大小：1024M</p><p>-i N 用来选择测试项, 比如Read&#x2F;Write&#x2F;Random 比较常用的是0 1 2,可以指定成-i 0 -i 1 -i2.这些别的详细内容请查man</p><p>  0&#x3D;write&#x2F;rewrite</p><p>  1&#x3D;read&#x2F;re-read</p><p>  2&#x3D;random-read&#x2F;write</p><p>  3&#x3D;Read-backwards</p><p>  4&#x3D;Re-write-record</p><p>  5&#x3D;stride-read</p><p>  6&#x3D;fwrite&#x2F;re-fwrite</p><p>  7&#x3D;fread&#x2F;Re-fread</p><p>  8&#x3D;random mix</p><p>  9&#x3D;pwrite&#x2F;Re-pwrite</p><p>  10&#x3D;pread&#x2F;Re-pread</p><p>  11&#x3D;pwritev&#x2F;Re-pwritev</p><p>  12&#x3D;preadv&#x2F;Re-preadv</p><p>-+b 400000,30000: burst size 400000KBytes,sleep between burst 30000ms</p><p>w: 当临时文件使用完毕时不删除它们。把它们留在文件系统中。</p><p>f: 指定测试文件的名字(这个文件必须指定你要测试的那个硬件中)</p><p>可选参数：</p><p>R: Generate Excel report</p><p>b: Filename Create Excel worksheet file,emmc_test.xls</p><p>注意：</p><p>根据测试文件大小的不同，iozone 磁盘读写性能的测试方法主要包括1倍内存测试和2倍内存测试（避免缓存的影响）。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://qiushao.net/2020/02/12/Android/emmc-performance-test/index.html">Android-emmc性能测试 | 一叶知秋</a></p><p><a href="https://github.com/axboe/fio">axboe&#x2F;fio: Flexible I&#x2F;O Tester</a></p><p><a href="https://github.com/DevriesL/RaptorMark">DevriesL&#x2F;RaptorMark</a></p><p><a href="https://www.iozone.org/">Iozone Filesystem Benchmark</a></p><p><a href="https://www.iozone.org/src/current/">iozone: Index of &#x2F;src&#x2F;current</a></p>]]></content>
    
    
    <categories>
      
      <category>Android性能优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>EMMC</tag>
      
      <tag>性能工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>btrace2.0使用方法</title>
    <link href="/article/788e44fe/"/>
    <url>/article/788e44fe/</url>
    
    <content type="html"><![CDATA[<p>2022 年我研究安卓性能优化的时候，写过一篇：<a href="https://iwesley.top/article/69f32e87/">btrace1.0使用方法 - Wesley’s Blog</a>，现在 brace 进化到 2.0 了，让我们一起来看看如何使用。</p><p>具体的接入流程可以看官方文档：</p><p><a href="https://github.com/bytedance/btrace">bytedance&#x2F;btrace: 🔥🔥 btrace(AKA RheaTrace) is a high performance Android trace tool which is based on Perfetto, it support to define custom events automatically during building apk and using bhook to provider more native events like Render&#x2F;Binder&#x2F;IO etc.</a></p><p>我这里主要记录一下接入的一些报错问题：</p><p>目前最新版本是2.0.3-rc03</p><p>项目的gradle版本是7.0.2，gradle plugin是7.0.0</p><h2 id="编译报错"><a href="#编译报错" class="headerlink" title="编译报错"></a>编译报错</h2><blockquote><p>org.gradle.workers.WorkerExecutionException: There was a failure while executing work items</p><p>​at org.gradle.workers.internal.DefaultWorkerExecutor.workerExecutionException(DefaultWorkerExecutor.java:270)</p><p>​at org.gradle.workers.internal.DefaultWorkerExecutor.await(DefaultWorkerExecutor.java:252)</p><p>​at com.android.build.gradle.internal.tasks.DexArchiveBuilderTaskDelegate.doProcess(DexArchiveBuilderTaskDelegate.kt:227)</p><p>​at com.android.build.gradle.internal.tasks.DexArchiveBuilderTask.doTaskAction(DexArchiveBuilderTask.kt:256)</p><p>​at com.android.build.gradle.internal.tasks.NewIncrementalTask$taskAction$$inlined$recordTaskAction$1.invoke(BaseTask.kt:66)</p><p>​at com.android.build.gradle.internal.tasks.Blocks.recordSpan(Blocks.java:51)</p><p>Caused by: com.android.tools.r8.CompilationFailedException: <strong>Compilation failed to complete</strong>, position: Lcom&#x2F;xxx&#x2F;web&#x2F;CommonHeader;<init>()V, origin: D:\Project\p_dev\app\build\intermediates\transforms\analyticsTrack\Production\release\720.jar:com&#x2F;xxx&#x2F;web&#x2F;CommonHeader.class</p></blockquote><p>需要关注<strong>Compilation failed to complete</strong>后面的类</p><p>如果哪个类报错就可以加入下面的配置，路径”${project.rootDir}&#x2F;trace-filter&#x2F;traceFilter.txt”</p><p><a href="https://github.com/bytedance/btrace/blob/master/GRADLE_CONFIG.MD">btrace&#x2F;GRADLE_CONFIG.MD at master · bytedance&#x2F;btrace</a></p><p>注意：allowpackage必须先配置，blockpackage必须在其子包下面，可以是类或者包名</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">package</span>]<br><span class="hljs-string">-allowpackage</span> <span class="hljs-string">com</span><br><span class="hljs-string">-allowpackage</span> <span class="hljs-string">org</span><br><span class="hljs-string">-allowpackage</span> <span class="hljs-string">androidx</span><br><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">androidx/exifinterface/media</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">com/google/android/exoplayer2/ui</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">com/xxx/web/CommonHeader</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">org/bouncycastle/jcajce/provider/asymmetric/x509</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">org/bouncycastle/jcajce/provider/asymmetric/dh</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">com/nineoldandroids/util</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">org/bouncycastle/jce/provider/JCEDHPublicKey</span><br><span class="hljs-comment"># org/bouncycastle/jce/provider/X509CertificateObject</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">org/bouncycastle/jce/provider</span><br></code></pre></td></tr></table></figure><h3 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h3><p>如果是windows用户，traceFilter.txt换行符必须改为LF</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>com&#x2F;bytedance&#x2F;rheatrace&#x2F;plugin&#x2F;compiling&#x2F;filter&#x2F;RheaTraceMethodFilter.kt</p><p>parseTraceFilterFile</p><p>methodKeepStr.trim { it &lt;&#x3D; ‘ ‘ }.replace(“&#x2F;“, “.”).split(“\n”).toTypedArray()</p><p>这里只替换了\n，没有替换\r，会导致解析出来的包名带有\r，导致checkPath失败。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkPath</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">if</span> (allowPackages.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (blockPath <span class="hljs-keyword">in</span> blockPackages) &#123;<br>        <span class="hljs-keyword">var</span> isContain = <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">for</span> (allowPackage <span class="hljs-keyword">in</span> allowPackages) &#123;<br>            <span class="hljs-keyword">if</span> (blockPath == allowPackage) &#123;<br>                RheaLog.e(TAG, <span class="hljs-string">&quot;blockpackage cannot be equal to allowpackage:%s&quot;</span>, blockPath)<br>            &#125;<br>            <span class="hljs-keyword">if</span> (blockPath.startsWith(allowPackage)) &#123;<br>                isContain = <span class="hljs-literal">true</span><br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!isContain) &#123;<br>            <span class="hljs-keyword">throw</span> GradleException(<span class="hljs-string">&quot;allowpackage do not contains <span class="hljs-variable">$blockPath</span>&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7350256387161047077">BTrace和Perfetto如何分析性能手把手教你使用BTrace和Perfetto分析性能 高级android开发工 - 掘金</a></p><p><a href="https://mvnrepository.com/artifact/com.bytedance.btrace/rhea-gradle-plugin">Maven Repository: com.bytedance.btrace » rhea-gradle-plugin</a></p>]]></content>
    
    
    <categories>
      
      <category>Android性能优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>性能优化</tag>
      
      <tag>btrace</tag>
      
      <tag>systrace</tag>
      
      <tag>perfetto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>btrace1.0使用方法</title>
    <link href="/article/69f32e87/"/>
    <url>/article/69f32e87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记于 2022 年 6 月 24 日</p></blockquote><p><strong>注意：目前仅限于macos和linux使用</strong></p><p><a href="https://github.com/bytedance/btrace/blob/master/README.zh-CN.md">btrace&#x2F;README.zh-CN.md at master · bytedance&#x2F;btrace · GitHub</a></p><p>btrace(又名 RheaTrace) 是一个基于 <a href="https://developer.android.com/topic/performance/tracing">Systrace</a> 实现的高性能 Android trace 工具，它支持在 App 编译期间自动注入自定义事件，并使用 <a href="https://github.com/bytedance/bhook">bhook</a> 额外提供 IO 等 native 事件。</p><h2 id="关键特征"><a href="#关键特征" class="headerlink" title="关键特征"></a>关键特征</h2><p>支持自动注入自定义事件，在编译 Apk 期间为 App 方法自动注入Trace#beginSection(String) 和 Trace#endSection()。</p><p>提供额外 IO 等 native 事件，方便定位耗时原因。</p><p>支持仅采集主线程 trace 事件。</p><p>使用便捷，稳定性高，性能优于 Systrace。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><strong>注意：存储权限要申请</strong></p><p>自定义的application必须有以下代码，否则会导致btrace插入初始化代码失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@OverRide</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachBaseContext</span><span class="hljs-params">(Context base)</span> &#123;<br>     <span class="hljs-built_in">super</span>.attachBaseContext(base);<br>&#125;<br></code></pre></td></tr></table></figure><p>在您项目根目录下 build.gradle 文件中增加 rhea-gradle-plugin 作为依赖。</p><p>注意：btrace版本号可以在这里查询：<a href="https://search.maven.org/">https://search.maven.org/</a> 如果打不开可以在阿里云查询：<a href="https://developer.aliyun.com/mvn/search">https://developer.aliyun.com/mvn/search</a></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250502163842049.png" alt="image-20250502163841997"></p><p>目前版本号是1.0.2</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Groovy">buildscript &#123;<br>    repositories &#123;<br>        ...<br>        mavenCentral()<br>        ...<br>    &#125;<br>    dependencies &#123;<br>        classpath <span class="hljs-string">&#x27;com.bytedance.btrace:rhea-gradle-plugin:1.0.2&#x27;</span><br>    &#125;<br>&#125;<br><br>allprojects &#123;<br>    repositories &#123;<br>        ...<br>        mavenCentral()<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着在 app&#x2F;build.gradle 文件中应用如下所示插件和依赖。</p><h3 id="androidx项目"><a href="#androidx项目" class="headerlink" title="androidx项目"></a>androidx项目</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Groovy">dependencies &#123;<br>    <span class="hljs-comment">//rheatrace core lib</span><br>    implementation <span class="hljs-string">&quot;com.bytedance.btrace:rhea-core:1.0.2&quot;</span><br>&#125;<br><br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;com.bytedance.rhea-trace&#x27;</span><br>rheaTrace &#123;<br><br>   compilation &#123;<br>      <span class="hljs-comment">//为减少 APK 体积, 你可以为 App 中需要跟踪的方法设置 id 以此来跟踪此自定义事件, 默认值 false。</span><br>      traceWithMethodID = <span class="hljs-literal">false</span> <br>      <span class="hljs-comment">//该文件配置决定哪些方法您不希望跟踪, 默认值 null。</span><br>      traceFilterFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/traceFilter.txt&quot;</span><br>      <span class="hljs-comment">//用特指定方法 id 来设置自定义事件名称, 默认值 null。</span><br>      applyMethodMappingFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/keep-method-id.txt&quot;</span><br>  &#125;<br><br>   runtime &#123;<br>      <span class="hljs-comment">//仅在主线程抓取跟踪事件, 默认值 false。</span><br>      mainThreadOnly <span class="hljs-literal">true</span> <br>      <span class="hljs-comment">//在 App 启动之初开始抓取跟踪事件, 默认值 true。</span><br>      startWhenAppLaunch <span class="hljs-literal">true</span><br>      <span class="hljs-comment">//指定内存存储 atrace 数据 ring buffer 的大小。</span><br>      atraceBufferSize <span class="hljs-string">&quot;500000&quot;</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="android-support项目"><a href="#android-support项目" class="headerlink" title="android-support项目"></a>android-support项目</h3><p><strong>本地需要依赖的文件：</strong> <a href="https://github.com/wesley666/source/blob/main/btrace-Android-support.zip">https://github.com/wesley666/source/blob/main/btrace-Android-support.zip</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Groovy">dependencies &#123;<br>    <span class="hljs-comment">//rheatrace core lib</span><br>    implementation <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-stdlib:1.3.72&quot;</span><br>    implementation files(<span class="hljs-string">&#x27;libs/rhea-common-1.0.2.jar&#x27;</span>)<br>    implementation files(<span class="hljs-string">&#x27;libs/rhea-core-release.aar&#x27;</span>)<br>    implementation files(<span class="hljs-string">&#x27;libs/rhea-atrace-release.aar&#x27;</span>)<br>    implementation <span class="hljs-string">&quot;com.bytedance:bytehook:1.0.3&quot;</span><br>&#125;<br><br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;com.bytedance.rhea-trace&#x27;</span><br>rheaTrace &#123;<br><br>   compilation &#123;<br>      <span class="hljs-comment">//为减少 APK 体积, 你可以为 App 中需要跟踪的方法设置 id 以此来跟踪此自定义事件, 默认值 false。</span><br>      traceWithMethodID = <span class="hljs-literal">false</span> <br>      <span class="hljs-comment">//该文件配置决定哪些方法您不希望跟踪, 默认值 null。</span><br>      traceFilterFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/traceFilter.txt&quot;</span><br>      <span class="hljs-comment">//用特指定方法 id 来设置自定义事件名称, 默认值 null。</span><br>      applyMethodMappingFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/keep-method-id.txt&quot;</span><br>  &#125;<br><br>   runtime &#123;<br>      <span class="hljs-comment">//仅在主线程抓取跟踪事件, 默认值 false。</span><br>      mainThreadOnly <span class="hljs-literal">true</span> <br>      <span class="hljs-comment">//在 App 启动之初开始抓取跟踪事件, 默认值 true。</span><br>      startWhenAppLaunch <span class="hljs-literal">true</span><br>      <span class="hljs-comment">//指定内存存储 atrace 数据 ring buffer 的大小。</span><br>      atraceBufferSize <span class="hljs-string">&quot;500000&quot;</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于 <code>rheaTrace </code>，从<a href="https://github.com/bytedance/btrace/blob/master/GRADLE_CONFIG.zh-CN.MD">RheaTrace Gradle Config</a>中了解更多信息。</p><p>最后，检测您电脑 python 版本，由于 Systrace 的关系 RheaTrace 仅支持 python 2.7 版本，请将 systrace 环境变量配置在 <em>~&#x2F;.bash_profile</em> 文件中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">export PATH=$&#123;PATH&#125;:/Users/$&#123;user_name&#125;/Library/Android/sdk/platform-tools/systrace<br></code></pre></td></tr></table></figure><p>RheaTrace使用方法请参考：</p><p><a href="https://github.com/bytedance/btrace/blob/master/README.zh-CN.md">btrace&#x2F;README.zh-CN.md at master · bytedance&#x2F;btrace · GitHub</a></p>]]></content>
    
    
    <categories>
      
      <category>Android性能优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>性能优化</tag>
      
      <tag>btrace</tag>
      
      <tag>systrace</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>音视频缓存数学模型</title>
    <link href="/article/36f6f986/"/>
    <url>/article/36f6f986/</url>
    
    <content type="html"><![CDATA[<p class="note note-success">2024年8月的笔记</p><p>播放器作为消费者，缓存作为生产者。</p><h2 id="进入缓冲一次"><a href="#进入缓冲一次" class="headerlink" title="进入缓冲一次"></a>进入缓冲一次</h2><p>设消费者速率为v1，生产者为v2，视频长度为l，x为生产者至少距离消费者多远才能保证在播完视频前两者重合。实际上就是一个追及问题。</p><p>v1<em>t &#x3D; v2</em>t + x，即 l &#x3D; v2*l&#x2F;v1 + x，因为播放器速度是1，继续简化得 x &#x3D; l(1 - v2)</p><p>如果v2大于1，即满足消费者需求时，可以流畅播放。</p><p>设l是一部45分钟的电视剧，即x &#x3D; 45<em>60</em>(1 - v2)</p><p>如果v2是1，即1s可以缓存1s时长视频，则x &#x3D; 0</p><p>v2是0.9，即1s可以缓存0.9s时长视频，则 x &#x3D; 270，意味着要提前缓存270s的视频才可以后续不进入缓冲状态。</p><p>同理，v2&#x3D;0.8，x&#x3D; 540</p><p>………….</p><p>v2 &#x3D; 0.1，x&#x3D;2430</p><p>斜率是-2700，意味着每变化百分之0.1，缓存长度都要增加270s。</p><p>拿v2&#x3D;0.9，x&#x3D; 270作为例子，要提前缓存270s，需要花费的时间是t&#x3D;270&#x2F;0.9&#x3D;300s</p><p>同理，v2&#x3D;0.8，x&#x3D; 540，t&#x3D;540&#x2F;0.8&#x3D;675s</p><p>……..</p><p>v2 &#x3D; 0.1，x&#x3D;2430,t&#x3D;2430&#x2F;0.1&#x3D;24300s&#x3D;405分钟</p><h2 id="进入缓冲多次"><a href="#进入缓冲多次" class="headerlink" title="进入缓冲多次"></a>进入缓冲多次</h2><p>实际上，用户是不能容忍等这么久的，所以意味着播放开始后会反复进入缓冲状态。</p><p>假设缓存1s播1s，</p><p>v2&#x3D;1，是可以正常播放</p><p>v2&#x3D;0.9，则用户要等待时长为 1&#x2F;0.9&#x3D;1.1111s，先缓存1s，则平均1&#x2F;（1-0.9）&#x3D;10s进入缓冲状态，每次1.1111s</p><p>v2&#x3D;0.8，则用户要等待时长为 1&#x2F;0.8&#x3D;1.25s，先缓存1s，则平均1&#x2F;（1-0.8）&#x3D;5s进入缓冲状态，每次1.25s</p><p>…….</p><p>v2&#x3D;0.1，则用户要等待时长为 1&#x2F;0.1&#x3D;10s，先缓存1s，则平均1&#x2F;（1-0.1）&#x3D;1.1111s进入缓冲状态，每次10s</p><p>同理每次缓存多1s再播放，都会增加一倍进入缓冲的时间和等待时间。</p><p>意味着，如果通过多线程不能显著提高v2速度超过1，对用户来说都是卡顿，无法忍受的。</p><p>当然，上面只是一个理论模型，实际上要复杂一些，因为每个ts包含的播放时间是不一样的。</p><h2 id="情况分析"><a href="#情况分析" class="headerlink" title="情况分析"></a>情况分析</h2><p>若带宽小于CDN速度，即v2总是小于v1，这样无论怎么优化都会卡顿。</p><p>若带宽大于CDN速度，若v2大于v1则可以正常播放；若单线程不能满足v2大于v1，多线程时v2大于v1，也可以正常播放。</p><h2 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h2><p>对于下载时间小于ts文件时长的，则串行下载，不需要并发。</p><p>以下是针对CDN速度小于网络带宽的：</p><h3 id="1-初始下载设置"><a href="#1-初始下载设置" class="headerlink" title="1. 初始下载设置"></a>1. <strong>初始下载设置</strong></h3><ul><li><strong>初始并发数</strong>：从1个文件开始下载。</li><li><strong>监控下载速度</strong>：监控下载速度和记录最大下载速度。</li></ul><h3 id="2-逐步增加并发"><a href="#2-逐步增加并发" class="headerlink" title="2. 逐步增加并发"></a>2. 逐步增加并发</h3><ul><li><strong>逐步增加</strong>：下载成功后，增加一个并发下载任务。</li><li><strong>监控变化</strong>：每次增加并发后，观察单个文件的下载速度变化。</li></ul><h3 id="3-检测瓶颈"><a href="#3-检测瓶颈" class="headerlink" title="3. 检测瓶颈"></a>3. <strong>检测瓶颈</strong></h3><ul><li><strong>观察限速</strong>：当下载速度达到某个稳定值（和最大下载速度相比不超过百分之十），或者单个文件下载速度显著下降时，说明可能触摸到了带宽上限或服务器限速。</li><li><strong>回退优化</strong>：如果发现并发数增加反而导致下载速度下降，要减少并发数，找到一个最佳的下载量。</li></ul>]]></content>
    
    
    <categories>
      
      <category>音视频</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓屏保调试</title>
    <link href="/article/98c55340/"/>
    <url>/article/98c55340/</url>
    
    <content type="html"><![CDATA[<p>先看一下在设置点击屏保预览后的调用链（Android 14）</p><pre><code class=" mermaid">sequenceDiagram    participant User    participant MaterialButton    participant View    participant DreamSettings    participant DreamBackend    User-&gt;&gt;MaterialButton: 点击按钮（ performClick()）    MaterialButton-&gt;&gt;View: performClick()    View-&gt;&gt;DreamSettings: 触发 onClick() (lambda 表达式)    DreamSettings-&gt;&gt;DreamBackend: 调用 preview()</code></pre><p>DreamController的打印信息</p><blockquote><p>Starting dream: name&#x3D;ComponentInfo{com.google.android.apps.tv.dreamx&#x2F;com.google.android.apps.tv.dreamx.service.Backdrop}, <strong>isPreviewMode&#x3D;true</strong>, canDoze&#x3D;false, userId&#x3D;0, reason&#x3D;’test dream’</p></blockquote><p>DreamActivity是一个不需要注册的Activity，运行在各个屏保进程。</p><p>屏保应用实现DreamService即可。</p><p>屏保状态时，后台起应用会进入 onStop 状态（该例子 onStop 里面调用了 finish）</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250315143803024.png" alt="img"></p><h2 id="退出屏保的方法"><a href="#退出屏保的方法" class="headerlink" title="退出屏保的方法"></a>退出屏保的方法</h2><h3 id="1、有触摸或者按键输入"><a href="#1、有触摸或者按键输入" class="headerlink" title="1、有触摸或者按键输入"></a>1、有触摸或者按键输入</h3><h3 id="2、配置config-dismissDreamOnActivityStart-为-true-则会在新-activity-起来后退出屏保"><a href="#2、配置config-dismissDreamOnActivityStart-为-true-则会在新-activity-起来后退出屏保" class="headerlink" title="2、配置config_dismissDreamOnActivityStart 为 true 则会在新 activity 起来后退出屏保"></a>2、配置config_dismissDreamOnActivityStart 为 true 则会在新 activity 起来后退出屏保</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!-- Whether to dismiss the active dream when an activity is started. Doesn&#x27;t apply to</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">          assistant activities (ACTIVITY_TYPE_ASSISTANT) --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bool</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;config_dismissDreamOnActivityStart&quot;</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">bool</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250315143803153.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250315143803189.png" alt="img"></p><h3 id="3、跨进程调用DreamManagerService-的awaken（需要系统签名）"><a href="#3、跨进程调用DreamManagerService-的awaken（需要系统签名）" class="headerlink" title="3、跨进程调用DreamManagerService 的awaken（需要系统签名）"></a>3、跨进程调用DreamManagerService 的awaken（需要系统签名）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.os.IBinder<br><span class="hljs-keyword">import</span> androidx.annotation.RequiresPermission<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DreamManager</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">val</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DreamManager&quot;</span><br>    <span class="hljs-comment">//private var mDreamManager: Any? = context.getSystemService(&quot;dream&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> mDreamManager: Any? = <span class="hljs-literal">null</span><br><br>    init &#123;<br>        mDreamManager = <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">val</span> <span class="hljs-variable">dream</span> <span class="hljs-operator">=</span> Reflector.on(<span class="hljs-string">&quot;android.os.ServiceManager&quot;</span>).method(<span class="hljs-string">&quot;getService&quot;</span>, String::class.java).call&lt;Any&gt;(<span class="hljs-string">&quot;dreams&quot;</span>)<br>            Reflector.on(<span class="hljs-string">&quot;android.service.dreams.IDreamManager\$Stub&quot;</span>).method(<span class="hljs-string">&quot;asInterface&quot;</span>, IBinder::class.java).call&lt;Any&gt;(dream)<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            <span class="hljs-literal">null</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@RequiresPermission(&quot;android.permission.READ_DREAM_STATE&quot;)</span><br>    fun <span class="hljs-title function_">isDreaming</span><span class="hljs-params">()</span>: Boolean &#123;<br>        <span class="hljs-keyword">if</span> (mDreamManager == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> &#123;<br>            Reflector.with(mDreamManager!!).method(<span class="hljs-string">&quot;isDreaming&quot;</span>).call()<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@RequiresPermission(&quot;android.permission.WRITE_DREAM_STATE&quot;)</span><br>    fun <span class="hljs-title function_">stopDream</span><span class="hljs-params">()</span> &#123;<br>        mDreamManager?.let &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Reflector.with(it).method(<span class="hljs-string">&quot;awaken&quot;</span>).call&lt;Unit&gt;()<br>            &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="屏保调试命令：cmd-dreams"><a href="#屏保调试命令：cmd-dreams" class="headerlink" title="屏保调试命令：cmd dreams"></a>屏保调试命令：cmd dreams</h2><blockquote><p>roc_rk3588s_pc:&#x2F; # cmd dreams -h</p><p>Dream manager (dreams) commands:</p><p>  help</p><p>​      Print this help text.</p><p>  start-dreaming</p><p>​      Start the currently configured dream.</p><p>  stop-dreaming</p><p>​      Stops any active dream</p></blockquote><p>cmd dreams start-dreaming</p><p>cmd dreams stop-dreaming</p>]]></content>
    
    
    <categories>
      
      <category>AndroidFrameworkFeature</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DreamManagerService</tag>
      
      <tag>Framework</tag>
      
      <tag>屏保</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓内存泄露之DMA-BUF异常增长:Android Studio镜像引起DMA内存泄露</title>
    <link href="/article/f148a913/"/>
    <url>/article/f148a913/</url>
    
    <content type="html"><![CDATA[<p>今天用着安卓 14 的板子的时候突然系统卡死。</p><p>查看日志发现launcher都被干掉了</p><blockquote><p>03-04 06:13:35.544 7872 8479 I ActivityManager: vis BFGS 18740: com.android.launcher3 (pid 8407) service</p><p>03-04 06:13:35.544 7872 8479 I ActivityManager: com.android.launcher3&#x2F;com.android.quickstep.TouchInteractionService&lt;&#x3D;Proc{8077:com.android.systemui&#x2F;u0a70}</p><p>03-04 06:13:36.155 277 277 I lowmemorykiller: Kill ‘com.android.launcher3’ (8407), uid 10071, oom_score_adj 100 to free 39504kB rss, 46224kB swap; reason: device is low on swap (91200kB &lt; 199552kB) and thrashing (200%)</p></blockquote><p>看<code>dumpsys meminfo</code>发现DMA-BUF占了3G多（4G设备），应用free ram基本没了。</p><p>刚开始以为是scrcpy的问题。后来经调查发现是android studio的屏幕镜像问题。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>开机一段时间后</p><blockquote><p>Total RAM: 3,991,080K (status normal)</p><p>Free RAM: 1,166,810K (  124,454K cached pss +   623,088K cached kernel +   419,268K free)</p><p><strong>DMA-BUF: 1,477,628K (      876K mapped + 1,476,752K unmapped)</strong></p><p>DMA-BUF Heaps: 1,477,628K</p><p>DMA-BUF Heaps pool:   249,088K</p><p>​      GPU:   202,320K</p><p> Used RAM: 2,763,593K (1,036,373K used pss + 1,727,220K kernel)</p><p> Lost RAM:   195,490K</p><p>​     ZRAM:    72,700K physical used for   215,296K in swap (1,995,536K total swap)</p><p>   Tuning: 192 (large 512), oom   322,560K, restore limit   107,520K (high-end-gfx)</p></blockquote><p><code>cat /sys/kernel/dmabuf/buffers/*/size</code>，发现有好多483328字节的 inode</p><p><code>cat /sys/kernel/dmabuf/buffers/*/size  | grep 483328 | wc -l</code></p><p>有2957个，计算：2957*483328&#x3D;1429200896&#x3D;1.4G，和上面的结果差不多。</p><p>随便查看一个inode</p><blockquote><p>roc_rk3588s_pc:&#x2F; # lsof | grep -w 7248</p><p><a href="mailto:&#99;&#x32;&#x40;&#49;&#46;&#x31;&#45;&#x73;&#101;&#114;&#x76;&#x69;&#99;&#101;">&#99;&#x32;&#x40;&#49;&#46;&#x31;&#45;&#x73;&#101;&#114;&#x76;&#x69;&#99;&#101;</a>   543 mediacodec 2553u     0000                0,8       0t0       7248 &#x2F;dmabuf:system</p><p>main       4146       root 5088u     0000                0,8       0t0       7248 &#x2F;dmabuf:system</p><p>main       4146       root 5089u     0000                0,8       0t0       7248 &#x2F;dmabuf:system</p></blockquote><p><code>lsof | grep &quot;4146&quot; | grep dmabuf  | wc -l</code></p><p>有2958条这样的条目</p><p><code>main       4146       root 5973u     0000                0,8       0t0       7690 /dmabuf:system</code></p><p>和上面的数目一一对应</p><p>查看是哪一个程序</p><blockquote><p>roc_rk3588s_pc:&#x2F; # cat &#x2F;proc&#x2F;543&#x2F;cmdline</p><p>&#x2F;vendor&#x2F;bin&#x2F;hw&#x2F;<a href="mailto:&#x61;&#110;&#x64;&#114;&#x6f;&#x69;&#100;&#x2e;&#x68;&#97;&#114;&#x64;&#119;&#97;&#114;&#x65;&#46;&#x6d;&#101;&#100;&#x69;&#97;&#x2e;&#x63;&#x32;&#x40;&#49;&#46;&#x31;&#45;&#x73;&#x65;&#114;&#x76;&#105;&#x63;&#x65;">&#x61;&#110;&#x64;&#114;&#x6f;&#x69;&#100;&#x2e;&#x68;&#97;&#114;&#x64;&#119;&#97;&#114;&#x65;&#46;&#x6d;&#101;&#100;&#x69;&#97;&#x2e;&#x63;&#x32;&#x40;&#49;&#46;&#x31;&#45;&#x73;&#x65;&#114;&#x76;&#105;&#x63;&#x65;</a></p><p>roc_rk3588s_pc:&#x2F; # cat &#x2F;proc&#x2F;4146&#x2F;cmdline</p><p>app_process&#x2F;data&#x2F;local&#x2F;tmp&#x2F;.studiocom.android.tools.screensharing.Main–socket&#x3D;screen-sharing-agent-8055–flags&#x3D;16</p></blockquote><p>发现是android studio镜像导致的：应该是因为一直黑屏导致反复申请内存导致DMA-BUF泄露。</p><p>关闭Android Studio的Device Mirroring功能后，后面使用设备就正常了。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250304211421729.png" alt="img"></p><h2 id="dmabuf-dump"><a href="#dmabuf-dump" class="headerlink" title="dmabuf_dump"></a>dmabuf_dump</h2><p>通过dmabuf_dump命令可以更快地查看异常程序</p><blockquote><p>roc_rk3588s_pc:&#x2F; # dmabuf_dump -h</p><p>Usage: dmabuf_dump [-abh] [per-process&#x2F;per-buffer stats]</p><p>-a       show all dma buffers (ion) in big table, [buffer x process] grid</p><p>-b       show DMA-BUF per-buffer, per-exporter and per-device statistics</p><p>-h       show this help</p><p>​         If PID is supplied, the dmabuf information for that process is shown.</p><p>​         Per-buffer DMA-BUF stats do not take an argument.</p></blockquote><p>通过<code>dmabuf_dump</code>就可以查看各个程序DMA-BUF的占用情况（包含程序名字、pid、inode等等）或者加其他参数输出不同结果。</p><blockquote><p>roc_rk3588s_pc:&#x2F; # dmabuf_dump 4146</p><p>​            main:4146</p><p>​                  Name              Rss              Pss         nr_procs            Inode</p><p>​                system           472 kB           472 kB                1             4735</p><p>​                system           472 kB           472 kB                1             4736</p><p>​                system           472 kB           472 kB                1             4737</p><p>​               </p><p>​               ——————（省略几千行）—————-</p><p>​          </p><p>​                system           472 kB           472 kB                1             7688</p><p>​                system           472 kB           472 kB                1             7689</p><p>​                system           472 kB           472 kB                1             7690</p><p>​         PROCESS TOTAL       1395232 kB       1395232 kB</p><p>-———————</p><p>dmabuf total: 1477628 kB kernel_rss: 82396 kB userspace_rss: 1395232 kB userspace_pss: 1395232 kB</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://source.android.com/docs/core/graphics/implement-dma-buf-gpu-mem">Implement DMABUF and GPU memory accounting in Android 12  |  Android Open Source Project</a></p>]]></content>
    
    
    <categories>
      
      <category>Android性能优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内存</tag>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓组件化之动态依赖功能模块</title>
    <link href="/article/67ca89d4/"/>
    <url>/article/67ca89d4/</url>
    
    <content type="html"><![CDATA[<p>对于拥有不同渠道的 APP 来说，可能需要集成不同的功能模块，也可能同一个功能有不同实现。最简单的方法可能是通过接口、工厂模式、 flavorImplement 和渠道自定义代码的方法来实现了。但是，如果不想建那么多渠道代码目录，需要通过一套代码来初始化模块，那么上述方法就不行了。</p><p>那么如何在不依赖模块的前提下动态调用其功能呢？</p><p>有几种方法：</p><p>1、反射、接口隔离和工厂模式</p><p>2、动态功能模块（Dynamic Feature Module），国内不适用。</p><p>3、利用 Java 的 <code>ServiceLoader</code> 机制，通过配置文件声明接口实现类。</p><p>综合考虑后决定采用反射、接口隔离和工厂模式。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>环境：agp 8.7.0，grade：8.10.2</p><h3 id="gradle：实现模块动态加载"><a href="#gradle：实现模块动态加载" class="headerlink" title="gradle：实现模块动态加载"></a>gradle：实现模块动态加载</h3><p>采用yaml文件进行功能配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#功能定义</span><br><span class="hljs-attr">features:</span><br>  <span class="hljs-attr">featureA:</span><br>    <span class="hljs-comment">#默认配置</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;:feature:featureA&#x27;</span> <span class="hljs-comment">#模块名字</span><br>    <span class="hljs-comment">#两个列表优先级最高，但不能同时包含一样的flavor</span><br>    <span class="hljs-comment">#如果enable为true，则建议使用disableFlavorsList。反之，亦然。</span><br>    <span class="hljs-attr">enableFlavorsList:</span> [<span class="hljs-string">demo</span>, <span class="hljs-string">companyA</span>, <span class="hljs-string">companyB</span>]<br>    <span class="hljs-attr">disableFlavorsList:</span> []<br></code></pre></td></tr></table></figure><p>libs.versions.toml</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">snakeyaml</span> = <span class="hljs-string">&quot;1.33&quot;</span><br><span class="hljs-attr">snakeyaml</span> = &#123; module = <span class="hljs-string">&quot;org.yaml:snakeyaml&quot;</span>, version.ref = <span class="hljs-string">&quot;snakeyaml&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>根build.gradle</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br>buildscript &#123;<br>    <span class="hljs-comment">// 自定义 gradle 插件</span><br>    dependencies &#123;<br>        <span class="hljs-comment">//classpath(libs.plugin)</span><br>        classpath libs.snakeyaml <span class="hljs-comment">// 添加 YAML 解析库</span><br>    &#125;<br>&#125;<br><br>plugins &#123;<br>    alias(libs.plugins.android.application) apply <span class="hljs-literal">false</span><br>    alias(libs.plugins.kotlin.android) apply <span class="hljs-literal">false</span><br>    alias(libs.plugins.android.library) apply <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>app build.gradle （根据配置动态依赖模块实现）</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">//Yaml放在其他xxx.gradle import会报找不到</span><br><span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml<br>ext &#123;<br>    loadYamlConfig = &#123; String fileName -&gt;<br>        <span class="hljs-keyword">def</span> configFile = file(fileName)<br>        <span class="hljs-keyword">if</span> (!configFile.exists()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GradleException(<span class="hljs-string">&quot;YAML config file not found: $&#123;configFile.absolutePath&#125;&quot;</span>)<br>        &#125;<br>        <span class="hljs-keyword">def</span> yaml = <span class="hljs-keyword">new</span> Yaml()<br>        <span class="hljs-keyword">def</span> config<br>        <span class="hljs-keyword">try</span> &#123;<br>            configFile.withReader &#123; reader -&gt;<br>                config = yaml.load(reader)<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GradleException(<span class="hljs-string">&quot;Failed to parse YAML file: $&#123;configFile.name&#125;&quot;</span>, e)<br>        &#125;<br>        <span class="hljs-keyword">return</span> config.asImmutable()<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">def</span> printlnRed(String msg) &#123;<br>    <span class="hljs-keyword">def</span> ANSI_RESET = <span class="hljs-string">&quot;\u001B[0m&quot;</span><br>    <span class="hljs-keyword">def</span> ANSI_RED = <span class="hljs-string">&quot;\u001B[31m&quot;</span><br>    println(<span class="hljs-string">&quot;$&#123;ANSI_RED&#125;$&#123;msg&#125;$&#123;ANSI_RESET&#125;&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">def</span> featureConfig = loadYamlConfig(<span class="hljs-string">&quot;feature_config.yaml&quot;</span>)<br>println(<span class="hljs-string">&quot;featureConfig: $&#123;featureConfig&#125;&quot;</span>)<br>afterEvaluate &#123;<br>    android.applicationVariants.configureEach &#123; variant -&gt;<br>        <span class="hljs-keyword">def</span> flavorCompanyName = variant.productFlavors.find &#123; it.dimension == <span class="hljs-string">&quot;COMPANY&quot;</span> &#125;?.name<br>        if (!flavorCompanyName) &#123;<br>            throw new GradleException(<span class="hljs-string">&quot;Variant $&#123;variant.name&#125; has no COMPANY flavor!&quot;</span>)<br>        &#125;<br>        println(<span class="hljs-string">&quot;variant.name:$&#123;variant.name&#125; variant.flavorName:$&#123;variant.flavorName&#125;&quot;</span>)<br>        featureConfig.features.each &#123; featureKey, defaultConfig  -&gt;<br>            def featureName = defaultConfig.name<br>            boolean isEnabled = defaultConfig.enable<br>            def enableFlavorsList = defaultConfig.enableFlavorsList<br>            def disableFlavorsList = defaultConfig.disableFlavorsList<br>            boolean hasFound = false<br>            for (flavor in enableFlavorsList) &#123;<br>                if (flavor == flavorCompanyName) &#123;<br>                    isEnabled = true<br>                    println(<span class="hljs-string">&quot;enable in enableFlavorsList&quot;</span>)<br>                    hasFound = true<br>                    break<br>                &#125;<br>            &#125;<br>            for (flavor in disableFlavorsList) &#123;<br>                if (flavor == flavorCompanyName) &#123;<br>                    if (hasFound) &#123;<br>                        throw new GradleException(<span class="hljs-string">&quot;Feature $featureKey in flavor $flavorCompanyName must not be in both enableFlavorsList and disableFlavorsList!&quot;</span>)<br>                    &#125;<br>                    isEnabled = false<br>                    printlnRed(<span class="hljs-string">&quot;disable in disableFlavorsList&quot;</span>)<br>                    break<br>                &#125;<br>            &#125;<br>            if (isEnabled) &#123;<br>                println(<span class="hljs-string">&quot;$&#123;flavorCompanyName&#125;Implementation $&#123;featureName&#125;&quot;</span>)<br>                <span class="hljs-comment">//动态依赖模块</span><br>                dependencies.add(<span class="hljs-string">&quot;$&#123;flavorCompanyName&#125;Implementation&quot;</span>, project(featureName))<br>            &#125; else &#123;<br>                printlnRed(<span class="hljs-string">&quot;$&#123;variant.name&#125; $&#123;flavorCompanyName&#125; Not Implementation $&#123;featureName&#125;&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模块实现"><a href="#模块实现" class="headerlink" title="模块实现"></a>模块实现</h3><h4 id="公共模块"><a href="#公共模块" class="headerlink" title="公共模块"></a>公共模块</h4><p>定义接口</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFeature</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个 Helper</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">object</span> FeatureHelper : IFeature &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> mFeature: IFeature? = <span class="hljs-literal">null</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setFeatureImpl</span><span class="hljs-params">(feature: <span class="hljs-type">IFeature</span>?)</span></span> &#123;<br>        mFeature = feature<br>    &#125;<br>    <br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span> &#123;<br>        mFeature?.doSomething()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Module</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">       采用java类 方便使用 java 的方式进行反射</span><br><span class="hljs-comment">     * 注意：包名和类名、方法名和参数不能随意修改，否则反射会找不到</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context Context</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> IFeature</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IFeature <span class="hljs-title function_">load</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-comment">//FeatureManager实现IFeature接口</span><br>        <span class="hljs-type">FeatureManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FeatureManager</span>(context);<br>        manager.init();<br>        <span class="hljs-keyword">return</span> manager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="app-模块"><a href="#app-模块" class="headerlink" title="app 模块"></a>app 模块</h4><p><a href="https://iwesley.top/article/ba67228f/">Java反射的优雅使用 - Wesley’s Blog</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">loadFeatureModule</span><span class="hljs-params">(application: <span class="hljs-type">Application</span>)</span></span>: IFeature? &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> &#123;<br>        Reflector.on(<span class="hljs-string">&quot;com.wesley.feature.Module&quot;</span>)<br>            .method(<span class="hljs-string">&quot;load&quot;</span>, Context::<span class="hljs-keyword">class</span>.java).call&lt;IFeature&gt;(application)<br>    &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>        <span class="hljs-literal">null</span> <span class="hljs-comment">// 模块未启用或未实现</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initModules</span><span class="hljs-params">(application: <span class="hljs-type">Application</span>)</span></span> &#123;<br>  FeatureHelper.setFeatureImpl(loadFeatureModule(application))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/97498337">Android 模块解耦和的实践</a></p><p><a href="https://blog.csdn.net/fesdgasdgasdg/article/details/106888077">Android 中使用 ServiceLoader、AutoService 摔坑记录</a></p>]]></content>
    
    
    <categories>
      
      <category>AndroidAPP架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>gradle</tag>
      
      <tag>组件化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DLNA库Platinum新增安卓64位so编译方法</title>
    <link href="/article/4339b418/"/>
    <url>/article/4339b418/</url>
    
    <content type="html"><![CDATA[<p>下载代码（该仓库我已经修改相关编译错误和支持安卓 64 位 so 编译）</p><p><code>git clone https://github.com/wesley666/Platinum -b master</code></p><p>下载Neptune</p><p><code>git submodule update --init</code></p><p>下载 ndk15：</p><p><a href="https://dl.google.com/android/repository/android-ndk-r15c-linux-x86_64.zip">https://dl.google.com/android/repository/android-ndk-r15c-linux-x86_64.zip</a></p><p>建议安装 conda 环境来进行编译</p><p><a href="https://www.anaconda.com/download/success">https://www.anaconda.com/download/success</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create -n dlna  python=2.7<br><br>pip install scons<br><br>conda activate dlna<br></code></pre></td></tr></table></figure><p>编译</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">以你的路径为准，如果出现路径错误，可以改成绝对路径</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">export</span> ANDROID_NDK_ROOT=/home/wesley/ndk/android-ndk-r15c/</span> <br>export ANDROID_NDK_ROOT=~/ndk/android-ndk-r15c/ <br>scons -c target=arm-android-linux build_config=Release<br>scons target=arm-android-linux build_config=Release<br>scons -c target=arm64-android-linux build_config=Release<br>scons target=arm64-android-linux build_config=Release<br>cd Source/Platform/Android/module/platinum<br>~/ndk/android-ndk-r15c/ndk-build clean<br>~/ndk/android-ndk-r15c/ndk-build NDK_DEBUG=0<br></code></pre></td></tr></table></figure><blockquote><p>(dlna) wesley@Wesley:~&#x2F;Project&#x2F;Platinum&#x2F;Source&#x2F;Platform&#x2F;Android&#x2F;module&#x2F;platinum$ ~&#x2F;ndk&#x2F;android-ndk-r15c&#x2F;ndk-build<br>Android NDK: Found platform level in .&#x2F;project.properties. Setting APP_PLATFORM to android-14.<br>jni&#x2F;Android.mk:5: “TARGET_ARCH_ABI:armeabi”<br>jni&#x2F;Android.mk:5: “TARGET_ARCH_ABI:armeabi-v7a”<br>jni&#x2F;Android.mk:5: “TARGET_ARCH_ABI:arm64-v8a”<br>jni&#x2F;Android.mk:15: “build arm64”<br>[armeabi] Compile++ thumb: platinum-jni &lt;&#x3D; platinum-jni.cpp<br>[armeabi] StaticLibrary  : libstdc++.a<br>[armeabi] SharedLibrary  : libplatinum-jni.so<br>[armeabi] Install        : libplatinum-jni.so &#x3D;&gt; libs&#x2F;armeabi&#x2F;libplatinum-jni.so<br>[armeabi-v7a] Compile++ thumb: platinum-jni &lt;&#x3D; platinum-jni.cpp<br>[armeabi-v7a] StaticLibrary  : libstdc++.a<br>[armeabi-v7a] SharedLibrary  : libplatinum-jni.so<br>[armeabi-v7a] Install        : libplatinum-jni.so &#x3D;&gt; libs&#x2F;armeabi-v7a&#x2F;libplatinum-jni.so<br>[arm64-v8a] Compile++      : platinum-jni &lt;&#x3D; platinum-jni.cpp<br>[arm64-v8a] StaticLibrary  : libstdc++.a<br>[arm64-v8a] SharedLibrary  : libplatinum-jni.so<br>[arm64-v8a] Install        : libplatinum-jni.so &#x3D;&gt; libs&#x2F;arm64-v8a&#x2F;libplatinum-jni.so</p></blockquote><p>obj和 libs目录区别：一个用于追溯和调试，一个用于正式版发布。</p><blockquote><p>(dlna) wesley@Wesley:~&#x2F;Project&#x2F;Platinum&#x2F;Source&#x2F;Platform&#x2F;Android&#x2F;module&#x2F;platinum$ file libs&#x2F;arm64-v8a&#x2F;libplatinum-jni.so<br>libs&#x2F;arm64-v8a&#x2F;libplatinum-jni.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]&#x3D;a8cdaa3a1288bd98c13556fbd4a1499e31005091, <strong>stripped</strong></p><p>(dlna) wesley@Wesley:~&#x2F;Project&#x2F;Platinum&#x2F;Source&#x2F;Platform&#x2F;Android&#x2F;module&#x2F;platinum$ file obj&#x2F;local&#x2F;arm64-v8a&#x2F;libplatinum-jni.so<br>obj&#x2F;local&#x2F;arm64-v8a&#x2F;libplatinum-jni.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]&#x3D;a8cdaa3a1288bd98c13556fbd4a1499e31005091, <strong>with debug_info, not stripped</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>投屏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>投屏</tag>
      
      <tag>DLNA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓Activity执行finish后onNewIntent也执行了</title>
    <link href="/article/88a54bc8/"/>
    <url>/article/88a54bc8/</url>
    
    <content type="html"><![CDATA[<p>测试反应投屏时下一集可能播放不成功。</p><p>首先看一下日志：</p><blockquote><p>onCompletion<br>onCast<br>handlerMessage: 2<br>finish: PlayerActivity@abc7fdc<br>onPause: PlayerActivity@abc7fdc<br>onNewIntent: PlayerActivity@abc7fdc<br>onResume: PlayerActivity@abc7fdc<br>onPause: PlayerActivity@abc7fdc<br>onResume: HomeActivity@71ec50a<br>onstop: PlayerActivity@abc7fdc<br>onDestroy:PlayerActivity@abc7fdc</p></blockquote><p>看到日志时很迷惑，为什么 finish 了，安卓还会执行onNewIntent，不应该是新建一个 activity 吗？</p><p>先来看一下场景描述：</p><p>视频播完后会发送一个 finish 信息，如果 3s 内没有下一个视频进来就会执行 finish，有视频进来就会在 onNewIntent 中 remove 掉这条信息。</p><p>经过实验和详细分析后，终于找到了问题原因：</p><p>首先因为视频播放结束发了一条finish消息，finish消息没有执行时突然来了下一集的消息，这时候执行startActivty会插入一条onNewIntent消息。结果，这时候finish因为时间到了，该执行了。然后 finish 执行完后，onNewIntent 也该执行了。执行完后因为 finish 的原因， onDestroy也执行了。结果就是下一集没播完就退出来了。</p><p>解决办法：在startActivity前remove掉finish消息，比onNewIntent 的时间节点还要提前。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>面试必备：Android（9.0）Activity启动流程(一) : <a href="https://juejin.cn/post/6844903959581163528">https://juejin.cn/post/6844903959581163528</a></p><p>面试必备：Android（9.0）Activity启动流程(二) : <a href="https://juejin.cn/post/6844903959589552142">https://juejin.cn/post/6844903959589552142</a></p><p><a href="https://stackoverflow.com/questions/24639272/onnewintent-called-after-finish-executed">android - onNewIntent called after finish() executed - Stack Overflow</a></p>]]></content>
    
    
    <categories>
      
      <category>AndroidBugFix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>AndroidActivity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓应用4字节不对齐导致so加载失败</title>
    <link href="/article/18f59983/"/>
    <url>/article/18f59983/</url>
    
    <content type="html"><![CDATA[<p>今天把一个apk给厂商签名后直接push到机器的&#x2F;system&#x2F;app,结果运行app时显示so找不到。报错：</p><blockquote><p> java stacktrace:<br>java.lang.UnsatisfiedLinkError: Library mmkv not found; tried [&#x2F;system&#x2F;lib&#x2F;libmmkv.so, &#x2F;product&#x2F;lib&#x2F;libmmkv.so]<br>at java.lang.Runtime.loadLibrary0(Runtime.java:1101)<br>at java.lang.System.loadLibrary(System.java:1669)<br>at com.tencent.mmkv.MMKV.doInitialize(MMKV.java:226)<br>at com.tencent.mmkv.MMKV.initialize(MMKV.java:208)<br>at com.tencent.mmkv.MMKV.initialize(MMKV.java:94)<br>at com.wesley.CustomApplication.onCreate(CustomApplication.kt:14)<br>at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1154)<br>at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5871)<br>at android.app.ActivityThread.access$1100(ActivityThread.java:199)<br>at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1650)<br>at android.os.Handler.dispatchMessage(Handler.java:106)<br>at android.os.Looper.loop(Looper.java:193)<br>at android.app.ActivityThread.main(ActivityThread.java:6669)<br>at java.lang.reflect.Method.invoke(Native Method)<br>at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)<br>at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:922)  </p></blockquote><p>日志（xcrash 自己有so异常捕获，所以直到加载 mmkv 才抛出异常）</p><blockquote><p> 12-27 14:58:04.840  9717  9717 E System  : ##loadLibrary0## &#x2F;system&#x2F;app&#x2F;demo&#x2F;demo_V1.0.0(2412261921)-release-signed.apk!&#x2F;lib&#x2F;armeabi-v7a&#x2F;libxcrash.so error: dlopen failed: library “&#x2F;system&#x2F;app&#x2F;demo&#x2F;demo_V1.0.0(2412261921)-release-signed.apk!&#x2F;lib&#x2F;armeabi-v7a&#x2F;libxcrash.so” not found, and try to find so file from the lib path<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper: xcrash: NativeHandler System.loadLibrary failed<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper: java.lang.UnsatisfiedLinkError: Library xcrash not found; tried [&#x2F;system&#x2F;lib&#x2F;libxcrash.so, &#x2F;product&#x2F;lib&#x2F;libxcrash.so]<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at java.lang.Runtime.loadLibrary0(Runtime.java:1101)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at java.lang.System.loadLibrary(System.java:1669)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at xcrash.NativeHandler.initialize(NativeHandler.java:89)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at xcrash.XCrash.init(XCrash.java:189)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.wesley.base.apm.XCrashWrapper.<init>(XCrashWrapper.kt:131)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.wesley.base.apm.XCrashWrapper.<init>(XCrashWrapper.kt:17)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.wesley.CastApplication.attachBaseContext(CastApplication.kt:43)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.Application.attach(Application.java:212)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.Instrumentation.newApplication(Instrumentation.java:1121)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.LoadedApk.makeApplication(LoadedApk.java:1065)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5842)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread.access$1100(ActivityThread.java:199)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1650)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.os.Handler.dispatchMessage(Handler.java:106)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.os.Looper.loop(Looper.java:193)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread.main(ActivityThread.java:6669)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at java.lang.reflect.Method.invoke(Native Method)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:922)  </p></blockquote><p>因为安卓6开始支持直接加载apk内部so，如果编译后的 apk 内部 so 是不压缩的，那么就不需要释放到目录了。所以排除是因为不解压 so 到&#x2F;system&#x2F;app&#x2F;demo&#x2F;lib&#x2F;arm 引起的问题，虽然这样也可以解决问题。</p><blockquote><p>如果apk的minSdkVersion &gt;&#x3D; 23 并且 Android Gradle plugin &gt;&#x3D; 3.6.0情况下，打包时android:extractNativeLibs&#x3D;false，apk的so默认是不压缩的。</p><p>在minSdkVersion &lt; 23 或 Android Gradle plugin &lt; 3.6.0情况下，打包时 android:extractNativeLibs&#x3D;true，apk的so默认是压缩的。</p></blockquote><p>然后，我尝试push没有给厂商签名前的版本 apk 到机器上是正常的，那么应该是厂商签名导致 apk 发生了变化。刚好前几天碰到安卓签名问题<a href="https://iwesley.top/article/133f2b7a/">安卓15预置第三方apk时签名报错问题解决 - Wesley’s Blog</a>。然后我就用命令看了一下：<code>zipalign -c -v  4 demo_sign.apk</code></p><p><a href="https://developer.android.com/tools/zipalign">zipalign  | Android Studio  | Android Developers</a></p><p>显示：<code>Verification FAILED</code>，那就是 4 字节没有对齐。</p><p>查看签名版本<code>apksigner verify -v demo_sign.apk | grep Verified</code></p><p>只有v1签名</p><blockquote><p>~&#x2F;Project$ apksigner verify -v demo_sign.apk | grep Verified</p><p>Verified using v1 scheme (JAR signing): true</p><p>Verified using v2 scheme (APK Signature Scheme v2): false</p><p>Verified using v3 scheme (APK Signature Scheme v3): false</p><p>Verified using v3.1 scheme (APK Signature Scheme v3.1): false</p><p>Verified using v4 scheme (APK Signature Scheme v4): false</p><p>Verified for SourceStamp: false</p></blockquote><p>因为是v1签名，执行<code>zipalign -v -p 4 demo_sign.apk  demo_sign_align.apk</code>对齐4 字节不会破坏厂商的签名信息，然后push进去果然好了。</p><p>然后我又试着安装没有对齐前的，结果直接报错了：</p><blockquote><p>PS C:\Users\Wesley&gt; adb  install Y:\Project\demo_sign.apk</p><p>Performing Streamed Install</p><p>adb: failed to install Y:\Project\demo_sign.apk: Failure [INSTALL_FAILED_INVALID_APK: Failed to extract native libraries, res&#x3D;-2]</p></blockquote><p>但是系统扫描安装却是可以通过的，所以很难发现是字节不对齐引起的。</p><h2 id="深究"><a href="#深究" class="headerlink" title="深究"></a>深究</h2><p>之前直接搜索安卓java.lang.UnsatisfiedLinkError是很难找到针对这种问题的解决方法的。因为现在有了解决办法，所以换成UnsatisfiedLinkError zipalign进行谷歌搜索。结果就出来了：</p><p><a href="https://stackoverflow.com/questions/72544099/java-lang-unsatisfiedlinkerror-when-installing-as-system-app">android - java.lang.UnsatisfiedLinkError when installing as system app - Stack Overflow</a></p><p><a href="https://ask.seowhy.com/question/175285">zipflinger导致的UnsatisfiedLinkError分析 - 搜外SEO问答</a></p><p><a href="https://blog.51cto.com/u_15075514/3336070">zipflinger导致的UnsatisfiedLinkError分析_mb5ff2f24b42377的技术博客_51CTO博客</a></p><p>用 AI大模型总结一下：</p><blockquote><p>这篇文章主要分析了在Android开发中，由于升级Android Gradle Plugin (AGP) 版本导致的UnsatisfiedLinkError问题，并提供了相应的解决方案。以下是文章的主要内容总结：</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><ul><li><strong>问题现象</strong>：在Android 9.0环境下，将AGP从3.6.1升级到4.1.0后，预装在&#x2F;system&#x2F;priv-app下的APP出现了UnsatisfiedLinkError崩溃。</li><li><strong>问题原因</strong>：升级AGP后，系统在加载so文件时失败，具体表现为so文件在APK中的对齐方式有问题。</li></ul><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ul><li><strong>so文件加载流程</strong>：系统使用“!&#x2F;”分隔符来定位so文件路径，并在APK中查找对应的entry。问题出在zipalign处理上，导致so文件的对齐不正确。</li><li><strong>zipalign的作用</strong>：确保APK中所有未压缩数据在4字节边界上对齐，以便使用mmap()直接访问，减少RAM消耗。</li><li><strong>系统编译处理</strong>：Android系统在编译时会对privileged app执行uncompress-dexs操作，将压缩存储的dex文件变为不压缩存储。之后还会进行align-package操作。</li></ul><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><ul><li><strong>zipflinger工具</strong>：从AGP 4.1开始，默认在构建release版本时启用zipflinger工具进行打包。zipflinger改变了APK的打包方式，导致uncompress-dexs操作后zipalign出现问题。</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><strong>禁用zipflinger</strong>：在app工程的gradle.properties中加入配置以禁用zipflinger。</li><li><strong>不解压 dex</strong>：DONT_UNCOMPRESS_PRIV_APPS_DEXS :&#x3D; true，可能会降低 dex 加载速度。</li><li><strong>使用zip2zip工具</strong>：在最新的AOSP源码中，使用zip2zip工具来处理dex文件的解压缩，以适配zipflinger打包的APK。</li><li><strong>其他方法</strong>：包括回退AGP版本、修改系统编译脚本等，但这些方法各有优缺点。</li></ul></blockquote><p>虽然引起问题的原因不一样，但都是因为字节不对齐引起的 so 找不到。</p><p>下面来分析一下具体原因：</p><p>so加载调用栈</p><blockquote><p>ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;lang&#x2F;System.java  –&gt; System.loadLibrary</p><p>ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;lang&#x2F;Runtime.java  –&gt; Runtime.loadLibrary0 -&gt; nativeLoad</p><p>ojluni&#x2F;src&#x2F;main&#x2F;native&#x2F;Runtime.c  –&gt; Runtime_nativeLoad</p><p>art&#x2F;openjdkjvm&#x2F;OpenjdkJvm.cc  –&gt; JVM_NativeLoad</p><p>art&#x2F;runtime&#x2F;java_vm_ext.cc –&gt; JavaVMExt::LoadNativeLibrary</p><p>system&#x2F;core&#x2F;libnativeloader&#x2F;native_loader.cpp –&gt; OpenNativeLibrary</p><p>bionic&#x2F;libdl&#x2F;libdl.cpp –&gt; android_dlopen_ext</p><p>bionic&#x2F;linker&#x2F;dlfcn.cpp –&gt; __loader_android_dlopen_ext</p><p>bionic&#x2F;linker&#x2F;dlfcn.cpp –&gt; dlopen_ext</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; do_dlopen</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; find_library</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; find_libraries</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; find_library_internal</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; load_library</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; open_library</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; open_library_in_zipfile</p></blockquote><p>重点看 <code>bionic/linker/linker.cpp --&gt; open_library_in_zipfile</code> 这个函数，导致加载失败的是以下条件 <code>entry.offset % PAGE_SIZE != 0</code></p><p><a href="http://xrefandroid.com/android-9.0.0_r61/xref/bionic/linker/linker.cpp#992">http://xrefandroid.com/android-9.0.0_r61/xref/bionic/linker/linker.cpp#992</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (entry.method != kCompressStored || (entry.offset % PAGE_SIZE) != <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结来说，就是签名的时候破坏了4字节对齐，导致 so 加载失败。所以，以后碰到此类问题时，可以执行<code>zipalign -c -v  4 xxx.apk</code>先看一下是否4字节对齐。</p>]]></content>
    
    
    <categories>
      
      <category>Android Build System</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>aosp编译</tag>
      
      <tag>Android.mk</tag>
      
      <tag>Android.bp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓多渠道apk配置不同签名</title>
    <link href="/article/611fb416/"/>
    <url>/article/611fb416/</url>
    
    <content type="html"><![CDATA[<p>一般签名都是放在buildTypes里面：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs groovy">...<br>android &#123;<br>    ...<br>    defaultConfig &#123;...&#125;<br>    signingConfigs &#123;<br>        release &#123;<br>            storeFile file(<span class="hljs-string">&quot;myreleasekey.keystore&quot;</span>)<br>            storePassword <span class="hljs-string">&quot;password&quot;</span><br>            keyAlias <span class="hljs-string">&quot;MyReleaseKey&quot;</span><br>            keyPassword <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>    &#125;<br>    buildTypes &#123;<br>        release &#123;<br>            ...<br>            signingConfig signingConfigs.release<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是多渠道时，使用配置的优先级从高到低分别是buildTypes、productFlavor、defaultConfig，如果按上面配置的话，根本修改不了签名。所以修改成以下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    ...<br>    signingConfigs &#123;<br>        release &#123;<br>            storeFile file(<span class="hljs-string">&quot;myreleasekey.keystore&quot;</span>)<br>            storePassword <span class="hljs-string">&quot;password&quot;</span><br>            keyAlias <span class="hljs-string">&quot;MyReleaseKey&quot;</span><br>            keyPassword <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>        demo &#123;<br>            storeFile file(<span class="hljs-string">&quot;myreleasekey.keystore&quot;</span>)<br>            storePassword <span class="hljs-string">&quot;password&quot;</span><br>            keyAlias <span class="hljs-string">&quot;MyReleaseKey&quot;</span><br>            keyPassword <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>    &#125;<br>    defaultConfig &#123;<br>        signingConfig signingConfigs.release <span class="hljs-comment">//默认签名</span><br>    &#125;<br>    buildTypes &#123;<br>        debug&#123;<br>            signingConfig <span class="hljs-literal">null</span> <span class="hljs-comment">//这里一定要置null，否则gralde会插入默认签名</span><br>        &#125;<br>        release&#123;...&#125;<br>    &#125;<br>    <span class="hljs-comment">// Specifies one flavor dimension.</span><br>    flavorDimensions <span class="hljs-string">&quot;version&quot;</span><br>    productFlavors &#123;<br>        demo &#123;<br>            dimension <span class="hljs-string">&quot;version&quot;</span><br>            applicationIdSuffix <span class="hljs-string">&quot;.demo&quot;</span><br>            versionNameSuffix <span class="hljs-string">&quot;-demo&quot;</span><br>            signingConfig signingConfigs.demo <span class="hljs-comment">//渠道签名</span><br>        &#125;<br>        full &#123;<br>            dimension <span class="hljs-string">&quot;version&quot;</span><br>            applicationIdSuffix <span class="hljs-string">&quot;.full&quot;</span><br>            versionNameSuffix <span class="hljs-string">&quot;-full&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>按上面配置完后，渠道可以按照自己需求替换签名了。特别注意debug类型那里要置<code>signingConfig null</code>，否则编译debug版本时签名会不生效，因为gradle会插入默认签名，替换掉渠道的签名。</p>]]></content>
    
    
    <categories>
      
      <category>AppBuild</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Android多渠道</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓15预置第三方apk时签名报错问题解决</title>
    <link href="/article/133f2b7a/"/>
    <url>/article/133f2b7a/</url>
    
    <content type="html"><![CDATA[<p>有同事反馈集成apk时安装失败</p><blockquote><p>PackageManager: Failed to scan &#x2F;product&#x2F;app&#x2F;test: No APK Signature Scheme v2 signature in package &#x2F;product&#x2F;app&#x2F;test&#x2F;test.apk</p></blockquote><p>查看编译后的apk签名信息</p><blockquote><p>DOES NOT VERIFY</p><p>ERROR: JAR signer CERT.RSA: JAR signature META-INF&#x2F;CERT.SF indicates the APK is signed using APK Signature Scheme v2 but no such signature was found. Signature stripped?</p></blockquote><p>但是用命令查看我的apk是正常的<code>apksigner  verify -v  test.apk  | grep Verified</code></p><blockquote><p>Verified using v1 scheme (JAR signing): true</p><p>Verified using v2 scheme (APK Signature Scheme v2): true</p><p>Verified using v3 scheme (APK Signature Scheme v3): false</p><p>Verified using v3.1 scheme (APK Signature Scheme v3.1): false</p><p>Verified using v4 scheme (APK Signature Scheme v4): false</p><p>Verified for SourceStamp: false</p></blockquote><p>那么应该是编译过程做了某些变动。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h2 id="通过预编译的方法"><a href="#通过预编译的方法" class="headerlink" title="通过预编译的方法"></a>通过预编译的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">android_app_import &#123;<br>    name: <span class="hljs-string">&quot;test&quot;</span>,<br>    apk: <span class="hljs-string">&quot;test.apk&quot;</span>,<br>    <span class="hljs-comment">// 保留apk自己的签名</span><br>    presigned: <span class="hljs-literal">true</span>,<br>    preprocessed: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 打开将放到对应分区目录的priv-app文件夹下</span><br>    <span class="hljs-comment">// privileged: true,</span><br>    <span class="hljs-comment">// 打开将放到system_ext分区</span><br>    <span class="hljs-comment">// system_ext_specific: true,</span><br>    <span class="hljs-comment">// 打开将放到product分区</span><br>    <span class="hljs-comment">// product_specific: true,</span><br>    <span class="hljs-comment">// 打开将放到vendor分区</span><br>    <span class="hljs-comment">// proprietary: true,</span><br>    <span class="hljs-comment">// odm分区</span><br>    <span class="hljs-comment">// device_specific: true</span><br>    <span class="hljs-comment">// apk优化，内置三方apk时建议关闭</span><br>    dex_preopt: &#123;<br>        enabled: <span class="hljs-literal">false</span>,<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>在安卓15上新增了<a href="http://xrefandroid.com/android-15.0.0_r1/xref/build/soong/java/app_import.go#376">app_import.go - OpenGrok cross reference for &#x2F;build&#x2F;soong&#x2F;java&#x2F;app_import.go</a></p><p>validatePresignedApk检测</p><p>如果加了presigned，但不加preprocessed，同时targetSdk大于等于30就会编译报错，更加方便开发者定位问题：</p><blockquote><p>[100% 5&#x2F;5 0s remaining] Check presigned apkFAILED: out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stampbuild&#x2F;soong&#x2F;scripts&#x2F;check_prebuilt_presigned_apk.py –aapt2 out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;aapt2 –zipalign out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;zipalign packages&#x2F;test&#x2F;test.apk out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stamppackages&#x2F;test&#x2F;test.apk: Prebuilt, presigned apks with targetSdkVersion &gt;&#x3D; 30 (or a codename targetSdkVersion) must set <strong>preprocessed: true</strong> in the Android.bp definition (because they must be signed with signature v2, and the build system would wreck that signature otherwise)</p></blockquote><p>另外apk里面的so不能压缩，否则会报错</p><blockquote><p>FAILED: out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stamp</p><p>build&#x2F;soong&#x2F;scripts&#x2F;check_prebuilt_presigned_apk.py –aapt2 out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;aapt2 –zipalign out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;zipalign –preprocessed packages&#x2F;test&#x2F;test.apk out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stamp</p><p>packages&#x2F;test&#x2F;test.apk: <strong>Contains compressed JNI libraries</strong></p></blockquote><p>因为安卓6开始支持直接加载apk里面的so，如果压缩的话，预编译会在apk内部进行解压，那么就会破坏apk签名。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412242117760.png" alt="img"></p><p>其实，如果apk的minSdkVersion &gt;&#x3D; 23 并且 Android Gradle plugin &gt;&#x3D; 3.6.0情况下，打包时android:extractNativeLibs&#x3D;false，apk的so默认是不压缩的。</p><p>在minSdkVersion &lt; 23 或 Android Gradle plugin &lt; 3.6.0情况下，打包时 android:extractNativeLibs&#x3D;true，apk的so默认是压缩的。</p><p>参考：<a href="https://juejin.cn/post/6943920550125420558">https://juejin.cn/post/6943920550125420558</a></p><p><a href="https://blog.csdn.net/yzyeilin/article/details/139968840">Android13解决android_app_import内置第三方APK安装失败问题_but no such signature was found. signature strippe-CSDN博客</a></p><p><a href="https://blog.csdn.net/chuyouyinghe/article/details/131001532">浅谈extractNativeLibs</a></p><h2 id="通过直接拷贝的方法"><a href="#通过直接拷贝的方法" class="headerlink" title="通过直接拷贝的方法"></a>通过直接拷贝的方法</h2><p>参考：<a href="https://blog.csdn.net/wangwei6227/article/details/123727372">https://blog.csdn.net/wangwei6227/article/details/123727372</a></p><p>同样要注意apk so的压缩问题，如果是压缩过的，必须提取出来，并拷贝到apk机器目录。</p><h2 id="可能遇到的selinux权限问题"><a href="#可能遇到的selinux权限问题" class="headerlink" title="可能遇到的selinux权限问题"></a>可能遇到的selinux权限问题</h2><blockquote><p>01-01 12:00:39.520000  5326  5326 W om.skype.raider: type&#x3D;1400 audit(0.0:64): avc: denied { read } for name&#x3D;”libSkypeAndroid.so” dev&#x3D;”mmcblk0p22” ino&#x3D;770074 scontext&#x3D;u:r:untrusted_app:s0:c512,c768 tcontext&#x3D;u:object_r:system_data_file:s0 tclass&#x3D;file permissive&#x3D;0</p></blockquote><p>#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; untrusted_app.te &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>allow untrusted_app system_data_file:file r_file_perms;</p><p>参考：<a href="https://www.codeleading.com/article/6471686269/">采用Signature Scheme v2签名方式的APK预置失败 </a></p>]]></content>
    
    
    <categories>
      
      <category>Android Build System</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>aosp编译</tag>
      
      <tag>Android.mk</tag>
      
      <tag>Android.bp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>咪咕视频DLNA投屏跳集问题分析</title>
    <link href="/article/73728aea/"/>
    <url>/article/73728aea/</url>
    
    <content type="html"><![CDATA[<p>QA在测试公司投屏应用时，发现咪咕视频DLNA投剧集时有时候会跳过一集直接播下一集的问题。</p><p>尝试自行分析解决不了后，我决定分析一下竞品应用：当贝投屏，结果发现它是正常的。由于当贝投屏是个黑盒子，所以决定抓包看一下。</p><p><a href="https://www.androidtcpdump.com/android-tcpdump/downloads">Android tcpdump</a></p><p><code>tcpdump tcp -i any -p -s 0 -w /sdcard/capture.pcap</code></p><h2 id="当贝投屏抓包分析"><a href="#当贝投屏抓包分析" class="headerlink" title="当贝投屏抓包分析"></a>当贝投屏抓包分析</h2><p>运行命令后开始投剧集到当贝投屏并通过进度条操作触发切集，把抓包文件adb pull出来放到WireShark去分析。</p><p>由于DLNA建连后的命令交互是通过http的，所以这里只显示http协议，并通过搜索SetAVTransportURI定位到投屏时间点。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082026499-wireshark.jpg" alt="img_v3_02h8_65bf3dab-7966-48b1-bdaa-8343bca7898g"></p><p>首先看一下即将切集前手机端获取到的信息：</p><p>可以看到影片的时长和进度都有值，快播完了。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082039758-wireshark.jpg" alt="img_v3_02h8_fe3604f0-5242-41b8-b950-fab2c62663dg"></p><p>切集时：</p><p>手机端获取到的播放状态是stopped，影片时长和进度都是0</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082042875.jpg" alt="img_v3_02h8_954cb5c2-08c9-47ec-8d47-0c14b51b600g"></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082041740.jpg" alt="img_v3_02h8_613904b8-aa1e-4128-b904-164ff238ed3g"></p><p>切集后：</p><p>手机端获取的信息正常</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082044535.jpg" alt="img_v3_02h8_f8a5dc01-ae9d-47d8-9abc-0a395a68bd8g"></p><h2 id="我司投屏抓包分析"><a href="#我司投屏抓包分析" class="headerlink" title="我司投屏抓包分析"></a>我司投屏抓包分析</h2><p>切集前：</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082045162.jpg" alt="img_v3_02h8_ef543816-16f1-4e55-a74b-e703ef21e46g"></p><p>切集后：</p><p>获取到的影片进度和时长都是上个视频的信息，导致咪咕产生了误判断，认为这一集也播完了，造成跳集。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082045275.jpg" alt="img_v3_02h8_dac2eede-52f2-4137-8b42-18b7081eaaeg"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>收到手机端的stop指令后，立即将播放状态置stopped，同时将影片时长和进度也置0。此外，还要拦截播放器到手机端的状态同步直到新的视频起播。</p><p>另外还要注意处理线程调度延迟的问题，如果stop指令和setUri指令发送时间比较接近，虽然看起来是stop在前，setUri在后，但如果是在不同线程回调上来的，可能存在setUri先执行的情况，要注意处理这种情况，避免误退出。</p>]]></content>
    
    
    <categories>
      
      <category>投屏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>投屏</tag>
      
      <tag>DLNA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android.mk基础知识</title>
    <link href="/article/eaba12cd/"/>
    <url>/article/eaba12cd/</url>
    
    <content type="html"><![CDATA[<p>Android 浅度解析：mk预置AAR、SO文件、APP包和签名-阿里云开发者社区: <a href="https://developer.aliyun.com/article/1488469">https://developer.aliyun.com/article/1488469</a></p><p>android系统添加预置APP（so库自动释放) - 庚拓天下 - 博客园: <a href="https://www.cnblogs.com/genggeng/p/10563585.html">https://www.cnblogs.com/genggeng/p/10563585.html</a></p><p>使用@符号和不使用@符号的区别<br>在Android.mk中，使用@符号和不使用@符号有一些区别：<br>? 使用@符号可以提高性能，因为不需要解压和拷贝SO文件，也可以节省空间，因为不需要存储多余的SO文件。<br>? 不使用@符号可以提高兼容性，因为可以针对不同的平台提供相应的SO文件，而不需要考虑APK中是否有对应平台的SO文件。</p>]]></content>
    
    
    <categories>
      
      <category>Android Build System</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓Makefile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android APP drawable不同文件夹的用法</title>
    <link href="/article/b1dcee32/"/>
    <url>/article/b1dcee32/</url>
    
    <content type="html"><![CDATA[<p>Screen compatibility: <a href="https://developer.android.com/guide/practices/screens_support.html">https://developer.android.com/guide/practices/screens_support.html</a></p><p>App resources: <a href="https://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources">https://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources</a></p><p>Support different pixel densities: <a href="https://developer.android.com/training/multiscreen/screendensities">https://developer.android.com/training/multiscreen/screendensities</a></p><p>Drawable resources : <a href="https://developer.android.com/guide/topics/resources/drawable-resource">https://developer.android.com/guide/topics/resources/drawable-resource</a></p><p>res&#x2F;drawable&#x2F; is a legacy synonym for res&#x2F;drawable-mdpi&#x2F;, indicating that the drawables in that directory are set for mdpi density. If the device is running another density, those images will be downsampled (to ldpi) or upsampled (to anything else) to match the device density.</p><p>res&#x2F;drawable-nodpi&#x2F; says “these drawables should not be resampled for any density, but instead should be used as-is on all densities”.</p><p>drawable-nodpi will bypass scaling and drawable will use the default scaling:</p><p>mdpi &#x3D; 1x<br>hdpi &#x3D; 1.5x<br>xhdpi &#x3D; 2x<br>xxhdpi &#x3D; 3x<br>xxxhdpi &#x3D; 4x<br>drawable-nodpi is efficient if your code will be doing its own scaling (or no scaling) and you don’t want the image pre-scaled by Android.</p><p>There is also drawable-anydpi, just to make things more confusing.</p><p>drawable with no specifications will be used if an exact match on density and screen specifications does not exist. drawable-nodpi will be used after drawable.</p><p>UPDATE If you have both drawable and drawble-nodpi, the select order is either a more complex rule not documented or Android is broken. Through experimentation I confirmed that devices with screen density &lt; xhdpi will correctly select the drawable image. Devices with screen density &gt;&#x3D; xhdpi will select the drawable-nodpi.</p><p>Selection rule: 1. Pick match to screen density, one of these:</p><p>drawable-ldpi<br>drawable-mdpi<br>drawable-hdpi<br>drawable-xhdpi<br>drawable-xxhdpi<br>drawable-xxxhdpi<br>If no match on density, then select one of these<br>drawable (automatic scaling mdpi&#x3D;none… xxxhdpi&#x3D;4x)<br>drawable-nodpi (no scaling)<br>drawable-tvdpi<br>drawable-anydpi (no scaling)</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>android - Will a density qualified drawable folder or drawable-nodpi take precedence? - Stack Overflow: <a href="https://stackoverflow.com/questions/24682094/will-a-density-qualified-drawable-folder-or-drawable-nodpi-take-precedence">https://stackoverflow.com/questions/24682094/will-a-density-qualified-drawable-folder-or-drawable-nodpi-take-precedence</a></p><p>android - What is the difference between putting images in drawable and drawable-nodpi folder? - Stack Overflow: <a href="https://stackoverflow.com/questions/33631995/what-is-the-difference-between-putting-images-in-drawable-and-drawable-nodpi-fol">https://stackoverflow.com/questions/33631995/what-is-the-difference-between-putting-images-in-drawable-and-drawable-nodpi-fol</a></p><p>玩转Android drawable图片适配 - 漫思 - 博客园: <a href="https://www.cnblogs.com/sexintercourse/p/17020569.html">https://www.cnblogs.com/sexintercourse/p/17020569.html</a></p><p>Android 适配（drawable文件夹）图片适配（二） - 张亚楠 - 博客园: <a href="https://www.cnblogs.com/huihuizhang/p/9473698.html">https://www.cnblogs.com/huihuizhang/p/9473698.html</a></p><p>android（drawable文件夹）图片适配_drawable是什么文件-CSDN博客: <a href="https://blog.csdn.net/xuaho0907/article/details/72848520#:~:text=%E5%A6%82%E6%9E%9C%E5%9B%BE%E7%89%87%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95%E4%B8%BA,%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F%EF%BC%8C%E4%B8%8D%E8%BF%9B%E8%A1%8C%E7%BC%A9%E6%94%BE%E3%80%82&text=drawable%2Dnodpi%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E8%BF%99%E4%B8%AA,%E5%B0%B1%E4%BC%9A%E5%AE%9E%E9%99%85%E5%B1%95%E7%A4%BA%E5%A4%9A%E5%A4%A7%E3%80%82">https://blog.csdn.net/xuaho0907/article/details/72848520#:~:text=%E5%A6%82%E6%9E%9C%E5%9B%BE%E7%89%87%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95%E4%B8%BA,%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F%EF%BC%8C%E4%B8%8D%E8%BF%9B%E8%A1%8C%E7%BC%A9%E6%94%BE%E3%80%82&amp;text=drawable%2Dnodpi%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E8%BF%99%E4%B8%AA,%E5%B0%B1%E4%BC%9A%E5%AE%9E%E9%99%85%E5%B1%95%E7%A4%BA%E5%A4%9A%E5%A4%A7%E3%80%82</a></p><p>Android知识体系之drawable文件夹顺序 - 作业部落 Cmd Markdown 编辑阅读器: <a href="https://www.zybuluo.com/TryLoveCatch/note/590965">https://www.zybuluo.com/TryLoveCatch/note/590965</a></p><p>Android drawable文件夹那些事_安卓drawable文件夹的作用-CSDN博客: <a href="https://blog.csdn.net/qq_34341338/article/details/86706751">https://blog.csdn.net/qq_34341338/article/details/86706751</a></p>]]></content>
    
    
    <categories>
      
      <category>安卓APP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>AndroidAPPUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android ADB 常用命令</title>
    <link href="/article/dfa112ac/"/>
    <url>/article/dfa112ac/</url>
    
    <content type="html"><![CDATA[<h2 id="toybox和busybox"><a href="#toybox和busybox" class="headerlink" title="toybox和busybox"></a>toybox和busybox</h2><p><a href="https://blog.csdn.net/weixin_44311012/article/details/130203207">toybox 和 busybox 的作用</a></p><p>am monitor  可以持续监控App的包名，当切换应用时，如果包名有变化，就会在终端输出</p><h2 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h2><p>查看audio的全部信息（各音频流音量，焦点，策略等）</p><p>dumpsys audio</p><h3 id="音量"><a href="#音量" class="headerlink" title="音量"></a>音量</h3><h4 id="按键方式"><a href="#按键方式" class="headerlink" title="按键方式"></a>按键方式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">增加</span><br>input keyevent 24<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">减少</span><br>input keyevent 25<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">静音</span><br>input keyevent 164<br></code></pre></td></tr></table></figure><h4 id="media命令"><a href="#media命令" class="headerlink" title="media命令"></a>media命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设置音量并且显示音量UI</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3 代表STREAM_SYSTEM</span><br>media volume --show --stream 3 --set 11 <br>media volume --show --stream 3 --adj raise<br>media volume --show --stream 0 --adj lower<br>media volume --show --stream 3 --get<br><span class="hljs-meta prompt_">#</span><span class="language-bash">控制播放暂停</span><br>media dispatch play<br>media dispatch pause<br></code></pre></td></tr></table></figure><p>安卓 11 开始 media 命令没有了，使用<code>cmd media_session</code> </p><p><code>cmd media_session  volume  --stream 3 --get</code></p><p><code>cmd media_session  volume --show --stream 3 --set 11</code></p><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p><code>service call audio</code></p><p><code>adb shell service call audio 9 i32 &lt;编号&gt; i32 &lt;类型&gt; i32 1</code></p><p>使用ADB调整Android设备音量及解决常见问题-CSDN博客: <a href="https://blog.csdn.net/run068/article/details/122824920">https://blog.csdn.net/run068/article/details/122824920</a></p>]]></content>
    
    
    <categories>
      
      <category>Android调试相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android APP组件化</title>
    <link href="/article/69eef408/"/>
    <url>/article/69eef408/</url>
    
    <content type="html"><![CDATA[<h2 id="前导知识"><a href="#前导知识" class="headerlink" title="前导知识"></a>前导知识</h2><p>配置 build 变体 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/build/build-variants?hl=zh-cn#groovy">https://developer.android.com/build/build-variants?hl=zh-cn#groovy</a></p><p>Android模块化之MicroModule（微信Pins工程）相信你看过微信关于模块化的分享《微信Android模块化 - 掘金: <a href="https://juejin.cn/post/6844903647956959246?from=search-suggest">https://juejin.cn/post/6844903647956959246?from=search-suggest</a></p><p>怎么实现微信Android Pins工程结构？Pins工程结构是什么？ 如何做代码边界检查？ - 掘金: <a href="https://juejin.cn/post/6844903602645893128">https://juejin.cn/post/6844903602645893128</a></p><p>微信Android模块化架构重构实践: <a href="https://mp.weixin.qq.com/s/6Q818XA5FaHd7jJMFBG60w">https://mp.weixin.qq.com/s/6Q818XA5FaHd7jJMFBG60w</a></p><p>美团外卖Android平台化架构演进实践 - 美团技术团队: <a href="https://tech.meituan.com/2018/03/16/meituan-food-delivery-android-architecture-evolution.html">https://tech.meituan.com/2018/03/16/meituan-food-delivery-android-architecture-evolution.html</a></p><p>Android消息总线的演进之路：用LiveDataBus替代RxBus、EventBus - 美团技术团队: <a href="https://tech.meituan.com/2018/07/26/android-livedatabus.html">https://tech.meituan.com/2018/07/26/android-livedatabus.html</a></p><p>Android组件化方案及组件消息总线modular-event实战 - 美团技术团队: <a href="https://tech.meituan.com/2018/12/20/modular-event.html">https://tech.meituan.com/2018/12/20/modular-event.html</a></p><p>创建 Android 库 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/studio/projects/android-library?hl=zh-cn">https://developer.android.com/studio/projects/android-library?hl=zh-cn</a></p><p>添加 build 依赖项 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/build/dependencies?hl=zh-cn">https://developer.android.com/build/dependencies?hl=zh-cn</a></p><p>高级测试设置 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/studio/test/advanced-test-setup?hl=zh-cn#create-instrumented-test-for-build-variant">https://developer.android.com/studio/test/advanced-test-setup?hl=zh-cn#create-instrumented-test-for-build-variant</a></p><p>Andriod 多渠道分包，实用的module分层，开发代码混淆规Andriod studio 3.0 有必要重新学习更 - 掘金: <a href="https://juejin.cn/post/6844903518411702286">https://juejin.cn/post/6844903518411702286</a> （混淆规则）</p><h2 id="资源冲突"><a href="#资源冲突" class="headerlink" title="资源冲突"></a>资源冲突</h2><p>Android 组件资源覆盖冲突解决方案在 Android 的日常开发中，我们会使用到大量的第三方库或者自己编写的组件库 - 掘金: <a href="https://juejin.cn/post/6844903993894780942">https://juejin.cn/post/6844903993894780942</a></p><p><a href="https://github.com/hust201010701/CheckResourceConflict">https://github.com/hust201010701/CheckResourceConflict</a></p><p>Android Gradle Plugin 3.3 版本及其以上，提供了一个 API 可以获取编译所有的资源文件。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs groovy">variants.forEach &#123; variant -&gt;<br>    variant <span class="hljs-keyword">as</span> BaseVariantImpl<br>    <span class="hljs-comment">// files 即对应所有的编译资源</span><br>    <span class="hljs-keyword">def</span> files = variant.allRawAndroidResources.files<br><br></code></pre></td></tr></table></figure><p>终于理解～Android 模块化里的资源冲突? 前言 作为 Android 开发者，我们常常需要去管理非常多不同的资源文 - 掘金: <a href="https://juejin.cn/post/7170562275374268447">https://juejin.cn/post/7170562275374268447</a></p><p>利用Android Gradle进行自动化设置资源名命名规则一、背景描述： ????公司再不断推进组件化，多个Modul - 掘金: <a href="https://juejin.cn/post/7065889116780494855">https://juejin.cn/post/7065889116780494855</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;  <br>  <br>  flavorDimensions <span class="hljs-string">&quot;versionCode&quot;</span>  <br>  <br>  productFlavors &#123;  <br>      productFlavors.all &#123;<span class="hljs-comment">//遍历productFlavors多渠道，设置渠道号（xiaomi 、huawei）  </span><br>          flavor -&gt; flavor.manifestPlaceholders.put(<span class="hljs-string">&quot;CHANNEL&quot;</span>, name)  <br>      &#125;<br>  &#125;<br>  applicationVariants.all &#123; variant -&gt;  <br>      <span class="hljs-comment">// 打包完成后输出路径</span><br>      <span class="hljs-keyword">def</span> name = ((project.name != <span class="hljs-string">&quot;app&quot;</span>) ? project.name : rootProject.name.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>)) + <br>      <span class="hljs-string">&quot;_&quot;</span> + variant.flavorName + <br>      <span class="hljs-string">&quot;_&quot;</span> + variant.buildType.name + <br>      <span class="hljs-string">&quot;_&quot;</span> + variant.versionName + <br>      <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-keyword">new</span> Date().format(<span class="hljs-string">&#x27;yyyyMMddhhmm&#x27;</span>) + <span class="hljs-string">&quot;.apk&quot;</span>  <br>      <span class="hljs-comment">//相对路径app/build/outputs/apk/huawei/release/</span><br>      <span class="hljs-keyword">def</span> path = <span class="hljs-string">&quot;../../../../../apk/&quot;</span> <span class="hljs-comment">//相当于路径 app/apk/</span><br>      variant.outputs.each &#123; output -&gt;<br>          <span class="hljs-keyword">def</span> outputFile = output.outputFile<br>          <span class="hljs-keyword">if</span> (outputFile != <span class="hljs-literal">null</span> &amp;&amp; outputFile.name.endsWith(<span class="hljs-string">&#x27;.apk&#x27;</span>)) &#123;<br>               <span class="hljs-comment">//指定路径输出</span><br>               output.outputFileName = <span class="hljs-keyword">new</span> File(path, name)<br>          &#125;<br>      &#125; <br>      <span class="hljs-comment">// 在打包完成后还可以做一些别的操作，可以复制到指定目录，或者移动文件到指定目录</span><br>      variant.assemble.doLast &#123;  <br>          File out = <span class="hljs-keyword">new</span> File(“$&#123;project.rootDir&#125;/apk”)  <br>          variant.outputs.forEach &#123; file -&gt;  <br>            <span class="hljs-comment">//复制apk到指定文件夹</span><br>            <span class="hljs-comment">//copy &#123;  </span><br>            <span class="hljs-comment">//  from file.outputFile  </span><br>            <span class="hljs-comment">//  into out  </span><br>            <span class="hljs-comment">//&#125;</span><br>         <span class="hljs-comment">//把文件移动到指定文件夹  </span><br>          ant.move <span class="hljs-attr">file:</span> file.outputFile,  <br>                 <span class="hljs-symbol">todir:</span> <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/apk&quot;</span><br>        &#125;  <br>      &#125; <br>  &#125;<br><span class="hljs-comment">//多渠道签名的配置</span><br>  signingConfigs &#123;<br>     test &#123;<br>        storeFile file(<span class="hljs-string">&quot;../test.keystore&quot;</span>)<br>        storePassword <span class="hljs-string">&#x27;test&#x27;</span><br>        keyAlias <span class="hljs-string">&#x27;test&#x27;</span><br>        keyPassword <span class="hljs-string">&#x27;test&#x27;</span><br>        v1SigningEnabled <span class="hljs-literal">true</span><br>        v2SigningEnabled <span class="hljs-literal">true</span><br>     &#125;<br>     xiaomi &#123;<br>        storeFile file(<span class="hljs-string">&quot;../xiaomi.keystore&quot;</span>)<br>        storePassword <span class="hljs-string">&#x27;xiaomi&#x27;</span><br>        keyAlias <span class="hljs-string">&#x27;xiaomi&#x27;</span><br>        keyPassword <span class="hljs-string">&#x27;xiaomi&#x27;</span><br>        v1SigningEnabled <span class="hljs-literal">true</span><br>        v2SigningEnabled <span class="hljs-literal">true</span><br>     &#125;<br>  &#125;<br>  buildTypes &#123;<br>       debug &#123;<br><span class="hljs-comment">//        debug这里设置不起作用，可能是编译器的问题？</span><br><span class="hljs-comment">//         productFlavors.xiaomi.signingConfig signingConfigs.test</span><br><span class="hljs-comment">//         productFlavors.huawei.signingConfig signingConfigs.test</span><br>       &#125;<br>       release &#123;<br>           productFlavors.xiaomi.signingConfig signingConfigs.xiaomi<br>           productFlavors.huawei.signingConfig signingConfigs.huawei<br>       &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    variantFilter &#123; variant -&gt;<br>        <span class="hljs-keyword">if</span> (variant.buildType.name.equals(<span class="hljs-string">&#x27;debug&#x27;</span>)) &#123;<br>            variant.setIgnore(<span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">//执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。</span><br>    lintOptions &#123;<br>        checkReleaseBuilds <span class="hljs-literal">false</span><br>        abortOnError <span class="hljs-literal">false</span><br>        <span class="hljs-comment">// 防止在发布的时候出现因MissingTranslation导致Build Failed!</span><br>        disable <span class="hljs-string">&#x27;MissingTranslation&#x27;</span><br>    &#125;<br> <br>    dexOptions &#123;<br>        incremental <span class="hljs-literal">true</span><br>        javaMaxHeapSize <span class="hljs-string">&quot;8g&quot;</span><br>        jumboMode = <span class="hljs-literal">true</span><br>        preDexLibraries = <span class="hljs-literal">false</span><br>        threadCount =<span class="hljs-string">&quot;8&quot;</span><br>    &#125;<br><br></code></pre></td></tr></table></figure><p>missingDimensionStrategy </p><p>配置产品变种productFlavors matchingFallbacks missingDimensionStrategy - 简书: <a href="https://www.jianshu.com/p/4b311bd9840d">https://www.jianshu.com/p/4b311bd9840d</a></p><p>gradle - Android buildTypes vs. productFlavors error - Stack Overflow: <a href="https://stackoverflow.com/questions/64758477/android-buildtypes-vs-productflavors-error">https://stackoverflow.com/questions/64758477/android-buildtypes-vs-productflavors-error</a></p><p>ProductFlavor多渠道的神器 - 简书: <a href="https://www.jianshu.com/p/00ceb35b090b">https://www.jianshu.com/p/00ceb35b090b</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Android 多渠道打包多渠道配置（2 种方式） 1、可写在主模块（app）的 build.gradle 下 2、在项 - 掘金: <a href="https://juejin.cn/post/7023661293781385247">https://juejin.cn/post/7023661293781385247</a></p><p>Gradle多渠道打包(动态设定App名称，应用图标，替换常量，更改包名，变更渠道) - 简书: <a href="https://www.jianshu.com/p/533240d222d3">https://www.jianshu.com/p/533240d222d3</a></p><p>Android 官方模块化方案解读快速了解 Android 官方模块化方案。还有一些你可能不知道的实用小技巧。还有官方模 - 掘金: <a href="https://juejin.cn/post/7142884855091560479">https://juejin.cn/post/7142884855091560479</a></p>]]></content>
    
    
    <categories>
      
      <category>AndroidAPP架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>AndroidAPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tencent mars Xlog编译及使用方法</title>
    <link href="/article/ca471381/"/>
    <url>/article/ca471381/</url>
    
    <content type="html"><![CDATA[<p>Window11编译</p><blockquote><p>如果已经安装了cygwin，不需要卸载重装，只需要再次运行安装文件setup-x86_64.exe就可以下载或者卸载包。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>AndroidThirdPartSDK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>AndroidThirdPartySDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git常见问题</title>
    <link href="/article/ca7dd2f8/"/>
    <url>/article/ca7dd2f8/</url>
    
    <content type="html"><![CDATA[<p>gerrit draft and topic |: <a href="https://breezetemple.github.io/2019/08/30/gerrit-draft-and-topic/">https://breezetemple.github.io/2019/08/30/gerrit-draft-and-topic/</a></p><p>Gerrit相对Git提供了一个特有的命名空间refs&#x2F;for&#x2F;用来定义我们的提交上传到哪个branch，且可以用来区分我们的commit是提交到Gerrit进行审核还是直接提交到Git仓库，格式如下：</p><p>refs&#x2F;for&#x2F;<target-branch></p><p>Push 一个 Commit 到 Gerrit: git push origin HEAD:refs&#x2F;for&#x2F;master<br>直接 Push 一个 commit 到 Git 仓库：（默认配置成不允许） git push origin HEAD:master<br>当commit Push到Gerrit等待review时，Gerrit会将此commit保存在一个名为refs&#x2F;changes&#x2F;xx&#x2F;yy&#x2F;zz的一个暂存branch中。</p><p>zz为这个commit的patch set号<br>yy是change号<br>xx是change号的后两位</p><p>Draft<br>refs&#x2F;drafts&#x2F;<target branch></p><p>$ git push origin HEAD:refs&#x2F;drafts&#x2F;xxx<br>在Gerrit中点击Publish按钮转换为正式Change</p><p>Topic<br>refs&#x2F;for&#x2F;<target branch><br>refs&#x2F;for&#x2F;<target branch>&#x2F;<topic name></p><p>$ git push origin HEAD:refs&#x2F;for&#x2F;xxx%topic&#x3D;123<br>$ git push origin HEAD:refs&#x2F;for&#x2F;xxx&#x2F;123<br>Topic用于归类相关的提交，可以用上述的命令，同时可以在Gerrit中编辑Topic</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>为 http 设置代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">一次性代理</span><br>git clone -c http.proxy=&quot;http://127.0.0.1:1087&quot; https://github.com/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">全局设置代理</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">仅为github.com设置socks5代理</span><br>git config --global http.https://github.com.proxy socks5://127.0.0.1:1086<br><br>git config --global https.proxy http://127.0.0.1:1080<br><br>git config --global https.proxy https://127.0.0.1:1080<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">取消</span><br><br>git config --global --unset http.proxy<br><br>git config --global --unset https.proxy<br></code></pre></td></tr></table></figure><p>为 ssh 协议设置代理</p><blockquote><p>下文配置其中的ip和端口修改成你自己代理的参数</p></blockquote><p>windows</p><p>修改C:\Users${your username}.ssh目录下的config文件，若没有则新建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com                                                <br>    Hostname ssh.github.com                                    <br>    Port 443                                                  <br>    User git<br>    ProxyCommand connect -S 127.0.0.1:7890 %h %p<br></code></pre></td></tr></table></figure><p>Linux、MacOS</p><p>修改~&#x2F;.ssh目录下的config文件，若没有则新建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com<br>        Hostname ssh.github.com<br>        Port 443<br>        User git<br>        ProxyCommand nc -v -x 172.28.208.1:7890 %h %p<br></code></pre></td></tr></table></figure><p>验证</p><p><code>ssh -T git@github.com</code></p><p>若出现错误，则删除.ssh目录中known_hosts文件重试</p><p><a href="https://seepine.com/git/ssh-proxy/">Git 为 ssh 协议设置代理 - Seepine’s Blog</a></p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Activity常见问题</title>
    <link href="/article/a218b21a/"/>
    <url>/article/a218b21a/</url>
    
    <content type="html"><![CDATA[<p>android finishAffinity()-CSDN博客: <a href="https://blog.csdn.net/mr_orange_klj/article/details/43244603">https://blog.csdn.net/mr_orange_klj/article/details/43244603</a></p><p>调用activity对象的finishiAffinity()方法，可以关闭当前activity所属的activity栈中所有的activity。如果所有activity都保存在默认栈中，则使用该方法会直接退出程序。如果要回到程序的主界面，则可以在manifest文件中将主界面的activity设置为单独的栈保存。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">activity</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.weishi.UserMain&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:taskAffinity</span>=<span class="hljs-string">&quot;:finish&quot;</span>//<span class="hljs-attr">该句用来指定栈</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:label</span>=<span class="hljs-string">&quot;@string/title_activity_user_main&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>AndroidActivity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓常用工具方法</title>
    <link href="/article/bf556c88/"/>
    <url>/article/bf556c88/</url>
    
    <content type="html"><![CDATA[<p>获取进程名字</p><p>【Android】获取当前进程名的四种方法及效率对比_android获取当前进程名-CSDN博客: <a href="https://blog.csdn.net/qq_23049111/article/details/126097443">https://blog.csdn.net/qq_23049111/article/details/126097443</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getAppProcessName</span><span class="hljs-params">()</span></span>: String &#123;<br>    <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.P) &#123;<br>        <span class="hljs-keyword">return</span> Application.getProcessName()<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR2) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">val</span> processName =<br>                Reflector.on(<span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>).method(<span class="hljs-string">&quot;currentProcessName&quot;</span>)<br>                    .call&lt;String&gt;()<br>            Log.d(TAG, <span class="hljs-string">&quot;getAppProcessName: <span class="hljs-variable">$processName</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> processName<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;getAppProcessName error&quot;</span>, e)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//安卓4.2的的currentPackageName实际上就是currentProcessName</span><br>            <span class="hljs-comment">//http://xrefandroid.com/android-4.2.2_r1/xref/frameworks/base/core/java/android/app/ActivityThread.java</span><br>            <span class="hljs-keyword">val</span> processName =<br>                Reflector.on(<span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>).method(<span class="hljs-string">&quot;currentPackageName&quot;</span>)<br>                    .call&lt;String&gt;()<br>            Log.d(TAG, <span class="hljs-string">&quot;getAppProcessName: <span class="hljs-variable">$processName</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> processName<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;getAppProcessName error&quot;</span>, e)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取应用名称</p><p>Android 获取应用的icon、名字、版本号_查看安卓app类名-CSDN博客: <a href="https://blog.csdn.net/LoveDou0816/article/details/78135201">https://blog.csdn.net/LoveDou0816/article/details/78135201</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> Context.<span class="hljs-title">getAppName</span><span class="hljs-params">(pkgName: <span class="hljs-type">String</span>)</span></span>: String &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">val</span> info: PackageInfo = packageManager.getPackageInfo(pkgName, <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">//resources.getString(info.applicationInfo.labelRes)</span><br>        info.applicationInfo.loadLabel(packageManager).toString() <span class="hljs-comment">//兼容android:label=&quot;$&#123;APP_NAME&#125;&quot;</span><br>    &#125; <span class="hljs-keyword">catch</span> (e: PackageManager.NameNotFoundException) &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;getAppName error&quot;</span>, e)<br>        <span class="hljs-string">&quot;&quot;</span><br>    &#125; <span class="hljs-keyword">catch</span> (e: Resources.NotFoundException) &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;getAppName error&quot;</span>, e)<br>        <span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>AndroidUtils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gradle常见问题</title>
    <link href="/article/a7bee58f/"/>
    <url>/article/a7bee58f/</url>
    
    <content type="html"><![CDATA[<h1 id="aar相关"><a href="#aar相关" class="headerlink" title="aar相关"></a>aar相关</h1><h2 id="添加aar包依赖"><a href="#添加aar包依赖" class="headerlink" title="添加aar包依赖"></a>添加aar包依赖</h2><p>gradle - How to include different .aar depending on the android build variant - Stack Overflow: <a href="https://stackoverflow.com/questions/41373333/how-to-include-different-aar-depending-on-the-android-build-variant">https://stackoverflow.com/questions/41373333/how-to-include-different-aar-depending-on-the-android-build-variant</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs groovy">configurations.maybeCreate(<span class="hljs-string">&quot;default&quot;</span>)<br>artifacts.add(<span class="hljs-string">&quot;default&quot;</span>, file(<span class="hljs-string">&#x27;xyz.aar&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>包装本地 aar 的模块中禁止包含任何代码和资源文件，包括库或 AndroidManifest。即使包含，也无法生效；如果有多个本地的aar需要引用，需要分别创建工程目录及build.gradle文件。</p></blockquote><p>AndroidStudio根据环境打包不同的aar文件 - 简书: <a href="https://www.jianshu.com/p/bc61ed8dcce3">https://www.jianshu.com/p/bc61ed8dcce3</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy">configurations.maybeCreate(<span class="hljs-string">&quot;default&quot;</span>)<br>artifacts.add(<span class="hljs-string">&quot;default&quot;</span>, file(<span class="hljs-string">&#x27;demolib_release.aar&#x27;</span>))<br>configurations.maybeCreate(<span class="hljs-string">&quot;debug&quot;</span>)<br>artifacts.add(<span class="hljs-string">&quot;debug&quot;</span>, file(<span class="hljs-string">&#x27;demolib_debug.aar&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>    implementation project(<span class="hljs-string">&#x27;:demolib&#x27;</span>)<br>    debugImplementation project(<span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;:demolib&#x27;</span>, <span class="hljs-attr">configuration:</span> <span class="hljs-string">&#x27;debug&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>【Android】如何引入本地 aar？ 原生集成常见问题 - 开发指南 - 开发文档 - 飞书开放平台: <a href="https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/native-integration/native-integration-qa">https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/native-integration/native-integration-qa</a></p><h2 id="编译成app后aar里面的资源找不到，实际上aar里面有"><a href="#编译成app后aar里面的资源找不到，实际上aar里面有" class="headerlink" title="编译成app后aar里面的资源找不到，实际上aar里面有"></a>编译成app后aar里面的资源找不到，实际上aar里面有</h2><p>把apk放到android studio 查看里面的资源情况，一般是由于资源冲突被其他module资源替换了</p>]]></content>
    
    
    <categories>
      
      <category>AppBuild</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gradle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓相关知识点网站</title>
    <link href="/article/ed7f9345/"/>
    <url>/article/ed7f9345/</url>
    
    <content type="html"><![CDATA[<h1 id="开发者文档"><a href="#开发者文档" class="headerlink" title="开发者文档"></a>开发者文档</h1><p>OPPO 开放平台-OPPO开发者服务中心: <a href="https://open.oppomobile.com/new/wiki">https://open.oppomobile.com/new/wiki</a></p><p>OPPO 开放平台-安卓版本适配: <a href="https://open.oppomobile.com/new/developmentDoc/info?id=10960">https://open.oppomobile.com/new/developmentDoc/info?id=10960</a></p><p>Java教程 - 廖雪峰的官方网站: <a href="https://liaoxuefeng.com/books/java/introduction/index.html">https://liaoxuefeng.com/books/java/introduction/index.html</a></p><p>查看各版本行为变更: <a href="https://developer.android.com/about/versions">https://developer.android.com/about/versions</a></p><h1 id="Android-APP"><a href="#Android-APP" class="headerlink" title="Android APP"></a>Android APP</h1><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><p><a href="https://developer.android.com/build/configure-apk-splits?hl=zh-cn">构建多个 APK ?|? Android Studio ?|? Android Developers</a></p><p>迁移到 Gradle 7.x 使用 Version Catalogs 管理依赖 - SharpCJ - 博客园: <a href="https://www.cnblogs.com/joy99/p/17397989.html">https://www.cnblogs.com/joy99/p/17397989.html</a></p><p>Android Studio开发环境兼容性梳理（AGP、KGP、Gradle）本文主要介绍了Android Studio - 掘金: <a href="https://juejin.cn/post/7362924623825403919">https://juejin.cn/post/7362924623825403919</a></p><p>AweiLoveAndroid&#x2F;The-pit-of-the-Android-Studio: :octocat: :+1: :clap: :star2: :star: Everything about the Android Studio and Intellij IDEAfor example:Install,common problems and solutions,each libraries for android and androidx library,code and peoject templates,etc.全面总结Android Studio以及Intellij IDEA的填坑指南，详解AS版本号、Gradle版本、BuildTools三者的对照关系，AS模板配置,gradle插件,Android自带注解库详解，support详解等干货。: <a href="https://github.com/AweiLoveAndroid/The-pit-of-the-Android-Studio">https://github.com/AweiLoveAndroid/The-pit-of-the-Android-Studio</a></p><p>过往的 Android Gradle 插件版本 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/build/releases/past-releases?hl=zh-cn">https://developer.android.com/build/releases/past-releases?hl=zh-cn</a></p><p>美团外卖Android Lint代码检查实践 - 美团技术团队: <a href="https://tech.meituan.com/2018/04/13/waimai-android-lint.html">https://tech.meituan.com/2018/04/13/waimai-android-lint.html</a></p><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p>利用ASM完成第三方SDK安全整改利用ASM完成第三方SDK安全整改: 使用自定义Gradle插件、Transform、 - 掘金: <a href="https://juejin.cn/post/7293122002724945955">https://juejin.cn/post/7293122002724945955</a></p><p>Blogs&#x2F;Android编译时修改字节码——以Logcat自动打TAG为例.md at master · hqzxzwb&#x2F;Blogs: <a href="https://github.com/hqzxzwb/Blogs/blob/master/Android%E7%BC%96%E8%AF%91%E6%97%B6%E4%BF%AE%E6%94%B9%E5%AD%97%E8%8A%82%E7%A0%81%E2%80%94%E2%80%94%E4%BB%A5Logcat%E8%87%AA%E5%8A%A8%E6%89%93TAG%E4%B8%BA%E4%BE%8B.md">https://github.com/hqzxzwb/Blogs/blob/master/Android%E7%BC%96%E8%AF%91%E6%97%B6%E4%BF%AE%E6%94%B9%E5%AD%97%E8%8A%82%E7%A0%81%E2%80%94%E2%80%94%E4%BB%A5Logcat%E8%87%AA%E5%8A%A8%E6%89%93TAG%E4%B8%BA%E4%BE%8B.md</a></p><p>查询权限的定义 Manifest.permission ?|? Android Developers: <a href="https://developer.android.com/reference/android/Manifest.permission">https://developer.android.com/reference/android/Manifest.permission</a></p><p>Android 中的权限 ?|? Android Developers: <a href="https://developer.android.com/guide/topics/permissions/overview?hl=zh-cn#runtime">https://developer.android.com/guide/topics/permissions/overview?hl=zh-cn#runtime</a></p><p>guolindev&#x2F;PermissionX: An open source Android library that makes handling runtime permissions extremely easy.: <a href="https://github.com/guolindev/PermissionX?tab=readme-ov-file">https://github.com/guolindev/PermissionX?tab=readme-ov-file</a></p><p>Android FBE - 魅族内核团队: <a href="https://kernel.meizu.com/2018/07/12//android-p-fbe.html/">https://kernel.meizu.com/2018/07/12//android-p-fbe.html/</a></p><p>展讯平台AndroidP迁移指导文档——FBE-一牛网论坛: <a href="https://bbs.16rd.com/thread-586509-1-1.html">https://bbs.16rd.com/thread-586509-1-1.html</a></p><p>Support Direct Boot mode ?|? Security ?|? Android Developers: <a href="https://developer.android.com/privacy-and-security/direct-boot">https://developer.android.com/privacy-and-security/direct-boot</a></p><p>directBootAware 和 defaultToDeviceProtectedStorage - 亦幻 - 博客园: <a href="https://www.cnblogs.com/Bolia/p/18361343">https://www.cnblogs.com/Bolia/p/18361343</a></p><p>UserDataPrepare创建系统以及应用APP的ce和de目录的流程_prepareuserdatali-CSDN博客: <a href="https://blog.csdn.net/CHALLENG_EVERYTHING/article/details/84654184">https://blog.csdn.net/CHALLENG_EVERYTHING/article/details/84654184</a></p><p>数据绑定库 ?|? Android Developers: <a href="https://developer.android.google.cn/topic/libraries/data-binding?hl=zh-cn">https://developer.android.google.cn/topic/libraries/data-binding?hl=zh-cn</a></p><h2 id="兼容性变更"><a href="#兼容性变更" class="headerlink" title="兼容性变更"></a>兼容性变更</h2><p>Android App兼容8.0和9.0_兼容到android 8 android 开发-CSDN博客: <a href="https://blog.csdn.net/wxz1179503422/article/details/83031724">https://blog.csdn.net/wxz1179503422/article/details/83031724</a></p><p>这可能是最好的 Android&#x2F;Kotlin日志输出方法 - 技术小黑屋: <a href="https://droidyue.com/blog/2019/11/24/smart-log-in-android-slash-kotlin/">https://droidyue.com/blog/2019/11/24/smart-log-in-android-slash-kotlin/</a></p><p>判断某App位于前台还是后台的6种方法_判断应用是否在前台-CSDN博客: <a href="https://blog.csdn.net/yzwfeng/article/details/124584900">https://blog.csdn.net/yzwfeng/article/details/124584900</a></p><p>Android App如何屏蔽三方SDK（无法修改源码）中Activity的返回事件？Android 中如何屏蔽第三方S - 掘金: <a href="https://juejin.cn/post/7387094749931618358">https://juejin.cn/post/7387094749931618358</a></p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>AndroidNote&#x2F;AdavancedPart&#x2F;Android开发中的MVP模式详解.md at master · CharonChui&#x2F;AndroidNote: <a href="https://github.com/CharonChui/AndroidNote/blob/master/AdavancedPart/Android%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84MVP%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3.md">https://github.com/CharonChui/AndroidNote/blob/master/AdavancedPart/Android%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84MVP%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3.md</a></p><p>[最全]Android安卓架构MVC、MVP、MVVM之间的区别和联系(图解+案例+源码)_mvc框架与android-CSDN博客: <a href="https://blog.csdn.net/wq6ylg08/article/details/105023009">https://blog.csdn.net/wq6ylg08/article/details/105023009</a></p><h2 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h2><p>一种Android应用内全局获取Context实例的装置 - 中二病也要开发ANDROID - SegmentFault 思否: <a href="https://segmentfault.com/a/1190000009015732">https://segmentfault.com/a/1190000009015732</a></p><p>Gson的TypeToken与泛型擦除问题 在Java的json框架中，Gson是使用得比较广泛的一个，其Gson类提供 - 掘金: <a href="https://juejin.cn/post/7139889375923585038">https://juejin.cn/post/7139889375923585038</a></p><p>[原创]一 Android ELF系列:ELF文件格式简析到linker的链接so文件原理分析-Android安全-看雪-安全社区|安全招聘|kanxue.com: <a href="https://bbs.kanxue.com/thread-249589-1.htm">https://bbs.kanxue.com/thread-249589-1.htm</a></p><p>生产者-消费者来谈谈OkHttp 和 Android平台提供的生产者-消费者模型 .. 消费者 生成者 产品 Andro - 掘金: <a href="https://juejin.cn/post/6969193786098483237">https://juejin.cn/post/6969193786098483237</a></p><p>View的onAttachedToWindow和onDetachedFromWindow的调用时机分析 - 简书: <a href="https://www.jianshu.com/p/e7b6fa788ae6">https://www.jianshu.com/p/e7b6fa788ae6</a></p><p>AndroidUtilCode&#x2F;lib&#x2F;subutil&#x2F;README-CN.md at master · Blankj&#x2F;AndroidUtilCode: <a href="https://github.com/Blankj/AndroidUtilCode/blob/master/lib/subutil/README-CN.md">https://github.com/Blankj/AndroidUtilCode/blob/master/lib/subutil/README-CN.md</a></p><p>Android 获取设备的CPU型号和设备型号 - Stars-one - 博客园: <a href="https://www.cnblogs.com/stars-one/p/18066008">https://www.cnblogs.com/stars-one/p/18066008</a></p><p>Android 下高效复制文件的方法-千古八方的博客: <a href="https://rangotec.com/blog/61.html">https://rangotec.com/blog/61.html</a></p><p>Java implementation of a Disk-based LRU cache which specifically targets Android compatibility(okhttp、glide): <a href="https://github.com/JakeWharton/DiskLruCache">https://github.com/JakeWharton/DiskLruCache</a></p><p>Android缓存机制-LRU cache原理与用法在使用Android图片加载框架时，经常会提到三级缓存，其中主要的是 - 掘金: <a href="https://juejin.cn/post/6844903678474715143">https://juejin.cn/post/6844903678474715143</a></p><p>先入先出-FIFOCache | Hutool: <a href="https://doc.hutool.cn/pages/FIFOCache/#%E4%BB%8B%E7%BB%8D">https://doc.hutool.cn/pages/FIFOCache/#%E4%BB%8B%E7%BB%8D</a></p><p>Android 内存缓存框架 LruCache 的实现原理，手写试试？ - 彭旭锐 - 博客园: <a href="https://www.cnblogs.com/pengxurui/p/16948336.html">https://www.cnblogs.com/pengxurui/p/16948336.html</a></p><h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><p>Android五大常用布局：FrameLayout、LinearLayout、ConstraintLayout 、TableLayout和RelativeLayout - subeiLY - 博客园: <a href="https://www.cnblogs.com/gh110/p/12489701.html#RelativeLayout%EF%BC%88%E7%9B%B8%E5%AF%B9%E5%B8%83%E5%B1%80%EF%BC%89">https://www.cnblogs.com/gh110/p/12489701.html#RelativeLayout%EF%BC%88%E7%9B%B8%E5%AF%B9%E5%B8%83%E5%B1%80%EF%BC%89</a></p><p>Android View的生命周期函数总结_android springanimation 放大view生命周期-CSDN博客: <a href="https://blog.csdn.net/nihaomabmt/article/details/109777372">https://blog.csdn.net/nihaomabmt/article/details/109777372</a></p><p>Android 简单的 Dialog 队列 | aitsuki: <a href="https://aitsuki.com/blog/android-dialog-queue/">https://aitsuki.com/blog/android-dialog-queue/</a></p><p>Android 同步的 Dialog | aitsuki: <a href="https://aitsuki.com/blog/android-synchronous-dialog/">https://aitsuki.com/blog/android-synchronous-dialog/</a></p><p>Android 开发绕不过的坑：你的 Bitmap 究竟占多大内存？: <a href="https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&mid=403263974&idx=1&sn=b0315addbc47f3c38e65d9c633a12cd6&scene=0#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=403263974&amp;idx=1&amp;sn=b0315addbc47f3c38e65d9c633a12cd6&amp;scene=0#wechat_redirect</a></p><p>支持不同的像素密度 ?|? Android Developers: <a href="https://developer.android.com/training/multiscreen/screendensities?hl=zh-cn">https://developer.android.com/training/multiscreen/screendensities?hl=zh-cn</a></p><p>Android mipmap中的图标icon 对应的尺寸大小_android mipmap 大小-CSDN博客: <a href="https://blog.csdn.net/qq_32227681/article/details/122232039">https://blog.csdn.net/qq_32227681/article/details/122232039</a></p><p>android res 资源匹配目录 、 drawable与 mipmap的区别 - 简书: <a href="https://www.jianshu.com/p/6743f4303321">https://www.jianshu.com/p/6743f4303321</a></p><h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><p>Android 性能优化之黑科技开道（一）电视系统原本剩余的可用资源就少，而随着 9.0 功能的进一步增多，特别是门铃、 - 掘金: <a href="https://juejin.cn/post/7353442647765991435">https://juejin.cn/post/7353442647765991435</a></p><p>canyie&#x2F;pine: Dynamic java method hook framework on ART. Allowing you to change almost all java methods’ behavior dynamically.: <a href="https://github.com/canyie/pine">https://github.com/canyie/pine</a></p><p>sanfengAndroid&#x2F;fake-linker: Modify Android linker to provide loading module and hook function: <a href="https://github.com/sanfengAndroid/fake-linker">https://github.com/sanfengAndroid/fake-linker</a></p><p>[原创]一种通用超简单的Android Java Native方法Hook，无需依赖Hook框架-Android安全-看雪-安全社区|安全招聘|kanxue.com: <a href="https://bbs.kanxue.com/thread-266238.htm">https://bbs.kanxue.com/thread-266238.htm</a></p><h2 id="开源库"><a href="#开源库" class="headerlink" title="开源库"></a>开源库</h2><p>Tencent&#x2F;mars: Mars is a cross-platform network component developed by WeChat.: <a href="https://github.com/Tencent/mars">https://github.com/Tencent/mars</a></p><h4 id="xlog"><a href="#xlog" class="headerlink" title="xlog"></a>xlog</h4><p>Home · Tencent&#x2F;mars Wiki: <a href="https://github.com/Tencent/mars/wiki">https://github.com/Tencent/mars/wiki</a></p><p>Mars Android 接入指南 · Tencent&#x2F;mars Wiki: <a href="https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97">https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97</a></p><p>腾讯 Xlog 上手指南_com.tencent.mars:mars-xlog-CSDN博客: <a href="https://blog.csdn.net/qian520ao/article/details/88047573">https://blog.csdn.net/qian520ao/article/details/88047573</a></p><p>Mars Android 接口详细说明 · Tencent&#x2F;mars Wiki: <a href="https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%8F%A3%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E">https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%8F%A3%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E</a></p><p>Android基于微信 xlog 开源 日志框架 - IM Geek开发者社区-移动开发者社区-开源社区-IM Geek官网: <a href="https://www.imgeek.net/article/825357157">https://www.imgeek.net/article/825357157</a></p><p>win10下腾讯 mars下xlog编译详解 - 简书: <a href="https://www.jianshu.com/p/61b9ffc1d688">https://www.jianshu.com/p/61b9ffc1d688</a></p><p>Windows下安装cygwin_cygwin win 下载-CSDN博客: <a href="https://blog.csdn.net/EthanCo/article/details/104375839">https://blog.csdn.net/EthanCo/article/details/104375839</a></p><p>Android Mars XLog的编译-CSDN博客: <a href="https://blog.csdn.net/EthanCo/article/details/104375215">https://blog.csdn.net/EthanCo/article/details/104375215</a></p><p>从Mars的Xlog组件学习日志系统 - 简书: <a href="https://www.jianshu.com/p/f53b4575d3ae">https://www.jianshu.com/p/f53b4575d3ae</a></p><p>腾讯mars xlog源码解析_腾讯 mars-CSDN博客: <a href="https://blog.csdn.net/qq372848728/article/details/89215295">https://blog.csdn.net/qq372848728/article/details/89215295</a></p><p>Tencent Mars 源码解析 | Edgar’s Blog: <a href="https://tbfungeek.github.io/2019/12/05/Tencent-Mars-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/">https://tbfungeek.github.io/2019/12/05/Tencent-Mars-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</a></p><p>Add python 3 support to decode_mars_nocrypt_log_file.py by ChaseChoi · Pull Request #1048 · Tencent&#x2F;mars: <a href="https://github.com/Tencent/mars/pull/1048">https://github.com/Tencent/mars/pull/1048</a></p><p>ChaseChoi&#x2F;mars: Mars is a cross-platform network component developed by WeChat.: <a href="https://github.com/ChaseChoi/mars">https://github.com/ChaseChoi/mars</a> （解析xlog python）</p><p>Android Mars XLog 自定义存储格式_android xlog-CSDN博客: <a href="https://blog.csdn.net/EthanCo/article/details/104378841">https://blog.csdn.net/EthanCo/article/details/104378841</a></p><p>xLog日志文件写入改成24小时制_xlog时间-CSDN博客: <a href="https://blog.csdn.net/qq_35662742/article/details/78830895">https://blog.csdn.net/qq_35662742/article/details/78830895</a></p><p>日志丢失问题。 · Issue #1109 · Tencent&#x2F;mars: <a href="https://github.com/Tencent/mars/issues/1109">https://github.com/Tencent/mars/issues/1109</a></p><p>接入 Mars XLog 的坎坷历程: <a href="https://kentl.dev/post/mars-xlog/">https://kentl.dev/post/mars-xlog/</a></p><p>修改mars-xlog 源码并编译成so文件（全程记录）-小王同学: <a href="https://amarantos-blog.cn/archives/modify-and-compile-xlog">https://amarantos-blog.cn/archives/modify-and-compile-xlog</a></p><p>xlog使用-CSDN博客: <a href="https://blog.csdn.net/ming54ming/article/details/122528580">https://blog.csdn.net/ming54ming/article/details/122528580</a></p><p>XLog日志组件的学习和使用首先简简单单介绍一下XLog吧，因为我个人也不是特别了解，所以就简简单单说一下，作为微信开源 - 掘金: <a href="https://juejin.cn/post/6855454731716952078">https://juejin.cn/post/6855454731716952078</a></p><p>mars的xlog日志文件解析以及日志查看工具介绍 - 简书: <a href="https://www.jianshu.com/p/21eab5b59676">https://www.jianshu.com/p/21eab5b59676</a></p><p>Android 微信高性能日志存储库Xlog的使用-CSDN博客: <a href="https://blog.csdn.net/EthanCo/article/details/104374108">https://blog.csdn.net/EthanCo/article/details/104374108</a></p><p>luojilab&#x2F;DataTransHub: 跨平台Android&#x2F;iOS海量数据上报组件，基于Xlog完善，解决Xlog痛点问题。: <a href="https://github.com/luojilab/DataTransHub">https://github.com/luojilab/DataTransHub</a></p><p>开源系列 | 基于微信XLog的日志框架&amp;&amp;对于XLog的分析之前写过一个 日志框架LogHelper ,是基于 Lo - 掘金: <a href="https://juejin.cn/post/6850418121279438855">https://juejin.cn/post/6850418121279438855</a></p><h2 id="APM"><a href="#APM" class="headerlink" title="APM"></a>APM</h2><p>Android Native 异常捕获库Android Native 异常捕获库 基于google&#x2F;breakpa, 让 - 掘金: <a href="https://juejin.cn/post/7067052595331727390">https://juejin.cn/post/7067052595331727390</a></p><h2 id="投屏"><a href="#投屏" class="headerlink" title="投屏"></a>投屏</h2><h3 id="DLNA"><a href="#DLNA" class="headerlink" title="DLNA"></a>DLNA</h3><p>AndroidNote&#x2F;VideoDevelopment&#x2F;Android音视频开发&#x2F;DLNA简介.md at master · CharonChui&#x2F;AndroidNote: <a href="https://github.com/CharonChui/AndroidNote/blob/master/VideoDevelopment/Android%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/DLNA%E7%AE%80%E4%BB%8B.md">https://github.com/CharonChui/AndroidNote/blob/master/VideoDevelopment/Android%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/DLNA%E7%AE%80%E4%BB%8B.md</a></p><p>lebosdk&#x2F;LelinkSource-android: <a href="https://github.com/lebosdk/LelinkSource-android">https://github.com/lebosdk/LelinkSource-android</a></p><h2 id="调试命令"><a href="#调试命令" class="headerlink" title="调试命令"></a>调试命令</h2><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><p>Android So动态加载原理分析与优雅实现 - AndroidSummary: <a href="https://androidsummary.gitbook.io/androidsummary/manpin/xiaoshuointroduction/sodynamicload">https://androidsummary.gitbook.io/androidsummary/manpin/xiaoshuointroduction/sodynamicload</a></p><p>android签名证书文件的解析和签名校验的加强 - liwugang: <a href="https://liwugang.github.io/2016/02/21/android_verify_apk.html">https://liwugang.github.io/2016/02/21/android_verify_apk.html</a></p><p>挂载命名空间 与 共享子树 在 Android 中的应用 - LibXZR 的小本本: <a href="https://blog.xzr.moe/archives/194/">https://blog.xzr.moe/archives/194/</a></p><p>Android 之 一种以特定应用身份执行操作的方式 - LibXZR 的小本本: <a href="https://blog.xzr.moe/archives/195/">https://blog.xzr.moe/archives/195/</a></p><p>sepolicy进阶小记 - LibXZR 的小本本: <a href="https://blog.xzr.moe/archives/111/">https://blog.xzr.moe/archives/111/</a></p><p>selinux contexts 安全上下文的临时更改 - 行走的思想 - 博客园: <a href="https://www.cnblogs.com/onelikeone/p/14978651.html">https://www.cnblogs.com/onelikeone/p/14978651.html</a></p><p>【android】 使用vpn实现抓包 | iTimeTraveler: <a href="https://itimetraveler.github.io/2019/07/25/%E3%80%90Android%E3%80%91%E4%BD%BF%E7%94%A8VPN%E5%AE%9E%E7%8E%B0%E6%8A%93%E5%8C%85/?hmsr=joyk.com&utm_source=joyk.com&utm_medium=referral">https://itimetraveler.github.io/2019/07/25/%E3%80%90Android%E3%80%91%E4%BD%BF%E7%94%A8VPN%E5%AE%9E%E7%8E%B0%E6%8A%93%E5%8C%85/?hmsr=joyk.com&amp;utm_source=joyk.com&amp;utm_medium=referral</a></p><p>Gpt告诉你如何通过代码获取安卓root权限并创建虚拟网卡 - 方东信 - 博客园: <a href="https://www.cnblogs.com/cfas/p/17253314.html">https://www.cnblogs.com/cfas/p/17253314.html</a></p><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>Android（6-13）适配Android?6 1、运行时权限 android6.0以前，我们把app需要用到的权限全 - 掘金: <a href="https://juejin.cn/post/7203310104011456573">https://juejin.cn/post/7203310104011456573</a></p><h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><p>[原创]dvm探讨之odex绕过-Android安全-看雪-安全社区|安全招聘|kanxue.com: <a href="https://bbs.kanxue.com/thread-209631.htm">https://bbs.kanxue.com/thread-209631.htm</a></p><p>Linux 下如何隐藏自己不被发现？ - liwugang: <a href="https://liwugang.github.io/2020/03/22/hide_process.html">https://liwugang.github.io/2020/03/22/hide_process.html</a></p><p>Android中进程注入(一) - 简书: <a href="https://www.jianshu.com/p/0f8e999344af">https://www.jianshu.com/p/0f8e999344af</a></p><p>Android系统篇之—-Hook系统的AMS服务实现应用启动的拦截功能 | 尼古拉斯.赵四: <a href="http://www.520monkey.com/archives/870">http://www.520monkey.com/archives/870</a></p><p>Android 免 root 实现 hook 系统服务拦截方法 | Agehua: <a href="https://conorlee.top/2017/07/12/android-noroot-hook/">https://conorlee.top/2017/07/12/android-noroot-hook/</a></p><h2 id="ebpf"><a href="#ebpf" class="headerlink" title="ebpf"></a>ebpf</h2><p>在 Android 中使用 eBPF：开篇 | Weishu’s Notes: <a href="https://weishu.me/2022/06/12/eBPF-on-Android/">https://weishu.me/2022/06/12/eBPF-on-Android/</a></p><p>60秒学会用eBPF-BCC hook系统调用 hook安卓所有syscall - 网安 - 专业的网络安全产业、社区、知识平台: <a href="https://www.wangan.com/p/11v6c44b6a74cb70">https://www.wangan.com/p/11v6c44b6a74cb70</a></p><p>Android-eBPF监控所有系统调用 | Shocker: <a href="https://pshocker.github.io/2022/06/18/Android-eBPF%E7%9B%91%E6%8E%A7%E6%89%80%E6%9C%89%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/">https://pshocker.github.io/2022/06/18/Android-eBPF%E7%9B%91%E6%8E%A7%E6%89%80%E6%9C%89%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</a></p><h1 id="Android-TV"><a href="#Android-TV" class="headerlink" title="Android TV"></a>Android TV</h1><p>Android Pixel Calculator: <a href="https://angrytools.com/android/pixelcalc/">https://angrytools.com/android/pixelcalc/</a></p><p>像素计算器: <a href="https://www.zelyo.cn/tools/Pixelcal/Pixelcal.html">https://www.zelyo.cn/tools/Pixelcal/Pixelcal.html</a></p><p>Android屏幕适配总结好久之前就想写一篇跟屏幕适配相关的文章一直没有动笔，这次下决心抽周末的时间结合我在实际项目中所 - 掘金: <a href="https://juejin.cn/post/6844904064392626189">https://juejin.cn/post/6844904064392626189</a></p><p>Android TV 屏幕适配_androidtv屏幕适配-CSDN博客: <a href="https://blog.csdn.net/newairzhang/article/details/62062020">https://blog.csdn.net/newairzhang/article/details/62062020</a></p><p>Android TV开发总结【适配】-腾讯云开发者社区-腾讯云: <a href="https://cloud.tencent.com/developer/article/1385737">https://cloud.tencent.com/developer/article/1385737</a></p><p>Android TV开发总结（五）TV上屏幕适配总结_android tv屏幕适配-CSDN博客: <a href="https://blog.csdn.net/hejjunlin/article/details/52886107">https://blog.csdn.net/hejjunlin/article/details/52886107</a></p><p>mlabalabala&#x2F;box: TVBox的一个可以处理多源的版本，支持安卓4.4: <a href="https://github.com/mlabalabala/box">https://github.com/mlabalabala/box</a></p><p>Android电视配置遥控器或者修改遥控器按键 - 简书: <a href="https://www.jianshu.com/p/5a4b97d9b963">https://www.jianshu.com/p/5a4b97d9b963</a></p><p>Android 系统遥控器匹配kl文件_遥控器kl文件看不到-CSDN博客: <a href="https://blog.csdn.net/angelsmiling/article/details/105306388#:~:text=%E6%88%91%E4%BB%AC%E5%9C%A8%E8%BE%93%E5%85%A5getevent%20-l%20%E5%91%BD%E4%BB%A4%E7%9A%84%E6%97%B6%E5%80%99%E5%86%8D%E6%8C%89%E9%81%A5%E6%8E%A7%E5%99%A8%E9%94%AE%E5%80%BC%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%96%B0%E5%A2%9E%E4%BA%86%E4%BB%A5%2Fdev%2Finput%2Fevent0%E5%BC%80%E5%A4%B4%E7%9A%84%E4%B8%A4%E5%88%97%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%80%8Cevent0%E5%AF%B9%E5%BA%94%E7%9A%84%E6%98%AF%E4%BB%A5ce_keypad%E5%90%8D%E5%AD%97%E7%9A%84%E8%AE%BE%E5%A4%87%EF%BC%8C%E7%84%B6%E5%90%8E%E6%88%91%E4%BB%AC%E5%86%8D%E5%8E%BB%E7%AC%AC%E4%B8%80%E6%AD%A5%E4%B8%AD%E6%89%BE%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%A1%AE%E5%AE%9A%E9%81%A5%E6%8E%A7%E5%99%A8%E7%9A%84kl%E6%96%87%E4%BB%B6%E7%9A%84Vendor%3D0001,Product%3D0001%20Version%3D0100%E4%BA%86%EF%BC%8C%E6%9C%80%E7%BB%88%E5%8F%AF%E4%BB%A5%E7%A1%AE%E5%AE%9A%E5%8C%B9%E9%85%8D%E7%9A%84kl%E6%96%87%E4%BB%B6%E4%B8%BA%EF%BC%9AVendor_0001_Product_0001%20%28_Version_0100%29.kl%E3%80%82">https://blog.csdn.net/angelsmiling/article/details/105306388#:~:text=%E6%88%91%E4%BB%AC%E5%9C%A8%E8%BE%93%E5%85%A5getevent%20-l%20%E5%91%BD%E4%BB%A4%E7%9A%84%E6%97%B6%E5%80%99%E5%86%8D%E6%8C%89%E9%81%A5%E6%8E%A7%E5%99%A8%E9%94%AE%E5%80%BC%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%96%B0%E5%A2%9E%E4%BA%86%E4%BB%A5%2Fdev%2Finput%2Fevent0%E5%BC%80%E5%A4%B4%E7%9A%84%E4%B8%A4%E5%88%97%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%80%8Cevent0%E5%AF%B9%E5%BA%94%E7%9A%84%E6%98%AF%E4%BB%A5ce_keypad%E5%90%8D%E5%AD%97%E7%9A%84%E8%AE%BE%E5%A4%87%EF%BC%8C%E7%84%B6%E5%90%8E%E6%88%91%E4%BB%AC%E5%86%8D%E5%8E%BB%E7%AC%AC%E4%B8%80%E6%AD%A5%E4%B8%AD%E6%89%BE%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%A1%AE%E5%AE%9A%E9%81%A5%E6%8E%A7%E5%99%A8%E7%9A%84kl%E6%96%87%E4%BB%B6%E7%9A%84Vendor%3D0001,Product%3D0001%20Version%3D0100%E4%BA%86%EF%BC%8C%E6%9C%80%E7%BB%88%E5%8F%AF%E4%BB%A5%E7%A1%AE%E5%AE%9A%E5%8C%B9%E9%85%8D%E7%9A%84kl%E6%96%87%E4%BB%B6%E4%B8%BA%EF%BC%9AVendor_0001_Product_0001%20%28_Version_0100%29.kl%E3%80%82</a></p><p>Android10 （.kl）按键布局文件的解析过程分析_generic.kl-CSDN博客: <a href="https://blog.csdn.net/weixin_44904296/article/details/112566710">https://blog.csdn.net/weixin_44904296/article/details/112566710</a></p><p>Android源码解析（二十九）–&gt;应用程序返回按键执行流程_android应用返回处理流程-CSDN博客: <a href="https://blog.csdn.net/qq_23547831/article/details/51513771">https://blog.csdn.net/qq_23547831/article/details/51513771</a></p><h1 id="NDK"><a href="#NDK" class="headerlink" title="NDK"></a>NDK</h1><p>安卓so版本ndk版本查看以及strip命令的使用_so strip-CSDN博客: <a href="https://blog.csdn.net/lzz137/article/details/114830319">https://blog.csdn.net/lzz137/article/details/114830319</a></p><p>C语言调用so动态库的两种方式_c语言加载so-CSDN博客: <a href="https://blog.csdn.net/shaosunrise/article/details/81161064">https://blog.csdn.net/shaosunrise/article/details/81161064</a></p><p>Android Cmake 增加第三方库的依赖_libmarsxlog.so-CSDN博客: <a href="https://blog.csdn.net/ImTryCatchException/article/details/134306328">https://blog.csdn.net/ImTryCatchException/article/details/134306328</a></p><p>调试和减少内存错误 ?|? Android NDK ?|? Android Developers: <a href="https://developer.android.com/ndk/guides/memory-debug?hl=zh-cn">https://developer.android.com/ndk/guides/memory-debug?hl=zh-cn</a></p><p>JNI常见类型传参_jni jobject 传参-CSDN博客: <a href="https://blog.csdn.net/duanchuadnong/article/details/116655308">https://blog.csdn.net/duanchuadnong/article/details/116655308</a></p><p>JNI与C++的数据类型转换_jboolean-CSDN博客: <a href="https://blog.csdn.net/u014300915/article/details/52916086">https://blog.csdn.net/u014300915/article/details/52916086</a></p><p>snprintf 函数用法详解-CSDN博客: <a href="https://blog.csdn.net/m0_50668851/article/details/110000520">https://blog.csdn.net/m0_50668851/article/details/110000520</a></p><p>【Cmake】利用NDK进行Android的交叉编译（附实例）_android ndk 交叉编译-CSDN博客: <a href="https://blog.csdn.net/qq_38410730/article/details/103622813">https://blog.csdn.net/qq_38410730/article/details/103622813</a></p><p>NDK 修订历史记录 ?|? Android NDK ?|? Android Developers: <a href="https://developer.android.com/ndk/downloads/revision_history?hl=zh-cn">https://developer.android.com/ndk/downloads/revision_history?hl=zh-cn</a> (每个NDK版本所支持API级别可以通过NDK解压缩包中platforms目录查看)</p><p>Android-NDK开发之概述 | 苍耳的博客: <a href="https://ljd1996.github.io/2021/06/01/Android-NDK%E5%BC%80%E5%8F%91%E4%B9%8B%E6%A6%82%E8%BF%B0/">https://ljd1996.github.io/2021/06/01/Android-NDK%E5%BC%80%E5%8F%91%E4%B9%8B%E6%A6%82%E8%BF%B0/</a></p><p>Android-NDK开发之JNI | 苍耳的博客: <a href="https://ljd1996.github.io/2021/06/01/Android-NDK%E5%BC%80%E5%8F%91%E4%B9%8BJNI/">https://ljd1996.github.io/2021/06/01/Android-NDK%E5%BC%80%E5%8F%91%E4%B9%8BJNI/</a></p><p>Android JNI手册——Java&#x2F;Kotlin与Native层的相互调用_kotlin external fun-CSDN博客: <a href="https://blog.csdn.net/ma598214297/article/details/106456535">https://blog.csdn.net/ma598214297/article/details/106456535</a></p><p>Android Gradle 插件可以使用的原生依赖项 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/build/native-dependencies?hl=zh-cn&agpversion=4.0">https://developer.android.com/build/native-dependencies?hl=zh-cn&amp;agpversion=4.0</a></p><p>Android Cmake 增加第三方库的依赖_libmarsxlog.so-CSDN博客: <a href="https://blog.csdn.net/ImTryCatchException/article/details/134306328">https://blog.csdn.net/ImTryCatchException/article/details/134306328</a></p><p>Kotlin 和 Java 中内部类中的 static native 方法（JNI 函数）-CSDN博客: <a href="https://blog.csdn.net/u013553529/article/details/124478522">https://blog.csdn.net/u013553529/article/details/124478522</a></p><p>JNI内存方面说明以及相关类型手动释放内存-阿里云开发者社区: <a href="https://developer.aliyun.com/article/1112357">https://developer.aliyun.com/article/1112357</a></p><p>7.JNI 内存泄漏 处理 方法总结_jni string 返回值会导致内存泄漏吗-CSDN博客: <a href="https://blog.csdn.net/a2241076850/article/details/81092211">https://blog.csdn.net/a2241076850/article/details/81092211</a></p><p>Link Gradle to your native library ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/studio/projects/gradle-external-native-builds">https://developer.android.com/studio/projects/gradle-external-native-builds</a></p><h1 id="Android-OS"><a href="#Android-OS" class="headerlink" title="Android OS"></a>Android OS</h1><p>AOSP源码定制-so注入并集成hook框架 - gakkkkkkiii: <a href="https://www.c0bra.xyz/2023/12/28/AOSP%E6%BA%90%E7%A0%81%E5%AE%9A%E5%88%B6-so%E6%B3%A8%E5%85%A5%E5%B9%B6%E9%9B%86%E6%88%90hook%E6%A1%86%E6%9E%B6/">https://www.c0bra.xyz/2023/12/28/AOSP%E6%BA%90%E7%A0%81%E5%AE%9A%E5%88%B6-so%E6%B3%A8%E5%85%A5%E5%B9%B6%E9%9B%86%E6%88%90hook%E6%A1%86%E6%9E%B6/</a></p><p>android使用logwrapper进行log重定向_android logwrapper-CSDN博客: <a href="https://blog.csdn.net/rikeyone/article/details/80307975">https://blog.csdn.net/rikeyone/article/details/80307975</a></p><p>Android Hook技术防范漫谈 - 美团技术团队: <a href="https://tech.meituan.com/2018/02/02/android-anti-hooking.html">https://tech.meituan.com/2018/02/02/android-anti-hooking.html</a></p><p>jmpews&#x2F;Dobby: a lightweight, multi-platform, multi-architecture hook framework.: <a href="https://github.com/jmpews/Dobby">https://github.com/jmpews/Dobby</a></p><p>Android 对 so 进行简单 hook - Android社区 - <a href="https://www.androidos.net.cn/">https://www.androidos.net.cn/</a>: <a href="https://www.androidos.net.cn/doc/2023/76146513.html">https://www.androidos.net.cn/doc/2023/76146513.html</a></p><p>Matrix-IOCanary解析 - Yorek’s Blog: <a href="https://blog.yorek.xyz/android/3rd-library/matrix-io/#4-android-p">https://blog.yorek.xyz/android/3rd-library/matrix-io/#4-android-p</a></p><p>最常用的PLT Hook框架：xHook - Yorek’s Blog: <a href="https://blog.yorek.xyz/android/3rd-library/xhook/#41-xhook">https://blog.yorek.xyz/android/3rd-library/xhook/#41-xhook</a></p><p>Android Log写日志流程分析 - Bill聪的博客 | Bill’s Blog: <a href="http://www.cjcbill.com/2019/01/12/android-log-api/">http://www.cjcbill.com/2019/01/12/android-log-api/</a></p><p>Android 日志系统–03：logd、logcat源码分析1.概述 ??上一节我们看了Android日志系统的架构 - 掘金: <a href="https://juejin.cn/post/7424902549256175652">https://juejin.cn/post/7424902549256175652</a></p><p>Android之进程 crash监听 - 简书: <a href="https://www.jianshu.com/p/b1d03d464f62">https://www.jianshu.com/p/b1d03d464f62</a></p><p>Android Native crash触发原理及处理-CSDN博客: <a href="https://blog.csdn.net/youthcowboy/article/details/135505161">https://blog.csdn.net/youthcowboy/article/details/135505161</a></p><p>Android App Crash之后如何禁止Activity重启 - 简书: <a href="https://www.jianshu.com/p/636edca24443">https://www.jianshu.com/p/636edca24443</a></p><p>Android实现APP启动监听和拦截_android监听某个应用打开了没有（ActivityController ）: <a href="https://blog.csdn.net/lontano_0406/article/details/129611053">https://blog.csdn.net/lontano_0406/article/details/129611053</a></p><p>RK3288 Android 7.1 dumpsys meminfo 无法获取内存信息问题-阿里云开发者社区: <a href="https://developer.aliyun.com/article/1158680">https://developer.aliyun.com/article/1158680</a></p><p>android如何分析进程被杀问题_has died: fg top-CSDN博客: <a href="https://blog.csdn.net/qq_28852011/article/details/123569047">https://blog.csdn.net/qq_28852011/article/details/123569047</a></p><p>截图框架代码原理 android 11 - 简书: <a href="https://www.jianshu.com/p/90571763c3d3">https://www.jianshu.com/p/90571763c3d3</a></p><p>WMS常见问题一（Activity displayed延迟）_wms event log-CSDN博客: <a href="https://blog.csdn.net/kc58236582/article/details/60134836">https://blog.csdn.net/kc58236582/article/details/60134836</a></p><p>android 静态和动态设置 Receiver的 android:enabled值 - 寸草之心 - 博客园: <a href="https://www.cnblogs.com/LuLei1990/p/4484798.html">https://www.cnblogs.com/LuLei1990/p/4484798.html</a></p><p>Android10 系统发送开机广播时机_performenablescreen-CSDN博客: <a href="https://blog.csdn.net/tangedegushi/article/details/120512883">https://blog.csdn.net/tangedegushi/article/details/120512883</a></p><p>android-new-features&#x2F;android11&#x2F;新功能&#x2F;ADB增量APK安装.md at master · lacuz&#x2F;android-new-features: <a href="https://github.com/lacuz/android-new-features/blob/master/android11/%E6%96%B0%E5%8A%9F%E8%83%BD/ADB%E5%A2%9E%E9%87%8FAPK%E5%AE%89%E8%A3%85.md">https://github.com/lacuz/android-new-features/blob/master/android11/%E6%96%B0%E5%8A%9F%E8%83%BD/ADB%E5%A2%9E%E9%87%8FAPK%E5%AE%89%E8%A3%85.md</a></p><p>Android增量更新原理和实践 - 简书: <a href="https://www.jianshu.com/p/9b0c10270759">https://www.jianshu.com/p/9b0c10270759</a></p><p>blog&#x2F;source&#x2F;_posts&#x2F;Android各版本唤起app安装解决方案.md at master · halfcupCn&#x2F;blog: <a href="https://github.com/halfcupCn/blog/blob/master/source/_posts/Android%E5%90%84%E7%89%88%E6%9C%AC%E5%94%A4%E8%B5%B7app%E5%AE%89%E8%A3%85%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md">https://github.com/halfcupCn/blog/blob/master/source/_posts/Android%E5%90%84%E7%89%88%E6%9C%AC%E5%94%A4%E8%B5%B7app%E5%AE%89%E8%A3%85%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md</a></p><p>Android 之 ViewTreeObserver 全面解析 - 简书: <a href="https://www.jianshu.com/p/59d636695d42">https://www.jianshu.com/p/59d636695d42</a></p><p>AOSP 的进程管理 | Caturra’s Blog: <a href="https://www.bluepuni.com/archives/aosp-process-management/">https://www.bluepuni.com/archives/aosp-process-management/</a></p><p>Android：修改连接到AP端显示的设备名 - sheldon_blogs - 博客园: <a href="https://www.cnblogs.com/blogs-of-lxl/p/11742031.html">https://www.cnblogs.com/blogs-of-lxl/p/11742031.html</a></p><p>安卓高级用户的福音 Android 12扩展支持mDNS可以使用.local访问本地设备 – 蓝点网: <a href="https://www.landiannews.com/archives/94395.html">https://www.landiannews.com/archives/94395.html</a></p><p>如何根据TCP连接的源端口索引来源APP（即UID）？Notes&#x2F;AclInProxy.md at master · daBisNewBee&#x2F;Notes: <a href="https://github.com/daBisNewBee/Notes/blob/master/AclInProxy.md">https://github.com/daBisNewBee/Notes/blob/master/AclInProxy.md</a><br>Go 语言实现简易版 netstat 命令-51CTO.COM: <a href="https://www.51cto.com/article/671735.html">https://www.51cto.com/article/671735.html</a></p><p>android如何通过代码来获取每个应用访问过的ip和端口_安卓源码如何查看调用了哪些接口地址-CSDN博客: <a href="https://blog.csdn.net/zhao007z5/article/details/79977630">https://blog.csdn.net/zhao007z5/article/details/79977630</a></p><h2 id="AMS"><a href="#AMS" class="headerlink" title="AMS"></a>AMS</h2><p>onNewIntent()方法介绍·This is called for activities that set lau - 掘金: <a href="https://juejin.cn/post/6844904007085850631">https://juejin.cn/post/6844904007085850631</a></p><p>Activity启动模式二上篇文章Activity启动模式一主要介绍了Activity的四种启动模式，这些启动模式都是在 - 掘金: <a href="https://juejin.cn/post/6844903974269648903#heading-10">https://juejin.cn/post/6844903974269648903#heading-10</a></p><p>android - onNewIntent called after finish() executed - Stack Overflow: <a href="https://stackoverflow.com/questions/24639272/onnewintent-called-after-finish-executed">https://stackoverflow.com/questions/24639272/onnewintent-called-after-finish-executed</a></p><p>面试官：为什么 Activity.finish() 之后 10s 才 onDestroy ？交流群里碰到一个很有意思的问 - 掘金: <a href="https://juejin.cn/post/6898588053451833351">https://juejin.cn/post/6898588053451833351</a></p><p>在调用finish()之后，可以保证调用哪些android生命周期方法？-腾讯云开发者社区-腾讯云: <a href="https://cloud.tencent.com/developer/ask/sof/106897129">https://cloud.tencent.com/developer/ask/sof/106897129</a></p><p>Tasks and the back stack ?|? Android Developers: <a href="https://developer.android.google.cn/guide/components/activities/tasks-and-back-stack">https://developer.android.google.cn/guide/components/activities/tasks-and-back-stack</a></p><p>（会返回delay）</p><p>明修”栈”道——越过Android启动栈陷阱本文从一例业务中遇到的问题出发，以FLAG_ACTIVITY_NEW_TAS - 掘金: <a href="https://juejin.cn/post/7223175468621774907#heading-11">https://juejin.cn/post/7223175468621774907#heading-11</a> </p><p>深入排查 FLAG 导致的 Activity 无法正常启动 - 脉脉: <a href="https://maimai.cn/article/detail?fid=1693592616&efid=5YwMmIAys4HBa0yIzYKTFQ">https://maimai.cn/article/detail?fid=1693592616&amp;efid=5YwMmIAys4HBa0yIzYKTFQ</a></p><p>启动模式”singleTask”和FLAG_ACTIVITY_NEW_TASK具有不同的行为！-CSDN博客: <a href="https://blog.csdn.net/lincyang/article/details/6802017">https://blog.csdn.net/lincyang/article/details/6802017</a></p><p>Android Intent.FLAG_ACTIVITY_NEW_TASK的个人理解-CSDN博客: <a href="https://blog.csdn.net/u010389391/article/details/78558475">https://blog.csdn.net/u010389391/article/details/78558475</a></p><p>对 FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TOP 的实践对 FLAG - 掘金: <a href="https://juejin.cn/post/7222897518501347383?from=search-suggest">https://juejin.cn/post/7222897518501347383?from=search-suggest</a></p><p>Activity的加载模式，以及singleTask的坑 - 简书: <a href="https://www.jianshu.com/p/841cfe3fcbc6">https://www.jianshu.com/p/841cfe3fcbc6</a></p><p>Android的启动模式：singleTask与singleTop的使用 - 简书: <a href="https://www.jianshu.com/p/f32b40db6141">https://www.jianshu.com/p/f32b40db6141</a></p><p>Activity启动模式singleTask的理解-CSDN博客: <a href="https://blog.csdn.net/fxjzzyo/article/details/109293098">https://blog.csdn.net/fxjzzyo/article/details/109293098</a></p><p>Android-Interview&#x2F;Activity&#x2F;深刻剖析activity启动模式-3.md at master · JackChan1999&#x2F;Android-Interview: <a href="https://github.com/JackChan1999/Android-Interview/blob/master/Activity/%E6%B7%B1%E5%88%BB%E5%89%96%E6%9E%90activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F-3.md">https://github.com/JackChan1999/Android-Interview/blob/master/Activity/%E6%B7%B1%E5%88%BB%E5%89%96%E6%9E%90activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F-3.md</a></p><p>android 10 后台无法 startActivity 原理分析_abort background activity starts from-CSDN博客: <a href="https://blog.csdn.net/int_65536/article/details/120476839">https://blog.csdn.net/int_65536/article/details/120476839</a></p><h2 id="WMS"><a href="#WMS" class="headerlink" title="WMS"></a>WMS</h2><h2 id="PMS"><a href="#PMS" class="headerlink" title="PMS"></a>PMS</h2><h2 id="IMS"><a href="#IMS" class="headerlink" title="IMS"></a>IMS</h2><p>Android-TV开发按键与焦点深入分析（一）–KeyEvent的分发 | chenxin’s blog: <a href="https://msisuzney.github.io/2020/08/24/Android-TV%E5%BC%80%E5%8F%91%E6%8C%89%E9%94%AE%E4%B8%8E%E7%84%A6%E7%82%B9%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89-KeyEvent%E7%9A%84%E5%88%86%E5%8F%91/">https://msisuzney.github.io/2020/08/24/Android-TV%E5%BC%80%E5%8F%91%E6%8C%89%E9%94%AE%E4%B8%8E%E7%84%A6%E7%82%B9%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89-KeyEvent%E7%9A%84%E5%88%86%E5%8F%91/</a></p><p>Android KeyEvent分发与焦点切换. 2016年年底的时候，给一个App适配了D-pad，D-pad就是下图红框里的东… | by Wan Xiao | Medium: <a href="https://medium.com/@wanxiao1994/android-keyevent%E5%88%86%E5%8F%91%E4%B8%8E%E7%84%A6%E7%82%B9%E5%88%87%E6%8D%A2-a72eebc0ea92">https://medium.com/@wanxiao1994/android-keyevent%E5%88%86%E5%8F%91%E4%B8%8E%E7%84%A6%E7%82%B9%E5%88%87%E6%8D%A2-a72eebc0ea92</a></p><h2 id="ART"><a href="#ART" class="headerlink" title="ART"></a>ART</h2><h2 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h2><p>Android异步通信：详解 Handler 内存泄露的原因 - 简书: <a href="https://www.jianshu.com/p/ed9e15eff47a">https://www.jianshu.com/p/ed9e15eff47a</a></p><h3 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h3><p>Binder 为什么只需要拷贝一次 · Android 面试文档 · 看云: <a href="https://www.kancloud.cn/smartsean/android/1123813">https://www.kancloud.cn/smartsean/android/1123813</a></p><p>guardian&#x2F;toolargetool: A tool to help you debug TransactionTooLargeExceptions on Android 7+: <a href="https://github.com/guardian/toolargetool">https://github.com/guardian/toolargetool</a></p><h2 id="app-process"><a href="#app-process" class="headerlink" title="app_process"></a>app_process</h2><p>[求助]在root下app_process启动的java进程怎么获取context-Android安全-看雪-安全社区|安全招聘|kanxue.com: <a href="https://bbs.kanxue.com/thread-276469.htm">https://bbs.kanxue.com/thread-276469.htm</a></p><p>topjohnwu&#x2F;libsu: A complete solution for apps using root permissions: <a href="https://github.com/topjohnwu/libsu?utm_source=ld246.com">https://github.com/topjohnwu/libsu?utm_source=ld246.com</a></p><p>跨进程root读写内存原理(JNIRoot方案)-CSDN博客: <a href="https://blog.csdn.net/qq_38944721/article/details/114363535#:~:text=libsu%E5%8C%85%E5%90%AB%E4%B8%A4%E4%B8%AA%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%EF%BC%9A%20core%E6%A8%A1%E5%9D%97%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%80%E4%B8%AA%E5%81%A5%E5%A3%AE%E7%9A%84API%E4%B8%8EUni%E2%80%8B%E2%80%8Bx%20shell%E8%BF%9B%E8%A1%8C%E4%BA%A4%E4%BA%92%EF%BC%9B%20service%E6%A8%A1%E5%9D%97%E5%85%81%E8%AE%B8%E6%82%A8%E5%88%9B%E5%BB%BA%E6%A0%B9%E6%9C%8D%E5%8A%A1%E4%BB%A5%E8%BF%90%E8%A1%8CJava%20%2F%20Kotlin%E5%92%8C%E6%9C%AC%E6%9C%BAC%20%2F,C%20%2B%2B%E4%BB%A3%E7%A0%81%EF%BC%88%E9%80%9A%E8%BF%87JNI%EF%BC%89%E3%80%82%20%E8%AF%A5%E5%BA%93%E4%B8%BA%E6%82%A8%E5%A4%84%E7%90%86Shell%20%E8%BF%9B%E7%A8%8B%20%E7%9A%84%E5%88%9B%E5%BB%BA%EF%BC%8C%E5%85%B7%E6%9C%89%E6%A0%87%E5%87%86%E6%B5%81%E7%9A%84I%20%2F%20O%EF%BC%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%8C%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E5%AF%B9%E8%BF%9C%E7%A8%8B%E6%A0%B9%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%AE%A1%E7%90%86%E3%80%82">https://blog.csdn.net/qq_38944721/article/details/114363535#:~:text=libsu%E5%8C%85%E5%90%AB%E4%B8%A4%E4%B8%AA%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%EF%BC%9A%20core%E6%A8%A1%E5%9D%97%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%80%E4%B8%AA%E5%81%A5%E5%A3%AE%E7%9A%84API%E4%B8%8EUni%E2%80%8B%E2%80%8Bx%20shell%E8%BF%9B%E8%A1%8C%E4%BA%A4%E4%BA%92%EF%BC%9B%20service%E6%A8%A1%E5%9D%97%E5%85%81%E8%AE%B8%E6%82%A8%E5%88%9B%E5%BB%BA%E6%A0%B9%E6%9C%8D%E5%8A%A1%E4%BB%A5%E8%BF%90%E8%A1%8CJava%20%2F%20Kotlin%E5%92%8C%E6%9C%AC%E6%9C%BAC%20%2F,C%20%2B%2B%E4%BB%A3%E7%A0%81%EF%BC%88%E9%80%9A%E8%BF%87JNI%EF%BC%89%E3%80%82%20%E8%AF%A5%E5%BA%93%E4%B8%BA%E6%82%A8%E5%A4%84%E7%90%86Shell%20%E8%BF%9B%E7%A8%8B%20%E7%9A%84%E5%88%9B%E5%BB%BA%EF%BC%8C%E5%85%B7%E6%9C%89%E6%A0%87%E5%87%86%E6%B5%81%E7%9A%84I%20%2F%20O%EF%BC%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%8C%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E5%AF%B9%E8%BF%9C%E7%A8%8B%E6%A0%B9%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%AE%A1%E7%90%86%E3%80%82</a></p><h2 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h2><h1 id="Android性能优化"><a href="#Android性能优化" class="headerlink" title="Android性能优化"></a>Android性能优化</h1><p>adb shell cat &#x2F;proc&#x2F;self&#x2F;cgroup</p><p>Linux zram 开启 | myfreax: <a href="https://www.myfreax.com/linux-zram-enabled/">https://www.myfreax.com/linux-zram-enabled/</a></p><p>android 临时关闭ZRAM_android 关闭zram-CSDN博客: <a href="https://blog.csdn.net/zyfzhangyafei/article/details/106362038">https://blog.csdn.net/zyfzhangyafei/article/details/106362038</a></p><p>修改安卓的zram大小 - T^3 Blog: <a href="https://blog.virt.ltd/archives/88/">https://blog.virt.ltd/archives/88/</a></p><p>“暂停执行已缓存的应用” 是如何工作的 - LibXZR 的小本本: <a href="https://blog.xzr.moe/archives/190/">https://blog.xzr.moe/archives/190/</a></p><p>Android开发高手课NOTE - 梦和远方 - 博客园: <a href="https://www.cnblogs.com/sixrain/p/11777135.html">https://www.cnblogs.com/sixrain/p/11777135.html</a></p><p>为何高帧率对于电竞比赛十分重要？ | GeForce 新闻 | NVIDIA: <a href="https://www.nvidia.cn/geforce/news/what-is-fps-and-how-it-helps-you-win-games/">https://www.nvidia.cn/geforce/news/what-is-fps-and-how-it-helps-you-win-games/</a></p><p>缓存的应用冻结器 ?|? Android Open Source Project: <a href="https://source.android.google.cn/docs/core/perf/cached-apps-freezer?hl=zh-cn">https://source.android.google.cn/docs/core/perf/cached-apps-freezer?hl=zh-cn</a></p><p>Android13冻结进程分析：如何提高设备性能和用户体验 | 10cl: <a href="https://www.toscl.com/android_freezer/#%E5%86%BB%E7%BB%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%BD%9C%E7%94%A8">https://www.toscl.com/android_freezer/#%E5%86%BB%E7%BB%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%BD%9C%E7%94%A8</a></p><p>识别与负载能力相关的卡顿 ?|? Android Open Source Project: <a href="https://source.android.com/docs/core/tests/debug/jank_capacity?hl=zh-cn">https://source.android.com/docs/core/tests/debug/jank_capacity?hl=zh-cn</a></p><p>Android性能优化：定性和定位Android图形性能问题——以后台录屏进程为例Android性能优化。借助性能工具的 - 掘金: <a href="https://juejin.cn/post/7096288511053004830">https://juejin.cn/post/7096288511053004830</a></p><h2 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h2><p>Android Framework 常见解决方案（25-1）定制CPUSET解决方案-framework部分修改_android cpuset-CSDN博客: <a href="https://blog.csdn.net/vviccc/article/details/135487983">https://blog.csdn.net/vviccc/article/details/135487983</a></p><p>Android Framework 常见解决方案（25-2）定制CPUSET解决方案-system修改及编译部分调整_audio-app cpuset-CSDN博客: <a href="https://blog.csdn.net/vviccc/article/details/135486191">https://blog.csdn.net/vviccc/article/details/135486191</a></p><p>Android Framework 常见解决方案（25-1）定制CPUSET解决方案-framework部分修改 - 服务器托管|北京服务器租用|机房托管租用|IDC托管租用|机房机柜带宽租用-价格及费用咨询: <a href="https://www.fwqtg.net/android-framework-%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%8825-1%EF%BC%89%E5%AE%9A%E5%88%B6cpuset%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-framework%E9%83%A8%E5%88%86%E4%BF%AE%E6%94%B9.html">https://www.fwqtg.net/android-framework-%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%8825-1%EF%BC%89%E5%AE%9A%E5%88%B6cpuset%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-framework%E9%83%A8%E5%88%86%E4%BF%AE%E6%94%B9.html</a></p><p>Android Framework 常见解决方案（25-2）定制CPUSET解决方案-system修改及编译部分调整: <a href="http://www.coreui.cn/news/281462.html">http://www.coreui.cn/news/281462.html</a></p><p>android核绑定cpuset配置与检测进程所在核cpuset方法_cpuset top-app-CSDN博客: <a href="https://blog.csdn.net/suixin______/article/details/132358622">https://blog.csdn.net/suixin______/article/details/132358622</a></p><p>Android中关于cpu&#x2F;cpuset&#x2F;schedtune的应用 - ArnoldLu - 博客园: <a href="https://www.cnblogs.com/arnoldlu/p/6221608.html">https://www.cnblogs.com/arnoldlu/p/6221608.html</a></p><p>Android&#x2F;Linux EAS优化-Cpuset_cpuset如何设置进程独占cpu核-CSDN博客: <a href="https://blog.csdn.net/liaochaoyun/article/details/122112026">https://blog.csdn.net/liaochaoyun/article/details/122112026</a></p><p>在 Android 底下使用 CGROUP – Cash Chou’s Blog: <a href="https://cashchou.com/2014/07/20/%E5%9C%A8-android-%E5%BA%95%E4%B8%8B%E4%BD%BF%E7%94%A8-cgroup/">https://cashchou.com/2014/07/20/%E5%9C%A8-android-%E5%BA%95%E4%B8%8B%E4%BD%BF%E7%94%A8-cgroup/</a></p><p>高通骁龙 CPU 绑核操作 - SeanHHX 点点滴滴: <a href="https://seanhhx.cn/post/%E9%AB%98%E9%80%9A%E9%AA%81%E9%BE%99-cpu-%E7%BB%91%E6%A0%B8%E6%93%8D%E4%BD%9C/">https://seanhhx.cn/post/%E9%AB%98%E9%80%9A%E9%AA%81%E9%BE%99-cpu-%E7%BB%91%E6%A0%B8%E6%93%8D%E4%BD%9C/</a></p><p>android app cpu核心限制尝试 | mjblog: <a href="https://mjblog.github.io/2021/02/26/android_core_limit/">https://mjblog.github.io/2021/02/26/android_core_limit/</a></p><p>Android进程线程调度之cgroups - 技术小黑屋: <a href="https://droidyue.com/blog/2015/09/17/android-process-and-thread-schedule-cgroups/">https://droidyue.com/blog/2015/09/17/android-process-and-thread-schedule-cgroups/</a></p><p>Android Framework 常见解决方案（25-1）定制CPUSET解决方案-framework部分修改 - 服务器托管|北京服务器租用|机房托管租用|IDC托管租用|机房机柜带宽租用-价格及费用咨询: <a href="https://www.fwqtg.net/android-framework-%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%8825-1%EF%BC%89%E5%AE%9A%E5%88%B6cpuset%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-framework%E9%83%A8%E5%88%86%E4%BF%AE%E6%94%B9.html">https://www.fwqtg.net/android-framework-%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%8825-1%EF%BC%89%E5%AE%9A%E5%88%B6cpuset%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-framework%E9%83%A8%E5%88%86%E4%BF%AE%E6%94%B9.html</a></p><p>你想要的Android性能优化系列：启动优化 ！手机桌面点击一个应用，用户希望应用能 及时响应、快速加载。启动时间过长的 - 掘金: <a href="https://juejin.cn/post/6854573215474253838">https://juejin.cn/post/6854573215474253838</a></p><p>Android-bugreport-分析方法####Android bugreport 概述 bugreport 是An - 掘金: <a href="https://juejin.cn/post/7201091178488840250">https://juejin.cn/post/7201091178488840250</a></p><p>zRAM内存压缩技术原理与应用: <a href="http://www.wowotech.net/memory_management/zram.html">http://www.wowotech.net/memory_management/zram.html</a></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h2><p>Android中模拟点击类软件实现原理探究 - 知乎: <a href="https://zhuanlan.zhihu.com/p/37672098">https://zhuanlan.zhihu.com/p/37672098</a></p><p>minitouch点击原理-CSDN博客: <a href="https://blog.csdn.net/aaajj/article/details/125836403">https://blog.csdn.net/aaajj/article/details/125836403</a></p><p>libevdev(3): <a href="https://man.freebsd.org/cgi/man.cgi?query=libevdev&sektion=3&manpath=FreeBSD+13.1-RELEASE+and+Ports">https://man.freebsd.org/cgi/man.cgi?query=libevdev&amp;sektion=3&amp;manpath=FreeBSD+13.1-RELEASE+and+Ports</a></p><p>Python+scrcpy+pyminitouch实现自动化（一）——scrcpy的安装_python scrcpy-CSDN博客: <a href="https://blog.csdn.net/Alkaid2000/article/details/123034871?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-123034871-blog-123411963.235%5Ev40%5Epc_relevant_3m_sort_dl_base1&spm=1001.2101.3001.4242.2&utm_relevant_index=4">https://blog.csdn.net/Alkaid2000/article/details/123034871?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-123034871-blog-123411963.235^v40^pc_relevant_3m_sort_dl_base1&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4</a></p><p>UiAutomator2+Pytest+Allure+PO模型实现Android自动化测试_atx-agent po模式-CSDN博客: <a href="https://blog.csdn.net/Q0717168/article/details/122272374">https://blog.csdn.net/Q0717168/article/details/122272374</a></p><p>使用adb screenrecord命令通过USB将Android投屏到PC - KirimaSharo’s Blog | Syaro最可爱了: <a href="https://kirimasharo.com/archives/455.html">https://kirimasharo.com/archives/455.html</a></p><p>DeviceFarmer&#x2F;minicap: Stream real-time screen capture data out of Android devices.: <a href="https://github.com/DeviceFarmer/minicap">https://github.com/DeviceFarmer/minicap</a></p><h1 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h1><p>从根上理解用户态与内核态欢迎来到操作系统系列，采用图解 + 大白话的形式来讲解，让小白也能看懂，帮助大家快速科普入门。 - 掘金: <a href="https://juejin.cn/post/6923863670132850701">https://juejin.cn/post/6923863670132850701</a></p><p>Android8添加arm64系统调用_arm64 unistd32.h-CSDN博客: <a href="https://blog.csdn.net/m0_37340681/article/details/98734047">https://blog.csdn.net/m0_37340681/article/details/98734047</a></p><p>ARM64内核系统调用添加方法（基于kernel-4.9）_arm64添加系统调用如何在应用层使用函数-CSDN博客: <a href="https://blog.csdn.net/rikeyone/article/details/79929032">https://blog.csdn.net/rikeyone/article/details/79929032</a></p><p>Android添加内核系统调用_rwprocmem33-CSDN博客: <a href="https://blog.csdn.net/m0_37340681/article/details/89704825">https://blog.csdn.net/m0_37340681/article/details/89704825</a></p><p>三、Android系统内核编译及刷机实战 （修改反调试标志位）_bootimg-tools-CSDN博客: <a href="https://blog.csdn.net/u012417380/article/details/73353670">https://blog.csdn.net/u012417380/article/details/73353670</a></p><p>android Bionic 添加系统调用_android bionic 添加指令-CSDN博客: <a href="https://blog.csdn.net/zhbpd/article/details/80988421">https://blog.csdn.net/zhbpd/article/details/80988421</a></p><p>【从源码过反调试】给安卓12内核增加个syscall - 知乎: <a href="https://zhuanlan.zhihu.com/p/597784829">https://zhuanlan.zhihu.com/p/597784829</a></p><p>【从源码过反调试】给安卓12内核增加个syscall - 知乎: <a href="https://zhuanlan.zhihu.com/p/597784829">https://zhuanlan.zhihu.com/p/597784829</a></p><h1 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h1><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><p>Kotlin 官方文档 中文版: <a href="https://book.kotlincn.net/">https://book.kotlincn.net/</a></p><p>View Binding 与Kotlin委托属性的巧妙结合，告别垃圾代码！ViewBinding 是Android St - 掘金: <a href="https://juejin.cn/post/6844904157808164878">https://juejin.cn/post/6844904157808164878</a></p><p>Kotlin | 利用by委托机制封装SharedPreference写在前面 Kotlin 中的委托机制是一种非常灵活 - 掘金: <a href="https://juejin.cn/post/7254581070876000293">https://juejin.cn/post/7254581070876000293</a></p><p>databinding设置View的layout_width和layout_height属性You must supply a layout_width attribute错误_databinding设置控件高度-CSDN博客: <a href="https://blog.csdn.net/zhuhai__yizhi/article/details/52921374">https://blog.csdn.net/zhuhai__yizhi/article/details/52921374</a></p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>Java LinkedHashMap 实现原理 - RustFisher 安卓|Java|设计模式|WebRTC|Python|NestJS|PyQt: <a href="https://www.an.rustfisher.com/java/container/map/Java-LinkedHashMap-code/">https://www.an.rustfisher.com/java/container/map/Java-LinkedHashMap-code/</a></p><p>Java集合分析之Map-这个Map有顺序（LinkedHashMap &amp; TreeMap）? 前文已经分析了 Hash - 掘金: <a href="https://juejin.cn/post/6844903581884088327#heading-12">https://juejin.cn/post/6844903581884088327#heading-12</a></p><p>Android-Interview&#x2F;Java&#x2F;JavaConcurrent&#x2F;多线程下生产者消费者问题的五种同步方法实现.md at master · LuckyTerry&#x2F;Android-Interview: <a href="https://github.com/LuckyTerry/Android-Interview/blob/master/Java/JavaConcurrent/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98%E7%9A%84%E4%BA%94%E7%A7%8D%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0.md">https://github.com/LuckyTerry/Android-Interview/blob/master/Java/JavaConcurrent/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98%E7%9A%84%E4%BA%94%E7%A7%8D%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0.md</a></p><p>Java并发编程之闭锁与栅栏闭锁与栅栏是在多线程编程中的概念，因为在多线程中，我们不能控制线程的执行状态，所以给线程加锁 - 掘金: <a href="https://juejin.cn/post/6854573208130027533">https://juejin.cn/post/6854573208130027533</a></p><p>Android（Java）—你知道吗？Java匿名内部类其实是有“名字”和构造方法的！##要点 匿名类的概念和用法 - 掘金: <a href="https://juejin.cn/post/7241385639504527397">https://juejin.cn/post/7241385639504527397</a></p><p>线程中断：Thread类中interrupt（）、interrupted（）和 isInterrupted（）方法详解 - myseries - 博客园: <a href="https://www.cnblogs.com/myseries/p/11107432.html">https://www.cnblogs.com/myseries/p/11107432.html</a></p><p>深入了解–线程中断 “interrupt()”,”isInterrupted()”和”interrupted()”-超详细介绍 - 掘金: <a href="https://juejin.cn/post/6905205099648417800">https://juejin.cn/post/6905205099648417800</a></p><p>Thread类中的interrupt()，interrupted()以及isInterrupted()区别_thread interrupt interrupted-CSDN博客: <a href="https://blog.csdn.net/yytree123/article/details/108896876">https://blog.csdn.net/yytree123/article/details/108896876</a></p><p>为什么调用了 interrupt() 后，isInterrupted() 返回的中断标识仍为 false_在sleep状态下被interrupt,interrupted 状态会被擦除,返回false-CSDN博客: <a href="https://blog.csdn.net/m0_51928480/article/details/129421747?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-129421747-blog-78913911.235%5Ev43%5Epc_blog_bottom_relevance_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-129421747-blog-78913911.235%5Ev43%5Epc_blog_bottom_relevance_base1&utm_relevant_index=2">https://blog.csdn.net/m0_51928480/article/details/129421747?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-129421747-blog-78913911.235%5Ev43%5Epc_blog_bottom_relevance_base1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-129421747-blog-78913911.235%5Ev43%5Epc_blog_bottom_relevance_base1&amp;utm_relevant_index=2</a></p><p>全网最详细的线程池 ThreadPoolExecutor 详解，建议收藏！ - Java技术栈 - 博客园: <a href="https://www.cnblogs.com/javastack/p/17958522">https://www.cnblogs.com/javastack/p/17958522</a></p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ol start="7"><li>命名约定 — Google 开源项目风格指南: <a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/naming.html">https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/naming.html</a></li><li>zh-cn&#x2F;contribute&#x2F;OpenHarmony-c-coding-style-guide.md · OpenHarmony&#x2F;docs - Gitee.com: <a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/contribute/OpenHarmony-c-coding-style-guide.md#%E5%BB%BA%E8%AE%AE13-%E5%87%BD%E6%95%B0%E7%9A%84%E5%91%BD%E5%90%8D%E9%81%B5%E5%BE%AA%E9%98%85%E8%AF%BB%E4%B9%A0%E6%83%AF">https://gitee.com/openharmony/docs/blob/master/zh-cn/contribute/OpenHarmony-c-coding-style-guide.md#%E5%BB%BA%E8%AE%AE13-%E5%87%BD%E6%95%B0%E7%9A%84%E5%91%BD%E5%90%8D%E9%81%B5%E5%BE%AA%E9%98%85%E8%AF%BB%E4%B9%A0%E6%83%AF</a></li></ol><h1 id="算法与设计模式"><a href="#算法与设计模式" class="headerlink" title="算法与设计模式"></a>算法与设计模式</h1><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>详解责任链模式以及Android事件分发简介 责任链模式，是行为型设计模式之一。我们将多个节点首尾相连所构成的模型称之为 - 掘金: <a href="https://juejin.cn/post/7001323545909264420">https://juejin.cn/post/7001323545909264420</a></p><p>Nice-Knowledge-System&#x2F;计算机基础&#x2F;设计模式&#x2F;责任链模式(Iterator-chain)&#x2F;责任链模式.md at master · maoqitian&#x2F;Nice-Knowledge-System: <a href="https://github.com/maoqitian/Nice-Knowledge-System/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F(Iterator-chain)/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.md">https://github.com/maoqitian/Nice-Knowledge-System/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F(Iterator-chain)/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.md</a></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>第 7 章 ? 树 - Hello 算法: <a href="https://www.hello-algo.com/chapter_tree/#_1">https://www.hello-algo.com/chapter_tree/#_1</a></p><p>krahets&#x2F;LeetCode-Book: 《剑指 Offer》 Python, Java, C++ 解题代码，LeetBook《图解算法数据结构》配套代码仓: <a href="https://github.com/krahets/LeetCode-Book">https://github.com/krahets/LeetCode-Book</a></p><h1 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h1><p>IjkPlayer 播放音频、完整代码；_ijk播放器 setaudioattributes-CSDN博客: <a href="https://blog.csdn.net/BirdEatBug/article/details/116715193">https://blog.csdn.net/BirdEatBug/article/details/116715193</a></p><p>leavesCZY&#x2F;ijkplayer-so-extend: 自定义编译 ijkplayer so 库以便支持无损音乐，支持 ape，wav，flac等格式: <a href="https://github.com/leavesCZY/ijkplayer-so-extend">https://github.com/leavesCZY/ijkplayer-so-extend</a></p><p>播放器性能优化之路下面是播放的完整流程：播放器加载一个网络url，首先要进行网络请求，网络如何优化，涉及到网络优化的方方 - 掘金: <a href="https://juejin.cn/post/6898867991161602061#heading-12">https://juejin.cn/post/6898867991161602061#heading-12</a></p><p>Android使用ExoPlayer(PlayerView)播放网络视频 前言 最近有个项目需要更新，发现ijkplay - 掘金: <a href="https://juejin.cn/post/7384636994980921382">https://juejin.cn/post/7384636994980921382</a></p><p>原生VideoView使用总结 | Jianqiu’s blog: <a href="https://niorgai.github.io/2016/11/02/Android-VideoView-tips/">https://niorgai.github.io/2016/11/02/Android-VideoView-tips/</a></p><p>支持的媒体格式 ?|? Android media ?|? Android Developers: <a href="https://developer.android.com/media/platform/supported-formats?hl=zh-cn">https://developer.android.com/media/platform/supported-formats?hl=zh-cn</a></p><p>Android修行手册 - VideoView全解-上??关于作者 ??前提 这是小空坚持写的Android新手向系列， - 掘金: <a href="https://juejin.cn/post/7101672387078258701">https://juejin.cn/post/7101672387078258701</a></p><p>Android修行手册 - VideoView全解-下??关于作者 ??前提 这是小空坚持写的Android新手向系列， - 掘金: <a href="https://juejin.cn/post/7101838355700121613">https://juejin.cn/post/7101838355700121613</a></p><p>好看视频Android重构——围绕于播放器的重构实践_51CTO博客_android视频播放器的制作: <a href="https://blog.51cto.com/u_15082365/3992395">https://blog.51cto.com/u_15082365/3992395</a></p><p>04.视频播放器通用架构实践对于视图状态切换和后期维护拓展，避免功能和业务出现耦合。比如需要支持播放器UI高度定制，而不 - 掘金: <a href="https://juejin.cn/post/6884170166863986695">https://juejin.cn/post/6884170166863986695</a></p><p>一个被标记为图片的“视频”可以播放吗视频竟然被识别为png，我们能够播放它吗？本文为了呈现一个png视频文件如何被播放出 - 掘金: <a href="https://juejin.cn/post/6964241629720887327#heading-5">https://juejin.cn/post/6964241629720887327#heading-5</a></p><p>Android 系统播放器的一些使用注意事项 - 简书: <a href="https://www.jianshu.com/p/d27f79119691">https://www.jianshu.com/p/d27f79119691</a></p><p>Android音视频开发系列-VideoView使用一起养成写作习惯！这是我参与「掘金日新计划 · 4 月更文挑战」的第 - 掘金: <a href="https://juejin.cn/post/7085243234523283464">https://juejin.cn/post/7085243234523283464</a></p><p>jiajunhui&#x2F;PlayerBase: The basic library of Android player will process complex business components. The access is simple。Android播放器基础库，专注于播放视图组件的高复用性和组件间的低耦合，轻松处理复杂业务。: <a href="https://github.com/jiajunhui/PlayerBase">https://github.com/jiajunhui/PlayerBase</a></p><p>探索移动端音视频与GSYVideoPlayer之旅 ｜ Agora Talk今天将给你恶补各种平时可能你不会在意的音视频 - 掘金: <a href="https://juejin.cn/post/7057132141875822622">https://juejin.cn/post/7057132141875822622</a></p><p>移动开发者的必知音视频基础知识作为移动开发者，大多数时候会需要接触到音视频相关的开发，而其实严格意义上我也并不是专职的音 - 掘金: <a href="https://juejin.cn/post/6844904039503626247">https://juejin.cn/post/6844904039503626247</a></p><p>06.播放器UI抽取封装对于视图状态切换和后期维护拓展，避免功能和业务出现耦合。比如需要支持播放器UI高度定制，而不是该 - 掘金: <a href="https://juejin.cn/post/6884028627697500167#heading-2">https://juejin.cn/post/6884028627697500167#heading-2</a></p><p>01.视频播放器框架介绍对于视图状态切换和后期维护拓展，避免功能和业务出现耦合。比如需要支持播放器UI高度定制，而不是该 - 掘金: <a href="https://juejin.cn/post/6883457444752654343">https://juejin.cn/post/6883457444752654343</a></p><p>pili-engineering&#x2F;QPlayer2-Android: <a href="https://github.com/pili-engineering/QPlayer2-Android">https://github.com/pili-engineering/QPlayer2-Android</a></p><p>基础功能–视频直播-火山引擎: <a href="https://www.volcengine.com/docs/6469/95393">https://www.volcengine.com/docs/6469/95393</a> （接口设计）</p><p>最新有效m3u8格式直播地址(亲测有效长期维护)_m3u8直播源-CSDN博客: <a href="https://blog.csdn.net/u014696856/article/details/134442845">https://blog.csdn.net/u014696856/article/details/134442845</a></p><p>M3U8播放器|M3U8视频|M3U8 Player|直播源|解析器|下载器|转换器|APP|Windows|下载 - m3u8play.com: <a href="https://m3u8play.com/">https://m3u8play.com/</a></p><p>Android中播放音乐的几种方式_安卓开发播放音乐-CSDN博客: <a href="https://blog.csdn.net/u013366008/article/details/76577372">https://blog.csdn.net/u013366008/article/details/76577372</a></p><h2 id="IJK"><a href="#IJK" class="headerlink" title="IJK"></a>IJK</h2><p>ijk播放器缓冲机制_ijk缓存-CSDN博客: <a href="https://blog.csdn.net/m0_37624402/article/details/127768229">https://blog.csdn.net/m0_37624402/article/details/127768229</a></p><p>IjkPlayer播放器秒开优化以及常用Option设置 - 简书: <a href="https://www.jianshu.com/p/843c86a9e9ad">https://www.jianshu.com/p/843c86a9e9ad</a></p><p>请问ijkhttphook如何设置？ · Issue #3508 · bilibili&#x2F;ijkplayer: <a href="https://github.com/Bilibili/ijkplayer/issues/3508">https://github.com/Bilibili/ijkplayer/issues/3508</a></p><p>ijkplayer-hook协议实现分析_ijkmediaplayer.onnativeinvokelistener-CSDN博客: <a href="https://blog.csdn.net/u010029439/article/details/106940633">https://blog.csdn.net/u010029439/article/details/106940633</a></p><p>android ijkplayer 中遇到的问题_ijk 4k卡顿-CSDN博客: <a href="https://blog.csdn.net/Zophar_Development/article/details/105681351">https://blog.csdn.net/Zophar_Development/article/details/105681351</a></p><p>ijkplayer直播播放器使用经验之谈——卡顿优化和秒开实现_libijkplayer 播放直播流卡顿-CSDN博客: <a href="https://blog.csdn.net/cmshao/article/details/80149176">https://blog.csdn.net/cmshao/article/details/80149176</a></p><p>ijkplayer 断线重连问题_移动开发-CSDN问答: <a href="https://ask.csdn.net/questions/7462194">https://ask.csdn.net/questions/7462194</a></p><p>音频开发ijkplayer小结 android-腾讯云开发者社区-腾讯云: <a href="https://cloud.tencent.com/developer/article/1141278">https://cloud.tencent.com/developer/article/1141278</a></p><p>ijkplayer音频播放分析_ijkplayer 播放音频-CSDN博客: <a href="https://blog.csdn.net/sjdjdjdjahd/article/details/125656367">https://blog.csdn.net/sjdjdjdjahd/article/details/125656367</a></p><p>ijkplayer中遇到的问题汇总在做音频播放的时候，很多公司使用的是开源的ijkplayer播放器，ijkplayer - 掘金: <a href="https://juejin.cn/post/6844904101717737486">https://juejin.cn/post/6844904101717737486</a></p><h2 id="本地代理（缓存）"><a href="#本地代理（缓存）" class="headerlink" title="本地代理（缓存）"></a>本地代理（缓存）</h2><p>反思 | Android 音视频缓存机制的系统性设计本文将针对 Android 音视频缓存解决方案中，先驱级别的 And - 掘金: <a href="https://juejin.cn/post/7011881370968408071">https://juejin.cn/post/7011881370968408071</a></p><p>Robin-jiangyufeng&#x2F;LazyCacheForAndroid: android缓存库,具有二级缓存功能,可以自己定实现三级缓存;可扩展性高: <a href="https://github.com/Robin-jiangyufeng/LazyCacheForAndroid">https://github.com/Robin-jiangyufeng/LazyCacheForAndroid</a></p><p>Android 的二级缓存如此简单 - 简书: <a href="https://www.jianshu.com/p/6146de689e2a">https://www.jianshu.com/p/6146de689e2a</a></p><p>Android 边播放边缓存视频框架AndroidVideoCache简析 - 个人文章 - SegmentFault 思否: <a href="https://segmentfault.com/a/1190000042342132">https://segmentfault.com/a/1190000042342132</a></p><p>Android进阶之路 - VideoView从入门到实践_android videoview-CSDN博客: <a href="https://blog.csdn.net/qq_20451879/article/details/118151866">https://blog.csdn.net/qq_20451879/article/details/118151866</a></p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><p>基础能力 &#x2F; 网络 &#x2F; 局域网通信: <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/mDNS.html">https://developers.weixin.qq.com/miniprogram/dev/framework/ability/mDNS.html</a><br>小程序有没有能实现dlna投屏功能的方法？ | 微信开放社区: <a href="https://developers.weixin.qq.com/community/develop/doc/0000ca60784748677d7f569b65d000?highLine=dlna">https://developers.weixin.qq.com/community/develop/doc/0000ca60784748677d7f569b65d000?highLine=dlna</a></p><p>媒体 &#x2F; 视频 &#x2F; VideoContext: <a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.html">https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.html</a></p><p>从文档出发，来聊一聊小程序的服务端开发 | 微信开放社区: <a href="https://developers.weixin.qq.com/community/develop/article/doc/0004ce700c8350866929e10515b413">https://developers.weixin.qq.com/community/develop/article/doc/0004ce700c8350866929e10515b413</a></p><p>mDNS 局域网通信 | 微信开放社区: <a href="https://developers.weixin.qq.com/community/develop/doc/0004ac496908a0e6fe97d103851000?highLine=dlna">https://developers.weixin.qq.com/community/develop/doc/0004ac496908a0e6fe97d103851000?highLine=dlna</a></p><p>使用小程序UDP API功能，实现调试本地UDP服务 | 微信开放社区: <a href="https://developers.weixin.qq.com/community/develop/article/doc/000c8ad4ec8338dc754178f9666813">https://developers.weixin.qq.com/community/develop/article/doc/000c8ad4ec8338dc754178f9666813</a></p><h1 id="专利"><a href="#专利" class="headerlink" title="专利"></a>专利</h1><p>CN108595214A - 安卓user版本在SELinux强制模式下获取root特权的方法及系统 - Google Patents: <a href="https://patents.google.com/patent/CN108595214A/zh">https://patents.google.com/patent/CN108595214A/zh</a></p><p>CN105607921A - 一种基于Android系统的系统服务启动方法及系统 - Google Patents: <a href="https://patents.google.com/patent/CN105607921A/zh">https://patents.google.com/patent/CN105607921A/zh</a></p><p>CN111382425A - 多签名机制下的应用安装管理方法、智能终端及存储介质 - Google Patents: <a href="https://patents.google.com/patent/CN111382425A/zh">https://patents.google.com/patent/CN111382425A/zh</a></p><p>CN102662870A - 基于vfs层拦截读写请求的安卓操作系统保护方法 - Google Patents: <a href="https://patents.google.com/patent/CN102662870A/zh">https://patents.google.com/patent/CN102662870A/zh</a></p><p>CN103455416A - 一种基于占用Android系统智能设备内存和CPU的压力测试方法 - Google Patents: <a href="https://patents.google.com/patent/CN103455416A/zh">https://patents.google.com/patent/CN103455416A/zh</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一些有效的工作方法</title>
    <link href="/article/b6e36186/"/>
    <url>/article/b6e36186/</url>
    
    <content type="html"><![CDATA[<p>安卓第三方库选择：要考虑兼容性、可维护性、性能比较</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>android IPC: 安卓进程间通讯的几种方式</title>
    <link href="/article/7bbe7ac8/"/>
    <url>/article/7bbe7ac8/</url>
    
    <content type="html"><![CDATA[<p>Android中目前存在多种IPC方式，分别为：</p><ul><li><p>Bundle</p></li><li><p>文件共享</p></li><li><p>Messenger</p></li><li><p>AIDL</p></li><li><p>ContentProvider</p></li><li><p>Socket</p></li><li><h3 id="IPC方式的优缺点和适用场景"><a href="#IPC方式的优缺点和适用场景" class="headerlink" title="IPC方式的优缺点和适用场景"></a>IPC方式的优缺点和适用场景</h3><table><thead><tr><th>方式</th><th>能力</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td>AIDL</td><td>支持一对多并发通信、支持实时通信、支持跨进程函数调用</td><td>需要独立定义.aidl规范、需要添加.aidl文件、使用较复杂</td><td>一对多即时通信，有RPC需求</td></tr><tr><td>Messenger</td><td>支持一对多串行通信、支持实时通信、支持Bundle传递</td><td>无需独立定义.aidl规范、无需添加.aidl文件、使用较简洁</td><td>低并发的一对多即时通信，无返回结果的RPC需求</td></tr></tbody></table></li></ul><p><a href="https://segmentfault.com/a/1190000040558520">「Android」基于轻量级Messenger的进程通信 - 个人文章 - SegmentFault 思否</a></p>]]></content>
    
    
    <categories>
      
      <category>Android IPC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android ipc</tag>
      
      <tag>android rpc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓源码环境:Android.mk如何编译aar包?</title>
    <link href="/article/797e1cc1/"/>
    <url>/article/797e1cc1/</url>
    
    <content type="html"><![CDATA[<p>在安卓源码top目录执行编译命令：（注意：下面的Android.mk要被include进去）</p><p><code>make test_aar out/target/common/obj/JAVA_LIBRARIES/test_aar_intermediates/javalib.aar</code></p><p>通用格式：<code>make &lt;module-name&gt; out/target/common/obj/JAVA_LIBRARIES/&lt;module-name&gt;_intermediates/javalib.aar</code></p><p>把<module-name>替换成LOCAL_MODULE的名字。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs makefile">LOCAL_PATH := <span class="hljs-variable">$(<span class="hljs-built_in">call</span> my-<span class="hljs-built_in">dir</span>)</span><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(CLEAR_VARS)</span><br><br>LOCAL_MODULE_TAGS := optional<br><br>LOCAL_MODULE := test_aar<br><br>LOCAL_STATIC_JAVA_LIBRARIES :=android-common \<br>    android-support-v4 \<br><br><span class="hljs-comment"># LOCAL_STATIC_JAVA_AAR_LIBRARIES:= abc</span><br><br>LOCAL_SRC_FILES := <span class="hljs-variable">$(<span class="hljs-built_in">call</span> all-java-files-under, java)</span><br><br>res_dirs := res \<br><br>LOCAL_RESOURCE_DIR := <span class="hljs-variable">$(<span class="hljs-built_in">addprefix</span> <span class="hljs-variable">$(LOCAL_PATH)</span>/, <span class="hljs-variable">$(res_dirs)</span>)</span> \<br>    prebuilts/sdk/current/support/v7/cardview/res \<br>    prebuilts/sdk/current/support/v7/appcompat/res \<br>    prebuilts/sdk/current/support/design/res \<br><br>LOCAL_AAPT_FLAGS := \<br>    --auto-add-overlay \<br>    --extra-packages android.support.v7.cardview \<br>    --extra-packages android.support.v7.appcompat \<br>    --extra-packages android.support.design \<br>    --extra-packages com.abc.abc<br><br><br>LOCAL_JACK_ENABLED := disabled <br>LOCAL_PROGUARD_ENABLED := disabled <br><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(BUILD_STATIC_JAVA_LIBRARY)</span><br></code></pre></td></tr></table></figure><p><a href="https://android.googlesource.com/platform/build/+/master/core/static_java_library.mk#133">https://android.googlesource.com/platform/build/+/master/core/static_java_library.mk#133</a></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># Rule to build AAR, archive including classes.jar, resource, etc.</span><br>built_aar := $(intermediates.COMMON)/javalib.aar<br><span class="hljs-variable">$(built_aar)</span>: PRIVATE_MODULE := <span class="hljs-variable">$(LOCAL_MODULE)</span><br><span class="hljs-variable">$(built_aar)</span>: PRIVATE_ANDROID_MANIFEST := <span class="hljs-variable">$(full_android_manifest)</span><br><span class="hljs-variable">$(built_aar)</span>: PRIVATE_CLASSES_JAR := <span class="hljs-variable">$(aar_classes_jar)</span><br><span class="hljs-variable">$(built_aar)</span>: PRIVATE_RESOURCE_DIR := <span class="hljs-variable">$(LOCAL_RESOURCE_DIR)</span><br><span class="hljs-variable">$(built_aar)</span>: PRIVATE_R_TXT := $(intermediates.COMMON)/R.txt<br><span class="hljs-variable">$(built_aar)</span>: <span class="hljs-variable">$(JAR_ARGS)</span><br><span class="hljs-variable">$(built_aar)</span> : <span class="hljs-variable">$(aar_classes_jar)</span> <span class="hljs-variable">$(full_android_manifest)</span> $(intermediates.COMMON)/R.txt<br>@echo <span class="hljs-string">&quot;target AAR:  <span class="hljs-variable">$(PRIVATE_MODULE)</span> (<span class="hljs-variable">$@</span>)&quot;</span><br><span class="hljs-variable">$(hide)</span> rm -rf <span class="hljs-variable">$(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$@</span>)</span>aar &amp;&amp; mkdir -p <span class="hljs-variable">$(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$@</span>)</span>aar/res<br><span class="hljs-variable">$(hide)</span> cp <span class="hljs-variable">$(PRIVATE_ANDROID_MANIFEST)</span> <span class="hljs-variable">$(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$@</span>)</span>aar/AndroidManifest.xml<br><span class="hljs-variable">$(hide)</span> cp <span class="hljs-variable">$(PRIVATE_CLASSES_JAR)</span> <span class="hljs-variable">$(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$@</span>)</span>aar/classes.jar<br><span class="hljs-comment"># Note: Use &quot;cp -n&quot; to honor the resource overlay rules, if multiple res dirs exist.</span><br><span class="hljs-variable">$(hide)</span> <span class="hljs-variable">$(<span class="hljs-built_in">foreach</span> res,<span class="hljs-variable">$(PRIVATE_RESOURCE_DIR)</span>,cp -Rfn <span class="hljs-variable">$(res)</span>/* $(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$@</span>)</span>aar/res;)<br><span class="hljs-variable">$(hide)</span> cp <span class="hljs-variable">$(PRIVATE_R_TXT)</span> <span class="hljs-variable">$(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$@</span>)</span>aar/R.txt<br><span class="hljs-variable">$(hide)</span> <span class="hljs-variable">$(JAR)</span> -cMf <span class="hljs-variable">$@</span> \<br>  <span class="hljs-variable">$(<span class="hljs-built_in">call</span> jar-args-sorted-files-in-directory,$(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$@</span>)</span>aar)<br><br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>how to create AAR archive file from Android.mk - Stack Overflow: <a href="https://stackoverflow.com/questions/42070123/how-to-create-aar-archive-file-from-android-mk">https://stackoverflow.com/questions/42070123/how-to-create-aar-archive-file-from-android-mk</a></p><p>Build AAR package as part of AOSP build: <a href="https://groups.google.com/g/android-building/c/htNXz9Lkq7E?pli=1">https://groups.google.com/g/android-building/c/htNXz9Lkq7E?pli=1</a></p>]]></content>
    
    
    <categories>
      
      <category>Android Build System</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>aosp编译</tag>
      
      <tag>Android.mk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jadx内存不足和反编译失败官方解决办法</title>
    <link href="/article/5ee2a33b/"/>
    <url>/article/5ee2a33b/</url>
    
    <content type="html"><![CDATA[<p>如果搜索引擎搜索了好久都解决不了问题，建议到官方文档看一下。</p><p><a href="https://github.com/skylot/jadx/wiki/Troubleshooting-Q&A#decompilation-issues">Troubleshooting Q&amp;A · skylot&#x2F;jadx Wiki</a></p><h3 id="内存不足问题"><a href="#内存不足问题" class="headerlink" title="内存不足问题"></a>内存不足问题</h3><h4 id="方法一：在反编译设置里减少处理线程数"><a href="#方法一：在反编译设置里减少处理线程数" class="headerlink" title="方法一：在反编译设置里减少处理线程数"></a>方法一：在反编译设置里减少处理线程数</h4><h4 id="方法二：在反编译设置里排除不需要的包"><a href="#方法二：在反编译设置里排除不需要的包" class="headerlink" title="方法二：在反编译设置里排除不需要的包"></a>方法二：在反编译设置里排除不需要的包</h4><h4 id="方法三：在设置中启用磁盘缓存"><a href="#方法三：在设置中启用磁盘缓存" class="headerlink" title="方法三：在设置中启用磁盘缓存"></a>方法三：在设置中启用磁盘缓存</h4><h4 id="方法四：为-Jadx-分配更多内存"><a href="#方法四：为-Jadx-分配更多内存" class="headerlink" title="方法四：为 Jadx 分配更多内存"></a>方法四：为 Jadx 分配更多内存</h4><p>方法一：编辑脚本<code>bin/jadx-gui</code>或<code>bin/jadx-gui.bat</code> (Windows) 并通过修改<code>DEFAULT_JVM_OPTS</code>的定义将最大堆内存从 4 ( <code>-Xmx4g</code> ) 更改为 8 GB ( <code>-Xmx8g</code> ) </p><p><code>DEFAULT_JVM_OPTS=&#39;&quot;-Xms128M&quot; &quot;-Xmx8g&quot; &quot;-Dawt.useSystemAAFontSettings=lcd&quot; &quot;-Dswing.aatext=true&quot; &quot;-XX:+UseG1GC&quot;&#39;</code></p><p>方法二：如果您使用的是 Windows 并使用<code>jadx-gui.exe</code>请在<code>jadx-gui.exe</code>所在的同一目录中创建一个文本文件<code>jadx-gui.l4j.ini</code> 。对于最大 8 GB 内存&#x2F;堆，请编辑该文本文件并将其内容设置为：</p><p><code>-Xmx8g</code></p><p>如果您使用的是不稳定版本或 Jadx 或者您已重命名<code>jadx-gui.exe</code> ，则还必须调整<code>.l4j.ini</code>文件名。</p><p>例子：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini">Jadx file-name:        jadx-gui-1.1.0-b1279-2207cd7b.exe<br>Jadx config file name: jadx-gui-1.1.0-b1279-2207cd7b.l4j.ini.<br></code></pre></td></tr></table></figure><h3 id="反编译失败"><a href="#反编译失败" class="headerlink" title="反编译失败"></a>反编译失败</h3><p>勾选反编译-显示不一致的代码 <code>Show inconsistent code</code> (<code>--show-bad-code</code> in jadx-cli)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;Method not decompiled:xxxxxxxxxxx&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>安卓安全和逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jadx</tag>
      
      <tag>反编译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哔哩哔哩直播链接报403解决办法</title>
    <link href="/article/c0d037a/"/>
    <url>/article/c0d037a/</url>
    
    <content type="html"><![CDATA[<p>最近投屏接到客诉说苹果哔哩哔哩客户端投直播会显示播放失败。</p><p>我测试发现安卓端哔哩哔哩是正常的，某投屏软件也能正常播放，我对此感到困惑。通过<code>tcpdump</code>分析，发现它的ijk播放器在访问链接时改变了User Agent。</p><p>然后我就开始测试了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">headers.put(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;Mozilla/5.0.BiliTV/1.7.2&quot;</span>); <span class="hljs-comment">//正常</span><br>headers.put(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;Bilibili Freedoooooom/MarkII&quot;</span>);<span class="hljs-comment">//正常</span><br>headers.put(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;Linux Androi&quot;</span>);<span class="hljs-comment">//正常</span><br>headers.put(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;Android&quot;</span>);<span class="hljs-comment">//403 forbidden</span><br>headers.put(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;stagefright&quot;</span>);<span class="hljs-comment">//403 forbidden</span><br>headers.put(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<span class="hljs-comment">//正常</span><br>headers.put(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;Androi&quot;</span>);<span class="hljs-comment">//正常</span><br>headers.put(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;stagefrigh&quot;</span>);<span class="hljs-comment">//正常</span><br></code></pre></td></tr></table></figure><p>经测试发现含有Android或者stagefright都会导致访问403，其他都正常。</p><p>而安卓默认的User Agent就包含了Android和stagefright。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">AString <span class="hljs-title function_">MakeUserAgent</span><span class="hljs-params">()</span> &#123;<br>    AString ua;<br>    ua.append(<span class="hljs-string">&quot;stagefright/1.2 (Linux;Android &quot;</span>);<br>#<span class="hljs-keyword">if</span> (PROPERTY_VALUE_MAX &lt; <span class="hljs-number">8</span>)<br>#error <span class="hljs-string">&quot;PROPERTY_VALUE_MAX must be at least 8&quot;</span><br>#endif<br>    <span class="hljs-type">char</span> value[PROPERTY_VALUE_MAX];<br>    property_get(<span class="hljs-string">&quot;ro.build.version.release&quot;</span>, value, <span class="hljs-string">&quot;Unknown&quot;</span>);<br>    ua.append(value);<br>    ua.append(<span class="hljs-string">&quot;)&quot;</span>);<br>    <span class="hljs-keyword">return</span> ua;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>既然知道了问题原因，那么解决起来就很简单了，当判断是哔哩哔哩的直播链接时，改变播放器的user agent。</p><h3 id="ijk播放器"><a href="#ijk播放器" class="headerlink" title="ijk播放器"></a>ijk播放器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mIjkPlayer.setOption(IjkMediaPlayer.OPT_CATEGORY_FORMAT, <span class="hljs-string">&quot;user_agent&quot;</span>, <span class="hljs-string">&quot;Bilibili Freedoooooom/MarkII&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="MediaPlayer播放器"><a href="#MediaPlayer播放器" class="headerlink" title="MediaPlayer播放器"></a>MediaPlayer播放器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">headers.put(<span class="hljs-string">&quot;User-Agent&quot;</span>, <span class="hljs-string">&quot;Bilibili Freedoooooom/MarkII&quot;</span>);<br>mPlayer.setDataSource(<span class="hljs-built_in">this</span>, Uri.parse(videoUrl), headers);<br></code></pre></td></tr></table></figure><p>注意，由于谷歌的bug，安卓5.0和5.1不支持该设置</p><p>[MediaPlayer ignores User-Agent header <a href="https://issuetracker.google.com/issues/37018604?pli=1">37018604] - Issue Tracker</a></p><p><a href="https://android-review.googlesource.com/c/platform/frameworks/av/+/124333/1/media/libstagefright/http/MediaHTTP.cpp#b53">…&#x2F;MediaHTTP.cpp · Gerrit Code Review</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>当然也可以通过本地代理来解决，拦截播放请求就可以随意改变user agent了，这也可以解决安卓5.0以下MediaPlayer不支持某些tls版本的问题。</p><p>参考链接：</p><p><a href="https://blog.51cto.com/u_16213339/7466348">哔哩哔哩视频403Forbidden原因</a></p><p><a href="https://im.salty.fish/index.php/archives/revengr-bilibili-352.html">浅度剖析B站的新 -352 风控策略 - A Salty Blog</a></p>]]></content>
    
    
    <categories>
      
      <category>投屏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>投屏</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android java.lang.IncompatibleClassChangeError</title>
    <link href="/article/a299c970/"/>
    <url>/article/a299c970/</url>
    
    <content type="html"><![CDATA[<p>最近为了解决一个问题，需要在升级X应用时对其做startInstrumentation。功能上线后，数据监控平台发现存在IncompatibleClassChangeError，主要集中在安卓5.1，6.0，少量在安卓8.0。究竟是怎么回事呢？一起来分析一下。</p><p>安卓6.0机器</p><blockquote><p>java.lang.IncompatibleClassChangeError: retrofit2.converter.gson.GsonConverterFactory at dalvik.system.DexFile.defineClassNative(Native Method) at dalvik.system.DexFile.defineClass(DexFile.java:226) at dalvik.system.DexFile.loadClassBinaryName(DexFile.java:219) at dalvik.system.DexPathList.findClass(DexPathList.java:339) at dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:54) at java.lang.ClassLoader.loadClass(ClassLoader.java:511) at java.lang.ClassLoader.loadClass(ClassLoader.java:469) at</p></blockquote><p>安卓8.0机器：</p><blockquote><p>java.lang.IncompatibleClassChangeError: Structural change of retrofit2.Converter$Factory is hazardous (&#x2F;data&#x2F;app&#x2F;com.xxx.xx-2zz63J0ZnL47Rw6U5B3wfw&#x3D;&#x3D;&#x2F;oat&#x2F;arm&#x2F;base.odex at compile time, &#x2F;data&#x2F;app&#x2F;com.xxx.tool-L0IRpZwtps6TiRfTUrRDAw&#x3D;&#x3D;&#x2F;oat&#x2F;arm&#x2F;base.odex at runtime): Direct method count off: 3 vs 1 Lretrofit2&#x2F;Converter$Factory; (Compile time): Static fields: Instance fields: Direct methods: <init>()V getParameterUpperBound(ILjava&#x2F;lang&#x2F;reflect&#x2F;ParameterizedType;)Ljava&#x2F;lang&#x2F;reflect&#x2F;Type; </p></blockquote><p>注意安卓6抛出的AndroidRuntime没有直接说明原因，不如安卓8清晰。</p><p>首先看一下IncompatibleClassChangeError的定义：</p><table><thead><tr><th><a href="https://developer.android.com/reference/java/lang/Object">java.lang.Object</a></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>↳</td><td><a href="https://developer.android.com/reference/java/lang/Throwable">java.lang.Throwable</a></td><td></td><td></td><td></td></tr><tr><td></td><td>↳</td><td><a href="https://developer.android.com/reference/java/lang/Error">java.lang.Error</a></td><td></td><td></td></tr><tr><td></td><td></td><td>↳</td><td><a href="https://developer.android.com/reference/java/lang/LinkageError">java.lang.LinkageError</a></td><td></td></tr><tr><td></td><td></td><td></td><td>↳</td><td>java.lang.IncompatibleClassChangeError</td></tr></tbody></table><blockquote><p>当某个类定义发生了不兼容的变更时抛出。当前正在执行的方法所依赖的某个类的类定义已经发生了变化。</p></blockquote><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>经过分析源码发现，谷歌在Jan 15, 2015，也就是安卓5.1.1开始，加入了以下提交：</p><p><a href="https://android-review.googlesource.com/c/platform/art/+/123364">ART: Simple structural class check (123364) · Gerrit Code Review</a></p><blockquote><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs smali">ART: Simple structural class<span class="hljs-built_in"> check</span><br><span class="hljs-built_in"></span><br>Adds a simple<span class="hljs-built_in"> check </span>to class-loading when the embedded dex file in<br>an oat file<span class="hljs-built_in"> and </span>the dex file on the class path where we found the<br>class do<span class="hljs-built_in"> not </span>match.<br><br>We require that the number of methods<span class="hljs-built_in"> and </span>fields do<span class="hljs-built_in"> not </span>change, as<br>that will almost certainly mean that quickened<span class="hljs-built_in"> and </span>other compiled<br>offsets are wrong now. This is a reasonably lightweight change, but<br>we should investigate a full comparison including name<span class="hljs-built_in"> and </span>type of<br>members.<br></code></pre></td></tr></table></figure></blockquote><p>关键方法就是<code>CheckSuperClassChange</code>和<code>SimpleStructuralCheck</code>，简单来说就是当art虚拟机发现加载类的dex路径和父类dex路径不一致时，就会执行SimpleStructuralCheck检查，如果发现来自两个dex文件的父类的方法数、字段数不一致，就会抛出异常。</p><p>但是从类的兼容性角度来看，这样的粗暴检查是不合理的。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>Add API method</strong></td><td>If method need not be reimplemented by Client  If method must be reimplemented by Client</td><td>Binary compatible (0)  <strong>Breaks compatibility</strong> (1)</td></tr><tr><td>Delete API method</td><td>-</td><td><strong>Breaks compatibility</strong></td></tr><tr><td>Move API method up type hierarchy</td><td>If method in supertype need not be reimplemented by Client &lt;br If method in supertype must be reimplemented by Client</td><td>Binary compatible  <strong>Breaks compatibility</strong> (9)</td></tr><tr><td>Move API method down type hierarchy</td><td>-</td><td><strong>Breaks compatibility</strong> (9)</td></tr><tr><td>Add API constructor</td><td>If there are other constructors  If this is only constructor</td><td>Binary compatible  <strong>Breaks compatibility</strong> (2)</td></tr><tr><td>Delete API constructor</td><td>-</td><td><strong>Breaks compatibility</strong></td></tr><tr><td><strong>Add API field</strong></td><td>If class is not subclassable by Client (this includes enums)  If class is subclassable by Client</td><td>Binary compatible  <strong>May break compatibility</strong> (3)</td></tr><tr><td>Delete API field</td><td>-</td><td><strong>Breaks compatibility</strong></td></tr><tr><td>Expand superinterface set (direct or inherited)</td><td>-</td><td>Binary compatible</td></tr><tr><td>Contract superinterface set (direct or inherited)</td><td>-</td><td><strong>Breaks compatibility</strong> (4)</td></tr><tr><td>Expand superclass set (direct or inherited)</td><td>-</td><td>Binary compatible</td></tr><tr><td>Contract superclass set (direct or inherited)</td><td>-</td><td><strong>Breaks compatibility</strong> (4)</td></tr><tr><td>Add, delete, or change static or instance initializers</td><td>-</td><td>Binary compatible</td></tr><tr><td>Add API type member</td><td>-</td><td>Binary compatible</td></tr><tr><td>Delete API type member</td><td>-</td><td><strong>Breaks compatibility</strong></td></tr><tr><td>Re-order field, method, constructor, and type member declarations</td><td>-</td><td>Binary compatible</td></tr><tr><td>Add or delete non-API members; that is, <code>private</code> or default access fields, methods, constructors, and type members</td><td>-</td><td>Binary compatible</td></tr><tr><td>Change <code>abstract</code> to non-<code>abstract</code></td><td>-</td><td>Binary compatible</td></tr><tr><td>Change non-<code>abstract</code> to <code>abstract</code></td><td>-</td><td><strong>Breaks compatibility</strong> (5)</td></tr><tr><td>Change <code>final</code> to non-<code>final</code></td><td>-</td><td>Binary compatible</td></tr><tr><td>Change non-<code>final</code> to <code>final</code></td><td>-</td><td><strong>Breaks compatibility</strong> (6)</td></tr><tr><td>Add type parameter</td><td>If class has no type parameters  If class has type parameters</td><td>Binary compatible (7)  <strong>Breaks compatibility</strong></td></tr><tr><td>Delete type parameter</td><td>-</td><td><strong>Breaks compatibility</strong></td></tr><tr><td>Re-order type parameters</td><td>-</td><td><strong>Breaks compatibility</strong></td></tr><tr><td>Rename type parameter</td><td>-</td><td>Binary compatible</td></tr><tr><td>Add, delete, or change type bounds of type parameter</td><td>-</td><td><strong>Breaks compatibility</strong></td></tr><tr><td>Rename enum constant</td><td>-</td><td><strong>Breaks compatibility</strong></td></tr><tr><td>Add, change, or delete enum constant arguments</td><td>-</td><td>Binary compatible</td></tr><tr><td>Add, change, or delete enum constant class body</td><td>-</td><td>Binary compatible</td></tr><tr><td>Add enum constant</td><td>-</td><td>Binary compatible (8)</td></tr><tr><td>Delete enum constant</td><td>-</td><td><strong>Breaks compatibility</strong></td></tr><tr><td>Re-order enum constants</td><td>-</td><td>Binary compatible (8)</td></tr></tbody></table><p>后面谷歌意识到了这个问题，在安卓8.1去掉了，<a href="https://android-review.googlesource.com/c/platform/art/+/421051">Revert “ART: Simple structural class check” (421051) · Gerrit Code Review</a></p><blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Revert <span class="hljs-string">&quot;ART: Simple structural class check&quot;</span><br><br>This reverts commit fd9eb3923dcf417afcf5ed4ebb<span class="hljs-symbol">13867f</span>d<span class="hljs-symbol">10f</span>2de3.<br><br>Remove the simple structural check. Its naive expectations for<br>resolution have <span class="hljs-keyword">been </span>wrong since we introduced compiling APKs with<br>a classpath for <span class="hljs-keyword">shared </span>libraries <span class="hljs-keyword">and </span>have never <span class="hljs-keyword">been </span>updated.<br></code></pre></td></tr></table></figure></blockquote><p>所以，<code>java.lang.IncompatibleClassChangeError: Structural change of</code> ……. 这个错误波及范围是安卓5.1到安卓8.0。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>安卓6.0</p><p><a href="http://aospxref.com/android-6.0.1_r9/xref/art/runtime/class_linker.cc">class_linker.cc - OpenGrok cross reference for &#x2F;art&#x2F;runtime&#x2F;class_linker.cc</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Very simple structural check on whether the classes match. Only compares the number of</span><br><span class="hljs-comment">// methods and fields.</span><br> <span class="hljs-comment">// 校验当前加载的父类与编译时(dex2oat)的父类是否一致(odex中的数据结构)</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">SimpleStructuralCheck</span><span class="hljs-params">(<span class="hljs-type">const</span> DexFile&amp; dex_file1, <span class="hljs-type">const</span> DexFile::ClassDef&amp; dex_class_def1,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  <span class="hljs-type">const</span> DexFile&amp; dex_file2, <span class="hljs-type">const</span> DexFile::ClassDef&amp; dex_class_def2,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  std::string* error_msg)</span> </span>&#123;<br>  <span class="hljs-function">ClassDataItemIterator <span class="hljs-title">dex_data1</span><span class="hljs-params">(dex_file1, dex_file<span class="hljs-number">1.</span>GetClassData(dex_class_def1))</span></span>;<br>  <span class="hljs-function">ClassDataItemIterator <span class="hljs-title">dex_data2</span><span class="hljs-params">(dex_file2, dex_file<span class="hljs-number">2.</span>GetClassData(dex_class_def2))</span></span>;<br><br>  <span class="hljs-comment">// Counters for current dex file.</span><br>  <span class="hljs-type">size_t</span> dex_virtual_methods1, dex_direct_methods1, dex_static_fields1, dex_instance_fields1;<br>  <span class="hljs-built_in">CountMethodsAndFields</span>(dex_data1, &amp;dex_virtual_methods1, &amp;dex_direct_methods1, &amp;dex_static_fields1,<br>                        &amp;dex_instance_fields1);<br>  <span class="hljs-comment">// Counters for compile-time dex file.</span><br>  <span class="hljs-type">size_t</span> dex_virtual_methods2, dex_direct_methods2, dex_static_fields2, dex_instance_fields2;<br>  <span class="hljs-built_in">CountMethodsAndFields</span>(dex_data2, &amp;dex_virtual_methods2, &amp;dex_direct_methods2, &amp;dex_static_fields2,<br>                        &amp;dex_instance_fields2);<br><br>  <span class="hljs-keyword">if</span> (dex_virtual_methods1 != dex_virtual_methods2) &#123;<br>    std::string class_dump = <span class="hljs-built_in">DumpClasses</span>(dex_file1, dex_class_def1, dex_file2, dex_class_def2);<br>    *error_msg = <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;Virtual method count off: %zu vs %zu\n%s&quot;</span>, dex_virtual_methods1,<br>                              dex_virtual_methods2, class_dump.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (dex_direct_methods1 != dex_direct_methods2) &#123;<br>    std::string class_dump = <span class="hljs-built_in">DumpClasses</span>(dex_file1, dex_class_def1, dex_file2, dex_class_def2);<br>    *error_msg = <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;Direct method count off: %zu vs %zu\n%s&quot;</span>, dex_direct_methods1,<br>                              dex_direct_methods2, class_dump.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (dex_static_fields1 != dex_static_fields2) &#123;<br>    std::string class_dump = <span class="hljs-built_in">DumpClasses</span>(dex_file1, dex_class_def1, dex_file2, dex_class_def2);<br>    *error_msg = <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;Static field count off: %zu vs %zu\n%s&quot;</span>, dex_static_fields1,<br>                              dex_static_fields2, class_dump.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (dex_instance_fields1 != dex_instance_fields2) &#123;<br>    std::string class_dump = <span class="hljs-built_in">DumpClasses</span>(dex_file1, dex_class_def1, dex_file2, dex_class_def2);<br>    *error_msg = <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;Instance field count off: %zu vs %zu\n%s&quot;</span>, dex_instance_fields1,<br>                              dex_instance_fields2, class_dump.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// klass 表示当前加载的类</span><br><span class="hljs-comment">// dex_file 为当前加载的类所在的 dex 文件</span><br><span class="hljs-comment">// class_def 表示当前类在 dex 文件中的数据结构</span><br><span class="hljs-comment">// super_class 表示当前加载的父类，正常来说(app_image的场景除外)这个类是按照双亲委托模型加载的父类，而要校验的正是这个类</span><br><span class="hljs-comment">// Checks whether a the super-class changed from what we had at compile-time. This would</span><br><span class="hljs-comment">// invalidate quickening.</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">CheckSuperClassChange</span><span class="hljs-params">(Handle&lt;mirror::Class&gt; klass,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  <span class="hljs-type">const</span> DexFile&amp; dex_file,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  <span class="hljs-type">const</span> DexFile::ClassDef&amp; class_def,</span></span><br><span class="hljs-params"><span class="hljs-function">                                  mirror::Class* super_class)</span></span><br><span class="hljs-function">    <span class="hljs-title">SHARED_LOCKS_REQUIRED</span><span class="hljs-params">(Locks::mutator_lock_)</span> </span>&#123;<br>  <span class="hljs-comment">// Check for unexpected changes in the superclass.</span><br>  <span class="hljs-comment">// Quick check 1) is the super_class class-loader the boot class loader? This always has</span><br>  <span class="hljs-comment">// precedence.</span><br>  <span class="hljs-keyword">if</span> (super_class-&gt;<span class="hljs-built_in">GetClassLoader</span>() != <span class="hljs-literal">nullptr</span> &amp;&amp;<br>      <span class="hljs-comment">// Quick check 2) different dex cache? Breaks can only occur for different dex files,</span><br>      <span class="hljs-comment">// which is implied by different dex cache.</span><br>      klass-&gt;<span class="hljs-built_in">GetDexCache</span>() != super_class-&gt;<span class="hljs-built_in">GetDexCache</span>()) &#123;<br>    <span class="hljs-comment">// Now comes the expensive part: things can be broken if (a) the klass&#x27; dex file has a</span><br>    <span class="hljs-comment">// definition for the super-class, and (b) the files are in separate oat files. The oat files</span><br>    <span class="hljs-comment">// are referenced from the dex file, so do (b) first. Only relevant if we have oat files.</span><br>    <span class="hljs-type">const</span> OatDexFile* class_oat_dex_file = dex_file.<span class="hljs-built_in">GetOatDexFile</span>();<br>    <span class="hljs-type">const</span> OatFile* class_oat_file = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">if</span> (class_oat_dex_file != <span class="hljs-literal">nullptr</span>) &#123;<br>      class_oat_file = class_oat_dex_file-&gt;<span class="hljs-built_in">GetOatFile</span>();<br>    &#125;<br>    <span class="hljs-comment">// class_oat_file不能为空</span><br>    <span class="hljs-keyword">if</span> (class_oat_file != <span class="hljs-literal">nullptr</span>) &#123;<br>      <span class="hljs-type">const</span> OatDexFile* loaded_super_oat_dex_file = super_class-&gt;<span class="hljs-built_in">GetDexFile</span>().<span class="hljs-built_in">GetOatDexFile</span>();<br>      <span class="hljs-type">const</span> OatFile* loaded_super_oat_file = <span class="hljs-literal">nullptr</span>;<br>      <span class="hljs-keyword">if</span> (loaded_super_oat_dex_file != <span class="hljs-literal">nullptr</span>) &#123;<br>        loaded_super_oat_file = loaded_super_oat_dex_file-&gt;<span class="hljs-built_in">GetOatFile</span>();<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (loaded_super_oat_file != <span class="hljs-literal">nullptr</span> &amp;&amp; class_oat_file != loaded_super_oat_file) &#123;<br>        <span class="hljs-comment">// Now check (a).</span><br>        <span class="hljs-type">const</span> DexFile::ClassDef* super_class_def = dex_file.<span class="hljs-built_in">FindClassDef</span>(class_def.superclass_idx_);<br>        <span class="hljs-keyword">if</span> (super_class_def != <span class="hljs-literal">nullptr</span>) &#123;<br>          <span class="hljs-comment">// Uh-oh, we found something. Do our check.</span><br>          std::string error_msg;<br>          <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">SimpleStructuralCheck</span>(dex_file, *super_class_def,<br>                                     super_class-&gt;<span class="hljs-built_in">GetDexFile</span>(), *super_class-&gt;<span class="hljs-built_in">GetClassDef</span>(),<br>                                     &amp;error_msg)) &#123;<br>            <span class="hljs-comment">// Print a warning to the log. This exception might be caught, e.g., as common in test</span><br>            <span class="hljs-comment">// drivers. When the class is later tried to be used, we re-throw a new instance, as we</span><br>            <span class="hljs-comment">// only save the type of the exception.</span><br>            <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; <span class="hljs-string">&quot;Incompatible structural change detected: &quot;</span> &lt;&lt;<br>                <span class="hljs-built_in">StringPrintf</span>(<br>                    <span class="hljs-string">&quot;Structural change of %s is hazardous (%s at compile time, %s at runtime): %s&quot;</span>,<br>                    <span class="hljs-built_in">PrettyType</span>(super_class_def-&gt;class_idx_, dex_file).<span class="hljs-built_in">c_str</span>(),<br>                    class_oat_file-&gt;<span class="hljs-built_in">GetLocation</span>().<span class="hljs-built_in">c_str</span>(),<br>                    loaded_super_oat_file-&gt;<span class="hljs-built_in">GetLocation</span>().<span class="hljs-built_in">c_str</span>(),<br>                    error_msg.<span class="hljs-built_in">c_str</span>());<br>            <span class="hljs-built_in">ThrowIncompatibleClassChangeError</span>(klass.<span class="hljs-built_in">Get</span>(),<br>                <span class="hljs-string">&quot;Structural change of %s is hazardous (%s at compile time, %s at runtime): %s&quot;</span>,<br>                <span class="hljs-built_in">PrettyType</span>(super_class_def-&gt;class_idx_, dex_file).<span class="hljs-built_in">c_str</span>(),<br>                class_oat_file-&gt;<span class="hljs-built_in">GetLocation</span>().<span class="hljs-built_in">c_str</span>(),<br>                loaded_super_oat_file-&gt;<span class="hljs-built_in">GetLocation</span>().<span class="hljs-built_in">c_str</span>(),<br>                error_msg.<span class="hljs-built_in">c_str</span>());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>就拿我司应用报的错误来说，A应用在编译时集成了一个新版本的<code>Lretrofit2/Converter$Factory</code>，插桩应用B集成的是一个旧版本的<code>Lretrofit2/Converter$Factory</code>，执行插桩时，A和B是运行在同一个进程的，又因为B应用的classloader路径排在A的前面。所以，当A应用初始化<code>GsonConverterFactory</code> （B不包含这个类）时，根据类双亲委派原则，优先加载的是应用B的<code>Lretrofit2/Converter$Factory</code>，符合<code>CheckSuperClassChange</code>规则：<code>GsonConverterFactory</code> 类的dex路径和父类<code>Lretrofit2/Converter$Factory</code>dex路径不一致，进入了<code>SimpleStructuralCheck</code>检查，这时候就会拿A和B应用里面的<code>Lretrofit2/Converter$Factory</code>类进行检查，结果发现方法数不一致，导致了异常。</p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>上面源码分析提到在安卓5.1到安卓8.0都有这个检查，但根据监控平台的数据显示在安卓8.0基本不会发生，为什么呢？</p><p>我们再来看一下<code>CheckSuperClassChange</code>这个方法，除了要求类和父类来自不同的dex文件，还要求class_oat_file不能为空，也就是对应的odex文件不能为空，否则也不会执行<code>SimpleStructuralCheck</code>。那么什么情况class_oat_file为空呢？那么我们就需要了解oat文件的打开过程了。</p><h3 id="oat文件加载流程"><a href="#oat文件加载流程" class="headerlink" title="oat文件加载流程"></a>oat文件加载流程</h3><p>在这里我不会详细分析oat文件的加载流程，如需深入了解可以参考附录。我更关心的是class_oat_file在什么情况为空。</p><p>oat文件加载流程关键入口是：<code>ClassLinker::OpenDexFilesFromOat</code></p><p>首先来看一下安卓6的：</p><p><a href="http://aospxref.com/android-6.0.1_r9/xref/art/runtime/class_linker.cc">class_linker.cc - OpenGrok cross reference for &#x2F;art&#x2F;runtime&#x2F;class_linker.cc</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br>std::vector&lt;std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt;&gt; ClassLinker::<span class="hljs-built_in">OpenDexFilesFromOat</span>(<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* dex_location, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* oat_location,<br>    std::vector&lt;std::string&gt;* error_msgs) &#123;<br>  <span class="hljs-built_in">CHECK</span>(error_msgs != <span class="hljs-literal">nullptr</span>);<br>  .....<br>  .....<br>  <span class="hljs-comment">// Check if we already have an up-to-date oat file open.</span><br>  <span class="hljs-comment">//检查内存是否存在对应的oat文件</span><br>  <span class="hljs-type">const</span> OatFile* source_oat_file = <span class="hljs-literal">nullptr</span>;<br>  &#123;<br>    <span class="hljs-function">ReaderMutexLock <span class="hljs-title">mu</span><span class="hljs-params">(Thread::Current(), dex_lock_)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> OatFile* oat_file : oat_files_) &#123;<br>      <span class="hljs-built_in">CHECK</span>(oat_file != <span class="hljs-literal">nullptr</span>);<br>      <span class="hljs-keyword">if</span> (oat_file_assistant.<span class="hljs-built_in">GivenOatFileIsUpToDate</span>(*oat_file)) &#123;<br>        source_oat_file = oat_file;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// If we didn&#x27;t have an up-to-date oat file open, try to load one from disk.</span><br>  <span class="hljs-comment">//如果内存没有则从磁盘加载</span><br>  <span class="hljs-keyword">if</span> (source_oat_file == <span class="hljs-literal">nullptr</span>) &#123;<br>    <span class="hljs-comment">// Update the oat file on disk if we can. This may fail, but that&#x27;s okay.</span><br>    <span class="hljs-comment">// Best effort is all that matters here.</span><br>    <span class="hljs-comment">// 关键地方：检查磁盘的oat文件是否需要更新</span><br>    <span class="hljs-keyword">if</span> (!oat_file_assistant.<span class="hljs-built_in">MakeUpToDate</span>(&amp;error_msg)) &#123;<br>      <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; error_msg;<br>    &#125;<br><br>    <span class="hljs-comment">// Get the oat file on disk.</span><br>    <span class="hljs-comment">// 从磁盘加载oat文件</span><br>    std::unique_ptr&lt;OatFile&gt; oat_file = oat_file_assistant.<span class="hljs-built_in">GetBestOatFile</span>();<br>    <span class="hljs-keyword">if</span> (oat_file.<span class="hljs-built_in">get</span>() != <span class="hljs-literal">nullptr</span>) &#123;<br>      <span class="hljs-comment">// Take the file only if it has no collisions, or we must take it because of preopting.</span><br>      <span class="hljs-comment">// 关键地方：检查待加载的oat文件是否和已经加载的存在类冲突</span><br>      <span class="hljs-comment">// 如果存在类冲突，考虑直接加载apk里面的dex文件</span><br>      <span class="hljs-type">bool</span> accept_oat_file = !<span class="hljs-built_in">HasCollisions</span>(oat_file.<span class="hljs-built_in">get</span>(), &amp;error_msg);<br>      <span class="hljs-keyword">if</span> (!accept_oat_file) &#123;<br>        <span class="hljs-comment">// Failed the collision check. Print warning.</span><br>        <span class="hljs-keyword">if</span> (Runtime::<span class="hljs-built_in">Current</span>()-&gt;<span class="hljs-built_in">IsDexFileFallbackEnabled</span>()) &#123;<br>          <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; <span class="hljs-string">&quot;Found duplicate classes, falling back to interpreter mode for &quot;</span><br>                       &lt;&lt; dex_location;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; <span class="hljs-string">&quot;Found duplicate classes, dex-file-fallback disabled, will be failing to &quot;</span><br>                          <span class="hljs-string">&quot; load classes for &quot;</span> &lt;&lt; dex_location;<br>        &#125;<br>        <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; error_msg;<br><br>        <span class="hljs-comment">// However, if the app was part of /system and preopted, there is no original dex file</span><br>        <span class="hljs-comment">// available. In that case grudgingly accept the oat file.</span><br>        <span class="hljs-comment">// 系统应用大部分都会在编译服务器做dex优化，这时候apk里面就不会包含dex文件了。这种情况的话还是加载oat文件</span><br>        <span class="hljs-keyword">if</span> (!DexFile::<span class="hljs-built_in">MaybeDex</span>(dex_location)) &#123;<br>          accept_oat_file = <span class="hljs-literal">true</span>;<br>          <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; <span class="hljs-string">&quot;Dex location &quot;</span> &lt;&lt; dex_location &lt;&lt; <span class="hljs-string">&quot; does not seem to include dex file. &quot;</span><br>                       &lt;&lt; <span class="hljs-string">&quot;Allow oat file use. This is potentially dangerous.&quot;</span>;<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (accept_oat_file) &#123;<br>        <span class="hljs-comment">// 获取oat文件</span><br>        source_oat_file = oat_file.<span class="hljs-built_in">release</span>();<br>        <span class="hljs-built_in">RegisterOatFile</span>(source_oat_file);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  std::vector&lt;std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt;&gt; dex_files;<br><br>  <span class="hljs-comment">// Load the dex files from the oat file.</span><br>  <span class="hljs-comment">// 加载oat文件里面的dex文件</span><br>  <span class="hljs-keyword">if</span> (source_oat_file != <span class="hljs-literal">nullptr</span>) &#123;<br>    dex_files = oat_file_assistant.<span class="hljs-built_in">LoadDexFiles</span>(*source_oat_file, dex_location);<br>    <span class="hljs-keyword">if</span> (dex_files.<span class="hljs-built_in">empty</span>()) &#123;<br>      error_msgs-&gt;<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;Failed to open dex files from &quot;</span><br>          + source_oat_file-&gt;<span class="hljs-built_in">GetLocation</span>());<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// Fall back to running out of the original dex file if we couldn&#x27;t load any</span><br>  <span class="hljs-comment">// dex_files from the oat file.</span><br>  <span class="hljs-comment">// 如果加载oat文件里面的dex文件失败，则直接尝试加载apk里面的dex文件。</span><br>  <span class="hljs-keyword">if</span> (dex_files.<span class="hljs-built_in">empty</span>()) &#123;<br>    <span class="hljs-keyword">if</span> (oat_file_assistant.<span class="hljs-built_in">HasOriginalDexFiles</span>()) &#123;<br>      <span class="hljs-keyword">if</span> (Runtime::<span class="hljs-built_in">Current</span>()-&gt;<span class="hljs-built_in">IsDexFileFallbackEnabled</span>()) &#123;<br>        <span class="hljs-keyword">if</span> (!DexFile::<span class="hljs-built_in">Open</span>(dex_location, dex_location, &amp;error_msg, &amp;dex_files)) &#123;<br>          <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; error_msg;<br>          error_msgs-&gt;<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;Failed to open dex files from &quot;</span> + std::<span class="hljs-built_in">string</span>(dex_location));<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        error_msgs-&gt;<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;Fallback mode disabled, skipping dex files.&quot;</span>);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      error_msgs-&gt;<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;No original dex files found for dex location &quot;</span><br>          + std::<span class="hljs-built_in">string</span>(dex_location));<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> dex_files;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面源码分析可以发现，如果dex文件来自于apk而不是oat文件的话class_oat_file就会为空，不会执行<code>SimpleStructuralCheck</code>。</p><p>安卓8：</p><p>入口也是<code>ClassLinker::OpenDexFilesFromOat</code>，只不过迁移到了oat_file_manager.cc里面：</p><p><a href="http://aospxref.com/android-8.0.0_r36/xref/art/runtime/oat_file_manager.cc">oat_file_manager.cc - OpenGrok cross reference for &#x2F;art&#x2F;runtime&#x2F;oat_file_manager.cc</a></p><p>过程也是大同小异的，研究发现<code>HasCollisions</code>方法有不一样的地方。</p><p>安卓6开始引入<code>HasCollisions</code>这个方法</p><p>安卓6：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// For b/21333911.</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> kDuplicateClassesCheck = <span class="hljs-literal">false</span>;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ClassLinker::HasCollisions</span><span class="hljs-params">(<span class="hljs-type">const</span> OatFile* oat_file, std::string* error_msg)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (!kDuplicateClassesCheck) &#123; <span class="hljs-comment">//这个设置成了false</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>    ........<br>    ........<br>&#125;<br></code></pre></td></tr></table></figure><p>搜索一下kDuplicateClassesCheck看是干什么的，<a href="https://android.googlesource.com/platform/art/+/1bc977c/runtime/oat_file_manager.cc">runtime&#x2F;oat_file_manager.cc - platform&#x2F;art - Git at Google</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// For b/21333911.</span><br><span class="hljs-comment">// Only enabled for debug builds to prevent bit rot. There are too many performance regressions for</span><br><span class="hljs-comment">// normal builds.</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> kDuplicateClassesCheck = kIsDebugBuild;<br></code></pre></td></tr></table></figure><p>所以在安卓6是不会触发这个检查的，查看源码后发现安卓7.0才开始默认启用。</p><p>因此，在安卓7.0开始，如果插桩应用或者插件应用包含了和宿主应用一样的类，一般来说，也不会触发<code>SimpleStructuralCheck</code>。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>我在一台64位的安卓6.0机器进行插桩和加载插件测试：</p><h3 id="插桩测试"><a href="#插桩测试" class="headerlink" title="插桩测试"></a>插桩测试</h3><p>安装应用时会做dex优化，生成oat文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">06-24 16:56:07.393 21329 21384 I PackageManager.DexOptimizer: Running dexopt (dex2oat) on: /data/app/vmdl566966682.tmp/base.apk pkg=com.example.myapplication.myapplication isa=arm vmSafeMode=false debuggable=false oatDir = /data/app/vmdl566966682.tmp/oat<br>06-24 16:56:07.422  5953  5953 I dex2oat : Starting dex2oat.<br>06-24 16:56:07.874  5953  5958 I dex2oat : Skipping compilation of long com.alibaba.fastjson.parser.JSONLexer.longValue(): it contains a non natural loop<br>06-24 16:56:07.933  5953  5958 I dex2oat : Skipping compilation of double[] com.alibaba.fastjson.parser.JSONLexer.scanFieldDoubleArray(long): it contains a non natural loop<br>06-24 16:56:07.963  5953  5958 I dex2oat : Skipping compilation of float[] com.alibaba.fastjson.parser.JSONLexer.scanFieldFloatArray(long): it contains a non natural loop<br>06-24 16:56:09.083  5953  5953 I dex2oat : dex2oat took 1.659s (threads: 4) arena alloc=10MB java alloc=971KB native alloc=15MB free=600KB<br></code></pre></td></tr></table></figure><p>情况1：64位应用对32位应用做插桩</p><p>加载oat文件，执行<code>MakeUpToDate</code>检查时，发现安装时的oat文件不适用于32位环境，需要重新生成oat文件，结果因为权限问题生成失败。结果就是class_oat_file为空，不会执行<code>SimpleStructuralCheck</code>。所以，一般不会出现<code>IncompatibleClassChangeError</code>。</p><blockquote><p>加载类时， fork出来的dex2oat是应用权限，不能对&#x2F;data&#x2F;dalvik-cache&#x2F;（root权限）进行读写。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">06-24 16:36:29.851 32154 32154 W art     : wesley GivenOatFileIsUpToDate is false, dex_location:/data/app/com.example.myapplication.myapplication-1/base.apk<br>06-24 16:36:29.851 32154 32154 W art     : wesley source_oat_file is null<br>06-24 16:36:29.851 32154 32154 W art     : wesley :GetDexOptNeeded HasOriginalDexFiles: 1<br>06-24 16:36:29.889 32174 32174 E dex2oat : Failed to create oat file: /data/dalvik-cache/arm/data@app@com.example.myapplication.myapplication-1@base.apk@classes.dex: Permission denied<br>06-24 16:36:29.889 32174 32174 I dex2oat : dex2oat took 307.667us (threads: 4)<br>06-24 16:36:29.893 32154 32154 W art     : wesley MakeUpToDate fail: Failed execv(/system/bin/dex2oat --runtime-arg -classpath --runtime-arg  --instruction-set=arm --instruction-set-features=smp,div,-atomic_ldrd_strd --runtime-arg -Xrelocate --boot-image=/system/framework/boot.art --runtime-arg -Xms64m --runtime-arg -Xmx512m --instruction-set-variant=cortex-a7 --instruction-set-features=default --dex-file=/data/app/com.example.myapplication.myapplication-1/base.apk --oat-file=/data/dalvik-cache/arm/data@app@com.example.myapplication.myapplication-1@base.apk@classes.dex) because non-0 exit status<br>06-24 16:36:29.893 32154 32154 W art     : wesley oat_file is null:<br>06-24 16:36:29.893 32154 32154 W art     : wesley :HasOriginalDexFiles true<br>06-24 16:36:29.985 32154 32154 W art     : wesley :load OriginalDexFiles success<br>06-24 16:36:29.986 32154 32154 W art     : wesley GivenOatFileIsUpToDate is false, dex_location:/data/app/com.tianci.de-2/base.apk<br>06-24 16:36:29.986 32154 32154 W art     : wesley source_oat_file is null<br>06-24 16:36:29.989 32154 32154 W art     : wesley :GetDexOptNeeded: kNoDexOptNeeded<br>06-24 16:36:29.989 32154 32154 W art     : wesley MakeUpToDate success<br>06-24 16:36:29.989 32154 32154 W art     : wesley accept_oat_file:1<br></code></pre></td></tr></table></figure><p>情况2：32位应用对32位应用做插桩</p><p>通过<code>adb install --abi armeabi-v7a &lt;path to apk&gt;</code>强制指定应用运行在32位，这种情况class_oat_file不会为空了，就会触发：<code>Incompatible structural change detected: Structural change......</code> 。</p><h3 id="插件加载"><a href="#插件加载" class="headerlink" title="插件加载"></a>插件加载</h3><p>情况1：通过<code>PathClassLoader</code>去<code>loadClass</code>（通过adb install安装的插件），会触发：<code>Incompatible structural change detected: Structural change......</code>（两个应用都是64位安装）</p><p>情况2：没有安装的插件，应用运行正常，也是因为权限问题做<code>dex2oat</code>失败，直接从apk文件加载了dex。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">06-24 16:11:56.975 24635 24635 W art     : wesley GivenOatFileIsUpToDate is false, dex_location:/data/app/com.example.myapplication.myapplication-2/base.apk<br>06-24 16:11:56.975 24635 24635 W art     : wesley source_oat_file is null<br>06-24 16:11:56.979 24635 24635 W art     : wesley :GetDexOptNeeded: kNoDexOptNeeded<br>06-24 16:11:56.979 24635 24635 W art     : wesley MakeUpToDate success<br>06-24 16:11:56.979 24635 24635 W art     : wesley accept_oat_file:1<br>06-24 16:11:57.050 24635 24635 W art     : wesley GivenOatFileIsUpToDate is false, dex_location:/data/app/plugin.platform-1/base.apk<br>06-24 16:11:57.050 24635 24635 W art     : wesley GivenOatFileIsUpToDate is false, dex_location:/data/app/plugin.platform-1/base.apk<br>06-24 16:11:57.050 24635 24635 W art     : wesley source_oat_file is null<br>06-24 16:11:57.053 24635 24635 W art     : wesley :GetDexOptNeeded: kNoDexOptNeeded<br>06-24 16:11:57.053 24635 24635 W art     : wesley MakeUpToDate success<br>06-24 16:11:57.053 24635 24635 W art     : wesley accept_oat_file:1<br><br>06-24 16:11:57.063 24635 24635 W art     : wesley GivenOatFileIsUpToDate is false, dex_location:/data/user/0/com.example.myapplication.myapplication/files/Plugin.apk<br>06-24 16:11:57.063 24635 24635 W art     : wesley GivenOatFileIsUpToDate is false, dex_location:/data/user/0/com.example.myapplication.myapplication/files/Plugin.apk<br>06-24 16:11:57.063 24635 24635 W art     : wesley GivenOatFileIsUpToDate is false, dex_location:/data/user/0/com.example.myapplication.myapplication/files/Plugin.apk<br>06-24 16:11:57.063 24635 24635 W art     : wesley source_oat_file is null<br>06-24 16:11:57.063 24635 24635 W art     : wesley :GetDexOptNeeded HasOriginalDexFiles: 1<br>06-24 16:11:57.107 24661 24661 E dex2oat : Failed to create oat file: /data/dalvik-cache/arm64/data@user@0@com.example.myapplication.myapplication@files@Plugin.apk@classes.dex: Permission denied<br>06-24 16:11:57.107 24661 24661 I dex2oat : dex2oat took 295.167us (threads: 4)<br>06-24 16:11:57.108 24635 24635 W art     : wesley MakeUpToDate fail: Failed execv(/system/bin/dex2oat --runtime-arg -classpath --runtime-arg  --instruction-set=arm64 --instruction-set-features=smp,a53 --runtime-arg -Xrelocate --boot-image=/system/framework/boot.art --runtime-arg -Xms64m --runtime-arg -Xmx512m --instruction-set-variant=generic --instruction-set-features=default --dex-file=/data/user/0/com.example.myapplication.myapplication/files/Plugin.apk --oat-file=/data/dalvik-cache/arm64/data@user@0@com.example.myapplication.myapplication@files@Plugin.apk@classes.dex) because non-0 exit status<br>06-24 16:11:57.108 24635 24635 W art     : wesley oat_file is null:<br>06-24 16:11:57.108 24635 24635 W art     : wesley :HasOriginalDexFiles true<br>06-24 16:11:57.121 24635 24635 W art     : wesley :load OriginalDexFiles success<br></code></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>看完上面的内容后，应该很容易知道怎么解决了。要么就是想办法通过<code>SimpleStructuralCheck</code>，要么就是想办法不进人<code>SimpleStructuralCheck</code>。</p><p>想办法通过<code>SimpleStructuralCheck</code>：插桩或者插件的类和宿主保持一致。</p><p>想办法不进人<code>SimpleStructuralCheck</code>：插件compileOnly公共接口；插件不安装，以文件的方式进行加载；插件安装，类加载入口中转到插件文件等等。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6894165613028048904">插件化之 Incompatible structural change detected 问题分析 - 掘金</a></p><p>[<a href="https://bbs.kanxue.com/thread-257893.htm">原创]菜鸟学8.1版本dex加载流程笔记–第一篇：oat_file_manager与oat_file_assistant-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html">Chapter 13. Binary Compatibility</a></p>]]></content>
    
    
    <categories>
      
      <category>AndroidBugFix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Java</tag>
      
      <tag>art</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu24.04启动黑屏</title>
    <link href="/article/860ebe82/"/>
    <url>/article/860ebe82/</url>
    
    <content type="html"><![CDATA[<p>在vmware安装完ubuntu24.04后，登录进去黑屏。</p><p>首先关闭虚拟机，然后在虚拟机设置-显示器-3D图形那里关闭加速3D图形。</p><p>这时候就可以重新登录进去了，但是没有了图形加速，画面就没有那么流畅了。</p><p>怎么办？</p><hr><h2 id="更新图形驱动"><a href="#更新图形驱动" class="headerlink" title="更新图形驱动"></a>更新图形驱动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo add-apt-repository ppa:oibaf/graphics-drivers<br>sudo apt update &amp;&amp; sudo apt upgrade<br></code></pre></td></tr></table></figure><p>安装完后，关闭虚拟机，重新在虚拟机设置-显示器-3D图形那里打开加速3D图形。</p><p>这时候，再登录进去就可以正常使用了。有了图形加速，UI流畅度也更加好了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://askubuntu.com/questions/1511670/problem-with-ubuntu-24-04-on-vmware">Problem with Ubuntu 24.04 on VMware - Ask Ubuntu</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓不同gradle版本怎么发布sdk到Maven</title>
    <link href="/article/3d160ee3/"/>
    <url>/article/3d160ee3/</url>
    
    <content type="html"><![CDATA[<p>一直以来，公司的很多sdk上传时都没有附带源码，对于开发者来说是比较不方便的，所以我就想增加一下。因为不同的项目使用的gradle版本不一样，发布sdk的方式也不一样，特此记录一下，希望能帮到大家。</p><h2 id="gradle7-1之前"><a href="#gradle7-1之前" class="headerlink" title="gradle7.1之前"></a>gradle7.1之前</h2><h3 id="maven插件"><a href="#maven插件" class="headerlink" title="maven插件"></a>maven插件</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs groovy">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;maven&#x27;</span><br><br>task androidSourcesJar(<span class="hljs-attr">type:</span> Jar) &#123;<br>    classifier = <span class="hljs-string">&#x27;sources&#x27;</span><br>    from android.sourceSets.main.java.srcDirs<br>&#125;<br><br>uploadArchives &#123;<br>    repositories.mavenDeployer &#123;<br>        <span class="hljs-comment">//repo_url、repo_username、repo_password定义在local.properties或者gradle.properties</span><br>        repository(<span class="hljs-attr">url:</span> repo_url) &#123;<br>                authentication(<span class="hljs-attr">userName:</span> repo_username, <span class="hljs-attr">password:</span> repo_password)<br>        &#125;<br>        pom.version = <span class="hljs-string">&quot;1.1.2&quot;</span><br>        pom.groupId = <span class="hljs-string">&quot;com.wesley.sdk&quot;</span> <br>        pom.artifactId = <span class="hljs-string">&quot;xxx&quot;</span><br>        pom.name = <span class="hljs-string">&quot;xxx&quot;</span><br>        pom.packaging = <span class="hljs-string">&#x27;aar&#x27;</span> <span class="hljs-comment">//打包的格式，aar或者jar</span><br><br>    &#125;<br>&#125;<br><br>artifacts &#123;<br>    archives androidSourcesJar<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果是java和android混合工程</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs groovy">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;maven&#x27;</span><br><br>task androidSourcesJar(<span class="hljs-attr">type:</span> Jar) &#123;<br>    classifier = <span class="hljs-string">&#x27;sources&#x27;</span><br>    <span class="hljs-keyword">if</span> (project.plugins.hasPlugin(<span class="hljs-string">&#x27;java&#x27;</span>)) &#123;<br>        println <span class="hljs-string">&quot;This is a Java project.&quot;</span><br>        from sourceSets.main.java.srcDirs<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (project.plugins.hasPlugin(<span class="hljs-string">&#x27;com.android.application&#x27;</span>) || project.plugins.hasPlugin(<span class="hljs-string">&#x27;com.android.library&#x27;</span>)) &#123;<br>        println <span class="hljs-string">&quot;This is an Android project.&quot;</span><br>        from android.sourceSets.main.java.srcDirs<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        println <span class="hljs-string">&quot;This is an unknown type of project.&quot;</span><br>    &#125;<br>&#125;<br><br>uploadArchives &#123;<br>    repositories.mavenDeployer &#123;<br>        <span class="hljs-comment">//repo_url、repo_username、repo_password定义在local.properties或者gradle.properties</span><br>        repository(<span class="hljs-attr">url:</span> repo_url) &#123;<br>                authentication(<span class="hljs-attr">userName:</span> repo_username, <span class="hljs-attr">password:</span> repo_password)<br>        &#125;<br>        pom.version = <span class="hljs-string">&quot;1.1.2&quot;</span><br>        pom.groupId = <span class="hljs-string">&quot;com.wesley.sdk&quot;</span> <br>        pom.artifactId = <span class="hljs-string">&quot;xxx&quot;</span><br>        pom.name = <span class="hljs-string">&quot;xxx&quot;</span><br>        pom.packaging = <span class="hljs-string">&#x27;aar&#x27;</span> <span class="hljs-comment">//或者jar</span><br><br>    &#125;<br>&#125;<br><br>artifacts &#123;<br>    archives androidSourcesJar<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上传命令：gradlew uploadArchives </p><h3 id="maven-publish插件"><a href="#maven-publish插件" class="headerlink" title="maven-publish插件"></a>maven-publish插件</h3><p><a href="https://docs.gradle.org/current/userguide/publishing_maven.html">The Maven Publish Plugin</a></p><p><a href="https://docs.gradle.org/7.0/userguide/upgrading_version_6.html?_ga=2.89654745.374070913.1630385037-1835317872.1629704027#removal_of_the_legacy_maven_plugin">Upgrading your build from Gradle 6.x to the latest</a></p><p>gradle7开始去除maven插件，需要用maven-publish替代。其实在Gradle 6.2 之后，就完全废弃了。</p><p>gradle maven-publish 插件，从gradle 1.3 之后开始支持。</p><blockquote><h4 id="Removal-of-the-uploadArchives-task"><a href="#Removal-of-the-uploadArchives-task" class="headerlink" title="Removal of the uploadArchives task"></a><a href="https://docs.gradle.org/7.0/userguide/upgrading_version_6.html?_ga=2.89654745.374070913.1630385037-1835317872.1629704027#removal_of_the_uploadarchives_task">Removal of the <code>uploadArchives</code> task</a></h4><p>The <code>uploadArchives</code> task was used in combination with the legacy Ivy or Maven publishing mechanisms. It has been removed in Gradle 7. You should migrate to the <code>maven-publish</code> or <code>ivy-publish</code> plugin instead.</p></blockquote><p>Android Gradle Plugin 3.6.0开始支持maven-publish插件（gradle版本5.6.4+）</p><p><a href="https://developer.android.com/build/releases/past-releases/agp-3-6-0-release-notes">Android Studio  | Android Developers</a></p><blockquote><h3 id="Support-for-the-Maven-Publish-plugin"><a href="#Support-for-the-Maven-Publish-plugin" class="headerlink" title="Support for the Maven Publish plugin"></a>Support for the Maven Publish plugin</h3><p>The Android Gradle plugin includes support for the <a href="https://docs.gradle.org/current/userguide/publishing_maven.html">Maven Publish Gradle plugin</a>, which allows you to publish build artifacts to an Apache Maven repository. The Android Gradle plugin creates a <a href="https://docs.gradle.org/current/userguide/dependency_management_terminology.html#sub:terminology_component"><em>component</em></a> for each build variant artifact in your app or library module that you can use to customize a <a href="https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:publications"><em>publication</em></a> to a Maven repository.</p><p>To learn more, go to the page about how to <a href="https://developer.android.com/studio/build/maven-publish-plugin">use the Maven Publish plugin</a>.</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    id <span class="hljs-string">&#x27;com.android.library&#x27;</span><br>    id <span class="hljs-string">&#x27;maven-publish&#x27;</span><br>&#125;<br><br>tasks.register(<span class="hljs-string">&#x27;androidSourcesJar&#x27;</span>, Jar) &#123;<br>    archiveClassifier.set(<span class="hljs-string">&#x27;sources&#x27;</span>)<br>    from android.sourceSets.main.java.srcDirs<br>&#125;<br><br>afterEvaluate &#123;<br>    publishing &#123;<br>        publications &#123;<br>            release(MavenPublication) &#123;<br>                from components.release<br>                artifact androidSourcesJar<br><br>                groupId = <span class="hljs-string">&quot;com.wesley.sdk&quot;</span> <br>                artifactId = <span class="hljs-string">&quot;xxxxx&quot;</span><br>                version = <span class="hljs-string">&quot;1.1.2&quot;</span><br>            &#125;<br>        &#125;<br>        <br>        repositories &#123;<br>            maven &#123;<br>                allowInsecureProtocol <span class="hljs-literal">true</span><br>                <span class="hljs-keyword">def</span> releaseUrl = <span class="hljs-string">&quot;http://172.20.12.12:8080/nexus/content/repositories/releases/&quot;</span>  <span class="hljs-comment">//发布地址</span><br>                <span class="hljs-keyword">def</span> snapshotsUrl = <span class="hljs-string">&quot;http://172.20.12.12:8080/nexus/content/repositories/snapshots/&quot;</span> <span class="hljs-comment">//快照地址</span><br>                url = SDK_TV_MAVEN_VERSION.endsWith(<span class="hljs-string">&#x27;SNAPSHOT&#x27;</span>) ? snapshotsUrl : releaseUrl<br>                credentials &#123;<br>                username project.username <span class="hljs-comment">//username定义在local.properties或者gradle.properties</span><br>                password project.password <span class="hljs-comment">//password定义在local.properties或者gradle.properties</span><br>            &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上传命令：gradlew publish</p><h2 id="gradle-7-1开始"><a href="#gradle-7-1开始" class="headerlink" title="gradle 7.1开始"></a>gradle 7.1开始</h2><p>一定要优先查看英文版教程，中文版有时候更新不及时。</p><p><a href="https://developer.android.com/build/publish-library">Publish your library  | Android Studio  | Android Developers</a> </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    id <span class="hljs-string">&#x27;com.android.library&#x27;</span><br>    id <span class="hljs-string">&#x27;maven-publish&#x27;</span>  <span class="hljs-comment">//依赖的发布插件</span><br>&#125;<br><br>group <span class="hljs-string">&quot;com.wesley.sdk&quot;</span> <br>version <span class="hljs-string">&quot;1.0.4&quot;</span> <span class="hljs-comment">//版本号控制</span><br><br>android &#123;<br>    publishing &#123;<br>        singleVariant(<span class="hljs-string">&#x27;release&#x27;</span>) &#123;<br>            withSourcesJar() <span class="hljs-comment">//发布源码，方便SDK使用者阅读</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>publishing &#123;<br>    publications &#123;<br>        maven(MavenPublication) &#123;<br>            groupId group  <span class="hljs-comment">//sdk的组织</span><br>            artifactId <span class="hljs-string">&quot;theme-tools&quot;</span> <span class="hljs-comment">//sdk名称</span><br>            version version<br><br>            afterEvaluate &#123;<br>                from components.release<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    repositories &#123;<br>        maven &#123;<br>            credentials &#123;<br>                username project.username <span class="hljs-comment">//username定义在local.properties或者gradle.properties</span><br>                password project.password <span class="hljs-comment">//password定义在local.properties或者gradle.properties</span><br>            &#125;<br><br>            allowInsecureProtocol <span class="hljs-literal">true</span> <span class="hljs-comment">//如果是http协议需要加</span><br><br>            <span class="hljs-keyword">def</span> releaseUrl = <span class="hljs-string">&quot;http://172.20.12.12:8080/nexus/content/repositories/releases/&quot;</span>  <span class="hljs-comment">//发布地址</span><br>            <span class="hljs-keyword">def</span> snapshotsUrl = <span class="hljs-string">&quot;http://172.20.12.12:8080/nexus/content/repositories/snapshots/&quot;</span> <span class="hljs-comment">//快照地址</span><br><br>            url = version.endsWith(<span class="hljs-string">&#x27;SNAPSHOT&#x27;</span>) ? snapshotsUrl : releaseUrl<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上传命令：gradlew publish</p><p>更加推荐android studio的侧边栏Gradle-模块名字-Tasks-publishing-publish</p><p>如果没有任务需要打开下面的设置</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202406081843237.png" alt="image-20240608184315147"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.android.com/build/publish-library/upload-library">Upload your library  | Android Studio  | Android Developers</a></p><p><a href="https://developer.android.com/reference/tools/gradle-api/8.0/com/android/build/api/dsl/Publishing">Publishing  | Android Developers</a></p><p><a href="https://blog.csdn.net/android_cai_niao/article/details/119541995">把Android库项目发布到maven仓库且带上源代码_将android项目上传至远程moven库-CSDN博客</a><a href="https://blog.csdn.net/qq_37482202/article/details/136077534">Android SDK 上传 Maven 喂奶级教程_android 上传sdk到maven-CSDN博客</a></p><p><a href="https://juejin.cn/post/7087036809804251167">使用Gradle插件上传组件到Maven之源码上传 - 掘金</a></p><p><a href="https://blog.csdn.net/qq_43422537/article/details/120009978">【Gradle】gradle项目转maven之maven-publish插件的使用_publishtomavenlocal-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/cc21c1aa1a2a">Plugin with id ‘maven’ not found. - 简书</a></p><p><a href="https://blog.csdn.net/lucky_tom/article/details/120738113">Android Gradle 7.0 使用maven-publish发布组件_android gradle publishing-CSDN博客</a></p><p><a href="https://cloud.tencent.com/developer/article/1911642">Android：发布aar包到maven仓库以及 maven插件 和 maven-publish 插件的区别-腾讯云开发者社区-腾讯云</a></p><p><a href="https://developer.aliyun.com/article/830507">Android 多模块（lib）批量打包 aar 上传 maven 仓库实践-阿里云开发者社区</a></p><p><a href="https://juejin.cn/post/7251875626906107965">使用 Gradle Kotlin DSL 将 Android aar 发布到 Maven Repository - JFrog 的几点经验 - 掘金</a></p>]]></content>
    
    
    <categories>
      
      <category>AppBuild</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>gradle</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java.lang.ExceptionInInitializerError原因及解决办法</title>
    <link href="/article/78c113a2/"/>
    <url>/article/78c113a2/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th><a href="https://developer.android.com/reference/java/lang/Object">java.lang.Object</a></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>↳</td><td><a href="https://developer.android.com/reference/java/lang/Throwable">java.lang.Throwable</a></td><td></td><td></td><td></td></tr><tr><td></td><td>↳</td><td><a href="https://developer.android.com/reference/java/lang/Error">java.lang.Error</a></td><td></td><td></td></tr><tr><td></td><td></td><td>↳</td><td><a href="https://developer.android.com/reference/java/lang/LinkageError">java.lang.LinkageError</a></td><td></td></tr><tr><td></td><td></td><td></td><td>↳</td><td>java.lang.ExceptionInInitializerError</td></tr></tbody></table><p><code>ExceptionInInitializerError</code> 通常意味着在静态初始化块或静态变量初始化过程中发生了异常。</p><p><strong>静态代码块异常</strong>：如果在静态代码块中有任何异常抛出，都会导致此错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticBlock</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> state;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        state = <span class="hljs-number">42</span> / <span class="hljs-number">0</span>; <span class="hljs-comment">//除0异常</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>静态变量初始化异常</strong>：如果静态变量在初始化时抛出了异常，也会导致此错误。（编译后实际上也是在静态代码块里面）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> Integer.parseInt(<span class="hljs-string">&quot;abc&quot;</span>); <span class="hljs-comment">// 这里会抛出NumberFormatException</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>一般来说，查看堆栈跟踪都能找出问题所在。</p><ol><li><strong>检查静态初始化块</strong>：确保静态初始化块中没有抛出异常的代码。</li><li><strong>检查静态变量初始化</strong>：确保所有静态变量的初始化都是安全的，没有抛出异常。</li></ol><h2 id="工作中的例子"><a href="#工作中的例子" class="headerlink" title="工作中的例子"></a>工作中的例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.ExceptionInInitializerError at com.xxx.xx.Service.onInit(Service.java:<span class="hljs-number">654</span>) <br></code></pre></td></tr></table></figure><p>查看654行代码，引用了一个静态类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/data/data/com.xxx.xx/lib/libxxplay.so&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>            SFLogger.d(TAG, <span class="hljs-string">&quot;use /data/data/com.xxx.xx/lib/libxxplay.so&quot;</span>);<br>            System.load(path);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            SFLogger.d(TAG, <span class="hljs-string">&quot;use /system/lib/libxxplay.so&quot;</span>);<br>            System.loadLibrary(<span class="hljs-string">&quot;xxplay&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        SFLogger.e(TAG, <span class="hljs-string">&quot;JniUtil loadLibrary exception = &quot;</span> + e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码咋一看好像也没什么问题啊，异常都catch住了。</p><p>但如果仔细研究就会发现，这里的问题是滥用了<code>Exception</code>，没有针对具体异常进行捕获。查看loadLibrary源码发现其可能会抛出<code>SecurityException</code>、<code>UnsatisfiedLinkError</code>或者<code>NullPointerException</code>，<code>SecurityException</code>和<code>NullPointerException</code>的父类都是<code>RuntimeException</code>，是一种异常（<code>Exception</code>），<code>UnsatisfiedLinkError</code>的父类是<code>LinkageError</code>，是一种错误（<code>Error</code>），所以如果这里发生了<code>UnsatisfiedLinkError</code>，通过<code>Exception</code>是捕获不了的，必须通过他们的共同父类<code>Throwable</code>来进行捕获。当然，最好还是针对具体的异常进行捕获，不要用这种扩大化的捕获方式，容易隐藏问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Loads the native library specified by the &lt;code&gt;libname&lt;/code&gt;</span><br><span class="hljs-comment"> * argument.  The &lt;code&gt;libname&lt;/code&gt; argument must not contain any platform</span><br><span class="hljs-comment"> * specific prefix, file extension or path. If a native library</span><br><span class="hljs-comment"> * called &lt;code&gt;libname&lt;/code&gt; is statically linked with the VM, then the</span><br><span class="hljs-comment"> * JNI_OnLoad_&lt;code&gt;libname&lt;/code&gt; function exported by the library is invoked.</span><br><span class="hljs-comment"> * See the JNI Specification for more details.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Otherwise, the libname argument is loaded from a system library</span><br><span class="hljs-comment"> * location and mapped to a native library image in an implementation-</span><br><span class="hljs-comment"> * dependent manner.</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * The call &lt;code&gt;System.loadLibrary(name)&lt;/code&gt; is effectively</span><br><span class="hljs-comment"> * equivalent to the call</span><br><span class="hljs-comment"> * &lt;blockquote&gt;&lt;pre&gt;</span><br><span class="hljs-comment"> * Runtime.getRuntime().loadLibrary(name)</span><br><span class="hljs-comment"> * &lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>      libname   the name of the library.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@exception</span>  SecurityException  if a security manager exists and its</span><br><span class="hljs-comment"> *             &lt;code&gt;checkLink&lt;/code&gt; method doesn&#x27;t allow</span><br><span class="hljs-comment"> *             loading of the specified dynamic library</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@exception</span>  UnsatisfiedLinkError if either the libname argument</span><br><span class="hljs-comment"> *             contains a file path, the native library is not statically</span><br><span class="hljs-comment"> *             linked with the VM,  or the library cannot be mapped to a</span><br><span class="hljs-comment"> *             native library image by the host system.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@exception</span>  NullPointerException if &lt;code&gt;libname&lt;/code&gt; is</span><br><span class="hljs-comment"> *             &lt;code&gt;null&lt;/code&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span>        java.lang.Runtime#loadLibrary(java.lang.String)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span>        java.lang.SecurityManager#checkLink(java.lang.String)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@CallerSensitive</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadLibrary</span><span class="hljs-params">(String libname)</span> &#123;<br>    Runtime.getRuntime().loadLibrary0(Reflection.getCallerClass(), libname);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.android.com/reference/java/lang/ExceptionInInitializerError">ExceptionInInitializerError  | Android Developers</a></p><p><a href="https://www.baeldung.com/java-exceptionininitializererror">When Does Java Throw the ExceptionInInitializerError? | Baeldung</a></p><p><a href="https://docs.oracle.com/javase/specs/jls/se14/html/jls-11.html#jls-11.2.3">Chapter 11. Exceptions</a></p>]]></content>
    
    
    <categories>
      
      <category>AndroidBugFix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>探究安卓应用类找不到的原因(NoClassDefFoundError和ClassNotFoundException)</title>
    <link href="/article/3122544f/"/>
    <url>/article/3122544f/</url>
    
    <content type="html"><![CDATA[<p>最近在公司协助同事解决了几个类找不到的问题，都比较典型，特此记录一下。</p><h1 id="原因1：新旧版本SDK-API兼容性"><a href="#原因1：新旧版本SDK-API兼容性" class="headerlink" title="原因1：新旧版本SDK API兼容性"></a>原因1：新旧版本SDK API兼容性</h1><p><code>io.reactivex.exceptions.UndeliverableException: java.lang.NoClassDefFoundError: Failed resolution of: Lretrofit2/HttpException;  at io.reactivex.plugins.RxJavaPlugins.onError(RxJavaPlugins.java:366)  at io.reactivex.internal.schedulers.ScheduledRunnable.run(ScheduledRunnable.java:69)  at io.reactivex.internal.schedulers.ScheduledRunnable.call(ScheduledRunnable.java:57)  at java.util.concurrent.FutureTask.run(FutureTask.java:266)  at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:301)  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)  at java.lang.Thread.run(Thread.java:923) Caused by: java.lang.NoClassDefFoundError: Failed resolution of: Lretrofit2/HttpException;  at retrofit2.adapter.rxjava2.BodyObservable$BodyObserver.onNext(BodyObservable.java:54)  at retrofit2.adapter.rxjava2.BodyObservable$BodyObserver.onNext(BodyObservable.java:</code></p><p>一般碰到这种类找不到的问题，第一时间先看看apk本身，用jadx-gui反编译出来发现没有HttpException这个类，然后用android studio查看，有这个类，但show bytecode是灰色的，证明编译出来的apk是不包含这个类的。</p><p>然后去排查源码，我们确实有依赖retrofit，但为什么编译出来没有呢。看了一下dependency依赖树，确实只有一个版本的retrofit。。。那是不是编译的时候去掉了呢？然后全局搜索了一下retrofit，发现了下面的代码：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android.applicationVariants.all &#123; variant -&gt;<br>variant.getRuntimeConfiguration().exclude <span class="hljs-attr">group:</span> <span class="hljs-string">&#x27;com.squareup.retrofit2&#x27;</span>, <span class="hljs-attr">module:</span> <span class="hljs-string">&#x27;retrofit&#x27;</span><br>variant.getRuntimeConfiguration().exclude <span class="hljs-attr">group:</span> <span class="hljs-attr">module:</span> <span class="hljs-string">&#x27;retrofit&#x27;</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>为什么要去掉呢？一般都是为了解决多个版本依赖的问题，但依赖树没有看到多个版本依赖啊，是不是某个sdk源码依赖了retrofit？</p><p>果然，注释掉上面代码后，报类冲突了，发现是我司某个sdk的问题，他自己源码集成了retrofit，包名一样，但因为是比较老的版本，没有HttpException这个类，而应用又是基于新版的retrofit开发的，但编译为了解决冲突去掉了，结果就出问题了。</p><p>那要怎么解决呢？改成exclude旧版的retrofit？行不通，因为这个sdk是源码依赖了retrofit，不是通过implement这种方法。</p><p>最后，我找到了这个sdk的源码，编译了一个没有retrofit的版本。因为依赖关系是应用依赖了A模块，A模块依赖了这个sdk。引进A模块时，exclude掉这个sdk，然后在应用侧直接依赖没有retrofit的版本。</p><h2 id="启发"><a href="#启发" class="headerlink" title="启发"></a>启发</h2><p>解决编译类冲突时，一定要留一个心眼，注意新旧版本api变更的问题。如果代码覆盖率测试没有跑全，就把问题带到线上了。比如，上面那个问题，只有在报错的时候才有可能触发，正常测试大概率是测不出来的，比较隐蔽。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="原因2：系统的某个jar引用了不同版本的SDK"><a href="#原因2：系统的某个jar引用了不同版本的SDK" class="headerlink" title="原因2：系统的某个jar引用了不同版本的SDK"></a>原因2：系统的某个jar引用了不同版本的SDK</h1><p><code>java.lang.NoSuchMethodError: No static method parseString(Ljava/lang/String;)Lcom/google/gson/JsonElement; in class Lcom/google/gson/JsonParser; or its super classes (declaration of &#39;com.google.gson.JsonParser&#39; appears in /system/framework/xxxxxx.jar)</code></p><p>这也是一个编译通过，运行时报错的例子。重点是最后一句：&#x2F;system&#x2F;framework&#x2F;xxxxxx.jar，这是一个自定义的系统库，放到了BootClasspath里面。反编译后发现里面依赖了一个旧版本的gson，没有parseString这个方法，由于双亲委派机制，应用优先使用了这个旧版本的gson，结果就出问题了。</p><h2 id="启发-1"><a href="#启发-1" class="headerlink" title="启发"></a>启发</h2><p>系统库开发的时候要慎重使用第三方库；如果系统库只是服务于一些特定的应用，不要加入到BootClasspath，应该让应用使用：use-library:动态连接库的方法。</p><h1 id="原因3：升级persist应用"><a href="#原因3：升级persist应用" class="headerlink" title="原因3：升级persist应用"></a>原因3：升级persist应用</h1><p><code>AndroidRuntime: java.lang.RuntimeException: Unable to get provider com.xxxx.sdk.xxxProvider: java.lang.ClassNotFoundException: Didn&#39;t find class &quot;com.xxxx.sdk.xxxProvider&quot; on path: DexPathList[[zip file &quot;/system/vendor/app/xx.apk&quot;],nativeLibraryDirectories=[/vendor/lib, /system/lib]]</code></p><p>一般来说，安卓系统是禁止通过安装的方法来升级persist应用的，但因为历史原因，我司修改了这个机制，导致可以升级这类应用，结果就引发了这个问题：DexPathList没有更新成新安装的路径：data下面，还是停留在system分区。</p><p>一般升级普通应用时，系统会清除该应用的进程，同时清理之前在ActivityManagerService记录的该应用的四大组件，在下次应用重新启动时，系统会重新创建进程并加载各种组件运行。</p><p>但是，当升级的应用有persistent属性时，系统不会清除该应用。原因如下：</p><p><a href="http://aospxref.com/android-11.0.0_r21/s?refs=killPackageProcessesLocked&project=frameworks">killPackageProcessesLocked (reference) in projects: frameworks - OpenGrok search results</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">killPackageProcessesLocked</span><span class="hljs-params">(String packageName, <span class="hljs-type">int</span> appId,</span><br><span class="hljs-params">           <span class="hljs-type">int</span> userId, <span class="hljs-type">int</span> minOomAdj, <span class="hljs-type">boolean</span> callerWillRestart, <span class="hljs-type">boolean</span> allowRestart,</span><br><span class="hljs-params">           <span class="hljs-type">boolean</span> doit, <span class="hljs-type">boolean</span> evenPersistent, <span class="hljs-type">boolean</span> setRemoved, <span class="hljs-type">int</span> reasonCode,</span><br><span class="hljs-params">           <span class="hljs-type">int</span> subReason, String reason)</span> &#123;<br>       ArrayList&lt;ProcessRecord&gt; procs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>       <span class="hljs-comment">// Remove all processes this package may have touched: all with the</span><br>       <span class="hljs-comment">// same UID (except for the system or root user), and all whose name</span><br>       <span class="hljs-comment">// matches the package name.</span><br>       <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NP</span> <span class="hljs-operator">=</span> mProcessNames.getMap().size();<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ip &lt; NP; ip++) &#123;<br>           SparseArray&lt;ProcessRecord&gt; apps = mProcessNames.getMap().valueAt(ip);<br>           <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NA</span> <span class="hljs-operator">=</span> apps.size();<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">ia</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ia &lt; NA; ia++) &#123;<br>               <span class="hljs-type">ProcessRecord</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> apps.valueAt(ia);<br>               <span class="hljs-keyword">if</span> (app.isPersistent() &amp;&amp; !evenPersistent) &#123;<br>                   <span class="hljs-comment">// we don&#x27;t kill persistent processes</span><br>                   <span class="hljs-keyword">continue</span>;<br>               &#125;<br>               <span class="hljs-keyword">if</span> (app.removed) &#123;<br>                   <span class="hljs-keyword">if</span> (doit) &#123;<br>                       procs.add(app);<br>                   &#125;<br>                   <span class="hljs-keyword">continue</span>;<br>               &#125;<br>------------------------------------------<br>&#125;<br></code></pre></td></tr></table></figure><p>系统也没有更新应用的类加载路径。</p><p>方案一：</p><p>安装完新版本后重启系统。</p><p>方案二：</p><p>在应用内接收新版应用安装完成的广播，当APK发生更新或安装时， 匹配自己的包名，然后调用context的startInstrumentation 方法，该方法会强制系统清除应用进程并清理AMS对各种组件的状态记忆并重新启动该应用。</p><p>或者，通过thread的全局异常捕获（类找不到，方法找不到），调用：</p><p><code>boolean b = context.startInstrumentation(new ComponentName(getApplicationContext(), InstrumentationRoboot.class), null, null);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InstrumentationRoboot</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Instrumentation</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle arguments)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(arguments);<br>    &#125;<br>&#125;          <br></code></pre></td></tr></table></figure><p>AndroidManifest.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">package</span>=<span class="hljs-string">&quot;自己的包名&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">instrumentation</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.test.InstrumentationRoboot&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:targetPackage</span>=<span class="hljs-string">&quot;自己的包名&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="其他场景"><a href="#其他场景" class="headerlink" title="其他场景"></a>其他场景</h1><p>插件化加载路径不当，宿主和插件的类加载问题；混淆导致反射失效；在安卓5.0以下没有启用MutilDex等等。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/lindroid/article/details/90213146">Android应用具有persistent属性时升级清理AMS缓存数据_android:persistent&#x3D;“true” 自升级-CSDN博客</a></p><p><a href="https://juejin.cn/post/6844904179626934279">一个一年没解决的ClassNotFoundException｜类加载机制探索 - 掘金</a></p><p><a href="https://blog.csdn.net/jamesjxin/article/details/46606307">怎么解决java.lang.NoClassDefFoundError错误-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>AndroidBugFix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反射的优雅使用</title>
    <link href="/article/ba67228f/"/>
    <url>/article/ba67228f/</url>
    
    <content type="html"><![CDATA[<p>安卓9开始限制反射的调用，但是带系统签名或者内置系统的应用是可以豁免的 。</p><p>或者使用第三方库突破这个限制：</p><p><a href="https://github.com/tiann/FreeReflection">tiann&#x2F;FreeReflection: A library that lets you use reflection without any restriction above Android P</a></p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>假设有一个Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wesley.app;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span>  String name;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        num++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="替换一个实例中的字段"><a href="#替换一个实例中的字段" class="headerlink" title="替换一个实例中的字段"></a>替换一个实例中的字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Wesley&quot;</span>, <span class="hljs-number">25</span>);<br><span class="hljs-keyword">try</span> &#123;<br>    Reflector.with(person).field(<span class="hljs-string">&quot;age&quot;</span>).set(<span class="hljs-number">28</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Reflector.ReflectedException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="调用一个实例中对应的方法"><a href="#调用一个实例中对应的方法" class="headerlink" title="调用一个实例中对应的方法"></a>调用一个实例中对应的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//无参数</span><br>    Reflector.with(person).method(<span class="hljs-string">&quot;getAge&quot;</span>).call();<br>    <span class="hljs-comment">//有参数</span><br>    Reflector.with(person).method(<span class="hljs-string">&quot;setAge&quot;</span>, <span class="hljs-type">int</span>.class).call(<span class="hljs-number">26</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Reflector.ReflectedException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取静态变量"><a href="#获取静态变量" class="headerlink" title="获取静态变量"></a>获取静态变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    Reflector.on(Person.class).field(<span class="hljs-string">&quot;num&quot;</span>).get();<br>&#125; <span class="hljs-keyword">catch</span> (Reflector.ReflectedException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="生成实例对象"><a href="#生成实例对象" class="headerlink" title="生成实例对象"></a>生成实例对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> Reflector.on(Person.class).constructor(String.class, <span class="hljs-type">int</span>.class).newInstance(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">18</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Reflector.ReflectedException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="调用通过反射生成的实例的方法"><a href="#调用通过反射生成的实例的方法" class="headerlink" title="调用通过反射生成的实例的方法"></a>调用通过反射生成的实例的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">Reflector</span> <span class="hljs-variable">reflector</span> <span class="hljs-operator">=</span> Reflector.on(Person.class);<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> reflector.constructor(String.class, <span class="hljs-type">int</span>.class).newInstance(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">18</span>);<br><br>    reflector.field(<span class="hljs-string">&quot;age&quot;</span>).get(tom);<br>    reflector.method(<span class="hljs-string">&quot;getAge&quot;</span>).callByCaller(tom); <br>    <span class="hljs-comment">//或者</span><br>    reflector.bind(tom);<br>    reflector.field(<span class="hljs-string">&quot;age&quot;</span>).get();<br>    reflector.method(<span class="hljs-string">&quot;getAge&quot;</span>).call();<br>&#125; <span class="hljs-keyword">catch</span> (Reflector.ReflectedException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Reflector工具类"><a href="#Reflector工具类" class="headerlink" title="Reflector工具类"></a>Reflector工具类</h2><p><a href="https://github.com/didi/VirtualAPK/blob/master/CoreLibrary/src/main/java/com/didi/virtualapk/utils/Reflector.java">https://github.com/didi/VirtualAPK/blob/master/CoreLibrary/src/main/java/com/didi/virtualapk/utils/Reflector.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wesley.sdk.helper.util;<br><br><span class="hljs-keyword">import</span> androidx.annotation.NonNull;<br><span class="hljs-keyword">import</span> androidx.annotation.Nullable;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Member;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Created by qiaopu on 2018/4/26.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflector</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span>  <span class="hljs-string">&quot;Reflector&quot;</span>;<br><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; mType;<br>    <span class="hljs-keyword">protected</span> Object mCaller;<br>    <span class="hljs-keyword">protected</span> Constructor mConstructor;<br>    <span class="hljs-keyword">protected</span> Field mField;<br>    <span class="hljs-keyword">protected</span> Method mMethod;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectedException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReflectedException</span><span class="hljs-params">(String message)</span> &#123;<br>            <span class="hljs-built_in">super</span>(message);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReflectedException</span><span class="hljs-params">(String message, Throwable cause)</span> &#123;<br>            <span class="hljs-built_in">super</span>(message, cause);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Reflector <span class="hljs-title function_">on</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String name)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        <span class="hljs-keyword">return</span> on(name, <span class="hljs-literal">true</span>, Reflector.class.getClassLoader());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Reflector <span class="hljs-title function_">on</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String name, <span class="hljs-type">boolean</span> initialize)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        <span class="hljs-keyword">return</span> on(name, initialize, Reflector.class.getClassLoader());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Reflector <span class="hljs-title function_">on</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String name, <span class="hljs-type">boolean</span> initialize, <span class="hljs-meta">@Nullable</span> ClassLoader loader)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> on(Class.forName(name, initialize, loader));<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectedException</span>(<span class="hljs-string">&quot;Oops!&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Reflector <span class="hljs-title function_">on</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Class&lt;?&gt; type)</span> &#123;<br>        <span class="hljs-type">Reflector</span> <span class="hljs-variable">reflector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reflector</span>();<br>        reflector.mType = type;<br>        <span class="hljs-keyword">return</span> reflector;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Reflector <span class="hljs-title function_">with</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Object caller)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        <span class="hljs-keyword">return</span> on(caller.getClass()).bind(caller);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">Reflector</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Reflector <span class="hljs-title function_">constructor</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Class&lt;?&gt;... parameterTypes)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            mConstructor = mType.getDeclaredConstructor(parameterTypes);<br>            mConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>            mField = <span class="hljs-literal">null</span>;<br>            mMethod = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectedException</span>(<span class="hljs-string">&quot;Oops!&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> &lt;R&gt; R <span class="hljs-title function_">newInstance</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object ... initargs)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        <span class="hljs-keyword">if</span> (mConstructor == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectedException</span>(<span class="hljs-string">&quot;Constructor was null!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (R) mConstructor.newInstance(initargs);<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectedException</span>(<span class="hljs-string">&quot;Oops!&quot;</span>, e.getTargetException());<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectedException</span>(<span class="hljs-string">&quot;Oops!&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">checked</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object caller)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        <span class="hljs-keyword">if</span> (caller == <span class="hljs-literal">null</span> || mType.isInstance(caller)) &#123;<br>            <span class="hljs-keyword">return</span> caller;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectedException</span>(<span class="hljs-string">&quot;Caller [&quot;</span> + caller + <span class="hljs-string">&quot;] is not a instance of type [&quot;</span> + mType + <span class="hljs-string">&quot;]!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object caller, <span class="hljs-meta">@Nullable</span> Member member, <span class="hljs-meta">@NonNull</span> String name)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        <span class="hljs-keyword">if</span> (member == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectedException</span>(name + <span class="hljs-string">&quot; was null!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (caller == <span class="hljs-literal">null</span> &amp;&amp; !Modifier.isStatic(member.getModifiers())) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectedException</span>(<span class="hljs-string">&quot;Need a caller!&quot;</span>);<br>        &#125;<br>        checked(caller);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Reflector <span class="hljs-title function_">bind</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object caller)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        mCaller = checked(caller);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Reflector <span class="hljs-title function_">unbind</span><span class="hljs-params">()</span> &#123;<br>        mCaller = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Reflector <span class="hljs-title function_">field</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String name)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            mField = findField(name);<br>            mField.setAccessible(<span class="hljs-literal">true</span>);<br>            mConstructor = <span class="hljs-literal">null</span>;<br>            mMethod = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectedException</span>(<span class="hljs-string">&quot;Oops!&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Field <span class="hljs-title function_">findField</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String name)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> mType.getField(name);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            <span class="hljs-keyword">for</span> (Class&lt;?&gt; cls = mType; cls != <span class="hljs-literal">null</span>; cls = cls.getSuperclass()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">return</span> cls.getDeclaredField(name);<br>                &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException ex) &#123;<br>                    <span class="hljs-comment">// Ignored</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> &lt;R&gt; R <span class="hljs-title function_">get</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        <span class="hljs-keyword">return</span> get(mCaller);<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> &lt;R&gt; R <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object caller)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        check(caller, mField, <span class="hljs-string">&quot;Field&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (R) mField.get(caller);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectedException</span>(<span class="hljs-string">&quot;Oops!&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Reflector <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object value)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        <span class="hljs-keyword">return</span> set(mCaller, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Reflector <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object caller, <span class="hljs-meta">@Nullable</span> Object value)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        check(caller, mField, <span class="hljs-string">&quot;Field&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            mField.set(caller, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectedException</span>(<span class="hljs-string">&quot;Oops!&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Reflector <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String name, <span class="hljs-meta">@Nullable</span> Class&lt;?&gt;... parameterTypes)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            mMethod = findMethod(name, parameterTypes);<br>            mMethod.setAccessible(<span class="hljs-literal">true</span>);<br>            mConstructor = <span class="hljs-literal">null</span>;<br>            mField = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectedException</span>(<span class="hljs-string">&quot;Oops!&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Method <span class="hljs-title function_">findMethod</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String name, <span class="hljs-meta">@Nullable</span> Class&lt;?&gt;... parameterTypes)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> mType.getMethod(name, parameterTypes);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            <span class="hljs-keyword">for</span> (Class&lt;?&gt; cls = mType; cls != <span class="hljs-literal">null</span>; cls = cls.getSuperclass()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">return</span> cls.getDeclaredMethod(name, parameterTypes);<br>                &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException ex) &#123;<br>                    <span class="hljs-comment">// Ignored</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;R&gt; R <span class="hljs-title function_">call</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object... args)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        <span class="hljs-keyword">return</span> callByCaller(mCaller, args);<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> &lt;R&gt; R <span class="hljs-title function_">callByCaller</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object caller, <span class="hljs-meta">@Nullable</span> Object... args)</span> <span class="hljs-keyword">throws</span> ReflectedException &#123;<br>        check(caller, mMethod, <span class="hljs-string">&quot;Method&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (R) mMethod.invoke(caller, args);<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectedException</span>(<span class="hljs-string">&quot;Oops!&quot;</span>, e.getTargetException());<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectedException</span>(<span class="hljs-string">&quot;Oops!&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuietReflector</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Reflector</span> &#123;<br><br>        <span class="hljs-keyword">protected</span> Throwable mIgnored;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> QuietReflector <span class="hljs-title function_">on</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String name)</span> &#123;<br>            <span class="hljs-keyword">return</span> on(name, <span class="hljs-literal">true</span>, QuietReflector.class.getClassLoader());<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> QuietReflector <span class="hljs-title function_">on</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String name, <span class="hljs-type">boolean</span> initialize)</span> &#123;<br>            <span class="hljs-keyword">return</span> on(name, initialize, QuietReflector.class.getClassLoader());<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> QuietReflector <span class="hljs-title function_">on</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String name, <span class="hljs-type">boolean</span> initialize, <span class="hljs-meta">@Nullable</span> ClassLoader loader)</span> &#123;<br>            Class&lt;?&gt; cls = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                cls = Class.forName(name, initialize, loader);<br>                <span class="hljs-keyword">return</span> on(cls, <span class="hljs-literal">null</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br><span class="hljs-comment">//                Log.w(LOG_TAG, &quot;Oops!&quot;, e);</span><br>                <span class="hljs-keyword">return</span> on(cls, e);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> QuietReflector <span class="hljs-title function_">on</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Class&lt;?&gt; type)</span> &#123;<br>            <span class="hljs-keyword">return</span> on(type, (type == <span class="hljs-literal">null</span>) ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectedException</span>(<span class="hljs-string">&quot;Type was null!&quot;</span>) : <span class="hljs-literal">null</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> QuietReflector <span class="hljs-title function_">on</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Class&lt;?&gt; type, <span class="hljs-meta">@Nullable</span> Throwable ignored)</span> &#123;<br>            <span class="hljs-type">QuietReflector</span> <span class="hljs-variable">reflector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QuietReflector</span>();<br>            reflector.mType = type;<br>            reflector.mIgnored = ignored;<br>            <span class="hljs-keyword">return</span> reflector;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> QuietReflector <span class="hljs-title function_">with</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object caller)</span> &#123;<br>            <span class="hljs-keyword">if</span> (caller == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> on((Class&lt;?&gt;) <span class="hljs-literal">null</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> on(caller.getClass()).bind(caller);<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-title function_">QuietReflector</span><span class="hljs-params">()</span> &#123;<br><br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Throwable <span class="hljs-title function_">getIgnored</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> mIgnored;<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">skip</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> skipAlways() || mIgnored != <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">skipAlways</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> mType == <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> QuietReflector <span class="hljs-title function_">constructor</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Class&lt;?&gt;... parameterTypes)</span> &#123;<br>            <span class="hljs-keyword">if</span> (skipAlways()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                mIgnored = <span class="hljs-literal">null</span>;<br>                <span class="hljs-built_in">super</span>.constructor(parameterTypes);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                mIgnored = e;<br><span class="hljs-comment">//                Log.w(LOG_TAG, &quot;Oops!&quot;, e);</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> &lt;R&gt; R <span class="hljs-title function_">newInstance</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object... initargs)</span> &#123;<br>            <span class="hljs-keyword">if</span> (skip()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                mIgnored = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.newInstance(initargs);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                mIgnored = e;<br><span class="hljs-comment">//                Log.w(LOG_TAG, &quot;Oops!&quot;, e);</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> QuietReflector <span class="hljs-title function_">bind</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object obj)</span> &#123;<br>            <span class="hljs-keyword">if</span> (skipAlways()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                mIgnored = <span class="hljs-literal">null</span>;<br>                <span class="hljs-built_in">super</span>.bind(obj);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                mIgnored = e;<br><span class="hljs-comment">//                Log.w(LOG_TAG, &quot;Oops!&quot;, e);</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> QuietReflector <span class="hljs-title function_">unbind</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-built_in">super</span>.unbind();<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> QuietReflector <span class="hljs-title function_">field</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String name)</span> &#123;<br>            <span class="hljs-keyword">if</span> (skipAlways()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                mIgnored = <span class="hljs-literal">null</span>;<br>                <span class="hljs-built_in">super</span>.field(name);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                mIgnored = e;<br><span class="hljs-comment">//                Log.w(LOG_TAG, &quot;Oops!&quot;, e);</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> &lt;R&gt; R <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (skip()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                mIgnored = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.get();<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                mIgnored = e;<br><span class="hljs-comment">//                Log.w(LOG_TAG, &quot;Oops!&quot;, e);</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> &lt;R&gt; R <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object caller)</span> &#123;<br>            <span class="hljs-keyword">if</span> (skip()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                mIgnored = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.get(caller);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                mIgnored = e;<br><span class="hljs-comment">//                Log.w(LOG_TAG, &quot;Oops!&quot;, e);</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> QuietReflector <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object value)</span> &#123;<br>            <span class="hljs-keyword">if</span> (skip()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                mIgnored = <span class="hljs-literal">null</span>;<br>                <span class="hljs-built_in">super</span>.set(value);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                mIgnored = e;<br><span class="hljs-comment">//                Log.w(LOG_TAG, &quot;Oops!&quot;, e);</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> QuietReflector <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object caller, <span class="hljs-meta">@Nullable</span> Object value)</span> &#123;<br>            <span class="hljs-keyword">if</span> (skip()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                mIgnored = <span class="hljs-literal">null</span>;<br>                <span class="hljs-built_in">super</span>.set(caller, value);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                mIgnored = e;<br><span class="hljs-comment">//                Log.w(LOG_TAG, &quot;Oops!&quot;, e);</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> QuietReflector <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String name, <span class="hljs-meta">@Nullable</span> Class&lt;?&gt;... parameterTypes)</span> &#123;<br>            <span class="hljs-keyword">if</span> (skipAlways()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                mIgnored = <span class="hljs-literal">null</span>;<br>                <span class="hljs-built_in">super</span>.method(name, parameterTypes);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                mIgnored = e;<br><span class="hljs-comment">//                Log.w(LOG_TAG, &quot;Oops!&quot;, e);</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> &lt;R&gt; R <span class="hljs-title function_">call</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object... args)</span>  &#123;<br>            <span class="hljs-keyword">if</span> (skip()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                mIgnored = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.call(args);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                mIgnored = e;<br><span class="hljs-comment">//                Log.w(LOG_TAG, &quot;Oops!&quot;, e);</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> &lt;R&gt; R <span class="hljs-title function_">callByCaller</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Object caller, <span class="hljs-meta">@Nullable</span> Object... args)</span> &#123;<br>            <span class="hljs-keyword">if</span> (skip()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                mIgnored = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.callByCaller(caller, args);<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                mIgnored = e;<br><span class="hljs-comment">//                Log.w(LOG_TAG, &quot;Oops!&quot;, e);</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在WSL2编译安卓13并在WSL2和windows运行</title>
    <link href="/article/3fc1a37/"/>
    <url>/article/3fc1a37/</url>
    
    <content type="html"><![CDATA[<h1 id="在WSL2编译安卓13并在WSL2和windows运行"><a href="#在WSL2编译安卓13并在WSL2和windows运行" class="headerlink" title="在WSL2编译安卓13并在WSL2和windows运行"></a>在WSL2编译安卓13并在WSL2和windows运行</h1><p>刚开始的时候，我是在master分支编译安卓的，结果运行emulator起不来，后来切换到android-13.0.0_r35就OK了。</p><h2 id="在wsl2编译并运行"><a href="#在wsl2编译并运行" class="headerlink" title="在wsl2编译并运行"></a>在wsl2编译并运行</h2><p>以下是编译和运行步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">wesley@Wesley:~/aosp$ source build/envsetup.sh<br>wesley@Wesley:~/aosp$ lunch sdk_pc_x86_64-userdebug<br>wesley@Wesley:~/aosp$ make -j18<br>wesley@Wesley:~/aosp$ emulator<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202305281541373.png" alt="image-20230528154122118"></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202305281542994.png" alt="image-20230528154227766"></p><h3 id="可能出现的错误"><a href="#可能出现的错误" class="headerlink" title="可能出现的错误"></a>可能出现的错误</h3><p>1、MoTTY X11 proxy: Unsupported authorisation protocolMoTTY X11 proxy: Unsupported authorisation protocol</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">普通用户报错，root用户不报错的解决方法：</span><br>cp /root/.Xauthority /home/xxx/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">普通用户不报错，root用户报错的解决方法：</span><br>cp /home/xxx/.Xauthority /root/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">xxx为用户名</span><br></code></pre></td></tr></table></figure><p>2、kvm无权限访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">wesley@Wesley:~/aosp$ emulator<br>INFO    | Android emulator version 31.3.9.0 (build_id 8748233) (CL:N/A)<br>INFO    | Storing crashdata in: /tmp/android-wesley/emu-crash.db, detection is enabled<br>INFO    | Duplicate loglines will be removed, if you wish to see each indiviudal line launch with the -log-nofilter flag.<br>ProbeKVM: This user doesn&#x27;t have permissions to use KVM (/dev/kvm).<br>The KVM line in /etc/group is: [kvm:x:108:wesley]<br><br>If the current user has KVM permissions,<br>the KVM line in /etc/group should end with &quot;:&quot; followed by your username.<br><br>If we see LINE_NOT_FOUND, the kvm group may need to be created along with permissions:<br>sudo groupadd -r kvm<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Then ensure /lib/udev/rules.d/50-udev-default.rules contains something like:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">KERNEL==<span class="hljs-string">&quot;kvm&quot;</span>, GROUP=<span class="hljs-string">&quot;kvm&quot;</span>, MODE=<span class="hljs-string">&quot;0660&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">and <span class="hljs-keyword">then</span> run:</span><br>sudo gpasswd -a $USER kvm<br><br>If we see kvm:... but no username at the end, running the following command may allow KVM access:<br>sudo gpasswd -a $USER kvm<br><br>You may need to log out and back in for changes to take effect.<br><br>ERROR   | x86_64 emulation currently requires hardware acceleration!<br>CPU acceleration status: This user doesn&#x27;t have permissions to use KVM (/dev/kvm).<br>The KVM line in /etc/group is: [kvm:x:108:wesley]<br><br>If the current user has KVM permissions,<br>the KVM line in /etc/group should end with &quot;:&quot; followed by your username.<br><br>If we see LINE_NOT_FOUND, the<br>More info on configuring VM acceleration on Linux:<br>https://developer.android.com/studio/run/emulator-acceleration#vm-linux<br>General information on acceleration: https://developer.android.com/studio/run/emulator-acceleration.<br></code></pre></td></tr></table></figure><p>解决办法：</p><p>1、创建kvm用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo groupadd -r kvm #创建kvm用户组<br>sudo gpasswd -a $USER kvm #添加用户到kvm<br></code></pre></td></tr></table></figure><p>2、更改&#x2F;dev&#x2F;kvm访问权限</p><p>&#x2F;dev&#x2F;kvm默认权限是600，只有root用户可以访问，我们需要将其用户组更改为kvm并赋予660权限。</p><p>编辑&#x2F;etc&#x2F;wsl.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[boot]<br>command = /bin/bash -c &#x27;chown -v root:kvm /dev/kvm &amp;&amp; chmod 660 /dev/kvm&#x27;<br></code></pre></td></tr></table></figure><p>低版本的windows可能没有打开嵌套虚拟化，需要加入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[wsl2]<br>nestedVirtualization=true<br></code></pre></td></tr></table></figure><p>重启wsl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wsl.exe --shutdown<br></code></pre></td></tr></table></figure><h2 id="在windows上运行"><a href="#在windows上运行" class="headerlink" title="在windows上运行"></a>在windows上运行</h2><p>由于嵌套虚拟化，目前在wsl2直接运行模拟器会比较卡，我们需要切换到windows运行。</p><h3 id="打包-AVD-映像-zip-文件"><a href="#打包-AVD-映像-zip-文件" class="headerlink" title="打包 AVD 映像 zip 文件"></a>打包 AVD 映像 zip 文件</h3><p>安卓12开始</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make -j18 emu_img_zip<br></code></pre></td></tr></table></figure><p>安卓12以下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">make -j18 sdk sdk_repo</span><br></code></pre></td></tr></table></figure><p>编译完成后会生成以 <code>sdk-repo-linux-system-images</code> 为前缀的 AVD 映像 zip 文件。</p><p>比如我的是<code>\home\wesley\aosp\out\target\product\emulator64_x86_64\sdk-repo-linux-system-images-eng.wesley.zip</code></p><p>可以将其解压在当前文件夹或者其他windows路径，我这里选择就地解压：</p><p>获得windows访问路径：<code>\\wsl.localhost\Ubuntu-20.04\home\wesley\aosp\out\target\product\emulator64_x86_64\x86_64</code></p><p>在powershell执行：</p><blockquote><p>我已经将C:\Users\Windows\AppData\Local\Android\Sdk\emulator路径添加到环境变量了，Large_Desktop_API_33是我在android studio创建模拟器的名称。</p></blockquote><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">emulator -avd Large_Desktop_API_33  -sysdir \\wsl.localhost\Ubuntu<span class="hljs-number">-20.04</span>\home\wesley\aosp\out\target\product\emulator64_x86_64\x86_64  -dns-server <span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span>,<span class="hljs-number">114.114</span><span class="hljs-number">.114</span><span class="hljs-number">.114</span> -verbose<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202305281603646.png" alt="image-20230528160320010"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://developer.android.google.cn/studio/run/emulator-commandline?hl=zh-cn">从命令行启动模拟器  | Android Studio  | Android Developers</a></p><p><a href="https://developer.android.com/studio/run/managing-avds?utm_source=android-studio&hl=zh-cn">创建和管理虚拟设备  | Android Studio  | Android Developers</a></p><p><a href="https://source.android.google.cn/docs/devices/automotive/start/avd/android_virtual_device?hl=zh-cn">用作开发平台的 Android 虚拟设备  | Android 开源项目  | Android Open Source Project</a></p><p><a href="https://source.android.com/docs/setup/create/avd?hl=zh-cn#sharing_avd_system_images_for_others_to_use_with_android_studio">使用 Android 模拟器虚拟设备  | Android 开源项目  | Android Open Source Project</a></p><p>[AOSP-13 : Not able to create AVD system image from <a href="https://issuetracker.google.com/issues/244956535">244956535] - Visible to Public - Issue Tracker</a></p><p><a href="https://serverfault.com/questions/1043441/how-to-run-kvm-nested-in-wsl2-or-vmware">hyper v - How to run KVM nested in WSL2 (or vmware)? - Server Fault</a></p><p><a href="https://www.cnblogs.com/create-serenditipy/p/15407983.html">Linux远程图形化界面出错：MoTTY X11 proxy: Unsupported authorisation protocol - 时间的风景 - 博客园</a></p>]]></content>
    
    
    <categories>
      
      <category>Android Build System</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Android Build</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓系统应用的卸载和恢复(非data分区)</title>
    <link href="/article/5867f171/"/>
    <url>/article/5867f171/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓系统应用的卸载和恢复-非data分区"><a href="#安卓系统应用的卸载和恢复-非data分区" class="headerlink" title="安卓系统应用的卸载和恢复(非data分区)"></a>安卓系统应用的卸载和恢复(非data分区)</h1><h2 id="Uninstall-and-Restore-Android-System-Apps-non-data-partition"><a href="#Uninstall-and-Restore-Android-System-Apps-non-data-partition" class="headerlink" title="Uninstall and Restore Android System Apps (non-data partition)"></a>Uninstall and Restore Android System Apps (non-data partition)</h2><p>网上已经有很多预装应用卸载的方法了，但是他们基本都是设法在第一次开机的时候安装到data分区。</p><p>本文需要达到的目标是预装在system分区的应用能够被卸载，且能恢复安装。</p><h3 id="命令行方法"><a href="#命令行方法" class="headerlink" title="命令行方法"></a>命令行方法</h3><p>安卓5.0开始可以针对用户卸载系统应用</p><h4 id="卸载系统应用"><a href="#卸载系统应用" class="headerlink" title="卸载系统应用"></a>卸载系统应用</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell pm uninstall -k --user 0 app包名<br></code></pre></td></tr></table></figure><p>-k是是否需要保留数据，可以不加。</p><h4 id="恢复系统应用"><a href="#恢复系统应用" class="headerlink" title="恢复系统应用"></a>恢复系统应用</h4><p>安卓7开始才可以通过命令恢复</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell cmd package install-existing app包名<br></code></pre></td></tr></table></figure><h3 id="代码方法"><a href="#代码方法" class="headerlink" title="代码方法"></a>代码方法</h3><h4 id="代码分析-基于目前aosp-master分支最新代码"><a href="#代码分析-基于目前aosp-master分支最新代码" class="headerlink" title="代码分析(基于目前aosp master分支最新代码)"></a>代码分析(基于目前aosp master分支最新代码)</h4><h5 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h5><p>com&#x2F;android&#x2F;server&#x2F;pm&#x2F;PackageManagerShellCommand.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">runUninstall</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> getOutPrintWriter();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">flags</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHandle.USER_ALL;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">versionCode</span> <span class="hljs-operator">=</span> PackageManager.VERSION_CODE_HIGHEST;<br><br>        String opt;<br>        <span class="hljs-keyword">while</span> ((opt = getNextOption()) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">switch</span> (opt) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-k&quot;</span>:<br>                    flags |= PackageManager.DELETE_KEEP_DATA;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;--user&quot;</span>:<br>                    userId = UserHandle.parseUserArg(getNextArgRequired());<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;--versionCode&quot;</span>:<br>                    versionCode = Long.parseLong(getNextArgRequired());<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    pw.println(<span class="hljs-string">&quot;Error: Unknown option: &quot;</span> + opt);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">packageName</span> <span class="hljs-operator">=</span> getNextArg();<br>        <span class="hljs-keyword">if</span> (packageName == <span class="hljs-literal">null</span>) &#123;<br>            pw.println(<span class="hljs-string">&quot;Error: package name not specified&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br><br>        / <span class="hljs-keyword">if</span> a split is specified, just remove it and not the whole <span class="hljs-keyword">package</span><br>        ArrayList&lt;String&gt; splitNames = getRemainingArgs();<br>        <span class="hljs-keyword">if</span> (!splitNames.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> runRemoveSplits(packageName, splitNames);<br>        &#125;<br>        <span class="hljs-comment">// 不加--user是卸载所有用户的应用</span><br>        <span class="hljs-keyword">if</span> (userId == UserHandle.USER_ALL) &#123;<br>            flags |= PackageManager.DELETE_ALL_USERS;<br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">translatedUserId</span> <span class="hljs-operator">=</span><br>                translateUserId(userId, UserHandle.USER_SYSTEM, <span class="hljs-string">&quot;runUninstall&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">LocalIntentReceiver</span> <span class="hljs-variable">receiver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalIntentReceiver</span>();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">PackageManagerInternal</span> <span class="hljs-variable">internal</span> <span class="hljs-operator">=</span><br>                LocalServices.getService(PackageManagerInternal.class);<br><br>        <span class="hljs-keyword">if</span> (internal.isApexPackage(packageName)) &#123;<br>            internal.uninstallApex(<br>                    packageName, versionCode, translatedUserId, receiver.getIntentSender(), flags);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//如果删除某一个用户的应用，走这里</span><br>            <span class="hljs-keyword">if</span> ((flags &amp; PackageManager.DELETE_ALL_USERS) == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">PackageInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> mInterface.getPackageInfo(packageName,<br>                        PackageManager.MATCH_STATIC_SHARED_AND_SDK_LIBRARIES, translatedUserId);<br>                <span class="hljs-keyword">if</span> (info == <span class="hljs-literal">null</span>) &#123;<br>                    pw.println(<span class="hljs-string">&quot;Failure [not installed for &quot;</span> + translatedUserId + <span class="hljs-string">&quot;]&quot;</span>);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isSystem</span> <span class="hljs-operator">=</span><br>                        (info.applicationInfo.flags &amp; ApplicationInfo.FLAG_SYSTEM) != <span class="hljs-number">0</span>;<br>                <span class="hljs-comment">// If we are being asked to delete a system app for just one</span><br>                <span class="hljs-comment">// user set flag so it disables rather than reverting to system</span><br>                <span class="hljs-comment">// version of the app.</span><br>                <span class="hljs-keyword">if</span> (isSystem) &#123;<br>                    flags |= PackageManager.DELETE_SYSTEM_APP;<br>                &#125;<br>            &#125;<br>            mInterface.getPackageInstaller().uninstall(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VersionedPackage</span>(packageName,<br>                            versionCode), <span class="hljs-literal">null</span> <span class="hljs-comment">/*callerPackageName*/</span>, flags,<br>                    receiver.getIntentSender(), translatedUserId);<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Intent</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> receiver.getResult();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> result.getIntExtra(PackageInstaller.EXTRA_STATUS,<br>                PackageInstaller.STATUS_FAILURE);<br>        <span class="hljs-keyword">if</span> (status == PackageInstaller.STATUS_SUCCESS) &#123;<br>            pw.println(<span class="hljs-string">&quot;Success&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            pw.println(<span class="hljs-string">&quot;Failure [&quot;</span><br>                    + result.getStringExtra(PackageInstaller.EXTRA_STATUS_MESSAGE) + <span class="hljs-string">&quot;]&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>android&#x2F;content&#x2F;pm&#x2F;PackageInstaller.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Uninstall the given package with a specific version code, removing it</span><br><span class="hljs-comment">     * completely from the device. If the version code of the package</span><br><span class="hljs-comment">     * does not match the one passed in the versioned package argument this</span><br><span class="hljs-comment">     * method is a no-op. Use &#123;<span class="hljs-doctag">@link</span> PackageManager#VERSION_CODE_HIGHEST&#125; to</span><br><span class="hljs-comment">     * uninstall the latest version of the package.</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * This method is available to:</span><br><span class="hljs-comment">     * &lt;ul&gt;</span><br><span class="hljs-comment">     * &lt;li&gt;the current &quot;installer of record&quot; for the package</span><br><span class="hljs-comment">     * &lt;li&gt;the device owner</span><br><span class="hljs-comment">     * &lt;li&gt;the affiliated profile owner</span><br><span class="hljs-comment">     * &lt;/ul&gt;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> versionedPackage The versioned package to uninstall.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> statusReceiver Where to deliver the result.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> android.app.admin.DevicePolicyManager</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequiresPermission(anyOf = &#123;</span><br><span class="hljs-meta">            Manifest.permission.DELETE_PACKAGES,</span><br><span class="hljs-meta">            Manifest.permission.REQUEST_DELETE_PACKAGES&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uninstall</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> VersionedPackage versionedPackage,</span><br><span class="hljs-params">            <span class="hljs-meta">@NonNull</span> IntentSender statusReceiver)</span> &#123;<br>        uninstall(versionedPackage, <span class="hljs-number">0</span> <span class="hljs-comment">/*flags*/</span>, statusReceiver);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Uninstall the given package with a specific version code, removing it</span><br><span class="hljs-comment">     * completely from the device. This method is only available to the current</span><br><span class="hljs-comment">     * &quot;installer of record&quot; for the package. If the version code of the package</span><br><span class="hljs-comment">     * does not match the one passed in the versioned package argument this</span><br><span class="hljs-comment">     * method is a no-op. Use &#123;<span class="hljs-doctag">@link</span> PackageManager#VERSION_CODE_HIGHEST&#125; to</span><br><span class="hljs-comment">     * uninstall the latest version of the package.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> versionedPackage The versioned package to uninstall.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> flags Flags for uninstall.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> statusReceiver Where to deliver the result.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@hide</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequiresPermission(anyOf = &#123;</span><br><span class="hljs-meta">            Manifest.permission.DELETE_PACKAGES,</span><br><span class="hljs-meta">            Manifest.permission.REQUEST_DELETE_PACKAGES&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uninstall</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> VersionedPackage versionedPackage, <span class="hljs-meta">@DeleteFlags</span> <span class="hljs-type">int</span> flags,</span><br><span class="hljs-params">            <span class="hljs-meta">@NonNull</span> IntentSender statusReceiver)</span> &#123;<br>        Objects.requireNonNull(versionedPackage, <span class="hljs-string">&quot;versionedPackage cannot be null&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//binder调用</span><br>            mInstaller.uninstall(versionedPackage, mInstallerPackageName,<br>                    flags, statusReceiver, mUserId);<br>        &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>            <span class="hljs-keyword">throw</span> e.rethrowFromSystemServer();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>com&#x2F;android&#x2F;server&#x2F;pm&#x2F;PackageInstallerService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uninstall</span><span class="hljs-params">(VersionedPackage versionedPackage, String callerPackageName, <span class="hljs-type">int</span> flags,</span><br><span class="hljs-params">                IntentSender statusReceiver, <span class="hljs-type">int</span> userId)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Computer</span> <span class="hljs-variable">snapshot</span> <span class="hljs-operator">=</span> mPm.snapshotComputer();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">callingUid</span> <span class="hljs-operator">=</span> Binder.getCallingUid();<br>        snapshot.enforceCrossUserPermission(callingUid, userId, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;uninstall&quot;</span>);<br>        <span class="hljs-keyword">if</span> ((callingUid != Process.SHELL_UID) &amp;&amp; (callingUid != Process.ROOT_UID)) &#123;<br>            mAppOps.checkPackage(callingUid, callerPackageName);<br>        &#125;<br><br>        <span class="hljs-comment">// Check whether the caller is device owner or affiliated profile owner, in which case we do</span><br>        <span class="hljs-comment">// it silently.</span><br>        <span class="hljs-type">DevicePolicyManagerInternal</span> <span class="hljs-variable">dpmi</span> <span class="hljs-operator">=</span><br>                LocalServices.getService(DevicePolicyManagerInternal.class);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">canSilentlyInstallPackage</span> <span class="hljs-operator">=</span><br>                dpmi != <span class="hljs-literal">null</span> &amp;&amp; dpmi.canSilentlyInstallPackage(callerPackageName, callingUid);<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">PackageDeleteObserverAdapter</span> <span class="hljs-variable">adapter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageDeleteObserverAdapter</span>(mContext,<br>                statusReceiver, versionedPackage.getPackageName(),<br>                canSilentlyInstallPackage, userId);<br>        <span class="hljs-keyword">if</span> (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DELETE_PACKAGES)<br>                    == PackageManager.PERMISSION_GRANTED) &#123;<br>            <span class="hljs-comment">// Sweet, call straight through!</span><br>            mPm.deletePackageVersioned(versionedPackage, adapter.getBinder(), userId, flags);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (canSilentlyInstallPackage) &#123;<br>            <span class="hljs-comment">// Allow the device owner and affiliated profile owner to silently delete packages</span><br>            <span class="hljs-comment">// Need to clear the calling identity to get DELETE_PACKAGES permission</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">ident</span> <span class="hljs-operator">=</span> Binder.clearCallingIdentity();<br>            <span class="hljs-keyword">try</span> &#123;<br>                mPm.deletePackageVersioned(versionedPackage, adapter.getBinder(), userId, flags);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                Binder.restoreCallingIdentity(ident);<br>            &#125;<br>            DevicePolicyEventLogger<br>                    .createEvent(DevicePolicyEnums.UNINSTALL_PACKAGE)<br>                    .setAdmin(callerPackageName)<br>                    .write();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">ApplicationInfo</span> <span class="hljs-variable">appInfo</span> <span class="hljs-operator">=</span> snapshot.getApplicationInfo(callerPackageName, <span class="hljs-number">0</span>, userId);<br>            <span class="hljs-keyword">if</span> (appInfo.targetSdkVersion &gt;= Build.VERSION_CODES.P) &#123;<br>                mContext.enforceCallingOrSelfPermission(Manifest.permission.REQUEST_DELETE_PACKAGES,<br>                        <span class="hljs-literal">null</span>);<br>            &#125;<br><br>            <span class="hljs-comment">// Take a short detour to confirm with user</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_UNINSTALL_PACKAGE);<br>            intent.setData(Uri.fromParts(<span class="hljs-string">&quot;package&quot;</span>, versionedPackage.getPackageName(), <span class="hljs-literal">null</span>));<br>            intent.putExtra(PackageInstaller.EXTRA_CALLBACK, adapter.getBinder().asBinder());<br>            adapter.onUserActionRequired(intent);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>com&#x2F;android&#x2F;server&#x2F;pm&#x2F;IPackageManagerBase.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deletePackageAsUser</span><span class="hljs-params">(String packageName, <span class="hljs-type">int</span> versionCode,</span><br><span class="hljs-params">                                          IPackageDeleteObserver observer, <span class="hljs-type">int</span> userId, <span class="hljs-type">int</span> flags)</span> &#123;<br>        deletePackageVersioned(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VersionedPackage</span>(packageName, versionCode),<br>                               <span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageManager</span>.LegacyPackageDeleteObserver(observer).getBinder(), userId,<br>                               flags);<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="恢复安装"><a href="#恢复安装" class="headerlink" title="恢复安装"></a>恢复安装</h5><p>com&#x2F;android&#x2F;server&#x2F;pm&#x2F;PackageManagerShellCommand.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">runInstallExisting</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> getOutPrintWriter();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHandle.USER_CURRENT;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">installFlags</span> <span class="hljs-operator">=</span> PackageManager.INSTALL_ALL_WHITELIST_RESTRICTED_PERMISSIONS;<br>        String opt;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">waitTillComplete</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">while</span> ((opt = getNextOption()) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">switch</span> (opt) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;--user&quot;</span>:<br>                    userId = UserHandle.parseUserArg(getNextArgRequired());<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;--ephemeral&quot;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;--instant&quot;</span>:<br>                    installFlags |= PackageManager.INSTALL_INSTANT_APP;<br>                    installFlags &amp;= ~PackageManager.INSTALL_FULL_APP;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;--full&quot;</span>:<br>                    installFlags &amp;= ~PackageManager.INSTALL_INSTANT_APP;<br>                    installFlags |= PackageManager.INSTALL_FULL_APP;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;--wait&quot;</span>:<br>                    waitTillComplete = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;--restrict-permissions&quot;</span>:<br>                    installFlags &amp;= ~PackageManager.INSTALL_ALL_WHITELIST_RESTRICTED_PERMISSIONS;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    pw.println(<span class="hljs-string">&quot;Error: Unknown option: &quot;</span> + opt);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">packageName</span> <span class="hljs-operator">=</span> getNextArg();<br>        <span class="hljs-keyword">if</span> (packageName == <span class="hljs-literal">null</span>) &#123;<br>            pw.println(<span class="hljs-string">&quot;Error: package name not specified&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">translatedUserId</span> <span class="hljs-operator">=</span><br>                translateUserId(userId, UserHandle.USER_NULL, <span class="hljs-string">&quot;runInstallExisting&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">installReason</span> <span class="hljs-operator">=</span> PackageManager.INSTALL_REASON_UNKNOWN;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (waitTillComplete) &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">LocalIntentReceiver</span> <span class="hljs-variable">receiver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalIntentReceiver</span>();<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">IPackageInstaller</span> <span class="hljs-variable">installer</span> <span class="hljs-operator">=</span> mInterface.getPackageInstaller();<br>                pw.println(<span class="hljs-string">&quot;Installing package &quot;</span> + packageName + <span class="hljs-string">&quot; for user: &quot;</span> + translatedUserId);<br>                installer.installExistingPackage(packageName, installFlags, installReason,<br>                        receiver.getIntentSender(), translatedUserId, <span class="hljs-literal">null</span>);<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">Intent</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> receiver.getResult();<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> result.getIntExtra(PackageInstaller.EXTRA_STATUS,<br>                        PackageInstaller.STATUS_FAILURE);<br>                pw.println(<span class="hljs-string">&quot;Received intent for package install&quot;</span>);<br>                <span class="hljs-keyword">return</span> status == PackageInstaller.STATUS_SUCCESS ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>            &#125;<br>         <span class="hljs-comment">//走这里</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> mInterface.installExistingPackageAsUser(packageName, translatedUserId,<br>                    installFlags, installReason, <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">if</span> (res == PackageManager.INSTALL_FAILED_INVALID_URI) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NameNotFoundException</span>(<span class="hljs-string">&quot;Package &quot;</span> + packageName + <span class="hljs-string">&quot; doesn&#x27;t exist&quot;</span>);<br>            &#125;<br>            pw.println(<span class="hljs-string">&quot;Package &quot;</span> + packageName + <span class="hljs-string">&quot; installed for user: &quot;</span> + translatedUserId);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (RemoteException | NameNotFoundException e) &#123;<br>            pw.println(e.toString());<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="系统应用反射调用接口进行卸载和恢复"><a href="#系统应用反射调用接口进行卸载和恢复" class="headerlink" title="系统应用反射调用接口进行卸载和恢复"></a>系统应用反射调用接口进行卸载和恢复</h3><p>虽然命令从安卓5.0才开始支持，但接口应该是从安卓4.2（支持多用户）就开始支持了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//安卓8以前</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deletePackageAsUser</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String packageName,</span><br><span class="hljs-params">                                    <span class="hljs-keyword">final</span> IPackageDeleteObserver observer,</span><br><span class="hljs-params">                                    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> userId, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> flags)</span> <br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">installExistingPackageAsUser</span><span class="hljs-params">(String packageName, <span class="hljs-type">int</span> userId)</span> <br><br><span class="hljs-comment">//安卓8开始</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deletePackageAsUser</span><span class="hljs-params">(String packageName, <span class="hljs-type">int</span> versionCode, IPackageDeleteObserver observer, <span class="hljs-type">int</span> userId, <span class="hljs-type">int</span> flags)</span> <br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">installExistingPackageAsUser</span><span class="hljs-params">(String packageName, <span class="hljs-type">int</span> userId, <span class="hljs-type">int</span> installFlags,<span class="hljs-type">int</span> installReason)</span><br></code></pre></td></tr></table></figure><h4 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h4><p>系统应用可以通过android.content.pm.IPackageManager$Stub反射分别获得deletePackageAsUser和installExistingPackageAsUser，前者可以卸载，后者可以恢复安装。恢复安装之前可以通过packageManager.getApplicationInfo判断系统是否还存在安装包，否则可以跳应用商店进行安装。</p><p>注意：</p><p>1、deletePackageAsUser会清除数据，但不会卸载更新。即如果系统应用更新后，会存在两个apk，一个在system分区，一个在data分区。</p><p>如果要删除data下的更新，可以先调用卸载接口再调用deletePackageAsUser。</p><p>2、&#x2F;data&#x2F;dalvik-cache&#x2F;下面会残留dex文件，可以扫描删除。</p>]]></content>
    
    
    <categories>
      
      <category>AndroidFrameworkFeature</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>PackageMangerService</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓帧率FPS计算原理</title>
    <link href="/article/8fa06fb4/"/>
    <url>/article/8fa06fb4/</url>
    
    <content type="html"><![CDATA[<p>FPS（帧率），即frames per second。</p><p>目前，帧率统计软件使用的信息来源主要有两个: 一个是基于<code>dumpsys SurfaceFlinger --latency layer-name</code>；另一个是基于<code>dumpsys gfxinfo</code>。</p><p>本文不说怎么使用上面两个方法来统计帧率，主要说<code>dumpsys SurfaceFlinger --latency layer-name</code>的数据来源。</p><p>想知道怎么统计帧率的，可以参考下面两篇文章：</p><p><a href="https://testerhome.com/topics/20187">android 端监控方案分享 · TesterHome</a></p><p><a href="https://testerhome.com/topics/21045">介绍下基于 systrace gfx 统计帧率方案的实现过程 · TesterHome</a></p><p>执行<code>dumpsys SurfaceFlinger --latency layer-name</code>命令后，产生的输出来源于<code>FrameTracker::dumpStats(std::string&amp; result)</code>方法。</p><p>frameworks&#x2F;native&#x2F;services&#x2F;surfaceflinger&#x2F;FrameTracker.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FrameTracker::dumpStats</span><span class="hljs-params">(std::string&amp; result)</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-function">Mutex::Autolock <span class="hljs-title">lock</span><span class="hljs-params">(mMutex)</span></span>;<br>    <span class="hljs-built_in">processFencesLocked</span>();<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">size_t</span> o = mOffset;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">1</span>; i &lt; NUM_FRAME_RECORDS; i++) &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-type">size_t</span> index = (o+i) % NUM_FRAME_RECORDS;<br>        base::<span class="hljs-built_in">StringAppendF</span>(&amp;result, <span class="hljs-string">&quot;%&quot;</span> PRId64 <span class="hljs-string">&quot;\t%&quot;</span> PRId64 <span class="hljs-string">&quot;\t%&quot;</span> PRId64 <span class="hljs-string">&quot;\n&quot;</span>,<br>                            mFrameRecords[index].desiredPresentTime,<br>                            mFrameRecords[index].actualPresentTime,<br>                            mFrameRecords[index].frameReadyTime);<br>    &#125;<br>    result.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>先说结论：desiredPresentTime，actualPresentTime，frameReadyTime分别代表：</p><ul><li>desiredPresentTime：queueBuffer 的时间戳</li><li>actualPresentTime：present fence signal 的时间戳</li><li>frameReadyTime：acquire fence signal 的时间戳</li></ul><p><strong>Fence的类型</strong>：</p><p><a href="https://source.android.com/devices/graphics/sync">Synchronization Framework</a> </p><p>The Hardware Composer handles three types of sync fences:</p><ul><li><strong>Acquire fences</strong> are passed along with input buffers to the <code>setLayerBuffer</code> and <code>setClientTarget</code> calls. These represent a pending write into the buffer and must signal before the SurfaceFlinger or the HWC attempts to read from the associated buffer to perform composition.</li><li><strong>Release fences</strong> are retrieved after the call to <code>presentDisplay</code> using the <code>getReleaseFences</code> call. These represent a pending read from the previous buffer on the same layer. A release fence signals when the HWC is no longer using the previous buffer because the current buffer has replaced the previous buffer on the display. Release fences are passed back to the app along with the previous buffers that will be replaced during the current composition. The app must wait until a release fence signals before writing new contents into the buffer that was returned to them.</li><li><strong>Present fences</strong> are returned, one per frame, as part of the call to <code>presentDisplay</code>. Present fences represent when the composition of this frame has completed, or alternately, when the composition result of the prior frame is no longer needed. For physical displays, <code>presentDisplay</code> returns present fences when the current frame appears on the screen. After present fences are returned, it’s safe to write to the SurfaceFlinger target buffer again, if applicable. For virtual displays, present fences are returned when it’s safe to read from the output buffer.</li></ul><p>在 Android 里面，总共有三类 fence —— acquire fence，release fence 和 present fence。其中，acquire fence 和 release fence 隶属于 Layer，present fence 隶属于帧（即 Layers）：</p><p>acquire fence ：App 将 Buffer 通过 <code>queueBuffer()</code> 还给 BufferQueue 的时候，此时该 Buffer 的 GPU 侧其实是还没有完成的，此时会带上一个 fence，这个 fence 就是 <strong>acquire fence</strong>。当 SurfaceFlinger&#x2F; HWC 要读取 Buffer 以进行合成操作的时候，需要等 <strong>acquire fence</strong> 释放之后才行。</p><p>release fence ：当 App 通过 <code>dequeueBuffer()</code> 从 BufferQueue 申请 Buffer，要对 Buffer 进行绘制的时候，需要保证 HWC 已经不再需要这个 Buffer 了，即需要等 release fence signal 才能对 Buffer 进行写操作。</p><p>present fence ：present fence 在 HWC1 的时候称为 retire fence，在 HWC2 中改名为 present fence。当前帧成功显示到屏幕的时候，present fence 就会 signal。</p><h2 id="desiredPresentTime和frameReadyTime来自哪里（基于安卓12源码分析）"><a href="#desiredPresentTime和frameReadyTime来自哪里（基于安卓12源码分析）" class="headerlink" title="desiredPresentTime和frameReadyTime来自哪里（基于安卓12源码分析）"></a>desiredPresentTime和frameReadyTime来自哪里（基于<a href="https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/native/services/surfaceflinger/FrameTracker.h;bpv=1;bpt=0">安卓12</a>源码分析）</h2><p>frameworks&#x2F;native&#x2F;services&#x2F;surfaceflinger&#x2F;FrameTracker.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// setDesiredPresentTime sets the time at which the current frame</span><br><span class="hljs-comment">// should be presented to the user under ideal (i.e. zero latency)</span><br><span class="hljs-comment">// conditions.</span><br><span class="hljs-comment">//理想条件下（即零延迟）呈现给用户的时间点。</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setDesiredPresentTime</span><span class="hljs-params">(<span class="hljs-type">nsecs_t</span> desiredPresentTime)</span></span>;<br><br><span class="hljs-comment">// setFrameReadyTime sets the time at which the current frame became ready</span><br><span class="hljs-comment">// to be presented to the user.  For example, if the frame contents is</span><br><span class="hljs-comment">// being written to memory by some asynchronous hardware, this would be</span><br><span class="hljs-comment">// the time at which those writes completed.</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setFrameReadyTime</span><span class="hljs-params">(<span class="hljs-type">nsecs_t</span> readyTime)</span></span>;<br><br><span class="hljs-comment">// setFrameReadyFence sets the fence that is used to get the time at which</span><br><span class="hljs-comment">// the current frame became ready to be presented to the user.</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setFrameReadyFence</span><span class="hljs-params">(std::shared_ptr&lt;FenceTime&gt;&amp;&amp; readyFence)</span></span>;<br><br><span class="hljs-comment">// setActualPresentTime sets the timestamp at which the current frame became</span><br><span class="hljs-comment">// visible to the user.</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setActualPresentTime</span><span class="hljs-params">(<span class="hljs-type">nsecs_t</span> displayTime)</span></span>;<br><br><span class="hljs-comment">// setActualPresentFence sets the fence that is used to get the time</span><br><span class="hljs-comment">// at which the current frame became visible to the user.</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setActualPresentFence</span><span class="hljs-params">(<span class="hljs-type">const</span> std::shared_ptr&lt;FenceTime&gt;&amp; fence)</span></span>;<br></code></pre></td></tr></table></figure><p>frameworks&#x2F;native&#x2F;services&#x2F;surfaceflinger&#x2F;BufferLayer.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">BufferLayer::onPostComposition</span><span class="hljs-params">(<span class="hljs-type">const</span> DisplayDevice* display,</span></span><br><span class="hljs-params"><span class="hljs-function">                                    <span class="hljs-type">const</span> std::shared_ptr&lt;FenceTime&gt;&amp; glDoneFence,</span></span><br><span class="hljs-params"><span class="hljs-function">                                    <span class="hljs-type">const</span> std::shared_ptr&lt;FenceTime&gt;&amp; presentFence,</span></span><br><span class="hljs-params"><span class="hljs-function">                                    <span class="hljs-type">const</span> CompositorTiming&amp; compositorTiming)</span> </span>&#123;<br>......<br><br>    <span class="hljs-comment">// Update mFrameTracker.</span><br>    <span class="hljs-type">nsecs_t</span> desiredPresentTime = mBufferInfo.mDesiredPresentTime;<br>    <span class="hljs-comment">//关键点1：设置desiredPresentTime</span><br>    mFrameTracker.<span class="hljs-built_in">setDesiredPresentTime</span>(desiredPresentTime);<br><br> ......<br>std::shared_ptr&lt;FenceTime&gt; frameReadyFence = mBufferInfo.mFenceTime;<br>    <span class="hljs-keyword">if</span> (frameReadyFence-&gt;<span class="hljs-built_in">isValid</span>()) &#123;<br>        <span class="hljs-comment">//关键点2：设置frameReadyFence</span><br>        mFrameTracker.<span class="hljs-built_in">setFrameReadyFence</span>(std::<span class="hljs-built_in">move</span>(frameReadyFence));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//纯软件绘制才走这里，frameReadyTime和desiredPresentTime就一样了</span><br>        <span class="hljs-comment">// There was no fence for this frame, so assume that it was ready</span><br>        <span class="hljs-comment">// to be presented at the desired present time.</span><br>        mFrameTracker.<span class="hljs-built_in">setFrameReadyTime</span>(desiredPresentTime);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (display) &#123;<br>        <span class="hljs-type">const</span> Fps refreshRate = display-&gt;<span class="hljs-built_in">refreshRateConfigs</span>().<span class="hljs-built_in">getCurrentRefreshRate</span>().<span class="hljs-built_in">getFps</span>();<br>        <span class="hljs-type">const</span> std::optional&lt;Fps&gt; renderRate =<br>                mFlinger-&gt;mScheduler-&gt;<span class="hljs-built_in">getFrameRateOverride</span>(<span class="hljs-built_in">getOwnerUid</span>());<br>        <span class="hljs-keyword">if</span> (presentFence-&gt;<span class="hljs-built_in">isValid</span>()) &#123;<br>            <span class="hljs-comment">//关键点3,设置actualPresentFence</span><br>            mFlinger-&gt;mTimeStats-&gt;<span class="hljs-built_in">setPresentFence</span>(layerId, mCurrentFrameNumber, presentFence,<br>                                                  refreshRate, renderRate,<br>                                                  <span class="hljs-built_in">frameRateToSetFrameRateVotePayload</span>(<br>                                                          mDrawingState.frameRate),<br>                                                  <span class="hljs-built_in">getGameMode</span>());<br>            mFlinger-&gt;mFrameTracer-&gt;<span class="hljs-built_in">traceFence</span>(layerId, <span class="hljs-built_in">getCurrentBufferId</span>(), mCurrentFrameNumber,<br>                                               presentFence,<br>                                               FrameTracer::FrameEvent::PRESENT_FENCE);<br>            mFrameTracker.<span class="hljs-built_in">setActualPresentFence</span>(std::<span class="hljs-built_in">shared_ptr</span>&lt;FenceTime&gt;(presentFence));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> displayId = PhysicalDisplayId::<span class="hljs-built_in">tryCast</span>(display-&gt;<span class="hljs-built_in">getId</span>());<br>                   displayId &amp;&amp; mFlinger-&gt;<span class="hljs-built_in">getHwComposer</span>().<span class="hljs-built_in">isConnected</span>(*displayId)) &#123;<br>            <span class="hljs-comment">// The HWC doesn&#x27;t support present fences, so use the refresh</span><br>            <span class="hljs-comment">// timestamp instead.</span><br>            <span class="hljs-type">const</span> <span class="hljs-type">nsecs_t</span> actualPresentTime = display-&gt;<span class="hljs-built_in">getRefreshTimestamp</span>();<br>            mFlinger-&gt;mTimeStats-&gt;<span class="hljs-built_in">setPresentTime</span>(layerId, mCurrentFrameNumber, actualPresentTime,<br>                                                 refreshRate, renderRate,<br>                                                 <span class="hljs-built_in">frameRateToSetFrameRateVotePayload</span>(<br>                                                         mDrawingState.frameRate),<br>                                                 <span class="hljs-built_in">getGameMode</span>());<br>            mFlinger-&gt;mFrameTracer-&gt;<span class="hljs-built_in">traceTimestamp</span>(layerId, <span class="hljs-built_in">getCurrentBufferId</span>(),<br>                                                   mCurrentFrameNumber, actualPresentTime,<br>                                                   FrameTracer::FrameEvent::PRESENT_FENCE);<br>            <span class="hljs-comment">//不支持fence，才设置成屏幕刷新周期时间戳</span><br>            mFrameTracker.<span class="hljs-built_in">setActualPresentTime</span>(actualPresentTime);<br>        &#125;<br>    &#125;<br>    mFrameTracker.<span class="hljs-built_in">advanceFrame</span>();<br>    mBufferInfo.mFrameLatencyNeeded = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面代码来看，desiredPresentTime和frameReadyFence与mBufferInfo有关，接下来看一下它是在哪里赋值的。</p><p>frameworks&#x2F;native&#x2F;services&#x2F;surfaceflinger&#x2F;BufferQueueLayer.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BufferQueueLayer::gatherBufferInfo</span><span class="hljs-params">()</span> </span>&#123;<br>    BufferLayer::<span class="hljs-built_in">gatherBufferInfo</span>();<br><br>    <span class="hljs-comment">//与desiredPresentTime有关</span><br>    mBufferInfo.mDesiredPresentTime = mConsumer-&gt;<span class="hljs-built_in">getTimestamp</span>();<br>    <span class="hljs-comment">//与frameReadyFence有关</span><br>    mBufferInfo.mFenceTime = mConsumer-&gt;<span class="hljs-built_in">getCurrentFenceTime</span>();<br>    mBufferInfo.mFence = mConsumer-&gt;<span class="hljs-built_in">getCurrentFence</span>();<br>......<br>&#125;<br></code></pre></td></tr></table></figure><p>继续往下追踪，看mConsumer的<a href="https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/native/services/surfaceflinger/BufferLayerConsumer.h;drc=df83280563736a5778100a42f04bc2ca5523442e;bpv=1;bpt=1;l=287">mCurrentTimestamp</a>和<a href="https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/native/services/surfaceflinger/BufferLayerConsumer.h;drc=df83280563736a5778100a42f04bc2ca5523442e;bpv=1;bpt=1;l=278">mCurrentFenceTime</a>是在哪里赋值的。</p><p>frameworks&#x2F;native&#x2F;services&#x2F;surfaceflinger&#x2F;BufferLayerConsumer.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//获取mCurrentTimestamp</span><br><span class="hljs-function"><span class="hljs-type">nsecs_t</span> <span class="hljs-title">BufferLayerConsumer::getTimestamp</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">BLC_LOGV</span>(<span class="hljs-string">&quot;getTimestamp&quot;</span>);<br>    <span class="hljs-function">Mutex::Autolock <span class="hljs-title">lock</span><span class="hljs-params">(mMutex)</span></span>;<br>    <span class="hljs-keyword">return</span> mCurrentTimestamp;<br>&#125;<br><br><span class="hljs-comment">//获取mCurrentFenceTime</span><br><span class="hljs-function">std::shared_ptr&lt;FenceTime&gt; <span class="hljs-title">BufferLayerConsumer::getCurrentFenceTime</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-function">Mutex::Autolock <span class="hljs-title">lock</span><span class="hljs-params">(mMutex)</span></span>;<br>    <span class="hljs-keyword">return</span> mCurrentFenceTime;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">status_t</span> <span class="hljs-title">BufferLayerConsumer::updateAndReleaseLocked</span><span class="hljs-params">(<span class="hljs-type">const</span> BufferItem&amp; item,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                     PendingRelease* pendingRelease)</span> </span>&#123;<br>    <span class="hljs-type">status_t</span> err = NO_ERROR;<br><br>    <span class="hljs-type">int</span> slot = item.mSlot;<br><br>    <span class="hljs-built_in">BLC_LOGV</span>(<span class="hljs-string">&quot;updateAndRelease: (slot=%d buf=%p) -&gt; (slot=%d buf=%p)&quot;</span>, mCurrentTexture,<br>             (mCurrentTextureBuffer != <span class="hljs-literal">nullptr</span> &amp;&amp; mCurrentTextureBuffer-&gt;<span class="hljs-built_in">getBuffer</span>() != <span class="hljs-literal">nullptr</span>)<br>                     ? mCurrentTextureBuffer-&gt;<span class="hljs-built_in">getBuffer</span>()-&gt;handle<br>                     : <span class="hljs-number">0</span>,<br>             slot, mSlots[slot].mGraphicBuffer-&gt;handle);<br><br>    <span class="hljs-comment">// Hang onto the pointer so that it isn&#x27;t freed in the call to</span><br>    <span class="hljs-comment">// releaseBufferLocked() if we&#x27;re in shared buffer mode and both buffers are</span><br>    <span class="hljs-comment">// the same.</span><br><br>    std::shared_ptr&lt;renderengine::ExternalTexture&gt; nextTextureBuffer;<br>    &#123;<br>        <span class="hljs-function">std::lock_guard&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(mImagesMutex)</span></span>;<br>        nextTextureBuffer = mImages[slot];<br>    &#125;<br><br>    <span class="hljs-comment">// release old buffer</span><br>    <span class="hljs-keyword">if</span> (mCurrentTexture != BufferQueue::INVALID_BUFFER_SLOT) &#123;<br>        <span class="hljs-keyword">if</span> (pendingRelease == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-type">status_t</span> status =<br>                    <span class="hljs-built_in">releaseBufferLocked</span>(mCurrentTexture, mCurrentTextureBuffer-&gt;<span class="hljs-built_in">getBuffer</span>());<br>            <span class="hljs-keyword">if</span> (status &lt; NO_ERROR) &#123;<br>                <span class="hljs-built_in">BLC_LOGE</span>(<span class="hljs-string">&quot;updateAndRelease: failed to release buffer: %s (%d)&quot;</span>, <span class="hljs-built_in">strerror</span>(-status),<br>                         status);<br>                err = status;<br>                <span class="hljs-comment">// keep going, with error raised [?]</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            pendingRelease-&gt;currentTexture = mCurrentTexture;<br>            pendingRelease-&gt;graphicBuffer = mCurrentTextureBuffer-&gt;<span class="hljs-built_in">getBuffer</span>();<br>            pendingRelease-&gt;isPending = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Update the BufferLayerConsumer state.</span><br>    mCurrentTexture = slot;<br>    mCurrentTextureBuffer = nextTextureBuffer;<br>    mCurrentCrop = item.mCrop;<br>    mCurrentTransform = item.mTransform;<br>    mCurrentScalingMode = item.mScalingMode;<br>    <span class="hljs-comment">//mCurrentTimestamp在这里赋值</span><br>    mCurrentTimestamp = item.mTimestamp;<br>    mCurrentDataSpace = <span class="hljs-built_in">static_cast</span>&lt;ui::Dataspace&gt;(item.mDataSpace);<br>    mCurrentHdrMetadata = item.mHdrMetadata;<br>    mCurrentFence = item.mFence;<br>    <span class="hljs-comment">//mCurrentFenceTime在这里赋值</span><br>    mCurrentFenceTime = item.mFenceTime;<br>    mCurrentFrameNumber = item.mFrameNumber;<br>    mCurrentTransformToDisplayInverse = item.mTransformToDisplayInverse;<br>    mCurrentSurfaceDamage = item.mSurfaceDamage;<br>    mCurrentApi = item.mApi;<br><br>    <span class="hljs-built_in">computeCurrentTransformMatrixLocked</span>();<br><br>    <span class="hljs-keyword">return</span> err;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">status_t</span> <span class="hljs-title">BufferLayerConsumer::updateTexImage</span><span class="hljs-params">(BufferRejecter* rejecter, <span class="hljs-type">nsecs_t</span> expectedPresentTime,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">bool</span>* autoRefresh, <span class="hljs-type">bool</span>* queuedBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">uint64_t</span> maxFrameNumber)</span> </span>&#123;<br>    <span class="hljs-built_in">ATRACE_CALL</span>();<br>    <span class="hljs-built_in">BLC_LOGV</span>(<span class="hljs-string">&quot;updateTexImage&quot;</span>);<br>    <span class="hljs-function">Mutex::Autolock <span class="hljs-title">lock</span><span class="hljs-params">(mMutex)</span></span>;<br><br>    <span class="hljs-keyword">if</span> (mAbandoned) &#123;<br>        <span class="hljs-built_in">BLC_LOGE</span>(<span class="hljs-string">&quot;updateTexImage: BufferLayerConsumer is abandoned!&quot;</span>);<br>        <span class="hljs-keyword">return</span> NO_INIT;<br>    &#125;<br><br>    BufferItem item;<br><br>    <span class="hljs-comment">// Acquire the next buffer.</span><br>    <span class="hljs-comment">// In asynchronous mode the list is guaranteed to be one buffer</span><br>    <span class="hljs-comment">// deep, while in synchronous mode we use the oldest buffer.</span><br>    <span class="hljs-type">status_t</span> err = <span class="hljs-built_in">acquireBufferLocked</span>(&amp;item, expectedPresentTime, maxFrameNumber);<br>    <span class="hljs-keyword">if</span> (err != NO_ERROR) &#123;<br>        <span class="hljs-keyword">if</span> (err == BufferQueue::NO_BUFFER_AVAILABLE) &#123;<br>            err = NO_ERROR;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (err == BufferQueue::PRESENT_LATER) &#123;<br>            <span class="hljs-comment">// return the error, without logging</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">BLC_LOGE</span>(<span class="hljs-string">&quot;updateTexImage: acquire failed: %s (%d)&quot;</span>, <span class="hljs-built_in">strerror</span>(-err), err);<br>        &#125;<br>        <span class="hljs-keyword">return</span> err;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (autoRefresh) &#123;<br>        *autoRefresh = item.mAutoRefresh;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (queuedBuffer) &#123;<br>        *queuedBuffer = item.mQueuedBuffer;<br>    &#125;<br><br>    <span class="hljs-comment">// We call the rejecter here, in case the caller has a reason to</span><br>    <span class="hljs-comment">// not accept this buffer.  This is used by SurfaceFlinger to</span><br>    <span class="hljs-comment">// reject buffers which have the wrong size</span><br>    <span class="hljs-type">int</span> slot = item.mSlot;<br>    <span class="hljs-keyword">if</span> (rejecter &amp;&amp; rejecter-&gt;<span class="hljs-built_in">reject</span>(mSlots[slot].mGraphicBuffer, item)) &#123;<br>        <span class="hljs-built_in">releaseBufferLocked</span>(slot, mSlots[slot].mGraphicBuffer);<br>        <span class="hljs-keyword">return</span> BUFFER_REJECTED;<br>    &#125;<br><br>    <span class="hljs-comment">// Release the previous buffer.</span><br>    <span class="hljs-comment">//这里调用</span><br>    err = <span class="hljs-built_in">updateAndReleaseLocked</span>(item, &amp;mPendingRelease);<br>    <span class="hljs-keyword">if</span> (err != NO_ERROR) &#123;<br>        <span class="hljs-keyword">return</span> err;<br>    &#125;<br>    <span class="hljs-keyword">return</span> err;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面代码来看，mCurrentTimestamp和mCurrentFenceTime是updateAndReleaseLocked里面赋值的，而其又被updateTexImage调用，这个函数在systrace可视化页面很常见了，接下来分析与他们相关的mTimestamp和mFenceTime。</p><p>frameworks&#x2F;native&#x2F;libs&#x2F;gui&#x2F;include&#x2F;gui&#x2F;BufferItem.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-comment">// mTimestamp is the current timestamp for this buffer slot. This gets</span><br>    <span class="hljs-comment">// to set by queueBuffer each time this slot is queued. This value</span><br>    <span class="hljs-comment">// is guaranteed to be monotonically increasing for each newly</span><br>    <span class="hljs-comment">// acquired buffer.</span><br><span class="hljs-comment">//从这里的注释已经可以知道它是queueBuffer时的时间戳</span><br>    <span class="hljs-type">int64_t</span> mTimestamp;<br><br> <span class="hljs-comment">// The std::shared_ptr&lt;FenceTime&gt; wrapper around mFence.</span><br>    std::shared_ptr&lt;FenceTime&gt; mFenceTime&#123;FenceTime::NO_FENCE&#125;;<br></code></pre></td></tr></table></figure><p>frameworks&#x2F;native&#x2F;libs&#x2F;gui&#x2F;BufferQueueProducer.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-function"><span class="hljs-type">status_t</span> <span class="hljs-title">BufferQueueProducer::queueBuffer</span><span class="hljs-params">(<span class="hljs-type">int</span> slot,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-type">const</span> QueueBufferInput &amp;input, QueueBufferOutput *output)</span> </span>&#123;<br>    <span class="hljs-built_in">ATRACE_CALL</span>();<br>    <span class="hljs-built_in">ATRACE_BUFFER_INDEX</span>(slot);<br><br>    <span class="hljs-type">int64_t</span> requestedPresentTimestamp;<br>    <span class="hljs-type">bool</span> isAutoTimestamp;<br>    android_dataspace dataSpace;<br>    <span class="hljs-function">Rect <span class="hljs-title">crop</span><span class="hljs-params">(Rect::EMPTY_RECT)</span></span>;<br>    <span class="hljs-type">int</span> scalingMode;<br>    <span class="hljs-type">uint32_t</span> transform;<br>    <span class="hljs-type">uint32_t</span> stickyTransform;<br>    sp&lt;Fence&gt; acquireFence;<br>    <span class="hljs-type">bool</span> getFrameTimestamps = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//关键点</span><br>    input.<span class="hljs-built_in">deflate</span>(&amp;requestedPresentTimestamp, &amp;isAutoTimestamp, &amp;dataSpace,<br>            &amp;crop, &amp;scalingMode, &amp;transform, &amp;acquireFence, &amp;stickyTransform,<br>            &amp;getFrameTimestamps);<br>    <span class="hljs-type">const</span> Region&amp; surfaceDamage = input.<span class="hljs-built_in">getSurfaceDamage</span>();<br>    <span class="hljs-type">const</span> HdrMetadata&amp; hdrMetadata = input.<span class="hljs-built_in">getHdrMetadata</span>();<br><br>    <span class="hljs-keyword">if</span> (acquireFence == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-built_in">BQ_LOGE</span>(<span class="hljs-string">&quot;queueBuffer: fence is NULL&quot;</span>);<br>        <span class="hljs-keyword">return</span> BAD_VALUE;<br>    &#125;<br>    <span class="hljs-comment">//关键点</span><br>    <span class="hljs-keyword">auto</span> acquireFenceTime = std::<span class="hljs-built_in">make_shared</span>&lt;FenceTime&gt;(acquireFence);<br><br>    ......<br><br>    sp&lt;IConsumerListener&gt; frameAvailableListener;<br>    sp&lt;IConsumerListener&gt; frameReplacedListener;<br>    <span class="hljs-type">int</span> callbackTicket = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint64_t</span> currentFrameNumber = <span class="hljs-number">0</span>;<br>    BufferItem item;<br>    &#123; <span class="hljs-comment">// Autolock scope</span><br>        ......<br>        <span class="hljs-comment">//这里赋值</span><br>        item.mTimestamp = requestedPresentTimestamp;<br>        item.mIsAutoTimestamp = isAutoTimestamp;<br>        item.mDataSpace = dataSpace;<br>        item.mHdrMetadata = hdrMetadata;<br>        item.mFrameNumber = currentFrameNumber;<br>        item.mSlot = slot;<br>        item.mFence = acquireFence;<br>         <span class="hljs-comment">//这里赋值</span><br>        item.mFenceTime = acquireFenceTime;<br>        ......<br><br>        <span class="hljs-built_in">ATRACE_INT</span>(mCore-&gt;mConsumerName.<span class="hljs-built_in">string</span>(),<br>                <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int32_t</span>&gt;(mCore-&gt;mQueue.<span class="hljs-built_in">size</span>()));<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NO_BINDER</span><br>        mCore-&gt;mOccupancyTracker.<span class="hljs-built_in">registerOccupancyChange</span>(mCore-&gt;mQueue.<span class="hljs-built_in">size</span>());<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        <span class="hljs-comment">// Take a ticket for the callback functions</span><br>        callbackTicket = mNextCallbackTicket++;<br><br>        <span class="hljs-built_in">VALIDATE_CONSISTENCY</span>();<br>    &#125; <span class="hljs-comment">// Autolock scope</span><br>    ......<br>    <span class="hljs-keyword">return</span> NO_ERROR;<br>&#125;<br></code></pre></td></tr></table></figure><p>frameworks&#x2F;native&#x2F;libs&#x2F;gui&#x2F;include&#x2F;gui&#x2F;IGraphicBufferProducer.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// timestamp - a monotonically increasing value in nanoseconds</span><br>        <span class="hljs-comment">// isAutoTimestamp - if the timestamp was synthesized at queue time</span><br>        <span class="hljs-comment">// dataSpace - description of the contents, interpretation depends on format</span><br>        <span class="hljs-comment">// crop - a crop rectangle that&#x27;s used as a hint to the consumer</span><br>        <span class="hljs-comment">// scalingMode - a set of flags from NATIVE_WINDOW_SCALING_* in &lt;window.h&gt;</span><br>        <span class="hljs-comment">// transform - a set of flags from NATIVE_WINDOW_TRANSFORM_* in &lt;window.h&gt;</span><br><br>        <span class="hljs-comment">// acquireFenceTime相关</span><br>        <span class="hljs-comment">// fence - a fence that the consumer must wait on before reading the buffer,</span><br>        <span class="hljs-comment">//         set this to Fence::NO_FENCE if the buffer is ready immediately</span><br><br>        <span class="hljs-comment">// sticky - the sticky transform set in Surface (only used by the LEGACY</span><br>        <span class="hljs-comment">//          camera mode).</span><br>        <span class="hljs-comment">// getFrameTimestamps - whether or not the latest frame timestamps</span><br>        <span class="hljs-comment">//                      should be retrieved from the consumer.</span><br>        <span class="hljs-comment">// slot - the slot index to queue. This is used only by queueBuffers().</span><br>        <span class="hljs-comment">//        queueBuffer() ignores this value and uses the argument `slot`</span><br>        <span class="hljs-comment">//        instead.</span><br>        <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-title">QueueBufferInput</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> _timestamp, <span class="hljs-type">bool</span> _isAutoTimestamp,</span></span><br><span class="hljs-params"><span class="hljs-function">                android_dataspace _dataSpace, <span class="hljs-type">const</span> Rect&amp; _crop,</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-type">int</span> _scalingMode, <span class="hljs-type">uint32_t</span> _transform, <span class="hljs-type">const</span> sp&lt;Fence&gt;&amp; _fence,</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-type">uint32_t</span> _sticky = <span class="hljs-number">0</span>, <span class="hljs-type">bool</span> _getFrameTimestamps = <span class="hljs-literal">false</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-type">int</span> _slot = <span class="hljs-number">-1</span>)</span></span><br><span class="hljs-function">                : timestamp(_timestamp), isAutoTimestamp(_isAutoTimestamp),</span><br><span class="hljs-function">                  dataSpace(_dataSpace), crop(_crop), scalingMode(_scalingMode),</span><br><span class="hljs-function">                  transform(_transform), stickyTransform(_sticky),</span><br><span class="hljs-function">                  fence(_fence), surfaceDamage(),</span><br><span class="hljs-function">                  getFrameTimestamps(_getFrameTimestamps), slot(_slot) &#123;</span> &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">deflate</span><span class="hljs-params">(<span class="hljs-type">int64_t</span>* outTimestamp, <span class="hljs-type">bool</span>* outIsAutoTimestamp,</span></span><br><span class="hljs-params"><span class="hljs-function">                android_dataspace* outDataSpace,</span></span><br><span class="hljs-params"><span class="hljs-function">                Rect* outCrop, <span class="hljs-type">int</span>* outScalingMode,</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-type">uint32_t</span>* outTransform, sp&lt;Fence&gt;* outFence,</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-type">uint32_t</span>* outStickyTransform = <span class="hljs-literal">nullptr</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-type">bool</span>* outGetFrameTimestamps = <span class="hljs-literal">nullptr</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-type">int</span>* outSlot = <span class="hljs-literal">nullptr</span>)</span> <span class="hljs-type">const</span> </span>&#123;<br>            <span class="hljs-comment">//mTimestamp相关</span><br>            *outTimestamp = timestamp;<br>            *outIsAutoTimestamp = <span class="hljs-built_in">bool</span>(isAutoTimestamp);<br>            *outDataSpace = dataSpace;<br>            *outCrop = crop;<br>            *outScalingMode = scalingMode;<br>            *outTransform = transform;<br>            <span class="hljs-comment">//acquireFenceTime相关</span><br>            *outFence = fence;<br>            <span class="hljs-keyword">if</span> (outStickyTransform != <span class="hljs-literal">nullptr</span>) &#123;<br>                *outStickyTransform = stickyTransform;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (outGetFrameTimestamps) &#123;<br>                *outGetFrameTimestamps = getFrameTimestamps;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (outSlot) &#123;<br>                *outSlot = slot;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>frameworks&#x2F;native&#x2F;libs&#x2F;gui&#x2F;Surface.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Surface::getQueueBufferInputLocked</span><span class="hljs-params">(<span class="hljs-type">android_native_buffer_t</span>* buffer, <span class="hljs-type">int</span> fenceFd,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-type">nsecs_t</span> timestamp, IGraphicBufferProducer::QueueBufferInput* out)</span> </span>&#123;<br>    <span class="hljs-type">bool</span> isAutoTimestamp = <span class="hljs-literal">false</span>;<br>     <span class="hljs-comment">//desiredPresentTime的真正来源</span><br>    <span class="hljs-keyword">if</span> (timestamp == NATIVE_WINDOW_TIMESTAMP_AUTO) &#123;<br>        timestamp = <span class="hljs-built_in">systemTime</span>(SYSTEM_TIME_MONOTONIC);<br>        isAutoTimestamp = <span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">ALOGV</span>(<span class="hljs-string">&quot;Surface::queueBuffer making up timestamp: %.2f ms&quot;</span>,<br>            timestamp / <span class="hljs-number">1000000.0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// Make sure the crop rectangle is entirely inside the buffer.</span><br>    <span class="hljs-function">Rect <span class="hljs-title">crop</span><span class="hljs-params">(Rect::EMPTY_RECT)</span></span>;<br>    mCrop.<span class="hljs-built_in">intersect</span>(<span class="hljs-built_in">Rect</span>(buffer-&gt;width, buffer-&gt;height), &amp;crop);<br>    <span class="hljs-comment">//frameReadyFence真正来源</span><br>    <span class="hljs-function">sp&lt;Fence&gt; <span class="hljs-title">fence</span><span class="hljs-params">(fenceFd &gt;= <span class="hljs-number">0</span> ? <span class="hljs-keyword">new</span> Fence(fenceFd) : Fence::NO_FENCE)</span></span>;<br>    <span class="hljs-comment">//实例化QueueBufferInput，并传递timestamp和fence</span><br>    <span class="hljs-function">IGraphicBufferProducer::QueueBufferInput <span class="hljs-title">input</span><span class="hljs-params">(timestamp, isAutoTimestamp,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-keyword">static_cast</span>&lt;android_dataspace&gt;(mDataSpace), crop, mScalingMode,</span></span><br><span class="hljs-params"><span class="hljs-function">            mTransform ^ mStickyTransform, fence, mStickyTransform,</span></span><br><span class="hljs-params"><span class="hljs-function">            mEnableFrameTimestamps)</span></span>;<br><br>    <span class="hljs-comment">// we should send HDR metadata as needed if this becomes a bottleneck</span><br>    input.<span class="hljs-built_in">setHdrMetadata</span>(mHdrMetadata);<br><br>    ......<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Surface::queueBuffer</span><span class="hljs-params">(<span class="hljs-type">android_native_buffer_t</span>* buffer, <span class="hljs-type">int</span> fenceFd)</span> </span>&#123;<br>    <span class="hljs-built_in">ATRACE_CALL</span>();<br>    <span class="hljs-built_in">ALOGV</span>(<span class="hljs-string">&quot;Surface::queueBuffer&quot;</span>);<br>    ......<br><br>    IGraphicBufferProducer::QueueBufferOutput output;<br>    IGraphicBufferProducer::QueueBufferInput input;<br>    <span class="hljs-comment">//调用</span><br>    <span class="hljs-built_in">getQueueBufferInputLocked</span>(buffer, fenceFd, mTimestamp, &amp;input);<br>    sp&lt;Fence&gt; fence = input.fence;<br><br>    <span class="hljs-type">nsecs_t</span> now = <span class="hljs-built_in">systemTime</span>();<br>    <span class="hljs-comment">//调用</span><br>    <span class="hljs-type">status_t</span> err = mGraphicBufferProducer-&gt;<span class="hljs-built_in">queueBuffer</span>(i, input, &amp;output);<br>    mLastQueueDuration = <span class="hljs-built_in">systemTime</span>() - now;<br>    <span class="hljs-keyword">if</span> (err != OK)  &#123;<br>        <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;queueBuffer: error queuing buffer, %d&quot;</span>, err);<br>    &#125;<br><br>    <span class="hljs-built_in">onBufferQueuedLocked</span>(i, fence, output);<br>    <span class="hljs-keyword">return</span> err;<br>&#125;<br></code></pre></td></tr></table></figure><p>getQueueBufferInputLocked最终被 <a href="https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/native/libs/gui/include/gui/Surface.h;drc=3816c49c18dcf85b5939fe1a19df9e90df7f7f77;bpv=1;bpt=1;l=68">Surface</a>::<a href="https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/native/libs/gui/Surface.cpp;drc=3816c49c18dcf85b5939fe1a19df9e90df7f7f77;bpv=1;bpt=1;l=1147?gsn=queueBuffer&gs=kythe://android.googlesource.com/platform/superproject?lang=c++?path=frameworks/native/libs/gui/include/gui/Surface.h%238ix9Mzse72s8AmkfJJL8ZC5PpQSlym212XP1ntX0qEA&gs=kythe://android.googlesource.com/platform/superproject?lang=c++?path=frameworks/native/libs/gui/Surface.cpp%236jMutzq7HDv_qx9HGBbz2a0yzcDbFeo_I0RFUPJcBuQ">queueBuffer</a>调用。</p><p>至此，已经分析完 desiredPresentTime 和 frameReadyTime 的最终来源了，即：</p><ul><li>desiredPresentTime：queueBuffer 的时间戳</li><li>frameReadyTime：acquire fence signal 的时间戳</li></ul><h2 id="actualPresentTime指代的是什么"><a href="#actualPresentTime指代的是什么" class="headerlink" title="actualPresentTime指代的是什么"></a>actualPresentTime指代的是什么</h2><p>我就不分析这个了，流程都是差不多的，详情参考：</p><p><a href="https://juejin.cn/post/6844904182898524168">或许是迄今为止第一篇讲解 fps 计算原理的文章吧 - 掘金</a></p><p>其作者提到，计算一个 App 的 fps 的原理就是：</p><p>统计在一秒内该 App 往屏幕刷了多少帧，而在 Android 的世界里，每一帧显示到屏幕的标志是：present fence signal 了，因此计算 App 的 fps 就可以转换为：<strong>一秒内 App 的 Layer 有多少个有效 present fence signal 了（这里有效 present fence 是指，在本次 VSYNC 中该 Layer 有更新的 present fence）</strong></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zhuanlan.zhihu.com/p/435304317">安卓帧率计算方案和背后原理剖析</a></p><p><a href="https://juejin.cn/post/6844904182898524168">或许是迄今为止第一篇讲解 fps 计算原理的文章吧 - 掘金</a></p>]]></content>
    
    
    <categories>
      
      <category>Android Display System</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>安卓显示系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓TV或者盒子重启后应用使用时间丢失的问题</title>
    <link href="/article/5e685b29/"/>
    <url>/article/5e685b29/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓TV或者盒子重启后应用使用时间丢失的问题"><a href="#安卓TV或者盒子重启后应用使用时间丢失的问题" class="headerlink" title="安卓TV或者盒子重启后应用使用时间丢失的问题"></a>安卓TV或者盒子重启后应用使用时间丢失的问题</h1><h2 id="Loss-of-app-usage-time-after-android-TV-or-box-reboots"><a href="#Loss-of-app-usage-time-after-android-TV-or-box-reboots" class="headerlink" title="Loss of app usage time after android TV or box reboots"></a>Loss of app usage time after android TV or box reboots</h2><p>在搜索引擎我只找到了一篇与这个问题相关的链接，大家可以看一下，他的解决办法是APP自己保存使用数据。</p><p><a href="https://stackoverflow.com/questions/53992982/androidtv-usagestatsmanager-not-returning-details-for-apps-results-after-reboot">android - AndroidTV: UsageStatsManager not returning details for apps results after Reboot - Stack Overflow</a></p><blockquote><p>As we had experienced that after a device power cycle , Android Tv box won’t return the usage stats of installed application. Here is a workaround I followed .</p><ul><li>We fetch the details of installed application then store only last used time in a Hash map.</li><li>And we used a custom comparator to compare via last time used and sort our Installed application details list (ResolveInfo) , for recently used app list.</li><li>Now to overcome the situation of device power cycle scenario, We are maintaining a Hash map locally in app . Where we will store the installed App’s Last used time as Long millis (epoch) . lastTimeUsedMap &#x3D; new HashMap(); And we update the map every time we get a new data from UsageStatsManager.</li><li>We simplify the map object and store as string in shared preference.</li><li>And after reboot first we will find in usage stats if installed package is having a time stamp or not . If not we will get the time from stored MAP .</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SortByRecentlyUsed</span><span class="hljs-params">(<span class="hljs-keyword">final</span> List&lt;ResolveInfo&gt; info, <span class="hljs-keyword">final</span> Context context)</span>&#123;<br><br>    <span class="hljs-comment">/*load LastTimeUsedMap from pref*/</span><br>    lastTimeUsedMap = loadLastTimeUsedMap(context);<br><br>    <span class="hljs-type">UsageStatsManager</span> <span class="hljs-variable">usm</span> <span class="hljs-operator">=</span> getUsageStatsManager(context);<br>    <span class="hljs-type">Calendar</span> <span class="hljs-variable">calendar</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> calendar.getTimeInMillis();<br>    calendar.add(Calendar.MONTH, -<span class="hljs-number">1</span>);<br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> calendar.getTimeInMillis();<br><br>    <span class="hljs-keyword">final</span> List&lt;UsageStats&gt; usageStatsList = usm.queryUsageStats(UsageStatsManager.INTERVAL_BEST, startTime, endTime);<br><br>    <span class="hljs-comment">/*Update AppRecentTimeUsedMap with latest data from UsageStatsManager*/</span><br>    updateAppRecentTimeUsedMap(usageStatsList,info);<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecentUseComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;ResolveInfo&gt; &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(ResolveInfo lhs, ResolveInfo rhs)</span> &#123;<br>            String lhsPackageName=lhs.activityInfo.applicationInfo.packageName;<br>            String rhsPackageName=rhs.activityInfo.applicationInfo.packageName;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">lhsUsedTime</span> <span class="hljs-operator">=</span> getLastUsedTime(lhsPackageName);<br>            <span class="hljs-type">long</span> <span class="hljs-variable">rhsUsedTime</span> <span class="hljs-operator">=</span> getLastUsedTime(rhsPackageName);<br>            <span class="hljs-keyword">return</span> (lhsUsedTime &gt; rhsUsedTime) ? -<span class="hljs-number">1</span> : (lhsUsedTime == rhsUsedTime) ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getLastUsedTime</span><span class="hljs-params">(String packageDetails)</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">appRecentUsedtime</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (appRecentTimeUsedMap.containsKey(packageDetails)) &#123;<br>                appRecentUsedtime = appRecentTimeUsedMap.get(packageDetails);<br>                &#125;<br>            <span class="hljs-keyword">return</span> appRecentUsedtime;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">RecentUseComparator</span> <span class="hljs-variable">mRecentComp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecentUseComparator</span>();<br>    Collections.sort(info, mRecentComp);<br>    <span class="hljs-comment">/*Save the updated  LastTimeUsedMap in pref*/</span><br>    saveLastTimeUsedMap(lastTimeUsedMap, context);<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateAppRecentTimeUsedMap</span><span class="hljs-params">(List&lt;UsageStats&gt; usageStatsList,List&lt;ResolveInfo&gt; info)</span>&#123;<br><br>    String packageName=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (usageStatsList != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (ResolveInfo Rinfo : info) &#123;<br>            packageName = Rinfo.activityInfo.applicationInfo.packageName;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">added</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (UsageStats usageStats : usageStatsList) &#123;<br>                <span class="hljs-keyword">if</span> (packageName.equalsIgnoreCase(usageStats.getPackageName())) &#123;<br>                    appRecentTimeUsedMap.put(usageStats.getPackageName(), usageStats.getLastTimeUsed());<br>                    updateLastTimeUsedMap(usageStats.getPackageName(), usageStats.getLastTimeUsed());<br>                    added=<span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!added &amp;&amp; lastTimeUsedMap.containsKey(packageName)) &#123;<br>                appRecentTimeUsedMap.put(packageName, lastTimeUsedMap.get(packageName));<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateLastTimeUsedMap</span><span class="hljs-params">(String packageName,Long timeStamp)</span>&#123;<br>    lastTimeUsedMap.put(packageName, timeStamp);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Return Map containing Package name and recent used time from preference</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> Map&lt;String,Long&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Map&lt;String,Long&gt; <span class="hljs-title function_">loadLastTimeUsedMap</span><span class="hljs-params">(Context context)</span>&#123;<br>    Map&lt;String,Long&gt; outputMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Long&gt;();<br>    <span class="hljs-type">SharedPreferences</span> <span class="hljs-variable">pSharedPref</span> <span class="hljs-operator">=</span> context.getSharedPreferences(LAST_TIME_USED_PREFS, Context.MODE_PRIVATE);<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">if</span> (pSharedPref != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> pSharedPref.getString(LAST_TIME_USED_MAP, (<span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>()).toString());<br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>(jsonString);<br>            Iterator&lt;String&gt; keysItr = jsonObject.keys();<br>            <span class="hljs-keyword">while</span>(keysItr.hasNext()) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keysItr.next();<br>                <span class="hljs-type">Long</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> jsonObject.getLong(key);<br>                outputMap.put(key, value);<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> outputMap;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Save the updated map containing Package name and recent used time in preference</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> inputMap</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveLastTimeUsedMap</span><span class="hljs-params">(Map&lt;String,Long&gt; inputMap, Context context)</span>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">SharedPreferences</span> <span class="hljs-variable">sharedPreferences</span> <span class="hljs-operator">=</span> context.getSharedPreferences(LAST_TIME_USED_PREFS,Context.MODE_PRIVATE);<br>    <span class="hljs-keyword">if</span> (sharedPreferences != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>(inputMap);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> jsonObject.toString();<br>        <span class="hljs-keyword">final</span> SharedPreferences.<span class="hljs-type">Editor</span> <span class="hljs-variable">editor</span> <span class="hljs-operator">=</span> sharedPreferences.edit();<br>        editor.remove(LAST_TIME_USED_MAP).commit();<br>        editor.putString(LAST_TIME_USED_MAP, jsonString);<br>        editor.commit();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>具体的代码我没怎么看，他应该是没做时间跳变的处理。</p><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>其实是因为绝大多数电视机和盒子都没有做RTC电路来保存时间，导致断电或者重启后使机器恢复到出厂设置的时间。 这样的后果就是：UsageStatsService初始化的时候会删除掉未来的数据，导致应用使用时间丢失，详情见如下代码注释。</p><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/services/usage/java/com/android/server/usage/UsageStatsDatabase.java">https://cs.android.com/android/platform/superproject/+/master:frameworks/base/services/usage/java/com/android/server/usage/UsageStatsDatabase.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">long</span> currentTimeMillis)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (mLock) &#123;<br>            <span class="hljs-keyword">for</span> (File f : mIntervalDirs) &#123;<br>                f.mkdirs();<br>                <span class="hljs-keyword">if</span> (!f.exists()) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Failed to create directory &quot;</span><br>                            + f.getAbsolutePath());<br>                &#125;<br>            &#125;<br><br>            checkVersionAndBuildLocked();<br>            indexFilesLocked();<br><br>            <span class="hljs-comment">//这里会删除掉未来数据</span><br>            <span class="hljs-comment">//比如我使用机器的时候是2022年1月1号，此时记录的是这天的时间，但是重启后时间丢失了，变成了出厂设置时间，例如2018年1月1号，这就造成了数据的未来时</span><br>            <span class="hljs-comment">// Delete files that are in the future.</span><br>            <span class="hljs-keyword">for</span> (TimeSparseArray&lt;AtomicFile&gt; files : mSortedStatFiles) &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">startIndex</span> <span class="hljs-operator">=</span> files.closestIndexOnOrAfter(currentTimeMillis);<br>                <span class="hljs-keyword">if</span> (startIndex &lt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">fileCount</span> <span class="hljs-operator">=</span> files.size();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> startIndex; i &lt; fileCount; i++) &#123;<br>                    files.valueAt(i).delete();<br>                &#125;<br><br>                <span class="hljs-comment">// Remove in a separate loop because any accesses (valueAt)</span><br>                <span class="hljs-comment">// will cause a gc in the SparseArray and mess up the order.</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> startIndex; i &lt; fileCount; i++) &#123;<br>                    files.removeAt(i);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>知道了原因，那么解决方案就简单了，我们只需要在写入数据的时候记录下时间戳，然后开机的时候，设置回去，就可以避免数据的未来时。</p><p><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/services/usage/java/com/android/server/usage/UsageStatsService.java;l=1091;bpv=0;bpt=1">UsageStatsService.java - Android Code Search</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">flushToDisk</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">synchronized</span> (mLock) &#123;<br>           <span class="hljs-comment">// Before flush to disk, report FLUSH_TO_DISK event to signal UsageStats to update app</span><br>           <span class="hljs-comment">// usage. In case of abrupt power shutdown like battery drain or cold temperature,</span><br>           <span class="hljs-comment">// all UsageStats has correct data up to last flush to disk.</span><br>           <span class="hljs-comment">// The FLUSH_TO_DISK event is an internal event, it will not show up in IntervalStats&#x27;</span><br>           <span class="hljs-comment">// EventList.</span><br>           <span class="hljs-type">Event</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Event</span>(FLUSH_TO_DISK, SystemClock.elapsedRealtime());<br>           event.mPackage = DEVICE_EVENT_PACKAGE_NAME;<br>           reportEventToAllUserId(event);<br>           flushToDiskLocked();<br>       &#125;<br>       mAppStandby.flushToDisk();<br>      <span class="hljs-comment">//注意有些机器的date命令设置这个时间会减少8小时，所以根据实际情况手动调整一下：SystemProperties.set(&quot;persist.sys.reboot.time&quot;,  String.valueOf(System.currentTimeMillis() / 1000 + 8 * 60 * 60 + 60));</span><br>       SystemProperties.set(<span class="hljs-string">&quot;persist.sys.reboot.time&quot;</span>, String.valueOf(System.currentTimeMillis() / <span class="hljs-number">1000</span>));<br>   &#125;<br></code></pre></td></tr></table></figure><p>时间戳保存了，那么什么时候设置回去呢，因为UsageStatsService的初始化时间比较早，我们不能在framework进行设置，需要在init进程进行设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/system/bin/sh</span><br>time=$(getprop persist.sys.reboot.time)<br>current_time=$(date +%s)<br>if [ -n &quot;$time&quot; ] &amp;&amp; [ &quot;$time&quot; -gt &quot;$current_time&quot; ]; then<br>date @$time set<br>hwclock -w<br>fi<br></code></pre></td></tr></table></figure><p>init.rc</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">service set_time /vendor/bin/set_time.sh<br>    <span class="hljs-keyword">class</span> <span class="hljs-symbol">main</span><br>    <span class="hljs-symbol">user</span> <span class="hljs-symbol">root</span><br>    <span class="hljs-symbol">group</span> <span class="hljs-symbol">root</span><br>    <span class="hljs-symbol">oneshot</span><br></code></pre></td></tr></table></figure><p>此外还需要进行selinux的配置，这里不再列出。</p><p>最后，有些厂商可能更改了安卓按键的处理逻辑，导致按电源键执行不到flushToDiskLocked()方法，导致数据没有保存，这也需要注意。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[标签: UsageStats使用状态管理 | Coolqi&#96;s Blog](<a href="https://lishuaiqi.top/tags/UsageStats%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/">https://lishuaiqi.top/tags/UsageStats使用状态管理/</a>)</p>]]></content>
    
    
    <categories>
      
      <category>AndroidFrameworkFeature</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>UsageStatsService</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>all-makefiles-under vs all-subdir-makefiles vs first-makefiles-under</title>
    <link href="/article/ea68fa1f/"/>
    <url>/article/ea68fa1f/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://groups.google.com/g/android-building/c/d4ulUWGy0fg">all-makefiles-under v.s. first-makefiles-under</a></p><p><a href="http://aospxref.com/android-12.0.0_r3/xref/build/make/core/definitions.mk#184">definitions.mk - OpenGrok cross reference for &#x2F;build&#x2F;make&#x2F;core&#x2F;definitions.mk (aospxref.com)</a></p><p>先来看一下这三者的定义：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">###########################################################</span><br><span class="hljs-comment">## Retrieve a list of all makefiles immediately below some directory</span><br><span class="hljs-comment">###########################################################</span><br><br><span class="hljs-comment">#找出指定目录的二级目录的所有Android.mk</span><br><span class="hljs-keyword">define</span> all-makefiles-under<br><span class="hljs-variable">$(<span class="hljs-built_in">wildcard</span> $(1)</span>/*/Android.mk)<br><span class="hljs-keyword">endef</span><br><br><span class="hljs-comment">###########################################################</span><br><span class="hljs-comment">## Look under a directory for makefiles that don&#x27;t have parent</span><br><span class="hljs-comment">## makefiles.</span><br><span class="hljs-comment">###########################################################</span><br><span class="hljs-comment"># $(1): directory to search under</span><br><span class="hljs-comment"># Ignores $(1)/Android.mk</span><br><span class="hljs-keyword">define</span> first-makefiles-under<br><span class="hljs-variable">$(<span class="hljs-built_in">shell</span> build/make/tools/findleaves.py <span class="hljs-variable">$(FIND_LEAVES_EXCLUDES)</span> \</span><br><span class="hljs-variable">        --mindepth=2 $(<span class="hljs-built_in">addprefix</span> --<span class="hljs-built_in">dir</span>=,$(1)</span>) Android.mk)<br><span class="hljs-keyword">endef</span><br><br><span class="hljs-comment">###########################################################</span><br><span class="hljs-comment">## Retrieve a list of all makefiles immediately below your directory</span><br><span class="hljs-comment">## Must be called before including any other makefile!!</span><br><span class="hljs-comment">###########################################################</span><br><span class="hljs-comment">#找出当前目录的二级目录的所有Android.mk</span><br><span class="hljs-keyword">define</span> all-subdir-makefiles<br><span class="hljs-variable">$(<span class="hljs-built_in">call</span> all-makefiles-under,$(<span class="hljs-built_in">call</span> my-<span class="hljs-built_in">dir</span>)</span>)<br><span class="hljs-keyword">endef</span><br><br></code></pre></td></tr></table></figure><p>The builtin wildcard is quite efficient. So we should use $(call all-makefiles-under, $(LOCAL_PATH)) as you can.</p><p> <strong>first-makefiles-under calls the script build&#x2F;tools&#x2F;findleaves.py to find Android.mks in the given directory.</strong></p><p>If it finds an Android.mk in a directory, it just stops searching the subdirs.</p><p>It’s not efficient, especially in case you have deep complex directory structure that does not have Android.mk in the top dirs.</p><p>We should use it as little as possible.</p><p>If your Android.mk’s only purpose is to include all <strong>first-level sub-directory</strong> Android.mks, use:</p><p>include $(call all-subdir-makefiles)</p><p>If you want to include Android.mks in a specific set of first-level sub-directories:</p><p>include $(call all-named-subdir-makefiles, <subdirs>)</p><p><strong>注意：</strong></p><p>1、上面的函数都不包括指定目录的Android.mk。</p><p>2、Both all-subdir-makefiles and all-named-subdir-makefiles use $(my-dir), which uses makefile’s builtin MAKEFILE_LIST to get the current include chain of makefiles.</p><p>So they must be the called before any “include” statement in your makefile.</p><p>位置错误会报错：error: my-dir must be called before including any other makefile..</p><p>原因分析：</p><p><a href="https://people.cispa.io/weisgerber/2018/03/01/android-mk-calling-all-subdir-makefiles.html">Android AOSP Android.mk - $(call all-subdir-makefiles) Path problems | Sebastian Weisgerber</a></p><p><a href="https://groups.google.com/g/android-ndk/c/7cUf3tkuBSM">Problems using NDK build system and subdirectories</a></p><p>即：</p><p>This is due to a limitation of the GNU Make command language: <strong>All variables are</strong> <strong>global</strong><strong>, and the implementation of $(call my-dir)</strong> <strong>can only give you the name of the last included Makefile</strong> <strong>(even if you already exited the Makefile).</strong> There is no way to implement something that works properly with GNU Make.</p><h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><p>假设app目录结构如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">app-&gt;</span><span class="language-bash">app1-&gt;Android.mk</span><br><span class="hljs-meta prompt_">   -&gt;</span><span class="language-bash">app2-&gt;Android.mk</span><br><span class="hljs-meta prompt_">   -&gt;</span><span class="language-bash">app3-&gt;app4-&gt;Android.mk</span><br>         -&gt;app5-&gt;Android.mk<br><span class="hljs-meta prompt_">   -&gt;</span><span class="language-bash">app6-&gt;Android.mk</span><br>   -&gt;app7-&gt;Android.mk<br>         -&gt;app8-&gt;Android.mk<br><span class="hljs-meta prompt_">   -&gt;</span><span class="language-bash">Android.mk</span><br></code></pre></td></tr></table></figure><p>在app目录分别调用以上函数，结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">all-makefiles-under</span><br><span class="hljs-meta prompt_">app-&gt;</span><span class="language-bash">app1-&gt;Android.mk</span><br><span class="hljs-meta prompt_">   -&gt;</span><span class="language-bash">app2-&gt;Android.mk</span><br><span class="hljs-meta prompt_">   -&gt;</span><span class="language-bash">app6-&gt;Android.mk</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">all-subdir-makefiles</span><br><span class="hljs-meta prompt_">app-&gt;</span><span class="language-bash">app1-&gt;Android.mk</span><br><span class="hljs-meta prompt_">   -&gt;</span><span class="language-bash">app2-&gt;Android.mk</span><br><span class="hljs-meta prompt_">   -&gt;</span><span class="language-bash">app6-&gt;Android.mk</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">first-makefiles-under</span><br><span class="hljs-meta prompt_">app-&gt;</span><span class="language-bash">app1-&gt;Android.mk</span><br><span class="hljs-meta prompt_">   -&gt;</span><span class="language-bash">app2-&gt;Android.mk</span><br><span class="hljs-meta prompt_">   -&gt;</span><span class="language-bash">app3-&gt;app4-&gt;Android.mk</span><br>         -&gt;app5-&gt;Android.mk<br><span class="hljs-meta prompt_">   -&gt;</span><span class="language-bash">app6-&gt;Android.mk</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/jackyu613/article/details/5949324">Android.mk中call all-subdir-makefiles和call all-makefiles-under,$(LOCAL_PATH)的区别_jackyu613的专栏 Embedded Linux Android-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/28992a35037e">call all-subdir-makefiles和call all-makefiles-under - 简书</a></p>]]></content>
    
    
    <categories>
      
      <category>Android Build System</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>安卓Makefile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓记事本系统设计和模块实现</title>
    <link href="/article/71902dbe/"/>
    <url>/article/71902dbe/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓记事本系统设计和模块实现"><a href="#安卓记事本系统设计和模块实现" class="headerlink" title="安卓记事本系统设计和模块实现"></a>安卓记事本系统设计和模块实现</h1><h2 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h2><p>记事本是我学习安卓后编写的第一个软件，也是我的毕业设计。它存在着许多不完善的地方，如果你有想法可以进一步去完善它。</p><p>我当时看的是郭霖《第一行代码》第2版入门的，现在已经出到第3版了，编程语言由Java改成了Kotlin，如果你有时间，也可以把我的项目从Java改成Kotlin编写。目前这两本书都可以在微信读书上面找到。</p><p><a href="https://github.com/wesley666/note">代码链接</a></p><p><a href="https://www.bilibili.com/video/BV1sz4y1D7a6/">视频演示</a></p><h2 id="用到的关键技术"><a href="#用到的关键技术" class="headerlink" title="用到的关键技术"></a>用到的关键技术</h2><h3 id="语音识别技术和语音合成技术"><a href="#语音识别技术和语音合成技术" class="headerlink" title="语音识别技术和语音合成技术"></a>语音识别技术和语音合成技术</h3><p>多功能记事本APP采用讯飞的语音识别引擎，相当于给软件加上了“耳朵”，让记事本能“听懂”用户的讲话。讯飞公司作为语音识别行业的佼佼者，它的输入法已经可以做到一分钟输入400字了，这极大地提升了用户的输入效率。此外，记事本还会采用安卓官方TextToSpeech类来实现语音合成，它使用的合成引擎取决于手机品牌，比如小米手机默认使用的是小爱语音引擎，谷歌的原生系统一般使用Pico TTS，但不支持中文，坚果手机采用的是讯飞合成引擎。</p><h3 id="图片压缩和加载技术"><a href="#图片压缩和加载技术" class="headerlink" title="图片压缩和加载技术"></a>图片压缩和加载技术</h3><p>现在手机的相机像素越来越高，伴随着的就是图片体积的增大，对存储和显示都有压力。所以，图片的压缩就变得非常重要。记事本软件采用的是鲁班压缩开源框架，作者号称其压缩算法达到的效果可以接近微信朋友圈的图片压缩算法。所有插入到笔记的图片都会先进行图片压缩再进行存储和显示，这极大的缓解了手机的存储空间和避免了图片显示的内存溢出问题。除此之外，图片加载作为图片显示的重要过程，会直接影响图片显示的性能，尤其手机这种硬件受限的设备。安卓有许多开源的图片加载库，其中Glide尤为出色，曾经被谷歌官方推荐过。它性能优异、快速高效，在图片解码速度和解码图片带来的资源压力两方面问题都有很好的解决方案，采用的缓存和自动资源池等技术很好地确保图片显示不会内存溢出，尽可能地让图片加载这个过程变的更加快速和平滑。在记事本的多个地方都要用到Glide加载引擎，比如插入图片时需要选择图片，笔记查看界面需要浏览图片等等。</p><h3 id="云存储技术"><a href="#云存储技术" class="headerlink" title="云存储技术"></a>云存储技术</h3><p>随着移动互联网的发展，几乎所有的手机都提供了云服务，可以同步用户的图片、联系人等数据，其中涉及到的一项重要技术就是云存储技术，它将大量不同类型的存储设备通过软件集合起来协同工作，共同对外提供数据存储服务。本软件采用的服务商是坚果云，安卓客户端通过WebDav协议与其进行通讯，这个协议是基于HTTP的扩展，有利于用户对服务器端的文件进行读写操作。</p><h3 id="Material-Design"><a href="#Material-Design" class="headerlink" title="Material Design"></a>Material Design</h3><p>安卓刚刚发展的那几年，UI设计并不美观，远远不如当时的iOS系统美观。而且，由于安卓是一个开源系统，各个手机厂商在UI设计的规范并不相同，所以很多开发者干脆就把iOS上的设计搬到安卓上面来。后来，谷歌意识到了这个问题并在2014年的开发者大会上发布了一套全新的UI设计语言：Material Design，它是由Google的设计工程师们基于传统优秀的设计原则，结合丰富的创意和科学技术所开发的一套全新的界面设计语言，包含了视觉、运动、互动效果等特性。这种结合卡片化设计风格的语言，给用户带来了良好、美观和一致性的体验，从而统一了谷歌在UI设计上面的表达。目前，Material Design的支持库非常完善了，多功能记事本APP也将采用这一设计语言。</p><h3 id="富文本技术"><a href="#富文本技术" class="headerlink" title="富文本技术"></a>富文本技术</h3><p>富文本技术的实现可以让记事本的内容不仅仅是一种单调的样式，还可以有其他丰富的样式，比如可以突出标题的显示，可以让重点的文字内容变红，可以显示图片等等。所以，富文本技术对多功能记事本APP至关重要。目前有几种方法来实现富文本：</p><ul><li><p>通过使用Html.fromHtml()来解析文本内容，然后显示在TextView中，但安卓原生的Html支持的样式较少，图片显示需要单独处理等等。</p></li><li><p>通过ScrollView、多个EditText、多个ImageView等组件来拆分内容显示，由于是原生布局所以能实现的效果有很多，但是实现起来非常困难，需要处理输入焦点、组件之间的关系怎么安排等问题。</p></li><li><p>通过使用安卓SpannableString类来实现，通过它的public void setSpan(Object what, int start, int end, int flags)方法可以设置多种样式，参数what代表所要设置的样式，参数start和end代表样式设置范围，参数flags是对新插入字符的处理方式。结合ClickableSpan类和ImageSpan类就可以实现点击事件和图片显示，使用非常方便，基本满足了多功能记事本APP对富文本的要求。</p></li></ul><h3 id="持久化技术"><a href="#持久化技术" class="headerlink" title="持久化技术"></a>持久化技术</h3><p>数据持久化技术作为软件的压舱石，是非常重要的，它可以在用户退出软件后保存用户所需要的数据。文件存储、数据库存储和SharedPreferences存储是安卓系统提供的三种数据持久化方法。文件存储可以直接把数据完全保存到文件里面去，适合存储一些简单的文本数据和二进制数据。所以，在多功能记事本APP中主要用来保存图片和语音资源。数据库存储在安卓系统中使用的主要是SQLite数据库，它作为平台系统的关系型数据库，具有占用内存、资源小等方面的优势，在平台APP开发中能够发挥重大作用。它完全内置于安卓操作系统，对存储结构性复杂的数据非常友好，运行速度也非常快。虽然安卓提供了SQLiteOpenHelper帮助类来实现数据库的增删改查各种操作，但是用起来还是没有那么方便。所以在记事本工程里引入LitePal这个开源的数据库框架，它采用的对象关系映射模式可以让创建数据表变得异常简单，并且封装了很多常用的数据库功能接口，让开发流程变得更加便捷和快速。SQLite数据库主要用来保存笔记和待办事项相关内容。SharedPreferences存储采用的是key-value的方式来存储数据，适合保存一些简单数据，操作起来非常方便。此外，SharedPreferences对象与SQLite数据库相比，免去了创建数据库、创建表、写SQL语句等诸多操作，相对而言更加方便，简洁。因此，在APP中主要用来保存用户偏好数据和账号密码。</p><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><h3 id="系统总体设计"><a href="#系统总体设计" class="headerlink" title="系统总体设计"></a>系统总体设计</h3><h4 id="系统层次结构"><a href="#系统层次结构" class="headerlink" title="系统层次结构"></a>系统层次结构</h4><p>多功能记事本APP基于安卓手机操作系统开发，系统总体架构按照APP客户端-服务器端模式设计，架构设计如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619193435.png" alt="系统架构设计图"></p><p>其中云端的服务器有两种，一种是数据存储服务器，这里指的是坚果云的服务器，安卓客户端可以通过WebDav协议向服务器端请求或者发送数据。另外一种是提供语音识别功能的服务器，这里指的是讯飞公司提供语音服务的服务器，安卓客户端通过网络和密钥与其进行通信，获取语音转换成文字的结果。</p><p>安卓客户端的框架采用MVC结构，MVC即Model-View-Controller，其中M逻辑模型，V是视图模型，C是控制器。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619193815.png" alt="MVC架构设计图"></p><p>视图层的主要职责就是控制各种用户界面的显示，即负责用户数据的显示，同时可以与用户进行交互。包括主界面、笔记编辑页面和笔记查看页面等等。</p><p>控制层的主要职责就是处理各种逻辑业务，即接收并解析用户层的操作指令然后到模型层请求数据，得到数据后可以送到视图层进行显示。例如，当用户层请求语音输入时，控制层会负责调用讯飞相关接口，获取到语音数据后，通过网络连接到讯飞语音识别服务器，那边数据处理完成后，模型层就会把数据送到视图层进行展示。</p><p>模型层主要职责就是负责各种用户数据的加载和存储。例如笔记编辑完毕后模型层要把它保存到数据库，用户查看笔记时模型层要获取相应的数据。数据库采用的是专门为嵌入式设备设计的SQLite轻量级数据库。</p><h4 id="系统各功能模块组成"><a href="#系统各功能模块组成" class="headerlink" title="系统各功能模块组成"></a>系统各功能模块组成</h4><p>多功能记事本APP主要分为九大模块：用户界面、输入模块、提醒模块等等。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619193936.png" alt="系统模块组成图"></p><p>各个系统模块功能如下：</p><p>（1） 用户界面：与用户直接打交道的就是用户界面，所以一个视觉美观和操作便捷的用户界面至关重要，它直接影响了用户体验。</p><p>（2） 输入模块：主要用来记录用户想法，包括文字、图片和语音。其中，文字输入可以通过传统的键盘输入或者语音识别输入。</p><p>（3） 显示模块：用来显示保存后的笔记或者待办事项。</p><p>（4） 提醒模块：目前，人们行色匆匆，需要忙活的事情太多了。所以，记事本的提醒功能必不可少，包括日历提醒和应用内语音播报提醒。</p><p>（5） 数据同步：现在是大数据时代，很多本地数据都支持同步到云端了。因此，用户的数据可以同时保存到本地和云端，便捷性和安全性都得到了提高。</p><p>（6） 搜索模块：用户的数据量是巨大的，有了搜索功能才能在海量的信息中找到自己需要的，节省大量查找时间。</p><p>（7） 管理模块：主要就是负责笔记和待办事项的增删改查。此外，为了避免误删除笔记，系统还提供回收站功能，当你后悔的时候，还可以从回收站恢复笔记内容。由于待办事项是一些简短的文字记录，办完事后基本没用了，所以只有永久删除选项。此外，还可以更改笔记分组。</p><p>（8） 分享模块：现在是互联网时代，人与人之间的交流变得越来越容易。用户可将笔记通过社交软件实现与他人的便捷分享，让笔记不单单是自己手机上的简单存储。这样就可以节省大量的复制粘贴时间，通过分享接口直接发送消息。</p><p>（9） 权限申请模块：安卓6.0系统开始引入了运行时权限功能，对于一些危险的权限，例如录音，读取数据等等，需要得到用户的授权。对于普通权限，比如读取网络信息，由系统自动完成授权。</p><h3 id="系统各功能模块设计"><a href="#系统各功能模块设计" class="headerlink" title="系统各功能模块设计"></a>系统各功能模块设计</h3><h4 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h4><p>软件采用Material Design语言进行界面设计。用户界面主要分为五大部分。</p><ul><li><p>用户主界面：采用<strong>DrawerLayout</strong>为总体布局框架。为了让待办事项这个功能更加高效地提供给用户使用，将其单独独立成一个功能模块，不和笔记编辑器结合在一起，给用户提供更加便捷和快速的记录。利用<strong>ViewPager</strong>和<strong>TabLayout</strong>实现笔记主界面和待办事项主界面的平滑切换。信息的滚动页面结合<strong>RecycleView</strong>。同时，结合<strong>FloatingActionButton</strong>，提供语音输入和键盘输入的入口。</p></li><li><p>侧边栏：采用<strong>NavigationView</strong>为布局框架，和主界面的<strong>DrawerLayout</strong>框架配合使用。提供的是笔记的分组功能和坚果云的登录界面。用户登录坚果云账号后，才能将数据同步到云端。账号和密码保存在<strong>SharedPreferences</strong>里面。</p></li><li><p>笔记的编辑界面：主要采用<strong>EditText</strong>和<strong>ScrollView</strong>组件，前者是为了输入笔记内容，后者是为了更流畅地查看编辑内容，便于修改。此外，编辑界面下侧会提供多个<strong>ImageButton</strong>按钮，当输入法唤醒时，<strong>ImageButton</strong>也会弹出来，给用户提供语音输入、图片插入、加标题、给文字加粗和修改文字的颜色以突出重点的功能。</p></li><li><p>笔记的浏览界面：主要采用<strong>ScrollView</strong>和<strong>TextView</strong>组件，前者为流畅滚动笔记内容提供保证，后者用来显示笔记内容。采用<strong>ContentLoadingProgressBar</strong>组件来表示笔记加载过程，因为当加载云端笔记时，本地没有相应的多媒体资源时，需要从坚果云下载，存在缓冲时间。浏览界面的右上角是菜单栏，提供删除笔记、分享笔记、提醒等功能。</p></li><li><p>待办事项的编辑和浏览界面：由于待办事项功能只是服务于简短的文字记录，所以编辑和浏览界面合二为一，统一采用<strong>PopupWindow</strong>组件，里面也包含了<strong>EditText</strong>组件，用于文字输入和显示。同时，还有提醒按钮，用于事件提醒。</p></li></ul><h4 id="输入模块"><a href="#输入模块" class="headerlink" title="输入模块"></a>输入模块</h4><p>笔记编辑器采用<strong>EditText</strong>组件，结合<strong>SpannableString</strong>类实现富文本功能，比如添加标题和加粗文字等等。结合<strong>ImageSpan</strong>类实现图片显示。文本和多媒体数据分别保存到SQLite数据库和本地文件夹。语音输入采用讯飞识别引擎，实现实时语音识别转换成文字，同时把语音文件保存到本地，结合<strong>MediaPlayer</strong>类可以实现语音播放。插入图片采用知乎的开源框架<strong>matisse</strong>，结合开源框架<strong>Glide</strong>实现图片加载。图片压缩采用鲁班压缩框架。图片预览采用<strong>MNImageBrowser</strong>开源框架，这里也采用Glide作为图片加载引擎，其支持单击和长按监听，可以在这里面实现分享和保存图片到本地的功能。语音和图片的点击事件使用<strong>ClickableSpan</strong>类。具体的语音输入流程和图片插入流程如下图所示。</p><p>待办事项的输入只支持纯文本输入，采用EditText组件即可，可以通过语音或者键盘输入，当语音输入时，语音文件不会被保存。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619194139.png" alt="语音输入流程图"></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619194248.png" alt="图片插入流程图"></p><h4 id="显示模块"><a href="#显示模块" class="headerlink" title="显示模块"></a>显示模块</h4><p>笔记显示需要支持富文本显示，所以要结合<strong>SpannableStringBuilder</strong>类。通过把笔记内容的<strong>String</strong>字符串转换成<strong>SpannableStringBuilder</strong>富文本进行显示。这过程也需要用到<strong>ImageSpan</strong>类、<strong>ClickableSpan</strong>类、<strong>MediaPlayer</strong>类、<strong>MNImageBrowser</strong>和<strong>Glide</strong>开源框架。首先通过正则表达式查找出语音和图片并设置监听，然后通过反序列化恢复富文本样式，最后通过<strong>TextView</strong>显示出来。待办事项由于只有纯文本，不需要经过任何处理，即可以通过<strong>EditText</strong>显示出来。笔记内容显示过程如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619194353.png" alt="笔记内容显示流程图"></p><h4 id="提醒模块"><a href="#提醒模块" class="headerlink" title="提醒模块"></a>提醒模块</h4><p>提醒模块包括日历提醒和应用内语音提醒。日历提醒直接从应用打开日历设置提醒时间就行，并传递相关信息，这个由系统来保证时效性，一般不会有耽搁。应用内语音提醒采用<strong>AlarmManager</strong>组件来设置，到点之后采用<strong>TextToSpeech</strong>组件来进行语音播报，同时通知栏会弹出具体消息。设置日历事件和应用内语音提醒过程如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619194443.png" alt="设置日历事件流程图"></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619194511.png" alt="设置语音提醒流程图"></p><h4 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h4><p>数据同步的云端服务器采用支持<strong>WebDav</strong>协议的坚果云。安卓客户端采用<strong>sardine-android</strong>开源框架，使多功能记事本APP支持WebDav协议，让本地客户端可以和支持WebDav协议的坚果云通信，从而支持同步数据。这样的好处就是开发者不必再另外开发服务器端程序，用户只需要到坚果云注册账号就行，数据由坚果云进行保管。具体数据同步过程如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619194958.png" alt="数据同步流程图"></p><h4 id="搜索模块"><a href="#搜索模块" class="headerlink" title="搜索模块"></a>搜索模块</h4><p>用户主界面会有个<strong>SearchView</strong>组件，用于查找所需要的数据。当用户输入数据后，后台线程就会到数据库查找相应信息，结果会返回到<strong>RecycleView</strong>显示。当退出搜索时，又会重新显示主界面内容。具体搜索过程如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619195236.png" alt="搜索流程图"></p><h4 id="管理模块"><a href="#管理模块" class="headerlink" title="管理模块"></a>管理模块</h4><p>笔记和待办事项的管理，主要就是对数据库的增删改查，这里会用到开源框架<strong>LitePal</strong>来对数据库进行操作。对于笔记的分组功能，会在笔记的数据表里增加一个字段，用来判断当前笔记位于哪一个组。这里，主要分成未分组、生活、工作和回收站四个组，方便用户自主选择笔记的分类，同时还可以在笔记查看界面更改分组。由于待办事项是比较简单的文字记录，不提供任何分组。笔记的回收、恢复和更改分组过程如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619195332.png" alt="image-20210619195332112"></p><h4 id="分享模块"><a href="#分享模块" class="headerlink" title="分享模块"></a>分享模块</h4><p>通过使用<strong>Android Sharesheet</strong>来实现将笔记内容或者图片发送到应用外部，比如微信、QQ等等。笔记分享内容和图片过程如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619195410.png" alt="image-20210619195410709"></p><h4 id="权限申请模块"><a href="#权限申请模块" class="headerlink" title="权限申请模块"></a>权限申请模块</h4><p>普通权限需要在AndroidManifest.xml添加权限声明，对于危险权限，除了添加声明外，还需要经过用户授权处理。具体授权过程如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619195433.png" alt="软件授权流程图"></p><h4 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h4><p>采用<strong>SQLite</strong>作为软件数据库。</p><p>笔记表Note：用于记录笔记的各种信息，例如笔记内容、笔记创建时间、笔记标题等等。此外，还有用于坚果云同步的信息字段。</p><table><thead><tr><th>字段</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>笔记唯一编号。</td></tr><tr><td>content</td><td>String</td><td>笔记内容。</td></tr><tr><td>groupName</td><td>String</td><td>笔记所属组名字。</td></tr><tr><td>createTime</td><td>String</td><td>笔记创建时间。</td></tr><tr><td>createdTime</td><td>long</td><td>笔记创建时间，用于本地和云端数据的唯一标识。</td></tr><tr><td>updateTime</td><td>String</td><td>笔记更新时间，用来显示。</td></tr><tr><td>updatedTime</td><td>long</td><td>笔记更新时间，用来排序。</td></tr><tr><td>title</td><td>String</td><td>笔记标题。</td></tr><tr><td>subContent</td><td>String</td><td>笔记部分内容。</td></tr><tr><td>restoreSpans</td><td>byte[]</td><td>保存富文本的样式二进制数据。</td></tr><tr><td>timeRemind</td><td>long</td><td>提醒时间。</td></tr><tr><td>status</td><td>int</td><td>用来标识笔记的状态，0：本地新增， -1：标记删除，1：本地更新，2：已经同步。</td></tr><tr><td>anchor</td><td>long</td><td>记录最近一次同步时间。</td></tr></tbody></table><p>待办事项表Todo：用于记录待办事项的各种信息，例如待办事项内容、创建时间等等。此外，也有用于坚果云同步的信息字段。</p><table><thead><tr><th>字段</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>待办事项唯一编号。</td></tr><tr><td>checkBoxFlag</td><td>boolean</td><td>待办事项是否完成的标志。</td></tr><tr><td>content</td><td>String</td><td>待办事项内容。</td></tr><tr><td>createTime</td><td>long</td><td>待办事项创建时间，用于本地和云端的唯一标识。</td></tr><tr><td>updatedTime</td><td>long</td><td>待办事项创建时间，用于排序。</td></tr><tr><td>updateTime</td><td>String</td><td>待办事项创建时间，用于显示。</td></tr><tr><td>timeRemind</td><td>long</td><td>待办事项提醒时间。</td></tr><tr><td>status</td><td>int</td><td>用来标识待办事项的状态，意思和笔记表一样。</td></tr><tr><td>anchor</td><td>long</td><td>记录最近一次同步时间。</td></tr></tbody></table><p>多媒体记录表MediaForNote：用于笔记的图片和语音资源的坚果云同步。</p><table><thead><tr><th>字段</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>多媒体资源唯一标识。</td></tr><tr><td>mediaName</td><td>String</td><td>多媒体资源名字。</td></tr><tr><td>noteCreateTime</td><td>long</td><td>笔记创建时间，用来标识多媒体资源属于哪一个笔记。</td></tr><tr><td>isPhoto</td><td>boolean</td><td>区分图片和语音，从而区分上传路径。</td></tr><tr><td>status</td><td>int</td><td>用来标识记录的状态，意思和笔记表一样。</td></tr><tr><td>anchor</td><td>long</td><td>记录最近一次同步时间。</td></tr></tbody></table><h2 id="多功能记事本功能模块实现"><a href="#多功能记事本功能模块实现" class="headerlink" title="多功能记事本功能模块实现"></a>多功能记事本功能模块实现</h2><h3 id="系统各功能模块的实现"><a href="#系统各功能模块的实现" class="headerlink" title="系统各功能模块的实现"></a>系统各功能模块的实现</h3><h4 id="用户界面-1"><a href="#用户界面-1" class="headerlink" title="用户界面"></a>用户界面</h4><p>整个软件的UI界面是基于Material Design设计的。</p><p>用户主界面：用<strong>DrawerLayout</strong>作为整个界面的根布局，里面由<strong>CoordinatorLayout</strong>和<strong>NavigationView</strong>组成。<strong>CoordinatorLayout</strong>主要包括了<strong>Toolbar</strong>、<strong>TabLayout</strong>和<strong>ViewPager</strong>，其中<strong>TabLayout</strong>、<strong>ViewPager</strong>加上<strong>Fragment</strong>的组合能让笔记界面和待办事项界面实现平滑切换，步骤如下：</p><p>第一，创建存储<strong>NoteFragment</strong>和<strong>TodoFragment</strong>碎片实例的列表；</p><p>第二，创建基于<strong>FragmentPagerAdapter</strong>的<strong>MyAdapter</strong>的扩展类实例；</p><p>第三，将<strong>ViewPager</strong>和<strong>TabLayout</strong>关联起来。</p><p>第四，设置<strong>TabLayout</strong>的属性。为了监听不同的碎片页面，可以设置<strong>ViewPager</strong>监听器，在<strong>onPageSelected</strong>方法里判断当前碎片是<strong>NoteFragment</strong>还是<strong>TodoFragment</strong>。，从而切换右上角的菜单栏。<strong>NoteFragment</strong>和<strong>TodoFragment</strong>碎片里面都包含了<strong>SearchView</strong>、<strong>RecyclerView</strong>和两个<strong>FloatingActionButton</strong>组件。<strong>SearchView</strong>供用户搜索信息，<strong>RecyclerView</strong>提供滚动显示功能，其中笔记支持瀑布流布局和列表布局，待办事项只支持列表布局。为了实现滚动显示，需要定义两个适配器，分别是<strong>NoteAdapter</strong>和<strong>TodoAdapter</strong>，<strong>NoteAdapter</strong>为了支持瀑布流布局和列表布局，需要根据情况引入不同的布局文件，而<strong>TodoAdapter</strong>只需要一个布局文件即可。同时，为了支持单击打开笔记或者待办事项，长按条目弹出删除选项，需要在适配器类里面实现<strong>onClick</strong>和<strong>onLongClick</strong>方法。<strong>FloatingActionButton</strong>提供语音输入和键盘输入的入口。笔记的列表界面和瀑布流界面，待办事项列表界面如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619195701.png" alt="image-20210619195701525"></p><p>侧边栏：依托用户主界面的<strong>DrawerLayout</strong>根布局，引入<strong>NavigationView</strong>组件，里面有两个重要参数<strong>app:headerLayout</strong>和<strong>app:menu</strong>，前者引入的布局包含了用于显示坚果云品牌图片的开源组件<strong>CircleImageView</strong>、用于输入用户名和密码的两个<strong>EditText</strong>组件和用于登录坚果云的<strong>Button</strong>。后者引入的菜单包含了笔记的分组选项。侧边栏界面如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619195818.png" alt="侧边栏界面"></p><p>笔记的编辑界面：以<strong>CoordinatorLayout</strong>为根布局，里面主要包括<strong>Toolbar</strong>、<strong>ScrollView</strong>和五个<strong>ImageButton</strong>按钮。<strong>ScrollView</strong>里面继续包含了<strong>EditText</strong>组件，当其获得输入焦点时，输入法和五个<strong>ImageButton</strong>会一起弹出来，供用户输入文字、语音输入、插入图片等等。笔记编辑界面如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619195900.png" alt="笔记编辑界面"></p><p>笔记的浏览界面：以<strong>CoordinatorLayout</strong>为根布局，主要包含了<strong>Toolbar</strong>、<strong>FloatingActionButton</strong>和<strong>LinearLayout</strong>布局。<strong>FloatingActionButton</strong>提供更改笔记的入口，<strong>LinearLayout</strong>布局又包含了三方面内容，第一就是包含了用于显示笔记更改时间和提醒时间的两个<strong>TextView</strong>的<strong>LinearLayout</strong>布局，第二就是<strong>ContentLoadingProgressBar</strong>组件，显示笔记加载过程，第三就是包含了<strong>TextView</strong>的<strong>ScrollView</strong>滚动组件。右上角是菜单选项，通过工程menu的文件夹新建菜单文件<em>note_show_menu.xml</em>来实现。笔记浏览界面如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619195943.png" alt="笔记浏览界面"></p><p>待办事项的编辑和浏览界面：首先新建<strong>PopupWindow</strong>的布局文件，里面以<strong>CardView</strong>为根布局，里面主要包含了<strong>EditText</strong>和<strong>LinearLayout</strong>布局，前者获得输入焦点时会弹出输入法，后者包含了两个用于设置应用内提醒和日历提醒的<strong>Button</strong>和一个显示提醒时间的<strong>TextView</strong>，最后通过实例化<strong>PopupWindow</strong>并加载布局显示编辑界面。编辑完成后，只需要点<strong>PopupWindow</strong>以外触摸空间或者返回按钮，编辑界面就会关闭。待办事项的编辑和浏览界面如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619200021.png" alt="待办事项编辑和浏览界面"></p><h4 id="输入模块-1"><a href="#输入模块-1" class="headerlink" title="输入模块"></a>输入模块</h4><p>输入模块主要分为三个部分：语音输入、图片插入和文字输入。</p><p>语音输入：如图所示，当输入框获得焦点后，会显示输入选项，选择语音输入图标后会弹出语音录入界面，语音数据会实时上传到讯飞服务器进行识别，识别结果会显示在输入界面，用户说完话后，语音录入界面关闭并在输入框添加小喇叭图标。</p><p>软件上的实现过程：首先，使用讯飞识别引擎之前要在库文件中引入讯飞识别库，然后调用<strong>SpeechUtility.createUtility()</strong> 验证密钥。接下来通过自定义的<strong>XunFeiEngine</strong>类完成识别过程，提供的方法主要有设置语音识别参数的<strong>setParam()<strong>，打印结果方法</strong>printResult()</strong> 和构造函数<strong>XunFeiEngine()<strong>。先实例化</strong>XunFeiEngine</strong>类完成讯飞语音识别引擎的初始化，然后调用<strong>setParam()</strong> 方法完成参数设置，比如讯飞的听写引擎、语言区域、音频保存路径等等。接下来调用<strong>SpeechRecognizer</strong>类的<strong>startListening()</strong> 方法完成监听器设置，在监听器里面通过<strong>onVolumeChanged()</strong> 方法改变语音输入界面的动画效果；通过<strong>onBeginOfSpeech()</strong> 方法知道讯飞语音识别引擎已经准备好了，用户可以开始语音输入；通过<strong>onEndOfSpeech()</strong> 方法知道检测到了语音的尾端点，已经进入识别过程，不再接受语音输入；通过<strong>onResult()</strong> 方法获取识别结果并显示在输入界面；通过<strong>onError()</strong> 方法了解出错问题。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619200112.png" alt="语音输入界面"></p><p>图片插入：在输入选项选择相机小图标进入图片插入功能，如图所示。在相册界面可以预览图片，选择好图片后点击右下角的使用按钮跳转回来输入框，图片已经正常插入了。</p><p>软件的实现过程：首先在工程引入知乎的开源框架<strong>matisse</strong>和鲁班图片压缩框架<strong>Luban</strong>，然后在<strong>callGallery()</strong> 方法中设置好<strong>Matisse</strong>类，主要设置参数有提供拍照功能、只显示图片资源、设置图片加载引擎为<strong>Glide</strong>、设置唯一标记请求码等等。接下来，图片的选择结果在<strong>onActivityResult()</strong> 方法中处理，通过<strong>Matisse.obtainPathResult()</strong> 方法获取图片的实际路径列表，然后通过<strong>Luban</strong>类相关方法完成图片的压缩和保存，最后完成图片的插入：根据Uri获得<strong>Drawable</strong>资源，设置<strong>ClickableSpan</strong>点击事件，通过<strong>ImageSpan</strong>和<strong>SpannableString</strong>显示到输入界面。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619200212.png" alt="图片选择界面"></p><p>文字输入：文字的输入选项有三个：文字标题、文字标红和文字加粗，如果什么都不选，就会以正常文字输入。有两种用法：第一种就是先选择输入选项然后再输入文字，如第一张图所示。第二种就是以正常样式输入文字后再通过光标选择文字的样式，如图2所示。</p><p>软件实现：第一种用法实现方式,通过给<strong>Edittext</strong>设置<strong>TextWatcher</strong>监听器，在<strong>TextWatcher</strong>的<strong>afterTextChanged()</strong> 方法里面根据输入选项通过<strong>setSpan()</strong> 方法完成样式设置。第二种用法实现方式，根据对应的输入选项，通过<strong>EditText</strong>的<strong>getSelectionEnd()</strong> 和<strong>getSelectionStart()</strong> 方法获取文字光标范围，最后通过<strong>setSpan()</strong> 方法完成样式设置。其中<strong>setSpan()</strong> 方法主要是给<strong>Editable</strong>设置不同的<strong>TextAppearanceSpan</strong>样式来达到富文本效果。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619200317.png" alt="image-20210619200316983"></p><p>当输入完成后，通过<strong>addNote()</strong> 方法进行笔记保存，首先通过<strong>getSpans()</strong> 方法获取笔记内容的样式，然后通过<strong>Parcel</strong>类的相关方法把样式内容转换成二进制数据存储，接下来设置笔记的标题、副标题、创建时间等等，最后保存到数据库。</p><p>待办事项的输入支持语音输入和纯文本输入，语音输入实现过程与笔记语音输入过程类似，只不过不需要保存语音录音文件。文字输入就是正常样式输入，不需要其他样式。保存过程类似笔记，但不需要处理样式、标题等内容。</p><h4 id="显示模块-1"><a href="#显示模块-1" class="headerlink" title="显示模块"></a>显示模块</h4><p>笔记从数据库查询出来后，每一个笔记的content字段都要经过自定义<strong>ContentToSpannableString</strong>类的<strong>contentToSpanStr ()</strong> 方法处理，首先要通过正则表达式<strong>Pattern.compile(“&lt;voice src&#x3D;’(.*?)’&#x2F;&gt;”)</strong> 找出笔记内容里面的语音路径，然后通过路径找到本地语音资源，如果本地没有就要联网从坚果云下载，有了语音资源后就要把内容的语音路径替换成<strong>ImageSpan</strong>和<strong>ClickableSpan</strong>，这样就可以显示一个语音图标同时可以实现点击播放音频，音频播放是通过<strong>MediaPlayer</strong>类来完成的。接下来，就是通过正则表达式<strong>Pattern.compile(“&lt;img src&#x3D;’(.*?)’&#x2F;&gt;”)</strong> 来查找笔记的图片资源路径，然后也是优先从本地查找图片，本地没有再从坚果云下载，接着把笔记内容的图片路径替换成<strong>ImageSpan</strong>和<strong>ClickableSpan</strong>，那么<strong>ImageSpan</strong>就是具体要显示的图片，而<strong>ClickableSpan</strong>监听图片的点击事件，在点击事件里面通过开源框架<strong>MNImageBrowser</strong>的<strong>MNImageBrowser</strong>类来实现图片的查看、单击分享图片和长按图片保存到本地的功能，图片加载引擎要用到开源框架<strong>Glide</strong>，保存图片到本地要通过<strong>MediaStore.Images.Media.insertImage()</strong> 方法把图片插入到图库，然后发广播通知图库刷新显示。最后，就是恢复富文本显示，先判断Note的<strong>restoreSpans</strong>字段是否为空，如果为空，设置好字体后直接返回转换成<strong>SpannableStringBuilder</strong>的数据。如果不为空，那么就需要通过<strong>Parcel</strong>反序列化来恢复数据。使用<strong>Parcel</strong>的<strong>unmarshall</strong>方法来把二进制数据恢复成原始数据，然后通过<strong>readParcelable</strong>方法得出自定义的<strong>SaveTextAppearanceSpan</strong>数据，最后继续通过<strong>unmarshall</strong>方法获取富文本<strong>Parcel</strong>数据，然后把实例化<strong>TextAppearanceSpan</strong>的对象依次设置到<strong>SpannableStringBuilder</strong>对象中去，完成后返回数据供<strong>Edittext</strong>显示。</p><p>待办事项的数据直接把原始<strong>String</strong>内容送到<strong>Edittext</strong>显示即可。</p><h4 id="提醒模块-1"><a href="#提醒模块-1" class="headerlink" title="提醒模块"></a>提醒模块</h4><p>应用内提醒：通过<strong>AlarmManager</strong>创建定时任务来实现。首先，系统要获取提醒时间，这里通过<strong>Android-PickerView</strong>开源库来实现。如图1所示，选择好提醒时间后点击确定，然后<strong>TimePickerView</strong>类的监听器就会执行<strong>onTimeSelect()</strong> 方法，在这个方法里面，首先要判断设置的提醒时间是否早于现在，如果是，则抛出提示：”设置的提醒时间不能早于现在”。如果不是，则打开一个服务<strong>AlarmService</strong>去创建定时任务，在打开服务之前，要传递三个重要意图，第一个是提醒时间，第二个是数据的唯一标识，第三个是种类，区分笔记和待办事项。打开<strong>AlarmService</strong>后，首先初始化<strong>TextToSpeech</strong>，为之后的语音提醒作准备。然后，实例化<strong>AlarmManager</strong>类，配置好定时到点后的触发任务<strong>AlarmIntentService</strong>，并传递数据唯一标识和种类。设置定时时间要用到<strong>PendingIntent</strong>类，并按照笔记和待办事项设置好唯一标识符，这个标识符对于取消提醒至关重要。最后调用<strong>AlarmManager</strong>的<strong>setExactAndAllowWhileIdle ()</strong> 方法，设置好定时任务。当提醒时间到了，<strong>AlarmIntentService</strong>服务会被系统唤醒，在这里面的功能就是在通知栏显示通知并且语音播报提醒内容。通知显示后，可以通过通知栏进入笔记页面或者关闭语音播报。特别注意的是，当软件重新启动时，会开启一个线程重新设置没有过期的笔记定时任务。</p><p>日历提醒：通过系统提供的<strong>Calendar</strong>日历服务类打开日历，并传递提醒内容和时间，其他设置由系统的日历来提供。如图2所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619200353.png" alt="image-20210619200353483"></p><h4 id="数据同步-1"><a href="#数据同步-1" class="headerlink" title="数据同步"></a>数据同步</h4><p>云同步功能采用的服务商是坚果云，所以开启备份之前需要注册一个坚果云账号，然后在坚果云网页第三方应用管理那里申请一个应用密码，最后在应用的侧边栏填上账号密码，然后点击登陆按钮，联网验证账号密码是否正确。用户的账号和密码会保存到<strong>SharedPreferences</strong>里面。应用本地需要接入<strong>sardine-android</strong>开源框架，然后创建一个<strong>SynWithWebDav</strong>类，专门管理数据同步。</p><p>同步过程：为了触发同步，需要在系统引入开源框架<strong>SmartRefreshLayout</strong>，它支持下拉刷新。如图所示，在用户主界面下拉，会显示下拉更新组件<strong>RefreshLayout</strong>。在同步的过程中，为了防止数据冲突，会禁止应用内的触摸活动，同步完成后恢复触摸。然后，<strong>RefreshLayout</strong>监听器接收到视图层的指令，触发<strong>onRefresh</strong>方法，在里面执行数据同步：</p><p>（1） 通过<strong>getSystemService()</strong> 方法获取到<strong>ConnectivityManager</strong>系统服务类，从而得知当前网络情况，如果网络不可用则直接退出同步过程并提示用户网络不可用。</p><p>（2） 禁止触摸活动，并通过<strong>SharedPreferences</strong>获取用户的账号和密码。</p><p>（3） 实例化<strong>SynWithWebDav</strong>类，在它的构造函数里面完成账号和密码的设置，如果是第一个同步，还会在外部存储空间新建一个<strong>noteBackup.db</strong>数据库用于同步，并在里面新建<strong>Note</strong>和<strong>Todo</strong>两个数据表。</p><p>（4） 由于图片和语音数据上传需要花费很多时间，所以首先开辟一个线程用于多媒体数据同步。在新线程里面，先在<strong>MediaForNote</strong>数据表里面获取<strong>status</strong>为0的数据，代表还没有同步的数据。然后，通过<strong>MediaForNote</strong>里面的<strong>isPhoto()</strong> 方法区分多媒体资源路径，最后调用<strong>SynWithWebDav</strong>的<strong>uploadFile()</strong> 方法进行数据上传，通过其返回值判断是否上传成功，成功的话则设置<strong>status</strong>为2，并保存到数据库。</p><p>（5） 从<strong>SharedPreferences</strong>里面获取最近的同步时间，然后获取云端的<strong>noteBackup.db</strong>文件的最近修改时间。当文件存在并且修改时间大于最近同步时间时，那么就需要下载最新的云备份文件，用于合并云端的更改到本地。如果过程中出现网络错误将中断同步过程，退出下拉刷新并恢复触摸。</p><p>（6） 如果云文件下载成功或者云端文件更改时间小于等于最近同步时间，那么接下来就开始进行笔记和待办事项的数据同步。首先，如果云文件同步成功就需要调用<strong>SynWithWebDav</strong>的<strong>updateLocalNotes()<strong>和</strong>updateLocalTodos()</strong> 方法合并云端更改到本地数据库。接下来就是把本地新增或者更改的数据合并到云端数据库，即<strong>status</strong>为0或者1的笔记和待办事项，从数据库查询到数据后，调用<strong>SynWithWebDav</strong>的<strong>updateNotes()<strong>和</strong>updateTodos()</strong> 方法合并数据到备份文件。然后，获取<strong>status</strong>为-1的数据，调用<strong>SynWithWebDav</strong>的<strong>deleteNotes()</strong> 和<strong>deleteTodos()</strong> 方法通知备份数据库说本地一些数据已经删除。最后，把备份文件上传到坚果云，更改最近同步时间。当然，如果本地备份文件的更改时间小于等于最后同步时间则不需要上传，网络出错也会重置同步状态。</p><p>（7） 所有数据同步完成后，退出下拉刷新并恢复全局触摸事件。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619200430.png" alt="同步界面"></p><h4 id="搜索模块-1"><a href="#搜索模块-1" class="headerlink" title="搜索模块"></a>搜索模块</h4><p>无论是笔记界面还是待办事项界面都有搜索框。如图所示，当用户输入查找字符时，<strong>SearchView</strong>组件的监听器就会接收到指令，开始激活<strong>onQueryTextChange()</strong> 方法，然后在里面调用编写好的<strong>search()</strong> 方法，这个方法适用于查找笔记，即会从对应的组别中筛选出包含查找字符的笔记，然后把结果返回，最后刷新<strong>RecycleView</strong>显示。当点击搜索框的交叉符号时，代表退出查找，监听器会重新运行<strong>RecycleView</strong>刷新方法，继续显示组内笔记。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619200505.png" alt="image-20210619200505641"></p><h4 id="管理模块-1"><a href="#管理模块-1" class="headerlink" title="管理模块"></a>管理模块</h4><p>为了实现新增信息、删除信息、修改信息和查找信息，这里的信息包括笔记和待办事项，需要设置两个管理数据表的类，一个是用于管理笔记的<strong>NoteDbManager</strong>类，一个是用于管理待办事项的<strong>TodoDbManager</strong>类。它们涉及到<strong>LitePal</strong>的主要方法如下所示：</p><p>（1） 新增信息，由于笔记和待办事项类都扩展了<strong>LitePalSupport</strong>，所以当需要新增一条信息时，只需要调用 <strong>save()</strong> 方法。</p><p>（2） 删除信息，首先要获取所要操作的数据表，然后设置信息的约束项，比如信息的唯一标识字段，最后设置约束项的具体值。函数原型为<strong>public static int deleteAll(Class&lt;?&gt; modelClass, String… conditions)</strong> 。</p><p>（3） 更改信息，有两种方法，第一种就是对已经储存到数据库的对象调用<strong>save()</strong> 方法，符合这种情况的有两种，一种是已经调用过<strong>save()</strong> 方法的对象，另外一种情况是通过<strong>LitePal</strong>提供的方法查询出来的对象。另外一种方法就是先新建一个数据实例，然后设置想更改的字段，最后调用<strong>public int updateAll(String… conditions)</strong> 方法来执行更新操作，这里也可以指定对应的约束条件，不设置的话，默认更新所有数据。</p><p>（4） 查询信息，通过<strong>LitePal</strong>各种查询方法可以搜索到所需要的信息，当需要查询数据表的所有信息时，只需要传入对应的数据类，比如<strong>LitePal.findAll(Note.class)<strong>，会返回一个</strong>Note</strong>类型的<strong>List</strong>集合。当需要添加约束条件时，需要结合<strong>find</strong>方法和<strong>where</strong>方法，例如查询同步标志位时，只需要调用<strong>LitePal.where(“status &#x3D; ?”</strong>,<strong>Integer.toString(status)).find(Note.class)</strong> 方法，就会返回符合条件的<strong>List</strong>集合。当需要对所获取的数据时排序时，需要用到<strong>order</strong>方法，其中<strong>desc</strong>表示降序排列，<strong>asc</strong>或者不写代表升序排列。比如对获取的笔记数据按更新时间降序排序，则调用<strong>LitePal.order(“updatedTime desc”).find(Note.class)</strong> 方法。</p><p>以上就是对数据库的增删改查，接下来就是笔记的分组功能，如图1所示，依靠的是<strong>Note</strong>类里面的<strong>groupName</strong>字段，有四个取值，分别是“未分组”、“生活”、“工作”和“回收站”，只要在侧边栏选择对应的选项，控制层就会依靠<strong>groupName</strong>这个约束条件在数据库查找符合条件的信息，那么视图层就可以查看对应的组内内容了。由于一般不必要在回收站新建内容，所以切换到回收站时，输入按钮会隐藏起来。此外，“全部”不包括“回收站”，查询时要设置好约束条件。移入回收站可以通过长按笔记条目选择，如图2所示。更改分组可以在笔记浏览界面完成，如图3所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619200602.png" alt="image-20210619200602150"></p><h4 id="分享模块-1"><a href="#分享模块-1" class="headerlink" title="分享模块"></a>分享模块</h4><p>发送文本内容：创建一个<strong>Intent</strong>并将其操作行为设置成<strong>Intent.ACTION_SEND</strong>，然后设置分享的数据类型为<strong>text&#x2F;plain</strong>，调用<strong>putExtra()</strong> 方法把名为<strong>Intent.EXTRA_TEXT</strong> 的笔记内容放到<strong>Intent</strong>对象里面去，接着调用<strong>Intent.createChooser()</strong> 创建一个分享<strong>Intent</strong>，并向其传递前面那个<strong>Intent</strong>对象，最后调用<strong>startActivity()</strong> 方法完成分享动作，如图1所示。</p><p>发送图片：在浏览图片框架<strong>MNImageBrowser</strong>里面设置图片的单击事件，之后的步骤基本和发送文本内容相同，但有两个地方不同，发送图片要设置分享的数据类型为<strong>image&#x2F;jpeg</strong>，通过<strong>putExtra()</strong> 方法放到<strong>Intent</strong>里面去的是名字为<strong>Intent.EXTRA_STREAM</strong>的图片<strong>Uri</strong>数据，如图2所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619200633.png" alt="image-20210619200633904"></p><h4 id="权限申请模块-1"><a href="#权限申请模块-1" class="headerlink" title="权限申请模块"></a>权限申请模块</h4><p>普通权限：在<strong>AndroidManifest.xml</strong>文件添加权限声明。</p><p>危险权限：首先创建一个包含录音、拍照、读取文件和写入文件权限的字符串数组， 然后通过<strong>ContextCompat.checkSelfPermission()</strong> 方法来逐条判断是否已经获得授权。接下来，对没有获得授权的权限通过<strong>ActivityCompat.requestPermissions()</strong> 方法一次性申请权限。最后，在<strong>onRequestPermissionsResult()</strong> 方法中处理授权结果，如果没有获得必要权限，程序将关闭并退出。授权过程如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210619200657.png" alt="image-20210619200657822"></p><h4 id="数据库实现"><a href="#数据库实现" class="headerlink" title="数据库实现"></a>数据库实现</h4><p>数据库采用的是安卓原生支持的<strong>SQLite</strong>数据库，用<strong>LitePal</strong>开源框架对其进行操作。多功能记事本APP会维护两个数据库，一个是存储在内部存储器的<strong>note.db</strong>数据库文件，用于本地数据的保存，另外一个是存储在外部存储器的<strong>noteBackup.db</strong>数据库文件，用于坚果云同步。具体步骤如下所示：</p><p>（1） 包含库：首先在<strong>build.gradle</strong>文件添加<strong>LitePal</strong>的依赖项，这样<strong>LitePal</strong>开源框架就导入软件工程了。</p><p>（2） 配置<strong>litepal.xml</strong>：在项目的<strong>assets</strong>文件夹中创建一个文件<strong>litepal.xml</strong>，   在文件里面定义好数据库名字和版本号。</p><p>（3） 配置<strong>LitePal</strong>的上下文参数：在<strong>MyApplication</strong>类的<strong>onCreate()</strong> 函数里面调用<strong>LitePal.initialize(this)</strong> 完成初始化。</p><p>（4） 创建数据表：根据数据表字段建好<strong>Note</strong>、<strong>Todo</strong>和<strong>MediaForNote</strong>数据类并在<strong>litepal.xml</strong>文件添加数据表的声明后，当程序操作数据库时，数据表在数据库中就会自动生成。到这里，数据库的建表操作就完成了。程序可以通过<strong>LitePal</strong>提供的接口完成数据库的增删改查。</p>]]></content>
    
    
    <categories>
      
      <category>安卓APP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓记事本</tag>
      
      <tag>安卓便签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春节回乡：见闻与随想</title>
    <link href="/article/432db37/"/>
    <url>/article/432db37/</url>
    
    <content type="html"><![CDATA[<h2 id="春节回乡：见闻与随想"><a href="#春节回乡：见闻与随想" class="headerlink" title="春节回乡：见闻与随想"></a>春节回乡：见闻与随想</h2><blockquote><p>作者：郑褚</p></blockquote><p class="note note-info">内地为什么不会成为沿海</p><p>2016年春天，我和朋友驾车从成都出发，经贵州、广西，花三天时间到达广州。这一趟横穿中国西南腹地的旅行，让我发现如果把中国比作一只蛋糕，那么繁荣的珠三角只是蛋糕表面上那一层薄薄的奶油而已。</p><p>连绵不断的居民区、星罗密布的工厂，以及建在郊区的大型商超、车行等汽车时代的特征，都要进入肇庆甚至佛山境内才开始涌现。这时候，穿越漫长山区和田野的无聊会转化成对城市化和现代化的振奋乐观，你自然而然的就会认为，城市化会由沿海地区向内地缓慢推进，沿海与内地的区别只是时间问题，后者晚起步一二十年而已，低生产率和人力资源密集型的产业会自然而然的从沿海向内地溢出，所有在沿海发生过的故事都有机会从东向西，由南至北，在内地重来一遍。</p><p>然而在此请先记住我的结论：<code>在长三角珠三角发生的这一切，也许永远不会在内地发生，沿海和内陆的命运早就已经分道扬镳，走向不同的方向。</code></p><p class="note note-info">1，水泥钢筋现代化</p><p> 我过去三年都没有在四川老家过春节，今年回去，第一个感觉是“变化巨大”。</p><p> 以我爸妈生活的小县级市江油市为例，新城区的面积是老城的一半大小，碧桂园和恒大都在郊区建了超级大盘，宝龙集团在新区建了一个据说是全地级市范围内最大的商业综合体，去年刚刚开始营业。除此之外，还有绵阳市的新机场、以及据说是西部最大的游乐场等大型在建项目都在江油境内，这也使得本市的房价从两年前的3000多块，飙升到了五千以上，一些新盘的认购价已经接近七千。买了房子的自然是欢天喜地，在家庭饭局上，亲戚们都认为，由于本市还有一半的人口没有进入城市，以及附近两个农业县对本市的强烈认同，江油会有新一波的人口涌入，房价将会进一步抬高。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210614162444.jpeg" alt="我家窗外的新城区"></p><p>这种乐观当然不是江油独有的，每一个地方都在为自己的房价和未来发展感到乐观，在上面一级的地级市绵阳市，过去两年的房价几乎也有一倍的涨幅，本地电台鼓吹多年的“房价过万”终于实现了，较好的新小区楼面价已经在一万二以上。不过绵阳市的房价逻辑并不完全因为基建或者“城市升级”，而是本市津津乐道的“（中学）教育强市”，人们相信本市中学的强烈吸引力，认为甚至陕西甘肃云南的很多人都为了子女上中学，正在迁入本地，为房价上涨推波助澜。</p><p>变化的不仅是房价，几年内现代化大型商超新开了不少，餐饮也琳琅满目，日料和潮汕牛肉火锅不仅常见，而且都有了相当正宗的店，ZARA、汉堡王等过去认为大城市才有的商业也已经在这个城市扎根。一个朋友告诉我他打算引进网红品牌喜茶，说完以后他问我，“你觉得现在我们这里和广州的消费档次区别大吗？”我说除了还没有奢侈品专卖店，区别真的不大，朋友立刻纠正我，其实本地的奢侈品消费已经相当流行了，完全应该支撑得起专卖店的流量。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210614162456.jpeg" alt="我家楼下的潮汕牛肉火锅"></p><p>当然，所有这些都是其他“回乡见闻”必然谈及的，此外要谈及家乡的现代面貌，不吹一下高铁也不合时宜，江油市可能是中国唯一拥有三个高铁站的县级市，再加上正在建造的机场，堪称基建竞争的大赢家。实际上借助高铁，春节期间我第一次实现了一天之内跨越四川四个城市的旅行，在每一个城市都有停留，而且横跨了川南川北。</p><p>在不断生长的钢筋水泥面前，一切都是欣欣向荣的样子，由于小城市房价更低、生活成本更低，也难怪有人喊出了“中国内地生活水平已接近美国”的口号。</p><p class="note note-info">2，农村幸福门槛</p><p>回家第二天，我和太太来到我小时候生活的小镇，小镇并没有和城市一样蓬勃生长的新区与商品房，可见的主要变化是楼房多了，以及镇上几乎每个家庭都普及了汽车。</p><p>不到内地乡镇，你可能不会知道有这么多销量惊人、价格炸裂的中国品牌SUV，作为一个汽车爱好者，很多车连我都是第一次看见实物。奔腾、宝骏、力帆、北汽幻速、众泰、金杯、瑞风、昌河的SUV阵营涵盖了农村家庭的主要购车范围，这些车的共同特点是：适应农村路况、体型较大能装、加保险在内的全套购车成本可以控制在10万以内，一般不超过8万。原以为会通杀四方的哈弗H6、传祺GS4、吉利博越，反而因为售价较高，在镇里难得一见。</p><p>我们两个人站在我表哥的楼顶，我告诉我太太，建造这栋体型庞大、设计极端随意的楼房花费了50多万元，在它修建的时候，同样的钱可以去江油买两套小户型，于是她问我，“这钱为什么不去江油买楼等升值呢？”实际上，周边大大小小的农民自建小楼，成本都在30万以上，这笔钱两三年前拿到江油去，都可以买一套房。城里的房子有机会升值，而且方便出租，但乡镇的房子只会慢慢贬值，租也不容易租出去，而且租价极低，看起来是非常不划算的选择，但农民有自己的考虑。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210614162512.jpeg" alt="镇里的农民自建房"></p><p>首先，宅基地划拨来之不易，一旦获得了批准，必须建房把它占起来才能放心。更重要的是，如果在城市买房，后续的城市生活成本始终较高，而在农村有一套这样的房子，就让自己和子女结婚都有了住处，再买上一辆车，基本上算是农村生活的stage通关了，用我太太的话说，就是“余生可以躺着活了”。</p><p>由于退耕还林，我老家乡镇周围的农民，大多数都只维持很少的土地，留在本地生活的以老年人为主。农村“新农保”覆盖率极高，再加上本地大多数人都有失地农民补贴，因此很多普通农民在60岁以后可以领到一千元以上的社保，一对夫妻就是两千多元，这笔收入在城市不够用，但在农村却是足够。我们算了一下，原来在老家小镇，“躺着生活”的门槛就是30万元的建房成本+10万元购车成本，40万元即可人生通关安享晚年，还挺让人羡慕的。</p><p>不过，40万元在乡镇和农村其实是一个相当高的门槛，年轻人如果出门打工积攒这40万，即使每年存3万元（也就是每个月积攒2500元），存够这笔钱也要十年以上。而要留在本地实现这笔积累基本上是不可能的，镇上极少有工作岗位，在手机店和小饭馆当个营业员，一个月都只有一千多块钱，看统计数据的话，绵阳市2017年的农村居民人均可支配收入，只有14752元。</p><p>所以，镇上的“平均建房年龄”，比城市的“平均购房年龄”要大得多，这些小楼的房主年龄基本都在中年以上，某种程度上，能住进镇上这种小楼，实现“有房有车”并不是普遍现象，而是本地农村的“成功者”。</p><p>这么一看，“躺着生活”离普通农村人，其实又仍然很远。</p><p>而且，躺着生活也没有那么丰满，我本来以为，家家户户有车会让本镇开五菱宏光跑客运这门生意消失，然而并没有，买了车不等于实现汽车代步，因为油费对普通人来说太贵了。例如到临近的江油市往返一趟，自己开车的话，差不多需要50元油费，而搭车只需要20元，因此很多人的私家车只有在全家出行或者去不方便搭车的地方才会使用。</p><p>镇上真正实现了汽车代步的是公务员和教师等“国家单位人员”。一对有一定工作年限的教师夫妇，如果算上住房公积金，家庭年收入可以达到15万元（去年北川县教师的年终奖是每人三万元，公务员则为五万元）。这些家庭的汽车选择也截然不同，基本上都是合资品牌，车价分布在15至20万元之间。当然，他们也不算彻底的本镇居民，一个乡镇的教师或者公务员即使还没有在江油市或绵阳市买房，到结婚的时候也一定会买，“进城”这件事在获得公职的时候就已经注定了。</p><p>为什么乡镇的公职人员可以实现“城市化”而农民不可以，归根结底还是收入水平。一个农民即使攒够一套全款的钱，也难以负担后续的城市生活成本，只能留在本地盖楼、买车，“躺着生活”实际上是选择低收入低开销模式。</p><p class="note note-info">3，内地的商业机会</p><p>如果说乡镇的“成功”门槛是40万，那么在绵阳的门槛是多少？</p><p>每个城市都流传着“本地有钱人众多，豪车如云”的都市传说，绵阳当然也不例外。人们一般说的“豪车”是以品牌而非价格划分，例如丰田汉兰达、本田冠道，没有人认为属于豪车范畴，但与它们实际价格差不多的宝马X1或奥迪A4则算是入门豪车。以这个标准来看，绵阳的“豪车”普及度确实颇高，我的不少朋友都已实现了豪车代步。</p><p>但把豪车等于车主有钱，则极大的高估了豪车的含金量。豪车对广东人而言，属于汽车方面很普通的选择之一，并不具备什么人生意义。但豪车在内地的意义非常重大，开上BBA和买房一样，是小有成就之后的必然选择，也是在竞争游戏中通关的证明，如果一个人如果已经有了一套房，没有太大的还贷压力，每年又有个十几二十万的收入，就要开始动心思按揭一辆宝马3系，“走上人生巅峰”了。</p><p>但实际上，有房有车的成功只是阶段性的，在绵阳我和几个发小吃饭，饭桌上除了一对中学教师夫妻和一位某支行副行长，另外两位开上了“豪车”的朋友都想跟我聊聊创业。</p><p>其中一位08年以后开始搞基建，高峰时期每年有一百多万的利润，几年前公司效益好的时候给家里买了三套房，给自己买了卡宴，老婆也开上了奔驰，但近几年基建潮退，过去两年基本没有收入，手头不剩多少余钱，公司也正在办注销。另外一位在公路设计院（私企）工作的朋友，08年就开始月入两万，但收入已经十年没有增长，本地消费水平却越来越高，目前觉得生活逐渐吃力，主要年纪大了熬夜画图日渐吃力，也觉得必须找一个属于自己的生意，不能再这么手停口停。</p><p>跟汉堡王、ZARA一起出现的，是快速上涨的消费水平，买卡宴的朋友说，原本以为挣个千把万就足够在这个城市安度晚年，结果一千万没挣到，物价却越来越高，比如子女读书，不管上公立私立，一年三五万总是免不了，而日常消费，喝茶泡吧吃火锅，包括停车费，都基本不比成都低。</p><p>物价升高的同时，收入却并没有同步提升，十年前一个本地饭馆帮工的月薪是不到两千，现在则是两千多块，十年增长了几百块而已。最能体现收入的是房租，一千五左右就能租到市中心的大两房，也跟五年前基本毫无变化。过去十年收入水平和消费水平一起增长的只有政府雇员和国有企事业单位，十年前本地普通教师的退休工资是三千左右，与私营企业的工作一两年的本科应届生持平，但今天私企里的本科生仍然拿着三千都的工资，但一个2018年退休的小学教师，退休金可以拿到7000以上。</p><p>当你和一个绵阳生意人讨论创业，很多人的第一句话是“要挣钱就要搞好政府关系，挣政府的钱”——大概这才是内地和沿海最明显的区别。</p><p>这倒不是因为本地生意人崇拜权力，而是如果不跟政府玩，你剩下的空间非常小。发达的物流业已经把全国变成一个统一市场，带来的后果之一是落后产能被迅速淘汰，比如，中国越来越不需要内地的服装鞋帽玩具厂了，有长三角珠三角就够了。</p><p>除了已经做到上市或接近上市规模的化工、医药、食品加工等中大型企业，内地普通的民营企业已经很难再出头做大，2017年A股申报上市的388家企业，有270家位于长三角、珠三角和北京，整个四川只有9家。</p><p>手机，电器，化妆品、箱包、五金，甚至家具……它们的生产都越来越集中于沿海地区，内地唯一能参与的事情是购买和分发。商品推荐APP“盖得排行”在2017年做过一项统计，他们的900多个商品排行榜中，推荐消费者购买的中国品牌有1633个，其中1348个品牌来自东部沿海地区，只有285个品牌属于内地省份。仅广东一省，就有469个被推荐品牌，基本涵盖了所有的消费品类，被推荐品牌最多的内地省份是四川省，只有39个品牌。</p><p>一家行业头部公司并不仅仅只代表它自己，它的背后还有上下游产业集群。绝大多数生产企业的头部公司位于沿海地区，意味着这些行业的配套产业、供应链、工业物流等发展和就业机会也都不在内地。</p><p>而互联网新经济的生产比传统经济更加集中，例如互联网广告的产业规模是3500亿，绝大部分被北京、深圳、杭州三个城市瓜分；游戏是一个2000亿的产业，但同样只要广州深圳成都等少数几个城市，就基本瓜分了全国市场。</p><p>对普通小微企业来说，内地只剩下两个生意：1,餐饮或本地服务。2，从政府分钱，或者依托政府权力寻租的生意（赌博机、洗浴中心等）。但是餐饮呢，据非正式统计，餐饮企业年换手率超过三成，也就是平均一家餐厅只能开三年多就破产了。</p><p>所以你不能不理解为什么内地对“稳定”（其实也就是过去的“铁饭碗”）有那种变态的热衷，因为体制外确实没什么机会和空间。</p><p>还是说回我开卡宴的朋友，他现在有点后悔当初错过考公务员的机会，打算如果找不到合适的项目，只好重操旧业，先找个4S店去做做销售。</p><p class="note note-info">4，政府依附型经济</p><p>内地在生产上变得不再被需要的后果是，过去几年所有内地省份的财政收入都无法承担财政开销，需要划拨沿海地区的收入补血。</p><p>在财政上，整个内地都在变成负资产，而且这种趋势不会发生反转。</p><p>那么GDP是谁创造的？</p><p>以我老家所在的绵阳市北川县为例，北川县2017年GDP是50亿，政府公共预算收入是4.51亿，而政府支出是24.45亿。对比地震前的2007年，北川的GDP增长了4倍，而政府支出增长了8倍。</p><p>整个绵阳市2017年的GDP是2075亿，政府的公共预算收入是111亿，支出是416亿。跟2007年比较，绵阳的GDP增长了3倍，政府支出增长了4倍，此外还增加了约200亿地方债。如果拿绵阳和我生活的广州市番禺区做个对比，2017年番禺区的GDP和绵阳差不多，也是2000亿，番禺的政府公共预算收入是141亿，高于绵阳的111亿，但番禺的公共预算支出是133亿，远低于绵阳的416亿。</p><p>这时候我们会发现真正的内地特色：政府是经济活动的主体。</p><p>在这种大环境下，如果进入体制内，你就是食利者，能够参与分蛋糕。如果你在体制外，最有价值的方向也是参与分体制内的大蛋糕，这也就难怪生意人眼中本地最主要是生意就是“挣政府的钱”——零八年以来大量涌现的本地新富，主要是因为抢到了政府的基建蛋糕，政府工程的钱太容易挣，扣除关系和行贿成本，两台挖掘机一年也可以挣一两百万。</p><p>这就是我所谓的“政府依附性经济”，即本地主要的经济活动是围绕政府支出展开的，政府开支带来的增长只惠及少数人，政府工作人员带来的消费力上升则可以缔造虚假繁荣，由此产生由基础建设和投资拉动的“钢筋水泥现代化”与民间的低收入、高失业率并存。如果没有政府主导的基建和政府雇员的消费，这些地方的经济活动完全是另一番光景。</p><p>最有代表性的是政府倾力打造的经济开发区，本地的经济开发区到处破产企业，银行的朋友说，这里面的大部分企业都是因为政府扶持而存在的，一旦拿到贷款或者补贴，企业的使命也就结束了。</p><p>政府依附型经济本身也是自我加强的，地方政府发现，花更高的成本供养更多的人，搞更多的基建（争当“基建狂魔”），才能在转移支付中分到更多的钱。去年四川推出了新的行政和事业单位退休工资政策，按照这个政策，未来几年后退休的普通乡镇公务员或小学教师，都可以拿到每月上万元的退休金——这个政策最后因没有得到同等利益的已退休人员的强烈抗议而中止。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210614162527.jpeg" alt="img"></p><p>四川有不低的失业率</p><p>不过我觉得，内地变成政府依附性经济，最大的问题不是变成纯粹的财政负资产，而是在未来的经济分工中，彻底失去参与的机会。</p><p>那么也就是民间经济像东北一样沦陷，而政府开销则不受影响，甚至越来越高，以维持GDP数字。</p><p class="note note-info"> 5，沿海与内地</p><p>如果内地的崩溃是必然的，然后沿海会不会受其拖累呢？</p><p>我认为内地的崩溃并不必然拖累沿海，相反，沿海作为最后的税收奶牛，会得到最多的发展机会和政策资源，因为这些地方垮了就什么都没了。为了经济发展而放开土地，保护私产，开放金融和通信，一切皆有可能，必须得让沿海挣钱，才能养活中国。</p><p>除了经济状况的撕裂，未来内地和沿海可能会因为这些原因，产生其他方面的差异。</p><p>其实，如果解开户籍和土地制度这一对锁链，内地的未来也未必悲观，内地人可以自由的往沿海移民，而越来越变得地广人稀的内地，土地可以被资本集中，产生出巨大的价值。</p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>collection</tag>
      
      <tag>家乡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid字体更换</title>
    <link href="/article/88a73be6/"/>
    <url>/article/88a73be6/</url>
    
    <content type="html"><![CDATA[<h1 id="fluid字体更换"><a href="#fluid字体更换" class="headerlink" title="fluid字体更换"></a>fluid字体更换</h1><p>参考链接：</p><p><a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E5%85%A8%E5%B1%80%E5%AD%97%E4%BD%93">配置指南 | Hexo Fluid</a></p><p><a href="https://erenship.com/posts/40222.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93">Hexo’s Fluid 主题私人定制（持续更新） - Eren の 宇宙船</a></p><p><a href="https://bestzuo.cn/posts/notoserifsc.html">博客网站字体设置：思源宋体</a></p><p><a href="https://fonts.google.com/">Browse Fonts - Google Fonts</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/font-family">font-family - CSS（层叠样式表） | MDN</a></p><p><a href="https://sspai.com/post/38705">思源宋体，如何评价，以及如何正确使用 - 少数派</a></p><hr><h2 id="衬线体和无衬线体"><a href="#衬线体和无衬线体" class="headerlink" title="衬线体和无衬线体"></a>衬线体和无衬线体</h2><p>维基百科的解析：</p><p>衬线体（英语：Serif）是一种有衬线的字体，又称为有衬线体、衬线字、曲线描边字，俗称白体字；而与之相对的，没有衬线的字体则被称为无衬线体。衬线是字形笔画的起始段与末端的装饰细节部分。</p><p>无衬线体（法语：sans-serif）指没有衬线的字体，与衬线字体相反，完全抛弃装饰衬线，只剩下主干，造型简明有力，更具现代感，起源也很晚。适用于标题、广告，瞬间的识别性高。在汉字等东亚字体中称“黑体”，与有衬线的“白体”相对。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210614143120.png" alt="无衬线体和衬线体区别"></p><h2 id="思源宋体"><a href="#思源宋体" class="headerlink" title="思源宋体"></a>思源宋体</h2><p><strong>思源宋体</strong>（英语：Source Han Serif，Google公司则称Noto Serif CJK，“思源”一词来自于成语“饮水思源”）是<a href="https://zh.wikipedia.org/wiki/Adobe">Adobe</a>与<a href="https://zh.wikipedia.org/wiki/Google">Google</a>所领导开发的开放源代码字体家族，使用<a href="https://zh.wikipedia.org/wiki/SIL%E9%96%8B%E6%94%BE%E5%8E%9F%E5%A7%8B%E7%A2%BC%E5%AD%97%E5%9E%8B%E6%8E%88%E6%AC%8A">SIL开放源代码字体许可</a>在 <a href="https://zh.wikipedia.org/wiki/GitHub">GitHub</a> 上发布。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210614143759.png" alt="image-20210614143742710"></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210614143923.webp" alt="img"></p><h2 id="使用思源宋体"><a href="#使用思源宋体" class="headerlink" title="使用思源宋体"></a>使用思源宋体</h2><p>2018 年在 Google Fonts 上已经托管了思源宋体，所以我们可以直接通过托管引入到我们的博客中。打开 <a href="https://fonts.google.com/">Google Fonts</a>，搜索思源宋体的英文名：<code>Noto Serif SC</code>，在列表中选择我们个人觉得合适的字体样式，点击右侧的 <code>Select this style</code>，注意此处可根据自己需要选择多个样式。记录下<code>link</code>链接。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210614144419.png" alt="image-20210614144406967"></p><p>新建font.css,相对路径为source\css\font.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span>, <span class="hljs-selector-class">.markdown-body</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: -apple-system, <span class="hljs-string">&#x27;Nimbus Roman No9 L&#x27;</span>, <span class="hljs-string">&#x27;PingFang SC&#x27;</span>, <span class="hljs-string">&#x27;Hiragino Sans GB&#x27;</span>, <span class="hljs-string">&#x27;Noto Serif SC&#x27;</span>, <span class="hljs-string">&#x27;Microsoft Yahei&#x27;</span>, <span class="hljs-string">&#x27;WenQuanYi Micro Hei&#x27;</span>, <span class="hljs-string">&#x27;ST Heiti&#x27;</span>, serif;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 <code>-apple-system</code>、<code>Nimbus Roman No9 L</code> 分别对应 Windows、macOS&#x2F;iOS、Linux 下三种系统内置英文字体，<code>PingFang SC</code>（苹方）、<code>Hiragino Sans GB</code>（冬青黑体）、<code>Microsoft Yahei</code>（微软雅黑）对应三种系统内置中文字体（按照上文说法，Apple 系列在前，Windows 在最后），<code>Josefin Sans</code> 和 <code>Noto Serif SC</code>（思源宋体）则是两套允许免费使用的第三方字体。</p><p>修改_config.yml里面的custom_css和custom_head：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 主题字体配置</span><br><span class="hljs-comment"># Font</span><br><span class="hljs-attr">font:</span><br>  <span class="hljs-attr">font_size:</span> <span class="hljs-string">18px</span><br>  <span class="hljs-attr">font-family:</span><br>  <span class="hljs-comment">#font-family: Georgia, -apple-system, &#x27;Nimbus Roman No9 L&#x27;, &#x27;PingFang SC&#x27;, &#x27;Hiragino Sans GB&#x27;, &#x27;Noto Serif SC&#x27;, &#x27;Microsoft Yahei&#x27;, &#x27;WenQuanYi Micro Hei&#x27;, &#x27;ST Heiti&#x27;, sans-serif;</span><br>  <span class="hljs-comment">#font_family: KaiTi, &quot;Noto Serif SC&quot;, Georgia, sans, serif;</span><br>  <span class="hljs-attr">code_font_size:</span> <span class="hljs-number">90</span><span class="hljs-string">%</span><br><br><span class="hljs-comment"># 指定自定义 .js 文件路径，支持列表；路径是相对 source 目录，如 /js/custom.js 对应存放目录 source/js/custom.js</span><br><span class="hljs-comment"># Specify the path of your custom js file, support list. The path is relative to the source directory, such as `/js/custom.js` corresponding to the directory `source/js/custom.js`</span><br><span class="hljs-attr">custom_js:</span><br><br><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><br><span class="hljs-comment"># The usage is the same as custom_js</span><br><span class="hljs-attr">custom_css:</span> <span class="hljs-string">/css/font.css</span><br><br><span class="hljs-comment"># 自定义 &lt;head&gt; 节点中的 HTML 内容</span><br><span class="hljs-comment"># Customize &lt;head&gt; HTML content</span><br><span class="hljs-comment">#思源宋体</span><br><span class="hljs-attr">custom_head:</span> <span class="hljs-string">&#x27;&lt;link href=&quot;https://fonts.googleapis.com/css2?family=Noto+Serif+SC&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt;&#x27;</span><br><br><span class="hljs-comment"># 自定义底部 HTML 内容（位于 footer 上方），注意不要和 `post: custom` 配置冲突</span><br><span class="hljs-comment"># Customize the HTML content at the bottom (located above the footer), be careful not to conflict with `post: custom`</span><br><span class="hljs-attr">custom_html:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>想查看字体设置是否生效，可以安装以下插件查看（打开的网页需要重新刷新）</p><p><a href="https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm">WhatFont - Chrome 网上应用店</a></p><p>类似于这种效果</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210614141407.png" alt="image-20210614140824957"></p>]]></content>
    
    
    <categories>
      
      <category>Hexo相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每个人的家乡都在沦陷</title>
    <link href="/article/569c7f1/"/>
    <url>/article/569c7f1/</url>
    
    <content type="html"><![CDATA[<h1 id="每个人的家乡都在沦陷"><a href="#每个人的家乡都在沦陷" class="headerlink" title="每个人的家乡都在沦陷"></a>每个人的家乡都在沦陷</h1><blockquote><p>作者：肉唐僧</p><p>脚下那一抹没有苔痕的绿意，就是我心底的故乡吧，我想。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210614023039.jpeg" alt="brown wooden bridge over river"></p><p>我父母都是苏州人。我父亲大学毕业后分配到大连，没两年，我妈也调过去了。唉，大连的日子真苦啊！那时候的省革委会主任陈锡联有个外号叫陈三两，意思是辽宁人民每人每月三两油。我至今还记得小时候我爸妈吃高粱米或是玉米面饼子，把仅有的一点点“细粮”做成白米饭或馒头给我吃。当然也记得卖肉窗口那长长的队伍——每个人都对卖肉的胁肩谄笑，巴望着自己的那张肉票能买一份尽量肥一点儿的肉，回去好熬猪大油。</p><p>这样的生活对于苏州人来说是无法容忍的。我妈总是抱怨，挂在嘴边的话是“上了贼船”。于是，我爸就挖空心思往南方调动。可他学的是飞机发动机专业，手指头掐来掐去，大米猪肉最多的地方就只有北京了。多次活动之后，终于有了希望，部里的大官在大连和我爸分手时的告别语都是“咱北京见”了，可人家回去一查，我爷爷是个国民党警察，日本人来了之后还“伪”过。这样的坏分子后代怎么能混进首都呢？于是未遂。</p><p>我妈继续抱怨，我爸只好退而求其次，要求调到安徽当阳一个很小的厂子去，为的就是能吃上大米。这个理由实在是上不了桌面，被领导半嗔半怒一通臭损之后，也就彻底铁下心来，扎根大连了。</p><p>但我妈不能接受孩子们也受这份罪。所以她都是回苏州生孩子，然后让我姥姥姥爷带。我哥和我姐都是这样。到了我，却出了意外。</p><p>我出生的前一年，我姥爷得了一场重病，买了一付寿材冲喜。后来病好了，那付棺材板就一直戳在门后的水缸边上。我还没满月的一个晚上，大人们在喝茶聊天，我睡在我妈身边的一个小床上，我哥和我姐在水缸盖子上赌硬币——用一枚硬币去压另一枚硬币的沿儿，压翻了算赢。不知怎么的，就把一块棺材板弄倒了，正砸在我脑袋上。很奇怪，没见血啊包什么的，我甚至连哭都没哭。这让全家人感到大大的不安。我姥姥因而拒绝带我，怕日后有个痴呆蠢傻什么的说不清楚。</p><p>就这样，我成了全家人眼里最倒霉的人。我妈带我回大连的时候，据说场面很感人，苏州的亲戚个个泪眼婆娑，觉得我这么小就开始去大连啃苞米面饼子，实在是“作孽”。这个棺材板事件的另一个继发效应是：我爸非常热衷于给我出脑筋急转弯题目。记得有一次我爸的一个同事让我猜一个谜语，其实就是那个思芬克斯之谜。那次不知怎么的就蒙出来了。我爸妈那叫一个狂喜，心里的石头算是落了地。</p><p>就这么着，一直到幼儿园大班的时候才回苏州。让我对苏州、对故乡这个概念，有了一层说不清楚的隔膜。时至今日，不论身在何处，都有一种“外人”的感觉。</p><p>在苏州，最不习惯的东西就是马桶，那是我死也不肯用的。弄堂里就有一个公共厕所，那同样令人讨厌。所以，我总是站在大门的门槛上朝外撒尿。我姥爷看到，就会满脸堆笑地用手指在我的尿流上打一下。这让我很奇怪——他不嫌脏么？以后懂事了才知道，他不舍得说我，只好用这样温柔的方式来尽一个长辈训教的义务。</p><p>二姨夫是个讨厌的人，因为他负责定期带我去理发和洗澡。弄堂口有一家扬州人开的剃头店，她家的二女儿就像画里的人一样好看，眉毛弯弯的，眼睛会说话，比我大一岁。第一次看见她的时候她正在吃一根咸支卜，见我目不转睛地盯着她看，以为我馋的是那根支卜，就把嘴外面的那一半给了我。中学的时候学鲁迅的豆腐西施，一下子就想到了那个姑娘。多年后回苏州，又见到她一次，还是在她家的店里，正在奶一个半岁大的孩子。乳房软软的，下垂得很厉害。眼睛不再会说话了。</p><p>我二姨夫的可恨之处是他一定要把我带到石路上的一家店去剃头。这使我对剃头有了双重的抵触情绪。另外，每次洗完澡，他都要大刺刺躺在椅子上，找人给他扦脚，和电影里的剥削阶级一模一样。</p><p>相比之下，我二姨的两个女儿，也就是我的两个表姐，是最可爱的人。那个时候，我姥姥给我哥每天一毛钱的零花钱，我和我姐是五分钱。我的习惯是每天花三分钱买一支棒冰，剩下的两分钱买云片糕。有的时候，也会步行到石路去买一支五分钱的赤豆棒冰。我姐姐总是劝我攒几天，然后和她搭伙一起买小核桃，她认为这样才最合算。我对此有不同的看法，我认为每天吃棒冰和云片糕，隔三岔五地吃我姐的小核桃才最合算。</p><p>我的大表姐插队去了昆山，三天两头泡病号逃回来，和她一起逃回来的还有她的男朋友。有一次我去二姨家，正碰上这位男朋友把我大表姐压在身子下面“欺负”她。我大怒，转身要去报告我姥爷。那小子一开始掏出个两毛钱的票子，根本没起作用。一直涨到五毛，我才算消了气。很多年以后，我大表姐夫还在提这事儿。他在昆山一天的工分才六分钱，五毛钱，当时是多大的一笔款项啊！</p><p>我的二表姐先后谈过两个男朋友，全让我赶上了。第一个是个大学生，角（念“路”，没这个字）直农村的。那时候谈朋友，不过就是每人推一辆自行车，在马路上走来走去，连手都不碰一下。他俩与众不同之处在于每人自行车后座上都有一个孩子——我和我姐姐。敲扁橄榄、奶油话梅、小核桃，他们一路走，我们一路吃，真开心！</p><p>后来不知道为什么这个大学生来得就少了，大概是被我姐俩吃穷了，抗不住了。二表姐的第二任男朋友比较有钱，不但让我们坐在自行车后座上管够吃，甚至还带我们去观前街冷饮店吃过几次——一毛钱的高级冷饮，还有酸梅汤。那位第一任男友，现在已经完全记不起长相，偶尔想起他，却只是“通感”到个儿大水灵的荸荠上去了。</p><p>馋的毛病一直保留到现在。时至今日，还是让我哥常年给我寄一种苏州特有的小奶油瓜子。躺在椅子上一边看书一边嗑，我认为人生的快乐莫过于此。</p><p>不说吃了，说点儿别的吧。</p><p>在苏州，生活的主旋律就是河。那时候，家家吃水都是直接从河里打，倒进水缸里之后，再放几块明矾搅一搅。上午有穿着东吴特色服装的乡下人摇着小船挨条巷子叫卖新鲜的韭菜和苋菜。河中间总有汽船拖了长长的一串水泥船，来来回回地运黄沙。谁家要买个酱油什么的，就会求在河里游泳的小伙子吊住运沙船的船帮去红旗桥，买了再等反向的汽船吊回来。下午夕阳西下的时候，女人们拎着大木桶到河边来洗衣服，家家的隐私在此变形和传播。没有新闻的日子里，女人们就会拿无锡人的口音开玩笑，这是个永不厌倦的话题。比如，无锡人管月亮叫“亮月”、管螺丝叫“丝螺”，无锡人划的两条船要撞还没撞到的时候，大家都会一齐大叫“勿好哉，勿好哉！”咚地一声撞到之后，两条船上的人反倒抚掌叹曰：“那么好哉！”</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210614015146.jpeg" alt="有桥梁和房子的运河"></p><p>我家对门的孤老太太，是一个国民党军官的小老婆，年轻的时候是唱评弹的。每到吃过晚饭，河边的女人一片欢声笑语之际，她就会在堂屋的八仙桌边坐定，掏出一块抹布一样的脏手绢唱上一段。主题都是缅怀先夫的，但每天的词都会有创新。居委会里的干部来了几次要她注意唱词的内容，不要给国民党反动派涂脂抹粉，并威胁她“当心捉进去”，但都毫无效果。只好由她去了。评弹我大多听不懂，除了毛主席的那首《蝶恋花.答李淑一》。只记得每四句一段，最后一句的最后两个字是一个字、一个字一顿一顿地唱出来，这是评弹特有的韵味儿。比如：每日里，孤灯寒衾，长夜漫漫秋风——沉——寂！</p><p>在我的心里，我是把苏州当成自己的故乡的。但是遗憾，我的苏州话从没过关过，总是停留在洋泾浜的水平。反倒是上海话的水平要高些。每念及辛弃疾的“醉里吴音相媚好，谁家白发翁媪”，心里总有些茫然。记得河边上有一张大石桌，是用来把衣服摊开来拿刷子往上刷肥皂的。长年累月的肥皂水，把那块石板漂得非常干净滑腻，完全不长青苔。只是在桌脚的底部，有那么淡淡的一抹绿意。无聊的时候，总是一个人坐在上面，看河面上大大小小的船，看面色黢黑、脚丫肥硕的船娘在船尾升火做饭。</p><p>脚下那一抹没有苔痕的绿意，就是我心底的故乡吧，我想。</p><hr><p><em>图片来自Unsplash</em></p>]]></content>
    
    
    <categories>
      
      <category>转载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>collection</tag>
      
      <tag>家乡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓SystemProperties.set()方法权限问题</title>
    <link href="/article/350fc249/"/>
    <url>/article/350fc249/</url>
    
    <content type="html"><![CDATA[<p>对于系统中的每个进程来说：</p><p>读取属性值对任何进程都是没有限制的，直接由本进程从共享区域中读取。</p><p>修改属性值则必须通过Init进程完成，同时Init进程还需要检查发起请求的进程是否具有相应的权限。</p><h1 id="安卓5-0之前"><a href="#安卓5-0之前" class="headerlink" title="安卓5.0之前"></a>安卓5.0之前</h1><p><a href="https://www.androidos.net.cn/android/4.4w_r1/xref/system/core/init/property_service.c">安卓4.4 system&#x2F;core&#x2F;init&#x2F;property_service.c源代码:</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><code class="hljs java">..........<br><br><span class="hljs-comment">/* White list of permissions for setting property services. */</span><br>struct &#123;<br>    const <span class="hljs-type">char</span> *prefix;<br>    unsigned <span class="hljs-type">int</span> uid;<br>    unsigned <span class="hljs-type">int</span> gid;<br>&#125; property_perms[] = &#123;<br>    &#123; <span class="hljs-string">&quot;net.rmnet0.&quot;</span>,      AID_RADIO,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;net.gprs.&quot;</span>,        AID_RADIO,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;net.ppp&quot;</span>,          AID_RADIO,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;net.qmi&quot;</span>,          AID_RADIO,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;net.lte&quot;</span>,          AID_RADIO,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;net.cdma&quot;</span>,         AID_RADIO,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;ril.&quot;</span>,             AID_RADIO,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;gsm.&quot;</span>,             AID_RADIO,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;persist.radio&quot;</span>,    AID_RADIO,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;net.dns&quot;</span>,          AID_RADIO,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;sys.usb.config&quot;</span>,   AID_RADIO,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;net.&quot;</span>,             AID_SYSTEM,   <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;dev.&quot;</span>,             AID_SYSTEM,   <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;runtime.&quot;</span>,         AID_SYSTEM,   <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;hw.&quot;</span>,              AID_SYSTEM,   <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;sys.&quot;</span>,             AID_SYSTEM,   <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;sys.powerctl&quot;</span>,     AID_SHELL,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;service.&quot;</span>,         AID_SYSTEM,   <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;wlan.&quot;</span>,            AID_SYSTEM,   <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;bluetooth.&quot;</span>,       AID_BLUETOOTH,   <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;dhcp.&quot;</span>,            AID_SYSTEM,   <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;dhcp.&quot;</span>,            AID_DHCP,     <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;debug.&quot;</span>,           AID_SYSTEM,   <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;debug.&quot;</span>,           AID_SHELL,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;log.&quot;</span>,             AID_SHELL,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;service.adb.root&quot;</span>, AID_SHELL,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;service.adb.tcp.port&quot;</span>, AID_SHELL,    <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;persist.sys.&quot;</span>,     AID_SYSTEM,   <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;persist.service.&quot;</span>, AID_SYSTEM,   <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;persist.security.&quot;</span>, AID_SYSTEM,   <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;persist.service.bdroid.&quot;</span>, AID_BLUETOOTH,   <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-string">&quot;selinux.&quot;</span>         , AID_SYSTEM,   <span class="hljs-number">0</span> &#125;,<br>    &#123; NULL, <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;<br>&#125;;<br><br>.........<br><br>    <br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">check_mac_perms</span><span class="hljs-params">(const <span class="hljs-type">char</span> *name, <span class="hljs-type">char</span> *sctx)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (is_selinux_enabled() &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-type">char</span> *tctx = NULL;<br>    const <span class="hljs-type">char</span> *class = <span class="hljs-string">&quot;property_service&quot;</span>;<br>    const <span class="hljs-type">char</span> *perm = <span class="hljs-string">&quot;set&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (!sctx)<br>        <span class="hljs-keyword">goto</span> err;<br><br>    <span class="hljs-keyword">if</span> (!sehandle_prop)<br>        <span class="hljs-keyword">goto</span> err;<br><br>    <span class="hljs-keyword">if</span> (selabel_lookup(sehandle_prop, &amp;tctx, name, <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">goto</span> err;<br><br>    <span class="hljs-keyword">if</span> (selinux_check_access(sctx, tctx, class, perm, name) == <span class="hljs-number">0</span>)<br>        result = <span class="hljs-number">1</span>;<br><br>    freecon(tctx);<br> err:<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">check_control_mac_perms</span><span class="hljs-params">(const <span class="hljs-type">char</span> *name, <span class="hljs-type">char</span> *sctx)</span><br>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *  Create a name prefix out of ctl.&lt;service name&gt;</span><br><span class="hljs-comment">     *  The new prefix allows the use of the existing</span><br><span class="hljs-comment">     *  property service backend labeling while avoiding</span><br><span class="hljs-comment">     *  mislabels based on true property prefixes.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">char</span> ctl_name[PROP_VALUE_MAX+<span class="hljs-number">4</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> snprintf(ctl_name, sizeof(ctl_name), <span class="hljs-string">&quot;ctl.%s&quot;</span>, name);<br><br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span> || (size_t) ret &gt;= sizeof(ctl_name))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">return</span> check_mac_perms(ctl_name, sctx);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Checks permissions for starting/stoping system services.</span><br><span class="hljs-comment"> * AID_SYSTEM and AID_ROOT are always allowed.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Returns 1 if uid allowed, 0 otherwise.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">check_control_perms</span><span class="hljs-params">(const <span class="hljs-type">char</span> *name, unsigned <span class="hljs-type">int</span> uid, unsigned <span class="hljs-type">int</span> gid, <span class="hljs-type">char</span> *sctx)</span> &#123;<br><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">if</span> (uid == AID_SYSTEM || uid == AID_ROOT)<br>      <span class="hljs-keyword">return</span> check_control_mac_perms(name, sctx);<br><br>    <span class="hljs-comment">/* Search the ACL */</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; control_perms[i].service; i++) &#123;<br>        <span class="hljs-keyword">if</span> (strcmp(control_perms[i].service, name) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((uid &amp;&amp; control_perms[i].uid == uid) ||<br>                (gid &amp;&amp; control_perms[i].gid == gid)) &#123;<br>                <span class="hljs-keyword">return</span> check_control_mac_perms(name, sctx);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Checks permissions for setting system properties.</span><br><span class="hljs-comment"> * Returns 1 if uid allowed, 0 otherwise.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">check_perms</span><span class="hljs-params">(const <span class="hljs-type">char</span> *name, unsigned <span class="hljs-type">int</span> uid, unsigned <span class="hljs-type">int</span> gid, <span class="hljs-type">char</span> *sctx)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    unsigned <span class="hljs-type">int</span> app_id;<br><br>    <span class="hljs-keyword">if</span>(!strncmp(name, <span class="hljs-string">&quot;ro.&quot;</span>, <span class="hljs-number">3</span>))<br>        name +=<span class="hljs-number">3</span>;<br><br>    <span class="hljs-keyword">if</span> (uid == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> check_mac_perms(name, sctx);<br><br>    app_id = multiuser_get_app_id(uid);<br>    <span class="hljs-keyword">if</span> (app_id == AID_BLUETOOTH) &#123;<br>        uid = app_id;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; property_perms[i].prefix; i++) &#123;<br>        <span class="hljs-keyword">if</span> (strncmp(property_perms[i].prefix, name,<br>                    strlen(property_perms[i].prefix)) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((uid &amp;&amp; property_perms[i].uid == uid) ||<br>                (gid &amp;&amp; property_perms[i].gid == gid)) &#123;<br><br>                <span class="hljs-keyword">return</span> check_mac_perms(name, sctx);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>.......<br>    <br> <br><span class="hljs-keyword">void</span> <span class="hljs-title function_">handle_property_set_fd</span><span class="hljs-params">()</span><br>&#123;<br>    prop_msg msg;<br>    <span class="hljs-type">int</span> s;<br>    <span class="hljs-type">int</span> r;<br>    <span class="hljs-type">int</span> res;<br>    struct ucred cr;<br>    struct sockaddr_un addr;<br>    <span class="hljs-type">socklen_t</span> <span class="hljs-variable">addr_size</span> <span class="hljs-operator">=</span> sizeof(addr);<br>    <span class="hljs-type">socklen_t</span> <span class="hljs-variable">cr_size</span> <span class="hljs-operator">=</span> sizeof(cr);<br>    <span class="hljs-type">char</span> * source_ctx = NULL;<br><br>    <span class="hljs-keyword">if</span> ((s = accept(property_set_fd, (struct sockaddr *) &amp;addr, &amp;addr_size)) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* Check socket options here */</span><br>    <span class="hljs-keyword">if</span> (getsockopt(s, SOL_SOCKET, SO_PEERCRED, &amp;cr, &amp;cr_size) &lt; <span class="hljs-number">0</span>) &#123;<br>        close(s);<br>        ERROR(<span class="hljs-string">&quot;Unable to receive socket options\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    r = TEMP_FAILURE_RETRY(recv(s, &amp;msg, sizeof(msg), <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">if</span>(r != sizeof(prop_msg)) &#123;<br>        ERROR(<span class="hljs-string">&quot;sys_prop: mis-match msg size received: %d expected: %d errno: %d\n&quot;</span>,<br>              r, sizeof(prop_msg), errno);<br>        close(s);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">switch</span>(msg.cmd) &#123;<br>    <span class="hljs-keyword">case</span> PROP_MSG_SETPROP:<br>        msg.name[PROP_NAME_MAX-<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        msg.value[PROP_VALUE_MAX-<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (!is_legal_property_name(msg.name, strlen(msg.name))) &#123;<br>            ERROR(<span class="hljs-string">&quot;sys_prop: illegal property name. Got: \&quot;%s\&quot;\n&quot;</span>, msg.name);<br>            close(s);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        getpeercon(s, &amp;source_ctx);<br><br>        <span class="hljs-keyword">if</span>(memcmp(msg.name,<span class="hljs-string">&quot;ctl.&quot;</span>,<span class="hljs-number">4</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// Keep the old close-socket-early behavior when handling</span><br>            <span class="hljs-comment">// ctl.* properties.</span><br>            close(s);<br>            <span class="hljs-keyword">if</span> (check_control_perms(msg.value, cr.uid, cr.gid, source_ctx)) &#123;<br>                handle_control_message((<span class="hljs-type">char</span>*) msg.name + <span class="hljs-number">4</span>, (<span class="hljs-type">char</span>*) msg.value);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ERROR(<span class="hljs-string">&quot;sys_prop: Unable to %s service ctl [%s] uid:%d gid:%d pid:%d\n&quot;</span>,<br>                        msg.name + <span class="hljs-number">4</span>, msg.value, cr.uid, cr.gid, cr.pid);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (check_perms(msg.name, cr.uid, cr.gid, source_ctx)) &#123;<br>                property_set((<span class="hljs-type">char</span>*) msg.name, (<span class="hljs-type">char</span>*) msg.value);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ERROR(<span class="hljs-string">&quot;sys_prop: permission denied uid:%d  name:%s\n&quot;</span>,<br>                      cr.uid, msg.name);<br>            &#125;<br><br>            <span class="hljs-comment">// Note: bionic&#x27;s property client code assumes that the</span><br>            <span class="hljs-comment">// property server will not close the socket until *AFTER*</span><br>            <span class="hljs-comment">// the property is written to memory.</span><br>            close(s);<br>        &#125;<br>        freecon(source_ctx);<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">default</span>:<br>        close(s);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>从上面代码可以看出，有一个白名单列表来判断应用是否有权限来设置属性。一般是uid为AID_SYSTEM的系统级应用才有权限设置属性，而且属性名字前缀也要匹配白名单，比如persist.sys.开头。</p><h1 id="安卓5开始"><a href="#安卓5开始" class="headerlink" title="安卓5开始"></a>安卓5开始</h1><p><a href="https://www.androidos.net.cn/android/5.0.1_r1/xref/system/core/init/property_service.c">安卓5.0.1 system&#x2F;core&#x2F;init&#x2F;property_service.c源代码</a>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs java">.......<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">check_mac_perms</span><span class="hljs-params">(const <span class="hljs-type">char</span> *name, <span class="hljs-type">char</span> *sctx)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (is_selinux_enabled() &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-type">char</span> *tctx = NULL;<br>    const <span class="hljs-type">char</span> *class = <span class="hljs-string">&quot;property_service&quot;</span>;<br>    const <span class="hljs-type">char</span> *perm = <span class="hljs-string">&quot;set&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (!sctx)<br>        <span class="hljs-keyword">goto</span> err;<br><br>    <span class="hljs-keyword">if</span> (!sehandle_prop)<br>        <span class="hljs-keyword">goto</span> err;<br><br>    <span class="hljs-keyword">if</span> (selabel_lookup(sehandle_prop, &amp;tctx, name, <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">goto</span> err;<br><br>    <span class="hljs-keyword">if</span> (selinux_check_access(sctx, tctx, class, perm, (<span class="hljs-keyword">void</span>*) name) == <span class="hljs-number">0</span>)<br>        result = <span class="hljs-number">1</span>;<br><br>    freecon(tctx);<br> err:<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">check_control_mac_perms</span><span class="hljs-params">(const <span class="hljs-type">char</span> *name, <span class="hljs-type">char</span> *sctx)</span><br>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *  Create a name prefix out of ctl.&lt;service name&gt;</span><br><span class="hljs-comment">     *  The new prefix allows the use of the existing</span><br><span class="hljs-comment">     *  property service backend labeling while avoiding</span><br><span class="hljs-comment">     *  mislabels based on true property prefixes.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">char</span> ctl_name[PROP_VALUE_MAX+<span class="hljs-number">4</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> snprintf(ctl_name, sizeof(ctl_name), <span class="hljs-string">&quot;ctl.%s&quot;</span>, name);<br><br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span> || (size_t) ret &gt;= sizeof(ctl_name))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">return</span> check_mac_perms(ctl_name, sctx);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Checks permissions for setting system properties.</span><br><span class="hljs-comment"> * Returns 1 if uid allowed, 0 otherwise.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">check_perms</span><span class="hljs-params">(const <span class="hljs-type">char</span> *name, <span class="hljs-type">char</span> *sctx)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    unsigned <span class="hljs-type">int</span> app_id;<br><br>    <span class="hljs-keyword">if</span>(!strncmp(name, <span class="hljs-string">&quot;ro.&quot;</span>, <span class="hljs-number">3</span>))<br>        name +=<span class="hljs-number">3</span>;<br><br>    <span class="hljs-keyword">return</span> check_mac_perms(name, sctx);<br>&#125;<br>.......<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">handle_property_set_fd</span><span class="hljs-params">()</span><br>&#123;<br>    prop_msg msg;<br>    <span class="hljs-type">int</span> s;<br>    <span class="hljs-type">int</span> r;<br>    <span class="hljs-type">int</span> res;<br>    struct ucred cr;<br>    struct sockaddr_un addr;<br>    <span class="hljs-type">socklen_t</span> <span class="hljs-variable">addr_size</span> <span class="hljs-operator">=</span> sizeof(addr);<br>    <span class="hljs-type">socklen_t</span> <span class="hljs-variable">cr_size</span> <span class="hljs-operator">=</span> sizeof(cr);<br>    <span class="hljs-type">char</span> * source_ctx = NULL;<br>    struct pollfd ufds[<span class="hljs-number">1</span>];<br>    const <span class="hljs-type">int</span> <span class="hljs-variable">timeout_ms</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * <span class="hljs-number">1000</span>;  <span class="hljs-comment">/* Default 2 sec timeout for caller to send property. */</span><br>    <span class="hljs-type">int</span> nr;<br><br>    <span class="hljs-keyword">if</span> ((s = accept(property_set_fd, (struct sockaddr *) &amp;addr, &amp;addr_size)) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* Check socket options here */</span><br>    <span class="hljs-keyword">if</span> (getsockopt(s, SOL_SOCKET, SO_PEERCRED, &amp;cr, &amp;cr_size) &lt; <span class="hljs-number">0</span>) &#123;<br>        close(s);<br>        ERROR(<span class="hljs-string">&quot;Unable to receive socket options\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    ufds[<span class="hljs-number">0</span>].fd = s;<br>    ufds[<span class="hljs-number">0</span>].events = POLLIN;<br>    ufds[<span class="hljs-number">0</span>].revents = <span class="hljs-number">0</span>;<br>    nr = TEMP_FAILURE_RETRY(poll(ufds, <span class="hljs-number">1</span>, timeout_ms));<br>    <span class="hljs-keyword">if</span> (nr == <span class="hljs-number">0</span>) &#123;<br>        ERROR(<span class="hljs-string">&quot;sys_prop: timeout waiting for uid=%d to send property message.\n&quot;</span>, cr.uid);<br>        close(s);<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nr &lt; <span class="hljs-number">0</span>) &#123;<br>        ERROR(<span class="hljs-string">&quot;sys_prop: error waiting for uid=%d to send property message. err=%d %s\n&quot;</span>, cr.uid, errno, strerror(errno));<br>        close(s);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    r = TEMP_FAILURE_RETRY(recv(s, &amp;msg, sizeof(msg), MSG_DONTWAIT));<br>    <span class="hljs-keyword">if</span>(r != sizeof(prop_msg)) &#123;<br>        ERROR(<span class="hljs-string">&quot;sys_prop: mis-match msg size received: %d expected: %zu errno: %d\n&quot;</span>,<br>              r, sizeof(prop_msg), errno);<br>        close(s);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">switch</span>(msg.cmd) &#123;<br>    <span class="hljs-keyword">case</span> PROP_MSG_SETPROP:<br>        msg.name[PROP_NAME_MAX-<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        msg.value[PROP_VALUE_MAX-<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (!is_legal_property_name(msg.name, strlen(msg.name))) &#123;<br>            ERROR(<span class="hljs-string">&quot;sys_prop: illegal property name. Got: \&quot;%s\&quot;\n&quot;</span>, msg.name);<br>            close(s);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        getpeercon(s, &amp;source_ctx);<br><br>        <span class="hljs-keyword">if</span>(memcmp(msg.name,<span class="hljs-string">&quot;ctl.&quot;</span>,<span class="hljs-number">4</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// Keep the old close-socket-early behavior when handling</span><br>            <span class="hljs-comment">// ctl.* properties.</span><br>            close(s);<br>            <span class="hljs-keyword">if</span> (check_control_mac_perms(msg.value, source_ctx)) &#123;<br>                handle_control_message((<span class="hljs-type">char</span>*) msg.name + <span class="hljs-number">4</span>, (<span class="hljs-type">char</span>*) msg.value);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ERROR(<span class="hljs-string">&quot;sys_prop: Unable to %s service ctl [%s] uid:%d gid:%d pid:%d\n&quot;</span>,<br>                        msg.name + <span class="hljs-number">4</span>, msg.value, cr.uid, cr.gid, cr.pid);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (check_perms(msg.name, source_ctx)) &#123;<br>                property_set((<span class="hljs-type">char</span>*) msg.name, (<span class="hljs-type">char</span>*) msg.value);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ERROR(<span class="hljs-string">&quot;sys_prop: permission denied uid:%d  name:%s\n&quot;</span>,<br>                      cr.uid, msg.name);<br>            &#125;<br><br>            <span class="hljs-comment">// Note: bionic&#x27;s property client code assumes that the</span><br>            <span class="hljs-comment">// property server will not close the socket until *AFTER*</span><br>            <span class="hljs-comment">// the property is written to memory.</span><br>            close(s);<br>        &#125;<br>        freecon(source_ctx);<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">default</span>:<br>        close(s);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br>.......<br>   <br></code></pre></td></tr></table></figure><p>去掉白名单机制，引入selinux，通过selinux来控制权限访问。如果selinux关闭，则任何应用都可以设置，不再限定系统应用。（但selinux可以设置只放行系统级应用）。</p><p>例子参考：<a href="https://blog.csdn.net/qq_25815655/article/details/85339415?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242">system.prop添加自己的字段</a></p>]]></content>
    
    
    <categories>
      
      <category>Android源码分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>属性服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo优化访问速度</title>
    <link href="/article/2da0019a/"/>
    <url>/article/2da0019a/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo优化访问速度"><a href="#Hexo优化访问速度" class="headerlink" title="Hexo优化访问速度"></a>Hexo优化访问速度</h1><p>更多详细内容请参考：<a href="https://akilar.top/posts/7c16c4bb/">Hexo 博客访问优化日记</a></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img/20210314162303.png" alt="img"></p><p>本站目前使用工具：</p><p> 用<a href="https://vercel.com/">Vercel</a>来静态托管，github每次有代码更新，它都会自动拉取并部署。<a href="https://akilar.top/posts/812734f8/">使用Vercel来加速Hexo</a></p><blockquote><p>注：如果github更新后Vercel没有自动部署，需要到Vercel的Git设置那里改成main分支。（2020年10月后github新建仓库默认分支改为main，注意更改。）</p></blockquote><p>用<a href="https://www.jsdelivr.com/?docs=gh">jsdelivr</a>来为页面静态资源提供加速。<a href="https://www.itrhx.com/2019/08/01/A27-image-hosting/">Github+jsDelivr+PicGo 打造稳定快速、高效免费图床</a>。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://akilar.top/posts/7c16c4bb/">Hexo 博客访问优化日记</a></p><p><a href="https://www.julydate.com/post/60859300/">hexo博客访问优化-CDN选用</a></p><p><a href="https://sspai.com/post/63028">Vercel ，开箱即用的网站管理小工具</a></p><p><a href="https://erenship.com/posts/db37.html">Hexo 博客站点加速不完全指南</a></p><p><a href="https://forever97.top/2020/12/11/vercel/">使用Vercel加速博客访问</a></p><p><a href="https://www.antmoe.com/posts/e33d1c55/index.html">小康大佬的教程-优雅使用JsDeliver加速文件</a></p><p><a href="https://www.itrhx.com/2019/02/10/A18-free-cdn/">免费CDN：jsDelivr + Github</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>hexo速度优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓系统应用比data分区应用版本号新怎么办</title>
    <link href="/article/feebec60/"/>
    <url>/article/feebec60/</url>
    
    <content type="html"><![CDATA[<p>安卓9代码：</p><p><a href="https://android.googlesource.com/platform/frameworks/base/+/master/services/core/java/com/android/server/pm/PackageManagerService.java">PackageManagerService</a></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Adds a new package to the internal data structures during platform initialization.</span><br><span class="hljs-comment">     * &lt;p&gt;After adding, the package is known to the system and available for querying.</span><br><span class="hljs-comment">     * &lt;p&gt;For packages located on the device ROM [eg. packages located in /system, /vendor,</span><br><span class="hljs-comment">     * etc...], additional checks are performed. Basic verification [such as ensuring</span><br><span class="hljs-comment">     * matching signatures, checking version codes, etc...] occurs if the package is</span><br><span class="hljs-comment">     * identical to a previously known package. If the package fails a signature check,</span><br><span class="hljs-comment">     * the version installed on /data will be removed. If the version of the new package</span><br><span class="hljs-comment">     * is less than or equal than the version on /data, it will be ignored.</span><br><span class="hljs-comment">     * &lt;p&gt;Regardless of the package location, the results are applied to the internal</span><br><span class="hljs-comment">     * structures and the package is made available to the rest of the system.</span><br><span class="hljs-comment">     * &lt;p&gt;<span class="hljs-doctag">NOTE:</span> The return value should be removed. It&#x27;s the passed in package object.</span><br><span class="hljs-comment">     */</span><br></code></pre></td></tr></table></figure></blockquote><p><strong>If the package fails a signature check,the version installed on &#x2F;data will be removed. If the version of the new package is less than or equal than the version on &#x2F;data, it will be ignored.</strong></p><p>意味着系统分区应用版本号小于或者等于data分区的应用，则data应用会被保留。（这里是指那些系统应用通过更新方式安装到data分区的）</p>]]></content>
    
    
    <categories>
      
      <category>AndroidFrameworkFeature</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>PackageManagerService</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux网络函数send()出错导致进程退出</title>
    <link href="/article/f453e195/"/>
    <url>/article/f453e195/</url>
    
    <content type="html"><![CDATA[<p>在Linux系统编写socket网络通信程序的时候，如果程序执行send函数，遇到了一个关闭的socket，系统就会抛出一个SIGPIPE信号。这个信号的缺省处理方法是退出当前进程，重新定义这个信号的处理方式可以避免这个情况。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//定义一个空函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">signal_send</span><span class="hljs-params">()</span>&#123;  &#125; <br><br><span class="hljs-comment">//注册信号处理方式</span><br>signal(SIGPIPE, signal_send);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>socket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>adb logcat无法清除日志</title>
    <link href="/article/63c66dd5/"/>
    <url>/article/63c66dd5/</url>
    
    <content type="html"><![CDATA[<p>您可能已经打开Android Studio，请关闭它并再次运行清除日志命令。</p>]]></content>
    
    
    <categories>
      
      <category>Android调试相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/article/4a17b156/"/>
    <url>/article/4a17b156/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
