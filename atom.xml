<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wesley&#39;s Blog</title>
  <icon>https://iwesley.top/icon.png</icon>
  <subtitle>我未曾珍惜的，我不再拥有。</subtitle>
  <link href="https://iwesley.top/atom.xml" rel="self"/>
  
  <link href="https://iwesley.top/"/>
  <updated>2025-07-18T15:45:45.082Z</updated>
  <id>https://iwesley.top/</id>
  
  <author>
    <name>Wesley</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>句子里的花园:来自微博用户吹牛大王孟豪森</title>
    <link href="https://iwesley.top/article/b6477895/"/>
    <id>https://iwesley.top/article/b6477895/</id>
    <published>2025-07-17T14:44:10.000Z</published>
    <updated>2025-07-18T15:45:45.082Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>很久很久很久以前，我经常觉得孤单，我就走到全世界最低洼的地方，大哭一场，这样不会惊动恐龙们，后来，人类把那个地方叫死海。 </p>          </div><div class="note note-info">            <p>有只小狗，它听说很远很远的地方有一座骨头山，有吃不完的骨头，它挑着行李兴冲冲就上路了，历经千辛万苦，几次差点送命，终于到了骨头山。这是一具恐龙化石，早就不能吃了。它哭了一场，但很快想到一个办法，它建了一个有趣的化石公园，门票是一根骨头。——不要放弃，生活总会用它的方式回报我们。 </p>          </div><div class="note note-success">            <p>我的冰箱制冷太强，把时间都冻住了，现在还是妇女节。女士们还可以嚣张一会儿。 </p>          </div><div class="note note-info">            <p>你光速离去，我龟速追赶，我还是追的上你，你信么？因为我知道什么叫永远。 </p>          </div><div class="note note-success">            <p>海笑是海哭的声音，海肯定是得了精神分裂症，我往海里撒点镇静剂，它就安静了。 </p>          </div><div class="note note-info">            <p>爱就是地震来了你快走，我帮你挡住海啸；相信爱就是我留下来陪你，反正你挡得住。 </p>          </div><div class="note note-success">            <p>吹牛大王公告，发字第004号：催眠灯，挂在床头，到了睡眠时间会自动变暗，以柔和的光线带您入梦；再睡不着，会散发出沁人心脾的花香助眠；再睡不着，会播放轻柔的晚安音乐；还睡不着，灯会自动掉下来把你砸晕。 </p>          </div><div class="note note-info">            <p>你伤害了我，我就给蚊子装上GPS，只咬你。 </p>          </div><div class="note note-success">            <p>被女朋友骂了，说好她一吹哨子，我五分钟之内必到，结果用了六分钟。可我是从太阳跑回来的啊！光也要八分钟啊！鞋都跑掉了！砸到月亮上多一个环形山，科学家又要嚷嚷2012了！结果就是为了看你睫毛膏有没有花！专情的人你伤不起！有木有！ </p>          </div><div class="note note-info">            <p>想到一个很严肃的问题，如果猫真的会飞，一定天下大乱。它们会糟蹋每一棵树，尸体挂满电线和高压电塔，飞得低一点的鸟都会进化出鹰一样的利喙和雨燕一样的速度，它们还会半夜敲你的窗户要吃的，大摇大摆刨掉你阳台上的花，钻进花盆睡觉……感谢主。 </p>          </div><div class="note note-success">            <p>昨天参加了一个PARTY，把热闹打包，回来分成四份放冰箱，太闲的时候拿出来用。 </p>          </div><div class="note note-info">            <p>熄灯一小时，不如把全世界的灯都打开一小时，在夜空看，地球是个发出柔和光线的小煤球。 </p>          </div><div class="note note-success">            <p>什么叫胸怀大志？同样是在地上刨坑，有的人要种树，有的人要打井，有的人要钻石油，有的人只是要解大手，我呢，要把地球做成保龄球。 </p>          </div><div class="note note-info">            <p>迄今为止所有水变油的发明思路都错了，重要的不是让别人相信水可以变成油，而是让车相信，给它加的就是汽油，所以只需要建造一个一模一样的加油站，价钱啦标号啦都一样，大家交易的时候也得说“加多少油？”但油枪里出来的是水，骗过车才是最重要的，我试验过，它们都装着一箱水高高兴兴跑了几百公里。 </p>          </div><div class="note note-success">            <p>当我还是狮身人面像的时候，把每一次对你的思念，变成一个水分子，后来，我就有了一滴眼泪。 </p>          </div><div class="note note-info">            <p>她走了，笑容凝固在空气中。如果你穿过那个路口，碰到她的笑容，一定让它留在脸上，那是世界上最美丽的表情。 </p>          </div><div class="note note-success">            <p>我写了个最伟大的悲剧，却无法排演，剧本哭的把字都洇湿了。 </p>          </div><div class="note note-info">            <p>苹果排队点卯：亚当夏娃吃的苹果、砸牛顿的苹果、乔布斯的苹果、挑起特洛伊群殴的金苹果，白雪公主啃过的毒苹果，“大苹果”纽约……都在我水果筐里，我先吃哪个捏？ </p>          </div><div class="note note-success">            <p>一个小女孩非要见她的奶奶，我只好把奶奶从天上找来，说好就一晚上，小女孩跟我商量，能不能借用我的梦一下，她们在我梦里第四层相聚，滑堕到潜意识的边缘，一晚上就是五十年……我能说什么呢？晚安，诸位。 </p>          </div><div class="note note-info">            <p>还记得年少时的猛犸，没有猩猩的夜里，维尼我受冷风吹。——这是我给动物园写的歌词，真好，要是嘴够得着，我就亲自己一口。 </p>          </div><div class="note note-success">            <p>我在太平洋上插了个红绿灯，本来想疏导鱼群，可海水见红灯也停了，后浪叠前浪已经摞了两千多米，怎么办啊，我可不想再来一场海啸！ </p>          </div><div class="note note-info">            <p>愚人节大伙儿一起合伙骗太阳吧，所有灯都开着，出门打手电筒，假装撞在电线杆上，然后大骂路灯怎么不亮，情侣们在树后卿卿我我，说没人看见，组织人在湖心岛冲着太阳赏月，白领们出门看看天回去接着睡觉。看能不能把它弄疯。 </p>          </div><div class="note note-success">            <p>长胖了，每回坐飞机天文学家都以为发生了日食。 </p>          </div><div class="note note-info">            <p>假如生活抛弃了我，我就去做全世界最开心的垃圾。 </p>          </div><div class="note note-success">            <p>美丽的夫人参观我的酒窖，问为什么所有的酒瓶子都横七竖八躺着，跟刚打过保龄球似的。我说因为酒太好，它们都醉了。 </p>          </div><div class="note note-info">            <p>世界自闭症日，我的九个人格举办选秀大赛，看谁最自闭，没赶上报名的那个赢了。 </p>          </div><div class="note note-success">            <p>为应对北京停车费暴涨，本大王特推出停车服务，方法是先用万吨水压机把您的爱车压成薄片，取车时本大王亲自把车吹回原状，保证车里所有东西完好如初，宠物孩子都能吹的不走样，收费低廉空间有限。当然，如果您想销毁什么，也可偷偷告诉我…… </p>          </div><div class="note note-info">            <p>日本警方宣布抓到了一个非常危险的恐怖分子，他带了一筐蜥蜴在前往福岛的路上被警方截获，警方宣称此人计划让蜥蜴受到核辐射，变成哥斯拉，对日本全境发动恐怖袭击。在他身上还搜到一辆玩具汽车，他辩称这是给儿子的生日礼物，日本警视厅说你以为我们没看过变形金刚么？ </p>          </div><div class="note note-success">            <p>我在海边钓鱼，好多人围观，说我钓了条鲸鱼，那是我的鱼饵好不好。 </p>          </div><div class="note note-info">            <p>明天要做个大媒，把蜘蛛侠和蜘蛛精撮合到一起，头一回张罗跨国恋，有点紧张。一个住在纽约，一个住在盘丝洞，一个成天出风头，一个和孙悟空有点扯不清楚，怎么把话说周到，是个问题。 </p>          </div><div class="note note-success">            <p>清明节，怀念我的爷爷，小时候，爷爷指着天上对我说，我们的职责就是让天空飘满牛，只要人们还能看到一线天空，就是我们的失败。我说，那他们怎么分辨白天和黑夜呢。爷爷说，我们吹奶牛，让他们同时拥有白天和黑夜。 </p>          </div><div class="note note-info">            <p>失眠的时候，用一把梳子作筛子，把风拉成龙须面，月光如水好当汤，若不是星星塞牙，这餐就完美了。 </p>          </div><div class="note note-success">            <p>今天开始晨跑，跑得太快，老要停下来等自己的影子。 </p>          </div><div class="note note-info">            <p>子爵来家借东西，走进厨房大喊一声：好大的微波炉啊！我说那是冰箱。他说冰箱怎么会这么烫！我说我想她想得心滚烫，把心拿出来放进冰箱，让它冷静一下，就成这样了。 </p>          </div><div class="note note-success">            <p>我干过最没效率的事是训练蚊子叮油箱偷汽油，再到我的油箱吐出来，一百万只蚊子才偷满一箱油，而且路上两只蚊子搞对象，热情似火，肚子里的汽油着了，引燃整支编队，一片火云之后，渣都不剩。 </p>          </div><div class="note note-info">            <p>警察问我为什么在门口划个大圆圈，我说那是车位，警察问谁的，我说给朋友的，警察问朋友开什么车，我说，飞碟。 </p>          </div><div class="note note-success">            <p>小时候有一次我失踪，后来在天上找到了，原来我睡觉的时候吹了个大鼻涕泡，鼻涕泡越来越大越来越大，就把我带到天上了。 </p>          </div><div class="note note-info">            <p>12生肖都在邀请我加入它们的名人堂，但只有老鼠最有诚意，它自愿让出名额，以后属鼠的都改叫属吹牛大王的，我还在考虑。 </p>          </div><div class="note note-success">            <p>二战的时候美国人求我带领他们潜入德军敌后，但行动失败了。虽然每次都在深夜进行，但我到哪儿哪儿的公鸡都打鸣–它们以为太阳出来了。 </p>          </div><div class="note note-info">            <p>我妹妹嗲豪森小姐放牧一群云彩，有些云彩睡着了，掉到地上，变成了绵羊。 </p>          </div><div class="note note-success">            <p>公爵想吃炒疙瘩，但要吃他从没吃过的口味，我就把他洗澡时唱歌的录音放给大家听，然后炒了一大盘鸡皮疙瘩。 </p>          </div><div class="note note-info">            <p>我梦见我梦见我梦见了她。 </p>          </div><div class="note note-success">            <p>我在天上养一群奶牛，夏天下牛奶，酸雨严重的地方下酸奶，冬天下冰淇淋，雹子天下冰棍，沙尘天下冰沙，2012下蒙牛。 –2011&#x2F;04&#x2F;28</p>          </div><div class="note note-info">            <p>别人的灵魂21克，我的灵魂21公里。 </p>          </div><div class="note note-success">            <p>我做的饭太好吃了，没到嘴里就被牙齿抢着吃了，现在我的牙都撑的像象牙那么大。 </p>          </div><div class="note note-info">            <p>你是飞刀，杀死我的年华。 </p>          </div><div class="note note-success">            <p>威廉王子的新媳妇以前追我，昨天费了好大劲才说服她不要在婚礼上唱&lt;可惜不是你&gt;。 </p>          </div><div class="note note-info">            <p>你的呼吸铺成我的路，你的眼睛把我烧成灰，爱是我的伤口，你是我的盐，我戴着思念的腮，在记忆的河流里，寻找你的航标。 </p>          </div><div class="note note-success">            <p>你们每天看到的太阳其实都不是同一个，是我点击了一颗星星给美丽的夫人看，它们在天空的屏幕上被放大了而已，流星就是我的鼠标箭头。 </p>          </div><div class="note note-info">            <p>我最失败的职业经历是婚礼牧师，新娘见了我都不嫁人了。这回英国人派了007盯我，怕我去婚礼现场，007见了我也不泡妞了。 </p>          </div><div class="note note-success">            <p>我弹过的钢琴都没有黑键，它们知道我来，都化了妆打了粉底。 </p>          </div><div class="note note-info">            <p>我的妹妹嗲豪森小姐有一个酒窝，微笑时会淌出美酒，交警查酒驾，她一笑，警察就倒地不起，大醉三天，现在她常经过的路口交警都配防毒面具。 </p>          </div><div class="note note-success">            <p>我妹妹嗲豪森小姐在湖边一站，一池子鱼汤就做好了，因为湖水一见她就沸腾了。 </p>          </div><div class="note note-info">            <p>我的妹妹嗲豪森小姐如果在泰坦尼克上，悲剧就不会发生了，因为冰山一见她就会融化。 </p>          </div><div class="note note-success">            <p>申请了个qq号，别人的小企鹅闪就闪，我的每闪一次就蹦出只活的来，据说是vip待遇，我赶紧关注了一堆美女头像，结果这些美女都长发曳地地爬出来。贞子… </p>          </div><div class="note note-info">            <p>我去演话剧，所有灯光都聚集在我身上，看不见其他人，我跟舞台监督说这样不好，舞台监督说光都是正常打的，它们被吸引到你身上，我也没辙。 </p>          </div><div class="note note-success">            <p>“我客串了一把丘比特，用箭射被选中得到爱情的人。”“好浪漫。”“浪漫个P，我把他们都射死了。” </p>          </div><div class="note note-info">            <p>公爵说他打个喷嚏，方圆十里还以为地震了，我说我冲月亮打个喷嚏，月亮上就多一座环形山。 </p>          </div><div class="note note-success">            <p>我的妹妹嗲豪森小姐有一双大眼睛，她眨眼，上眼皮半个小时才能碰到下眼皮。 </p>          </div><div class="note note-info">            <p>我的妹妹嗲豪森小姐被请到国家登山队帮助强化适应性训练，因为男人只要看见她，马上会觉得大脑缺氧。 </p>          </div><div class="note note-success">            <p>捉住一段风的教程：打开相机，静候风吹过，及时按快门，注意要打开闪光灯，风知道你在给它拍照，马上会停下不动，然后用袋子把它兜住就可以了。注意按风的级数选择相应的袋子，四级以下用塑料袋，五到七级用编织袋，八到十级用军用帆布袋，十级以上用LV，非因结实，是因为风看见名牌逃跑的欲望比较小。 </p>          </div><div class="note note-info">            <p>这会儿，如果你出门看不见星星，你一定会看见我的妹妹嗲豪森小姐，星星都跑到她的眼睛里去了。 </p>          </div><div class="note note-success">            <p>我睡菠萝床单失眠了，因为我们家床单是3D的。 </p>          </div><div class="note note-info">            <p>十年前我用圆珠笔在一个小女孩手腕上画了块表，昨天她找到我，说表一周前不走了，我问那天你遇到了什么人？她说邂逅一男孩，我说这是姻缘表，遇到对的人，时间就停止了。 </p>          </div><div class="note note-success">            <p>超光速简易方案：先找个可以围绕圆心转一圈的东西，如自行车轮，然后在车轮辐的延长线上引出一根五万公里长的细线，在细线顶端放一个小灯泡，然后把车轮转一圈，注意速度保持在一秒内，这时小灯泡走过的距离是直径乘以圆周率，半径五万公里，直径就是10万公里，乘以圆周率，超过31万4千公里，耶！ </p>          </div><div class="note note-info">            <p>小时候过六一，没礼物，我和妹妹嗲豪森小姐只能把绳子扔到云上，把云当风筝放。 </p>          </div><div class="note note-success">            <p>有一年儿童节，我和妹妹嗲豪森小姐去动物园偷小长颈鹿，拿一根棍子挑着，假装是气球带回家了。 </p>          </div><div class="note note-info">            <p>（嗲豪森小姐日记）我哥哥孟豪森男爵小时候想扮成天使请女孩跳舞，但没翅膀，我说可以用鸡翅膀粘在背上代替，他照办了，晚上哭着回来。我让你用鸡的翅膀代替，不是用肯德基的鸡翅代替！ </p>          </div><div class="note note-success">            <p>假装睡着，假装睡着，装得够像，我就杀死了失眠。 </p>          </div><div class="note note-info">            <p>千万别下雨啊，不下雨，我就没法攀着雨线回到天上，就可以名正言顺旷课了。开学，开你妹！ </p>          </div><div class="note note-success">            <p>我造了一架世界上最快的电梯，你可以在楼顶把老婆推下去，然后坐电梯到一层把她接住，当然，如果你想接的话。 </p>          </div><div class="note note-info">            <p>我还想造一架更快的电梯，你进一层的时候是9点，从顶楼出来的时候是8点59分。 </p>          </div><div class="note note-success">            <p>有人问我有没在开车时睡着，我记不清了，不过倒是有几次醒来发现自己在开车。 </p>          </div><div class="note note-info">            <p>我，我的几个人格，别打架了。让我们出发吧。 </p>          </div><div class="note note-success">            <p>命运这支贱，你射穿我也罢了，还是个飞去来器，回头再来一遍。 </p>          </div><div class="note note-info">            <p>身为伟人，我每天照镜子都要使劲抬头才能看得见自己。 </p>          </div><div class="note note-success">            <p>发改委日前决定向过桥米线征收过桥费，向现场喊加油的球迷征收燃油税。 </p>          </div><div class="note note-info">            <p>雾好大，抓一把撒点白糖就有棉花糖吃。 </p>          </div><div class="note note-success">            <p>你想抽我？抽我这个风一样的男子，你就是在抽风！ </p>          </div><div class="note note-info">            <p>雪一片一片一片一片……我是涮着吃呢还是上铁板呢？ </p>          </div><div class="note note-success">            <p>我是你的雪人，虽然我只有一根胡萝卜两个煤球一把破笤帚，但至少你饿了有吃的，冷了能取暖，进门有人扫雪，渴了我就化成一盆水。我很穷，但我对你全心全意。 </p>          </div><div class="note note-info">            <p>全世界的雪，也埋不住一颗犯贱的心！雪花见我就变八瓣儿了，它们要多两只手向偶像欢呼！Good night! </p>          </div><div class="note note-success">            <p>我的妹妹，美丽的嗲豪森小姐没见过下雪，一半雪花见了她就融化了，变成雨，另一半全身冻住，变成冰雹。显然前一半是公的，后一半是母的。 </p>          </div><div class="note note-info">            <p>这个世界上最远的距离，是我的第一顿和第二顿宵夜。 </p>          </div><div class="note note-success">            <p>晚饭请了几位女士在泰坦尼克上吃火锅，这才叫海底捞嘛。 </p>          </div><div class="note note-info">            <p>别再问我为什么不去上班了！今天是国际睡眠日！ –2012&#x2F;03&#x2F;21</p>          </div><div class="note note-success">            <p>你若安好，便是晴天。为了求雨的百姓，你快挂了吧。 </p>          </div><div class="note note-info">            <p>你不爱我，这是病，得治。 </p>          </div><div class="note note-success">            <p>这一场三分球命中率只有90%，怪我弄错了规则，以为得从本方三分线出手。 </p>          </div><div class="note note-info">            <p>我用富士山点烟，等了几百年才知道是死火山，要不要把它叫醒呢。 </p>          </div><div class="note note-success">            <p>它自杀了，用毛巾在挂钩上结束了年轻的生命，它吐了很多泡沫，死的一定很痛苦，但不管我怎么搓它，它都不再冒一个泡。它在镜子上给我留下一封信，轻生的原因竟然是虽然它一天天瘦下去，我还是叫它肥皂。 </p>          </div><div class="note note-info">            <p>我的厨子很实在，我说要减肥，他就真的不给我做宵夜。我只好告诉他，我的话得反过来听。今天我想吃西梅，然后，巴塞罗那就没有然后了…… </p>          </div><div class="note note-success">            <p>海上有漩涡是我在洗衣服，大洋环流是我在洗被罩。 </p>          </div><div class="note note-info">            <p>风太大了，我设好的频道全刮乱了。 </p>          </div><div class="note note-success">            <p>土星是我媳妇，她的戒指是我给买的。 </p>          </div><div class="note note-info">            <p>听说清明节有僵尸出没，现在种豌豆还来得及么…… </p>          </div><div class="note note-success">            <p>我跑得有多快？心仪女孩喝醉了发给前男友的胡言乱语，都是我在半路拦截的，用自己的手机拦下来给她看，她以为都是发给我的，后来就从了我了。 </p>          </div><div class="note note-info">            <p>我对她说：我希望星星变成雨洒下来。她眼里闪着惊喜的光，后来，她和其它恐龙一起灭绝了。有些事情随便说说是浪漫，千万别成真。 </p>          </div><div class="note note-success">            <p>我请美丽的夫人喝酒，一人干一壶，她说我太不绅士，我说你误会了，是你一壶，我一湖。 </p>          </div><div class="note note-info">            <p>大脸大脸，你若朝南，挡住了季风；你若朝北，阻止了寒流；你一抬头，卫星还以为板块又漂移了。 </p>          </div><div class="note note-success">            <p>坦白讲我不喜欢我的星座，夜里去改改星空的形状，把天秤改成机器猫或者梦露的样子。梦露比较好吧，有流星划过裙子还能飞起来•••••• </p>          </div><div class="note note-info">            <p>我在屋顶上拴了几万个汽球，想学飞屋环游，没想到地基太结实，现在地球已经飘到冥王星轨道外了。 </p>          </div><div class="note note-success">            <p>僵尸粉也搞快闪么？谁闪我跟谁急。“不要拿一个可怜人的希望开玩笑！”——卡德罗斯，《基督山伯爵》 </p>          </div><div class="note note-info">            <p>崇拜我的人，希望你们慎重，这是一条不归路，你们会越走越远的。 </p>          </div><div class="note note-success">            <p>喝了管胶水，想粘好破碎的心，没想到粘住了胃……老天，我求你不要让我伤心而死，你就让我饿死是吗？ </p>          </div><div class="note note-info">            <p>一衰人追求我的妹妹嗲豪森小姐，嗲豪森小姐让他送只龙猫，他去了很久，满头大汗地带回来一只猫，说试了好几千只，终于找到一只聋的。 </p>          </div><div class="note note-success">            <p>我的伯爵朋友的爷爷三月份挂了，我劝他先把遗体搁冰柜里，下个月再拿出来。清明节孝子贤孙们烧冥币，烧iphone，烧二奶，咱烧真人，那些都弱爆了。 </p>          </div><div class="note note-info">            <p>天热得太快，躲在自己的影子里凉快会儿。 </p>          </div><div class="note note-success">            <p>我长的每个心眼，都是你捅的窟窿眼儿。 </p>          </div><div class="note note-info">            <p>女人都没谱，美丽的夫人说本大王只要练成豹的身材，她就答应我，我练成了，她又说海豹不是豹。 </p>          </div><div class="note note-success">            <p>想铸个井盖，一头在北京一头在洛杉矶，让太平洋成我们家下水道。 </p>          </div><div class="note note-info">            <p>我的妹妹嗲豪森小姐有把无弦琴，白天阳光是琴弦，晚上月光是琴弦，都能弹出美妙的音乐。她不在的时候我就用它拍蒜，做炸酱面吃。 </p>          </div><div class="note note-success">            <p>以前玫瑰是没有刺的，后来有些花嚷嚷着要减肥，减啊减啊就瘦成了一根刺。摘玫瑰的时候，刺扎你，是因为她们嫉妒那些没减肥的花。——致女孩们 </p>          </div><div class="note note-info">            <p>斑点狗身上的才叫斑，斑马应该叫条形马，我开的超市每样东西上都捆一只，这是工商的规定。 </p>          </div><div class="note note-success">            <p>我的好朋友王小波走了15年了，他是我见过最搞笑的人，我很想念他。“天已经晚了，饭厅里只剩了几桌客人。有一个服务员双手叉腰站在厨房门口，好像孙二娘在看包子馅。”写的多好啊，啊啊啊啊啊啊啊啊啊！ </p>          </div><div class="note note-info">            <p>我从月亮上蹦极，蹦到你的心里，地球把你转走，我就砸穿大地，我不在乎恐龙再死一次，也不在乎第二个冰川纪。宇宙是个果核，我难道没有松鼠的勇气…… </p>          </div><div class="note note-success">            <p>太阳系是一局我没有打完的台球。 </p>          </div><div class="note note-info">            <p>上次不淡定的时候，狂奔一夜，破坏了地球的微表情，招来外星人。这次不会了。主啊，给我力量沉默吧。晚安。都别梦见我，我累了。 </p>          </div><div class="note note-success">            <p>夜里睡不着，把卢沟桥的狮子都换成真的，手贱的人小心了。 </p>          </div><div class="note note-info">            <p>你的心跳，是我的地震；你的呼吸，是我的飓风；你的安睡，是我在沙漠中，沉默守护的星空。晚安。 </p>          </div><div class="note note-success">            <p>我的妹妹嗲豪森小姐有个贝壳存钱罐，今天扔进去一粒沙子，明天就能取出一颗珍珠。我扔了一把沙子和一根绳子进去，想取出珍珠项链，结果把存钱罐胀破了。 </p>          </div><div class="note note-info">            <p>我在地球上贴了邮票，等快递把我送回天枰座。 </p>          </div><div class="note note-success">            <p>100年前，我和一帮维京海盗刷夜，让仆人把多余的冰块扔到洗手间里，仆人偷懒倒在海上，其中一冰块撞上了一艘船，那艘船叫泰坦尼克。 </p>          </div><div class="note note-info">            <p>有一次遭遇空难，我毅然把降落伞让给了邻座的女士，用她饮料柠檬片上的伞逃生了。 </p>          </div><div class="note note-success">            <p>春天就是放风筝的季节啊，我怎么能想到风筝线会刮到人家的火箭呢？ </p>          </div><p class="note note-info">我发明了一部电梯，里面的数字不是楼层，是你的年龄，你按下哪个数字，它就会把你带到那时的家门口，你会遇见还很年轻的父母，或者已经长大的孩子。他们会诧异，为什么一个陌生人在门口哭泣...... 2012/04/14</p><div class="note note-success">            <p>突然降温，没暖气了，只好把家里的钻石变成煤炭来烤火。 </p>          </div><div class="note note-info">            <p>我当蜘蛛人的时候，专业擦洗卫星，喜欢在卫星上刻小王八什么的，还把卫星的正式名字擦掉，写上喜欢的女孩的名字。想她的时候就抬头，虽然看不见，但知道她在哪儿。 </p>          </div><div class="note note-success">            <p>如果脑电波真的带电，你早被我想死了。晚安。 </p>          </div><div class="note note-info">            <p>我在每个脚印里洒下一粒种子，等它们长成参天大树，把树砍掉，为师的梅花桩大阵就布成了。 </p>          </div><div class="note note-success">            <p>人类出现之前，我和月亮玩跷跷板打发时光。 </p>          </div><div class="note note-info">            <p>我的轮胎是神户牛皮做的，到目的地正好牛皮磨穿，里面的牛肉烫熟，拿把小刀就可以割着吃了。  </p>          </div><div class="note note-success">            <p>十全十美如我是很痛苦的，因为不再有奋斗目标。 </p>          </div><div class="note note-info">            <p>小时候我在课桌上给她刻了张唱片，她说很好听。我说将来我会刻一张世界上最大的唱片给你，她说：“那我就嫁给你。”后来她和别人结婚了，婚礼上她对我说：“你没有给我刻世界上最大的唱片哦。”走的时候我留了张字条：“到土星环上看看。”（晚安。）–2012&#x2F;04&#x2F;16 </p>          </div><div class="note note-success">            <p>小时候我骗我妹妹嗲豪森小姐说每天早上要有人叫太阳起床，太阳一次忘了起床，就永远是黑夜了。后来我带她去南极偷企鹅蛋，我喝醉了，喝醉的时候，极夜刚开始。半年后，被她摇醒了。她高兴地说：“我叫了半年，它终于起床了！”（晚安） </p>          </div><div class="note note-info">            <p>有时候累了，就让影子起来走，我躺下。 </p>          </div><div class="note note-success">            <p>打雷是王母娘娘逮小三，闪电是记者在偷拍。真正的冒险家，从不想征服沙漠或跨越高山，只想去翻邻居的墙。晚安。 </p>          </div><div class="note note-info">            <p>早上和女友遛弯，看见一只猫咪溺水，我摘下女友腰上的游泳圈，猫咪得救了。我对女友说：“看见了么露丝，当初杰克真心可以活下来的。” </p>          </div><div class="note note-success">            <p>小时候我和妹妹嗲豪森小姐每天在家画毛票，去路口的老奶奶那儿买糖，每次都能骗过她，我俩以为自己是画画天才，长大了才发现不是的。 </p>          </div><div class="note note-info">            <p>你是水银海上的巨浪，扑灭了太阳，把我拍成肉酱，我变成了一封信，还盖着心形的章。晚安。 </p>          </div><div class="note note-success">            <p>我叔叔是个财迷，每次被婶婶打破鼻子，就飞奔去卖血。 </p>          </div><div class="note note-info">            <p>我妹妹嗲豪森小姐很白，北极熊站在她旁边，别人都以为是头黑熊。 </p>          </div><div class="note note-success">            <p>有一年我环游世界，捡了只猴子。医生说它失忆了。它的确行为异常，我们每经过一个瀑布，它就不管不顾往里跳，有时头破血流，有时差点淹死，谁也不知道它为什么这么做。一天我看着它头顶的印记，突然知道它是谁了。我中止旅行，把它送回了那座山。 </p>          </div><div class="note note-info">            <p>吃完早饭去跳水，十米高台，快扎到底了才发现池子里没水，赶紧朝池底吹了口气，连续6个后空翻才回到跳台上。 </p>          </div><div class="note note-success">            <p>我吞了只蜘蛛，让它在我心里结网，假装你从未来过；结果这只文艺女蜘蛛把它的心上人织在我心里，现在我每天看着各种版本的《蜘蛛侠》流口水。 </p>          </div><div class="note note-info">            <p>困了，骑肥皂泡去云里，睡个饱觉。 </p>          </div><div class="note note-success">            <p>我去过一个星球，那里的闪电会凝成固体，从几万米高空落下来，星球上全是各种形状的闪电，新的砸到旧的上面，发出电火花和类似工地的动静。我捡了两根最小的送给妹妹嗲豪森小姐，她别在头发上，再也不怕手机没电了。 </p>          </div><div class="note note-info">            <p>夏天的时候我和妹妹嗲豪森小姐会缩成一棵草那么高，去和青蛙赌钱，荷叶作赌桌，捉一星到六星瓢虫粘在一起当骰子，谁输了就去吓唬池塘边的情侣。青蛙的办法是往女孩脖子里跳，我和妹妹就假装警察大喊一声“往哪儿摸呢！”听说有几个吓出了后遗症，我们就不玩了。 </p>          </div><div class="note note-success">            <p>夸父其实是送快递的，如果不能日落之前送到，手里的货物就得免单；后羿其实是城管，为配合修建银河高速公路，强拆了九个太阳；女娲其实是美容医院的，拿五色石补天是宇宙最大的整形广告；我骑着流星在你们头顶乱窜，其实是发小广告的，天秤座新开盘了，欲购从速。 </p>          </div><div class="note note-info">            <p>我发明了一种汽车产房，两辆车开进去，第二天就能生下一个孩子，一辆奔驰和一辆宝马有很大机会生下好车比如英菲尼迪；一辆夏利和一辆松花江很可能就生下个奥拓；但也会基因突变，比如夏利和松花江配一百次能出个兰博基尼；如果奔驰配夏利，生出什么完全没谱，大多数是不能要的杂牌，门当户对很重要啊。 </p>          </div><div class="note note-success">            <p>包公额头上一个月牙就生具异相不是凡人了，我舅舅脸上一整条银河呢，别人还是只叫他大麻子。这个社会怎么了？ </p>          </div><div class="note note-info">            <p>我去过一个星球，那里雨是从地面往天空下，你哭的时候，眼泪飞上天空变成一朵云，这朵云会找到你的另一半，把眼泪洒到他身上。不管隔多远，他都会来找到你。 –2012&#x2F;04&#x2F;24</p>          </div><div class="note note-success">            <p>我养过一小猫，立志要做世界上第一只抓到鲨鱼的猫，天天在海边蹲着，此事轰动鲨鱼界，发展出好几门产业，有“围观傻猫一日游”旅行团，有赌小猫哪天放弃的博彩公司。小猫一直没放弃，鲨鱼们感动了，选了只拍过戏的鲨鱼，假装被小猫抓住咬死，横“尸”沙滩。小猫高高兴兴走了，鲨鱼们给小猫立了座铜像。 </p>          </div><div class="note note-info">            <p>人类出现之前，我每晚开演唱会，假装星星是观众席上的打火机。 </p>          </div><div class="note note-success">            <p>岁月是人生的说明书，我好不容易读懂，已经要挂了。 </p>          </div><div class="note note-info">            <p>夏天到了，我在领地四个角发射了四颗卫星，挂蚊帐。 </p>          </div><div class="note note-success">            <p>我白天假装是你的好朋友，晚上入睡前都攥着戒指，等着梦见你。晚安。  –2012&#x2F;04&#x2F;29</p>          </div><div class="note note-info">            <p>结婚的人真多啊，刚才参加一个婚礼，两对新人用一个厅，客人拼桌，台上俩司仪说相声，其中一家人安排了个环节，新人熄灯拥吻。等开灯发现吻错了，俩新郎抱一块，后来就乱了，我趁乱抢回红包回家了。 </p>          </div><div class="note note-success">            <p>我参加过的最极品的婚礼是在麦当劳，92年吧，那时候刚有麦当劳，车队、花门、气球、彩带什么都有，一对新人山盟海誓之后，宾客们排队去点餐。 </p>          </div><div class="note note-info">            <p>我把月亮改成声控的，你醒的时候它陪着你，你困了，拍拍手，只留下满天的星星。晚安。  –2012&#x2F;05&#x2F;01</p>          </div><div class="note note-success">            <p>每次看到我的猫，我都会不由自主思考生活的意义：原来完全没有意义也是一种意义。 </p>          </div><div class="note note-info">            <p>那年我去旅行，在小树林里发现一头自卑的黑熊，浆果绝收，它已经快饿死了，但死活不肯离开树林。我好说歹说带它出来，后来我不小心掉河里，它跳下去把我救上来。我看着它发呆，它说：“明白我为什么自卑了吧，我从小有白癜风，用颜料遮住的。别歧视我好吗？”——这个二货，它从来没见过自己的同类…… </p>          </div><div class="note note-success">            <p>给我的龙设计食盆，画图遇到问题，负数阶的球谐函数按理可由正数阶函数对 z-轴转 90&#x2F;m 度得到，可代入拉普拉斯方程后，无法归一化因子，删掉虚数单位也不行。这必然导致我的龙把水喝到鼻子里，郁闷，睡了。有明白的给我留言吧，想引入玻色.爱因斯坦积分的就别费劲了。试过了，没用。 </p>          </div><div class="note note-info">            <p>长城其实是烧烤一条街，古时候游牧民族负责牛羊肉，汉人负责场地——那些箭垛子明摆着是架烤串的，木炭一边出一半。隔一段时间就开个大趴替，在最大的烧烤台上烤全羊，怕来的人太多，骗大伙说是在打仗，点狼烟呢。 </p>          </div><div class="note note-success">            <p>我没放风筝，我在钓龙。 </p>          </div><div class="note note-info">            <p>我没放风筝，我在给天空贴创可贴。 </p>          </div><div class="note note-success">            <p>小时候保姆给我和妹妹讲故事，月亮本来身材很苗条，后来怀孕了，肚子就越来越圆，到最圆的时候，开始分娩，生小星星，流产的就是流星。星星爹是太阳，太阳抛妻弃子，只在白天出现，到晚上就躲了，只有月亮和孩子们孤独地挂在天上。她说的声情并茂，我想月亮逊弊了，这种男人还每个月让它搞大一次肚子。 </p>          </div><div class="note note-info">            <p>有一年雨夜，一个面罩轻纱的女郎来敲门，自称是个真正的公主。我想起豌豆公主的故事，就在床上放了粒豌豆，上面摞了无数床垫和鸭绒被。半夜我被凄厉的尖叫惊醒，她冲进来，嘶哑地问屋里为什么有豌豆。我正在高兴，突然一股凉意升起：“能被豌豆伤害的，不一定是公主，也可能是……”她缓缓撩开面纱……  </p>          </div><div class="note note-success">            <p>给美丽的夫人的情书写完了，用墨鱼汁写在羊皮上，用了二十只螃蟹做订书钉，她就算不接受我的心，至少可以扔进锅里，不至于亏待自己的胃。 </p>          </div><div class="note note-info">            <p>如果和日本打赢了，我就在富士山上罩个大铜烟囱，绕山挖一圈河，扔导弹把火山点着，等河水开了，往里扔神户牛肉、鱼片、葱段、辣椒、白菜、豆腐、粉丝……对，就是你们，本大王的粉丝，你们坐着特制木船“鲜肉丸”，船舱里放着麻酱香油海鲜汁味噌，船桨是大木勺，想吃什么捞什么……  –2012&#x2F;05&#x2F;21</p>          </div><div class="note note-success">            <p>如果你在暗恋一个人，并下决心要实现梦想，你可以来找大王。大王把“XX爱XX”刻在刚出生的大鹏鸟的翅膀上。你有两年的时间，两年之后，大鹏鸟的翅膀会长到500米宽，这行字全世界都看得见。希望那时候你觉得幸福，她觉得荣耀。 </p>          </div><div class="note note-info">            <p>我吹着笛子向你进发，星星在头顶排成一行。晚安。 </p>          </div><div class="note note-success">            <p>我的妹妹嗲豪森小姐想干掉一个专杀流浪狗的混蛋，请教我怎么在30公里外打中目标，我说30公里的狙击学问太大了，要计算光线、风速、地球自转、地球引力、空气湿度、大气扰动、生物活动等参数……刚才她说把那个混蛋狙掉了，我说谁教你的，她说很简单，做个30公里长的枪管就行了。 </p>          </div><div class="note note-info">            <p>0点之后，拨打麦当劳订餐电话，对订餐员说：请给我来一份煎饼果子，双份蛋，加千岛汁。不管对方怎么解释，你都重复这句话，挂掉再拨，再挂掉再拨，第三次的时候，会有一个悦耳的英国口音问你：“男爵殿下，您来点什么？”这是我私人独享的订餐热线，刚才点了煮菱鲆鱼浇牡蛎汁和小牛肉，你们都试试吧。 </p>          </div><div class="note note-success">            <p>绿巨人为什么是绿色的，还很生气？我请他吃刺身，说一人一半，后来我吃了所有鱼肉，他吃了所有芥末。 </p>          </div><div class="note note-info">            <p>我把每次和你的回忆切碎，装进万花筒，这样我永远有新的回忆。晚安。  –2012&#x2F;05&#x2F;24 00:49</p>          </div><div class="note note-success">            <p>有一回我和妹妹嗲豪森小姐过大峡谷，峡谷太宽过不去，我拿出口香糖吹了个无比大的泡泡，把妹妹和月亮都装进去，月亮把我们带过去了。 </p>          </div><div class="note note-info">            <p>我最潦倒的时候摆摊卖过冥币，一天一个老太太找到我，说能不能定制，别印阎王，印她的头像，我说这对您可不吉利，她说就是想给下面带个信，让他知道她想他。我答应了，她又给我一张纸条，说能不能把这个也印上，我一看密密麻麻十几条，都是我妈常跟我说的话。原来下面是她儿子…… </p>          </div><div class="note note-success">            <p>出了趟远门，帮北斗七星打架去了，近日会有陨石雨，是敌人碎尸，倒时差先睡了，晚安。 </p>          </div><div class="note note-info">            <p>这次去了不减肥会死星，星球地表是压力感应的，超重的会压垮地壳，掉到地心里当燃料；还去了瘦子让你得瑟星，地表也是压力感应，分量不够的会被弹射到大气层外当卫星，星球最盛大的节日是胖子们吃着蛋糕，拿望远镜观赏天上的瘦子。小胖子们把食物塞到炮膛里射上天，运气好的瘦子吃胖了有机会复活。 </p>          </div><div class="note note-success">            <p>我送给美丽的夫人一挺机枪，她想我的时候，把吻装进每一颗子弹，向我倾泻过来。如果我满身口红失去知觉，不要抢救我，我是爽死的。  </p>          </div><div class="note note-info">            <p>我寂寞的时候，跟回声聊天，给它讲段子，然后假装头一次听到。 </p>          </div><div class="note note-success">            <p>我的宇宙是个宏伟的肥皂泡，你是一根针。 </p>          </div><div class="note note-info">            <p>把这场雨添加到我的收藏了，下次失恋拿出来。  2012&#x2F;07&#x2F;24 00:51</p>          </div><div class="note note-success">            <p>我造了艘玻璃飞船，发射之后，就是银河里的漂流瓶，给你的话写在里面了，希望有外星人拾到。地球上我找不到答案。 </p>          </div><div class="note note-info">            <p>北京还没下雨，是我正在给每个雨点拴降落伞。 </p>          </div><div class="note note-success">            <p>经过我驯化的龙卷风，扔建筑材料进去，所过之处能盖起一座城市。 </p>          </div><div class="note note-info">            <p>如果入水后竖着游1500米，本大王有信心拿世界第一。 </p>          </div><div class="note note-success">            <p>为什么我没有活在我得到了你的那个平行宇宙里？晚安。 </p>          </div><div class="note note-info">            <p>怎样才能让地球不转？举办一个太阳系好声音，本大王上去献唱。 </p>          </div><div class="note note-success">            <p>王尔德说：人生有两大悲剧，一个是没有得到想要的东西，一个是得到了想要的东西。萧伯纳说：人生有两大悲剧，一是万念俱灰，一是踌躇满志。但本大王更喜欢这句话：“悲观主义者认为所有女人都是坏女人，乐观主义者希望这是真的。” </p>          </div><div class="note note-info">            <p>我把关于你的一切记忆都扔进黑洞了，那为什么我还要写这条微博？晚安。  2012&#x2F;09&#x2F;03 01:24</p>          </div><div class="note note-success">            <p>想把人类浪费的食物都运到北极去，浇成一个大冰山，北极熊就不会饿死了。把不爱本大王的人也浇进去。 </p>          </div><div class="note note-info">            <p>赠人肉丝，手有鱼香。 </p>          </div><div class="note note-success">            <p>“饿的时候我会摊一张足球场那么大的煎饼，上面铺满菜叶子。”“大王您改吃素啦。”“不是，菜叶子把牛羊都吸引来，一卷就可以吃了。” </p>          </div><div class="note note-info">            <p>后羿说他射下九个太阳，吹牛，实际情况是他参加相亲节目，十个太阳全灭，只有月亮没灭，他才娶了嫦娥。现在你们看到的太阳是他们害死了猪八戒，点着了冒充的，它油多嘛，也比较圆。 </p>          </div><div class="note note-success">            <p>雪是穿婚纱的雨。   2012:11:04 10:45</p>          </div><div class="note note-info">            <p>想你的时候我会点支蜡烛，把手影投到月亮上。晚安。</p>          </div><div class="note note-success">            <p>又下雪了！老天你不知道堆雪人很累的吗？你就不能直接下雪人吗？ </p>          </div><div class="note note-info">            <p>小时候本大王被抓去当童工，发给一粒粒钻石让我嚼，吹出来的泡泡挂在天上，替换那些坏掉的星星。晚安。 </p>          </div><div class="note note-success">            <p>雾太浓了，可以堆雪人。 </p>          </div><div class="note note-info">            <p>我以为我的心是铁打的，遇见你才发现，原来它是泡腾片做的。  2013:01:14 09:07</p>          </div><div class="note note-success">            <p>风大的把地球都吹跑了。 </p>          </div><div class="note note-info">            <p>幸福是欲望的暂时停止，所以一切梦想都不要变成现实。 </p>          </div><div class="note note-success">            <p>从今天开始好好练枪法、练扔雪球、练拉电线绊人，争取七个月后成功打劫圣诞老人。立此存照！[拳头]  2013&#x2F;05&#x2F;11</p>          </div><div class="note note-info">            <p>地震是寂寞的地球在用摇一摇。 </p>          </div><div class="note note-success">            <p>本大王当年养过一窝小香猪，长不大的那种，有一只长到600斤，没脸见人，躲到树林里去了，不幸树林里有整整一群狼，它谎称自己是个扑满，狼正好没有银行，把辛苦攒下的钱都存到它嘴里，它装了满满一肚子钱跑回来，成了大富翁。这个故事告诉我们，只要你有智慧，越胖越好。 </p>          </div><div class="note note-info">            <p>如果你去了冥王星，我就把太阳变成路由器。晚安。 </p>          </div><div class="note note-success">            <p>我时日无多了，香蕉都不敢买绿的。 </p>          </div><div class="note note-info">            <p>月亮是天空的处女膜，看到它，我就依然相信爱情。晚安。 </p>          </div><div class="note note-success">            <p>小时候比赛谁尿得高，本大王尿出了银河。 </p>          </div><div class="note note-info">            <p>流星是有强烈个人诉求的屌丝天使烧掉的星际大巴。 </p>          </div><div class="note note-success">            <p>伯爵说他那里的空气很差，病人手术的时候如果没有麻醉药，脑袋伸出窗外就可以了；我说我们这里的空气可以扔到嘴里嚼。 </p>          </div><div class="note note-info">            <p>我往银河扔了好多贝壳，明天所有的行星都会变成珍珠，晚安。 </p>          </div><div class="note note-success">            <p>本大王遇到过一个活了三万年的人，他说地球那时候是方的，走到边缘就会掉下去，后来人们无意中发现地下是空的，经过好几千年的努力，终于剥掉了大地的外壳，露出里面真正的地球。其实地球原本装在一个盒子里，是一个礼物，但不知道是谁送的，也不知要送给谁。 </p>          </div><div class="note note-info">            <p>我妹妹嗲豪森小姐养过一只猫，它只会往前走，不会回头也不会拐弯，我妹妹把它养在一个特制的笼子里。有一天笼子破了，它走了出去，七十年以后，我妹妹发现它趴在门口，它绕地球一圈回来了，而且它当初是往北走的，所以经过了北极和南极。所以，就算方向错了，只要你一直走，依然能得偿所愿。 </p>          </div><div class="note note-success">            <p>#那些年我们上过的当#女朋友发誓要瘦成一道闪电，后来本大王才知道真有一种闪电叫球形闪电。⚡⚡⚡[衰] </p>          </div><div class="note note-info">            <p>人类出现之前，我用小刀把月亮切成58个面的钻石。 </p>          </div><div class="note note-success">            <p>怀念在蟠桃会门口倒假票的日子，怀念和八戒降低云头看嫦娥裙底春光的日子，怀念偷二郎神家宠物狗的日子，怀念在如来佛手指上写拆的日子，可惜天上没有不散的筵席，卷支大麻，吐成云，希望灵霄中街还流传我的传说。 </p>          </div><div class="note note-info">            <p>以前我认识一颗流星，它爱上一个女孩，每天从她阳台外面飞一遍，给女孩许愿的机会。有一天它发现女孩的心愿实现了，阳台上多了个男孩，它颓了一阵，不飞了。有一天我看见它又要飞，问为什么，它说：我要给自己许一个愿。  –2013&#x2F;11&#x2F;09</p>          </div><div class="note note-success">            <p>别对流星许愿了！一个没跑到厕所就飙屎的倒霉蛋，你们觉得它有心情帮你解决问题吗？？  –2014&#x2F;04&#x2F;03</p>          </div><div class="note note-info">            <p>我小时候有一次挨打是因为骗我弟说吃肥皂泡会飞，他吃光家里所有的肥皂，从二楼跳出去了。 </p>          </div><div class="note note-success">            <p>我挺好，太阳系是一伙孤独的碰瓷党，在凌晨3点的宇宙十字街头踯躅。   –2014&#x2F;07&#x2F;22</p>          </div><div class="note note-info">            <p>想到嫦娥也正在赏月，我决定挖一个心形的大湖，一半种玫瑰，一半种胡萝卜。 </p>          </div><div class="note note-success">            <p>沙是地球的骨灰，钻石是舍利子。 </p>          </div><div class="note note-info">            <p>蜘蛛和蟑螂哪个更恶心？蟑螂。有蜘蛛侠，你能想像蟑螂侠吗？ </p>          </div><div class="note note-success">            <p>本大王认识一个超级英雄，被基因突变的蚕咬过，成了蚕侠，虽然也有吐丝技能，但行动迟缓，吐丝很慢，随身需带大把桑叶，必杀技是把自己裹起来，所以怎么也不红。看着蜘蛛侠成了大明星，他终于得了抑郁症，吐出来的是烦恼丝，大受女文青欢迎，从此不敢开心，多拧巴。 </p>          </div><div class="note note-info">            <p>本大王为防心碎，把自己的心做成橡胶的，可它还是碎了，我才知道所有的心掉在地上之前，都已经冻得像玻璃一样了。 </p>          </div><div class="note note-success">            <p>本大王去过一个古怪的地方，那里的人经常跟你说着说着话，突然浑身打战，然后就消失了。后来才知道，我进了一部手机。 </p>          </div><div class="note note-info">            <p>我用烟火截断银河，召唤来一场大雨。 </p>          </div><div class="note note-success">            <p>我当年收养过一头小鲸鱼，我们一起在海里游泳唱歌，后来它离开我找同伴去了。最近听说科学家在找一头鲸鱼，它孤独地唱了二十年，没有一头鲸回应，我猛然醒悟，就是它，它跟我学会了用人的频率唱歌，200赫兹，可鲸鱼的频率不到20，没有鲸鱼能听到它的声音。我决定放弃假期去找它。小鲸鱼，你在哪里？ </p>          </div><div class="note note-info">            <p>我认识一只小猫，它把紫菜做的保健腰带卖给鲨鱼，肚子的位置有一坨饭团，说是信息大米。然后它又把这些鲨鱼卖了，说是鲨鱼寿司，赚了很多钱。 </p>          </div><div class="note note-success">            <p>我吃光了全世界的橡皮擦，她的名字还是在我心里。晚安。  2015&#x2F;03&#x2F;01 00:28</p>          </div><div class="note note-info">            <p>一个岛爱上了另一个岛，他开始收养珊瑚虫，珊瑚虫明白他的意思。很多很多年以后，一条珊瑚礁把两个岛永远连接在了一起。 </p>          </div><div class="note note-success">            <p>还有一个岛也爱上了另一个岛，但他找不到珊瑚虫，爱情郁积在心中，心越来越烫，终于有一天，他的心猛烈地喷发了，遮天蔽日。烟雾散尽，火山灰把两个岛变成了一个岛，他们从此幸福地生活在一起，岛上铺满了钻石。 </p>          </div><div class="note note-info">            <p>我把星星装进沙漏，时间就变成了银河。晚安。  2015&#x2F;03&#x2F;03 03:30</p>          </div><div class="note note-success">            <p>我一堂哥太高了，食物落到胃里之前就饿死了。 </p>          </div><div class="note note-info">            <p>液体就是形状随容器改变的物体，所以猫是一种液体。 </p>          </div><div class="note note-success">            <p>我们的宇宙直径其实只有0.7光年，人类看见的浩瀚星空是全息影像，我们生活在外星人制造的一枚巨蛋中，外面真正的宇宙图景是我们完全无法想象的，人类将在2033年发现这一事实，并组织舰队试图冲破牢笼。  </p>          </div><div class="note note-info">            <p>我把关于你的记忆从动脉里抽出来，想你的时候再输回去，我就这样成了瘾君子。 2015&#x2F;03&#x2F;14 01:10</p>          </div><div class="note note-success">            <p>冰淇淋是南极工厂的雪人制造出来的，准确说是拉出来的，正常的时候是冰淇淋，大便干燥的时候是冰棍，闹肚子的时候是奶昔，半稀半干的时候是珍珠奶茶，闹得最厉害的时候会拉出一杯热巧克力，这时雪人的热量耗尽，就挂了。不喝热巧，就没有杀害。 </p>          </div><p class="note note-info">有一年冬天，出现了一个正能量雪人，又热情又滑稽，所有见过它的人都开心得不得了，是个荷尔蒙版的大白。后来才知道它是一帮毒贩子用海洛因堆成的。</p><div class="note note-success">            <p>一条道走到黑，再走几个小时，天就亮了。 2015&#x2F;03&#x2F;17 23:52</p>          </div><p>自从以后的微博都不是他写的了。<a href="https://weibo.com/1658197767/4897263031683749">https://weibo.com/1658197767/4897263031683749</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;div class=&quot;note note-success&quot;&gt;
            &lt;p&gt;很久很久很久以前，我经常觉得孤单，我就走到全世界最低洼的地方，大哭一场，这样不会惊动恐龙们，后来，人类把那个地方叫死海。 &lt;/p&gt;
          &lt;/div&gt;



&lt;div</summary>
        
      
    
    
    
    <category term="转载" scheme="https://iwesley.top/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="诗" scheme="https://iwesley.top/tags/%E8%AF%97/"/>
    
    <category term="collection" scheme="https://iwesley.top/tags/collection/"/>
    
  </entry>
  
  <entry>
    <title>重读《百年孤独》后的回忆</title>
    <link href="https://iwesley.top/article/6eef96b2/"/>
    <id>https://iwesley.top/article/6eef96b2/</id>
    <published>2025-07-17T13:47:54.000Z</published>
    <updated>2025-07-17T13:54:16.975Z</updated>
    
    <content type="html"><![CDATA[<p>多年以后，面对电子相册的往年今日，面对从未丢失却沉寂已久的短信，他会清晰地回忆起十年前那段旧时光——在人来人往的教室长廊里与她欢乐交谈，铃声响起仍然感觉意犹未尽，青春的低语混合着尘埃的微光飘浮；在黄色的信纸上写下过书籍读后感，写下过彼此的美好祝愿与鼓励，也写下过对生活的感悟，黑色的墨迹承载了一段青春舞曲；在上学前，他有意无意地望向窗外，看到她的身影经过，心里飘忽不定；在一个无常的周末，他坐在教室里曾重复听着某一首歌，内心充满着纠结，直到今天再次唱起仍然感慨万千。后来，他意识到过分的关心可能引起了她的逃避和无心的无视，他决定画好界限。在一个夜晚相聚后，他骑自行车送她回家，可能是因为大风或者沙子进了眼睛，有热泪流了出来，他感觉后面可能再也没有见面的机会了。</p><p>此后的过年期间，有一次他们在超市相遇，好像陌生人一样，彼此问候后就此别过。还是太年轻，如果可以重来，他们可以一起坐下来喝杯奶茶，聚聚旧。他和朋友的聚会中，还是能经常听到她的消息，他不作声，只是聆听。</p><p>孤独来自脆弱的敏感。</p><p>现在，他们不经常联络了。年初他看着她毕业的照片时，看到了和十年前一样纯真动人的笑容，岁月掩盖不住她明亮的眼睛，祝愿她平安快乐！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;多年以后，面对电子相册的往年今日，面对从未丢失却沉寂已久的短信，他会清晰地回忆起十年前那段旧时光——在人来人往的教室长廊里与她欢乐交谈，铃声响起仍然感觉意犹未尽，青春的低语混合着尘埃的微光飘浮；在黄色的信纸上写下过书籍读后感，写下过彼此的美好祝愿与鼓励，也写下过对生活的感悟</summary>
        
      
    
    
    
    <category term="随笔" scheme="https://iwesley.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://iwesley.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>说说9月8号以来的短学期</title>
    <link href="https://iwesley.top/article/daa12744/"/>
    <id>https://iwesley.top/article/daa12744/</id>
    <published>2025-07-06T14:45:52.000Z</published>
    <updated>2025-07-06T15:02:16.572Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>翻看便签看到了一篇旧文，写于2017年9月16号下午1点35分</p></blockquote><p>嗯……或者可以说是一次“假研究生”“假学长”的经历……，因为他们是准备读大三大四的真学长学姐……</p><p>这个短学期主要是由我们实验室承担的一个pic单片机短学期学习任务，我们开始是给他们讲讲课，讲一些软件操作和一些基本问题，后来基本就是一个助教的角色，辅助他们解决一些问题，最后再负责验收一下就ok了……</p><p>这期间发生了两次尴尬的事，一次是老师介绍我们时，说我们是研究生😂，当时的反应就是尴尬地笑笑……第二次尴尬发生在今天，有一位同学问我一些关于研究生导师的问题，我勉强说了一些，最后还是否认了这个身份，勉强地绕出去了，也没说是大一的……</p><blockquote><p>嗯……让我想起了老罗的一个故事<br>我小的时候呢，脸皮厚叫“脸皮厚”，无耻叫“无耻”，现在都叫心理素质好。(lol…) 真奇怪！像我跟几个朋友去爬山，然后下来累了，在那个长凳上，我们5、6个坐成一排休息，然后大家拿了一些瓜子，然后拿了个塑料袋，嗑完了瓜子就扔到塑料袋里去了，但是吃完手不黑了吗？于是大家掏出一点纸巾，互相分，然后把手擦一擦。然后把那个就放到座位上了，结果一阵风一吹呢都刮地上了，不是故意扔地上的，被刮到地上去了，然后坐在那儿没走嘛，一懒，暂时就没拣，都下了山，挺累的。结果清洁人员就过来了，说“哎～这个纸是不是你们给扔的啊？”然后我脸一下就红了，然后他们几个都没事，(lol…) 然后我说“是”，然后他说“罚款”，我说“好”，然后我就把罚款交了，我又自己把那纸给拣起来了。然后那个罚款的人走了以后，他们几个人就看着我说“哎，老罗你怎么心理素质那么差？”(lol…) “不承认不就行了么？”但是你脸已经红了，所以你不承认也不行。“你怎么心理素质那么差？”好我就奇怪了，我才知道“心理素质”是这个意思。过去我们叫“无耻”，现在叫“心理素质”。明明是你干的，你怎么能心理素质那么好呢？(lol…) 好……这是……题还没讲呢！(lol…) 向大家郑重道歉！(lol…)</p></blockquote><p>哎呀，诚实是一个奢侈的品质！</p><p>短学期总体来说感觉还是不错的，虽然头三天可能是因为生物钟没调节过来，连续失眠，精神不好，但后来慢慢就很快睡着了……给他们讲课，辅助他们，有种回到高中帮别人解题的感觉，对，那种感觉特别美好！哈哈！</p><p>哦，期间实验室举行了“孵化器杯”的第一届羽毛球比赛，那天是9月9号，那天由于一些人弃赛，我直接就跳过第一轮，直接晋级了……下午，连打了三局，都比较幸运惊险地获胜了，我都没想到得到了一等奖😜……虽然学了一学期的羽毛球，但感觉高远球这些都没怎么运用，还是任重道远……</p><p>那些年，曾经在孵化器杯上走过这么一个血肉之躯……<img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250706225434744.jpg" alt="Notes_1751813220024"></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;翻看便签看到了一篇旧文，写于2017年9月16号下午1点35分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嗯……或者可以说是一次“假研究生”“假学长”的经历……，因为他们是准备读大三大四的真学长学姐……&lt;/p&gt;
&lt;p&gt;这个短学期主要是由我们实验室承</summary>
        
      
    
    
    
    <category term="随笔" scheme="https://iwesley.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://iwesley.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>安卓对外发布工程源码:怎么做到仅UI层公布</title>
    <link href="https://iwesley.top/article/9f1bc6ae/"/>
    <id>https://iwesley.top/article/9f1bc6ae/</id>
    <published>2025-06-22T08:37:36.000Z</published>
    <updated>2025-06-22T11:59:26.009Z</updated>
    
    <content type="html"><![CDATA[<p>最近新客户要求将软件的代码公开给他们，允许他们自己修改 UI，进行定制。由于我们工程包含其他核心模块，不能全部开放，所以需要将非 UI 模块进行整合并混淆再发布。</p><p>由于工程具有良好的模块化，所以一开始想到的是参考<a href="https://iwesley.top/article/a43c0ba5/">安卓官方版fat-aar:使用Fused Library将多个Android库发布为一个库 - Wesley’s Blog</a>将非 UI 模块合并成一个 aar。</p><p>但有挑战：</p><ul><li><p>依赖传递很难处理，就算处理了也不方便后续维护</p></li><li><p>存在部分内网 SDK 依赖</p></li></ul><p>为了不改变 maven 的管理方式，决定使用本地 maven 的方式。</p><p>可以先用<code>gradlew build --scan</code>生成一棵依赖树，网页版方便查看 app 有哪些依赖，还可以定位内网的依赖来自于哪个地址。</p><h2 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h2><p>在gradle.properties 定义本地 maven 路径</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">LOCAL_MAVEN_URL=maven_repo<br>GROUP_ID=com.wesley.test<br>SDK_VERSION=<span class="hljs-number">1.0</span><span class="hljs-number">.0</span> #统一控制所有模块版本<br></code></pre></td></tr></table></figure><p>settings.gradle引入本地依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy">maven &#123;<br>            url = uri(<span class="hljs-string">&quot;file://$&#123;rootProject.projectDir&#125;/$&#123;LOCAL_MAVEN_URL&#125;&quot;</span>)<br><br>        &#125;<br></code></pre></td></tr></table></figure><p>各自模块接入maven-publish</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    alias(libs.plugins.android.library)<br>    alias(libs.plugins.kotlin.android)<br>    id <span class="hljs-string">&#x27;maven-publish&#x27;</span><br>&#125;<br><span class="hljs-keyword">def</span> ARTIFACT_ID=<span class="hljs-string">&#x27;base-base&#x27;</span><br>android &#123;<br>    <span class="hljs-comment">//不能发布源码给第三方</span><br>    publishing &#123;<br>        singleVariant(<span class="hljs-string">&#x27;release&#x27;</span>) <span class="hljs-comment">// 不生成 sources JAR</span><br>    &#125;<br><br>    ...............<br><br>     <span class="hljs-comment">//如果有模块重名，比如 feature:base, base:base, 需要定义</span><br>    compileOptions &#123;<br>        kotlinOptions.freeCompilerArgs += [<span class="hljs-string">&#x27;-module-name&#x27;</span>, <span class="hljs-string">&quot;$GROUP_ID.$ARTIFACT_ID&quot;</span>]<br>    &#125;<br>    <br>&#125;<br><br><br>publishing &#123;<br>    publications &#123;<br>        maven(MavenPublication) &#123;<br>            groupId GROUP_ID<br>            artifactId ARTIFACT_ID<br>            version SDK_VERSION<br><br>            afterEvaluate &#123;<br>                from components.release<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    repositories &#123;<br>        maven &#123;<br>            url rootProject.file(LOCAL_MAVEN_URL).toURI()<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果模块存在多个 flavor：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    alias(libs.plugins.android.library)<br>    alias(libs.plugins.kotlin.android)<br>    id <span class="hljs-string">&#x27;maven-publish&#x27;</span><br>&#125;<br>android &#123;<br>    publishing &#123;<br>        multipleVariants &#123;<br>            allVariants()<br>            <span class="hljs-comment">//withJavadocJar()</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>publishing &#123;<br>    publications &#123;<br>        maven(MavenPublication) &#123;<br>            groupId GROUP_ID<br>            artifactId <span class="hljs-string">&quot;feature-xxx&quot;</span><br>            version SDK_VERSION<br><br>            afterEvaluate &#123;<br>                from components.<span class="hljs-keyword">default</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    repositories &#123;<br>        maven &#123;<br>            url rootProject.file(LOCAL_MAVEN_URL).toURI()<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要在发布时控制某些代码不混淆或者依赖方式变更：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// 在根项目的 build.gradle 中</span><br>ext &#123;<br>    <span class="hljs-comment">// 定义判断是否是发布任务的方法</span><br>    isPublishTask = &#123; -&gt;<br>        gradle.startParameter.taskNames.any &#123;<br>            it.startsWith(<span class="hljs-string">&quot;publish&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">if</span> (isPublishTask()) &#123;<br>        <span class="hljs-comment">// 发布时将 aar 打包进 sdk</span><br>        println(<span class="hljs-string">&quot;wesley publish&quot;</span>)<br>        <span class="hljs-comment">//embed(project( &quot;:feature:testAAR&quot; ))</span><br>        <span class="hljs-comment">// id(&quot;com.kezong.fat-aar&quot;)</span><br>        embed project(<span class="hljs-attr">path:</span> <span class="hljs-string">&quot;:feature:testAAR&quot;</span>, <span class="hljs-attr">configuration:</span> <span class="hljs-string">&#x27;default&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        implementation(project( <span class="hljs-string">&quot;:feature:testAAR&quot;</span> ))<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>对于不携带 aar 包的模块，比如某 B 模块implementation(project( “:base:base” ))，如果:base:base 也配置了 publish 任务，依赖它的模块不需要修改成远程依赖方式。为什么呢？问了一下 AI：</p><blockquote><h3 id="核心原因：项目内依赖（Project-Dependency）-vs-Maven-依赖（Maven-Dependency）的转换"><a href="#核心原因：项目内依赖（Project-Dependency）-vs-Maven-依赖（Maven-Dependency）的转换" class="headerlink" title="核心原因：项目内依赖（Project Dependency） vs. Maven 依赖（Maven Dependency）的转换"></a>核心原因：项目内依赖（Project Dependency） vs. Maven 依赖（Maven Dependency）的转换</h3><ol><li><strong>在模块 A 的构建期间： (<code>implementation project(&quot;:base:base&quot;)</code>)</strong><ul><li>当 Gradle 构建你的 <code>A</code> 模块时，它看到了 <code>implementation project(&quot;:base:base&quot;)</code>。</li><li>这里的 <code>project(...)</code> 告诉 Gradle：“这是一个<strong>项目内依赖</strong>。你不需要去远程仓库下载任何东西，直接在本次构建中找到 <code>:base:base</code> 模块，编译它，然后让 <code>A</code> 模块使用它的代码即可。”</li><li>在这个阶段，一切都在你的本地项目中进行，与 Maven 仓库和版本 <code>1.1</code> 是否已发布<strong>完全无关</strong>。</li></ul></li><li><strong>在发布模块 A 时：（生成 <code>pom.xml</code>）</strong><ul><li>当你运行 <code>publish</code> 任务时，<code>maven-publish</code> 插件的职责是为模块 <code>A</code> 创建一个元数据文件，也就是 <code>pom.xml</code>。</li><li>这个 POM 文件是给<strong>外部用户</strong>看的。外部用户（比如你的同事或者一个CI服务器）没有你项目的完整源码，他们需要通过 Maven 坐标（groupId:artifactId:version）来下载依赖。</li><li>因此，<code>maven-publish</code> 插件必须将项目内依赖 <code>project(&quot;:base:base&quot;)</code> <strong>“翻译”</strong> 成一个外部用户可以理解的 Maven 依赖。</li></ul></li></ol><h3 id="“翻译”的过程是怎样的？"><a href="#“翻译”的过程是怎样的？" class="headerlink" title="“翻译”的过程是怎样的？"></a>“翻译”的过程是怎样的？</h3><p><code>maven-publish</code> 插件非常智能，它会执行以下操作：</p><ol><li><p>它发现 <code>A</code> 依赖于 <code>project(&quot;:base:base&quot;)</code>。</p></li><li><p>它会去检查 <code>:base:base</code> 模块的 <code>build.gradle.kts</code> 文件。</p></li><li><p>它在文件中找到了 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">publishing</span><br></code></pre></td></tr></table></figure><p> 配置块，并读取了里面定义的 Maven 坐标：</p><ul><li><code>groupId: &quot;com.wesley.test&quot;</code></li><li><code>artifactId: &quot;base-base&quot;</code></li><li><code>version: &quot;1.1&quot;</code></li></ul></li><li><p>然后，它将这些信息忠实地写入 <code>A</code> 模块的 <code>pom.xml</code> 文件中，生成了你看到的 <code>&lt;dependency&gt;</code> 块。</p></li></ol><blockquote><p><strong>一个形象的比喻：</strong> 这就像你在写一份菜谱（发布模块 A）。你在菜谱里写到需要“我祖母的秘制酱料”（项目内依赖 <code>:base:base</code>）。为了让别人也能做出这道菜，你必须在菜谱的配料表上写清楚这种酱料在超市里的商品名和品牌（Maven坐标 <code>com.wesley.test:base-base:1.1</code>），而不是只写“我祖母的秘制酱料”。</p><p><code>maven-publish</code> 就是那个负责把“我祖母的秘制酱料”翻译成商品名的角色。它并不关心此刻超市里到底有没有货（<code>1.1</code> 版本是否已发布），它只负责正确地翻译菜谱。</p></blockquote><hr><h3 id="为什么它不关心-1-1-是否已发布？"><a href="#为什么它不关心-1-1-是否已发布？" class="headerlink" title="为什么它不关心 1.1 是否已发布？"></a>为什么它不关心 <code>1.1</code> 是否已发布？</h3><p><code>publish</code> 任务的职责是<strong>生成并上传当前模块的构件和元数据</strong>。它假设你（开发者）会确保所有声明的依赖项最终都是可用的。</p><ul><li><strong>后果的承担者是消费者：</strong> 如果你发布了 <code>A</code>，但没有发布 <code>:base:base</code> 的 <code>1.1</code> 版本，那么问题不会在你发布时出现，而是在<strong>别人使用你的 <code>A</code> 模块时</strong>出现。当他们的项目尝试根据 <code>A</code> 的 <code>pom.xml</code> 去下载 com.wesley.test:base-base:1.1&#96; 时，Maven 会因为找不到这个依赖而构建失败。</li><li><strong>责任在你：</strong> Gradle 将保证依赖关系链正确的责任交给了开发者。你需要在发布 <code>A</code> 之前，先将它的所有依赖（如 <code>:base:base</code>）发布到 Maven 仓库。</li></ul></blockquote><p>最后执行 publish任务，所有模块都发布到maven_repo 里面了，以后向客户更新这个目录就行。</p><p>而对于内网 SDK，可以在网页版依赖树找到他们，然后通过类似</p><p><code>wget -r -np -nH --cut-dirs=8 -R &quot;index.html*&quot;      http://172.20.135.19:8080/nexus/content/repositories/releases/com/wesley/sdk/protocol/2.1.8/</code>的命令下载，把文件丢进maven_repo（注意目录结构），这样依赖也可以正确传递了。（如果包含源码，可以考虑删除）</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>删掉工程签名文件。</p><p>如果有些模块不能公开，混淆后不能发布源码。</p><p>不能携带 .git 目录。</p><p>注意处理 UI 模块依赖其他模块的方法或者类，不能混淆。</p><p>注意处理一些配置信息或者关键代码，可以考虑转移到 native 层。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近新客户要求将软件的代码公开给他们，允许他们自己修改 UI，进行定制。由于我们工程包含其他核心模块，不能全部开放，所以需要将非 UI 模块进行整合并混淆再发布。&lt;/p&gt;
&lt;p&gt;由于工程具有良好的模块化，所以一开始想到的是参考&lt;a</summary>
        
      
    
    
    
    <category term="AppBuild" scheme="https://iwesley.top/categories/AppBuild/"/>
    
    
    <category term="gradle" scheme="https://iwesley.top/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>安卓官方版fat-aar:使用Fused Library将多个Android库发布为一个库</title>
    <link href="https://iwesley.top/article/a43c0ba5/"/>
    <id>https://iwesley.top/article/a43c0ba5/</id>
    <published>2025-06-22T06:21:49.000Z</published>
    <updated>2025-06-22T07:35:28.833Z</updated>
    
    <content type="html"><![CDATA[<p>在开发 sdk 时，内部一般会划分好几个模块。但当需要打包成一个模块发布时，往往需要依赖第三方插件。比如著名的 fat-aar：<a href="https://github.com/kezong/fat-aar-android%EF%BC%8C%E4%BD%86%E8%AF%A5%E5%BA%93%E4%B8%8D%E6%94%AF%E6%8C%81">https://github.com/kezong/fat-aar-android，但该库不支持</a> AGP8.0 了，有其他开发者单独fork了一个仓库来进行维护，支持 AGP8.0+：<a href="https://github.com/aasitnikov/fat-aar-android">aasitnikov&#x2F;fat-aar-android: Gradle plugin for merging android libraries (AAR)</a>。</p><p>现在安卓官方终于支持将多个库打包成一个aar 了：<a href="https://developer.android.com/build/publish-library/fused-library">Publish multiple Android libraries as one with Fused Library  |  Android Studio  |  Android Developers</a>。宣布从 AGP8.12 开始可以使用<code>com.android.fused-library</code>来进行合并多模块。不过从<a href="https://mvnrepository.com/artifact/com.android.fused-library/com.android.fused-library.gradle.plugin">Maven Repository: com.android.fused-library » com.android.fused-library.gradle.plugin</a>上面可以看到，一些早期版本也可以支持的，不过可能有 bug，我试了 AGP8.10 也是可以的。</p><p>相比 fat-aar 的优点是：</p><ul><li>官方支持</li><li>合并模块时支持依赖传递，也就是子模块的依赖树会出现在 pom 文件里面。fat-aar 需要通过pom.withXml 来处理。</li></ul><p>缺点是：</p><ul><li>支持插件版本有限，官方表示是AGP8.12 开始才支持。</li><li>传递依赖项不会打包。需要逐个指定打包进 aar 的依赖。</li></ul><p>后面还会继续说该库目前的问题，先看看怎么用。</p><p>官方的工程示范：</p><blockquote><p>readme 的插件名称目前是写错了的：应该是<code>com.android.fused-library</code></p></blockquote><p><a href="https://github.com/android/gradle-recipes/tree/agp-8.10/applyFusedLibraryPlugin">gradle-recipes&#x2F;applyFusedLibraryPlugin at agp-8.10 · android&#x2F;gradle-recipes</a></p><p>可以参考这个进行插件引入：</p><p><a href="https://developer.android.com/build/publish-library/fused-library">Publish multiple Android libraries as one with Fused Library  |  Android Studio  |  Android Developers</a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="嵌套依赖不支持打包"><a href="#嵌套依赖不支持打包" class="headerlink" title="嵌套依赖不支持打包"></a>嵌套依赖不支持打包</h3><p>官方的例子是支持嵌套的：</p><blockquote><p><code>*</code> indicates an <code>include</code> dependency of the <code>:fusedLibrary</code> module</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs elixir">┌─────────────────────────────────────────┐<br>│             <span class="hljs-symbol">:app</span>                        │<br>│               ▲                         │<br>│               │                         │<br>│         <span class="hljs-symbol">:fusedLibrary</span>                   │<br>│         ▲           ▲                   │<br>│         │           │                   │<br>│    <span class="hljs-symbol">:androidLib2*</span>  <span class="hljs-symbol">:androidLib1*</span>         │<br>│         ▲            ▲                  │<br>│         │            │                  │<br>│ <span class="hljs-symbol">:androidLib3</span> <span class="hljs-symbol">com.google.code.gson:</span>gson* │<br>└─────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">dependencies &#123;<br>    include(project(<span class="hljs-string">&quot;:androidLib1&quot;</span>))<br>    include(project(<span class="hljs-string">&quot;:androidLib2&quot;</span>))<br>    include(<span class="hljs-string">&quot;com.google.code.gson:gson:2.10.1&quot;</span>)<br>    include(files(<span class="hljs-string">&quot;libs/simple-jar-with-A_DoIExist-class.jar&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上androidLib3 没有被打包，变成了一个依赖fused-library-samples:androidLib3:unspecified：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;included&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;project :androidLib1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;project :androidLib2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;com.google.code.gson:gson:2.10.1&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-stdlib:1.9.22&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;org.jetbrains:annotations:13.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;fused-library-samples:androidLib3:unspecified&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="有一些远程包暂时打包不了"><a href="#有一些远程包暂时打包不了" class="headerlink" title="有一些远程包暂时打包不了"></a>有一些远程包暂时打包不了</h3><p>A failure occurred while executing com.android.build.gradle.tasks.FusedLibraryMergeArtifactTask$FusedLibraryMergeArtifactWorkAction</p><p>   &gt; java.lang.NullPointerException (no error message)</p><h3 id="暂不支持携带源码发布"><a href="#暂不支持携带源码发布" class="headerlink" title="暂不支持携带源码发布"></a>暂不支持携带源码发布</h3><h3 id="暂不能混淆"><a href="#暂不能混淆" class="headerlink" title="暂不能混淆"></a>暂不能混淆</h3><h3 id="不支持Databinding"><a href="#不支持Databinding" class="headerlink" title="不支持Databinding"></a>不支持Databinding</h3><h3 id="无法在单个融合库中融合多个-build-类型和产品变种。需要为不同的变体创建单独的融合库。"><a href="#无法在单个融合库中融合多个-build-类型和产品变种。需要为不同的变体创建单独的融合库。" class="headerlink" title="无法在单个融合库中融合多个 build 类型和产品变种。需要为不同的变体创建单独的融合库。"></a>无法在单个融合库中融合多个 build 类型和产品变种。需要为不同的变体创建单独的融合库。</h3><h3 id="kotlin-module冲突"><a href="#kotlin-module冲突" class="headerlink" title="kotlin_module冲突"></a>kotlin_module冲突</h3><p>如果有两个base模块会产生冲突， base&#x2F;base ，feature&#x2F;base</p><p>2 files found with path ‘META-INF&#x2F;base_release.kotlin_module’ from inputs:</p><p>需要修改一下kotlin_module 的名字</p><p><a href="https://stackoverflow.com/questions/44509608/duplicate-files-copied-in-apk-meta-inf-library-release-kotlin-module">android - Duplicate files copied in APK META-INF&#x2F;library_release.kotlin_module - Stack Overflow</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs groovy">ext &#123;<br>    GROUP_ID = <span class="hljs-string">&#x27;custom.group.id&#x27;</span><br>    ARTIFACT_ID = <span class="hljs-string">&#x27;artifactid&#x27;</span><br>&#125;<br><br>android &#123;<br>    compileSdkVersion <span class="hljs-number">25</span><br>    buildToolsVersion <span class="hljs-string">&quot;25.0.0&quot;</span><br><br>    compileOptions &#123;<br>        kotlinOptions.freeCompilerArgs += [<span class="hljs-string">&#x27;-module-name&#x27;</span>, <span class="hljs-string">&quot;$GROUP_ID.$ARTIFACT_ID&quot;</span>]<br>    &#125;<br><br>    defaultConfig &#123;<br>        ...<br>    &#125;<br>    buildTypes &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="官方已知问题"><a href="#官方已知问题" class="headerlink" title="官方已知问题"></a>官方已知问题</h3><p>融合库是一个新插件，我们正在解决一些已知问题，以实现所有用例。</p><ul><li>合并的 AAR 中未包含 <code>lint.jar</code> 文件</li><li>向其他 .aar 文件添加文件依赖项</li><li>不支持合并 RenderScript 和 Prefab 工件</li></ul><p>期待官方进一步完善。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在开发 sdk 时，内部一般会划分好几个模块。但当需要打包成一个模块发布时，往往需要依赖第三方插件。比如著名的 fat-aar：&lt;a</summary>
        
      
    
    
    
    <category term="AppBuild" scheme="https://iwesley.top/categories/AppBuild/"/>
    
    
    <category term="gradle" scheme="https://iwesley.top/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>手机厂商的应用列表权限管控真的起效了吗</title>
    <link href="https://iwesley.top/article/e6389157/"/>
    <id>https://iwesley.top/article/e6389157/</id>
    <published>2025-05-11T10:50:19.000Z</published>
    <updated>2025-05-11T13:26:37.659Z</updated>
    
    <content type="html"><![CDATA[<p>昨天使用<strong>做你的图标包</strong>制作图标包的时候发现我并没有授予它获取应用列表的权限，但是依然可以获取到我安装的应用列表。</p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250511190040532.jpg" style="zoom:25%;" /><p>然后发现它的 targetSDK 是 33 并申请了<code>&lt;uses-permission android:name=&quot;android.permission.QUERY_ALL_PACKAGES&quot;/&gt;</code>权限和使用了如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PackageManager</span> <span class="hljs-variable">packageManager</span> <span class="hljs-operator">=</span> context2.getPackageManager();<br><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span>);<br>intent.addCategory(<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span>);<br>List&lt;ResolveInfo&gt; queryIntentActivities = packageManager.queryIntentActivities(intent, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250511190439764.png" alt="image-20250511190439462" style="zoom: 50%;" /><p>正常拿到了我手机上的设备应用安装列表并且权限监控里面没有看到记录。这是怎么回事？</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>通过下面的代码进行实验</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getInstalledPackages</span><span class="hljs-params">(context: <span class="hljs-type">Context</span>)</span></span>: List&lt;String&gt; &#123;<br>        <span class="hljs-keyword">val</span> installedPackageList: MutableList&lt;String&gt; = ArrayList()<br>        <span class="hljs-keyword">val</span> installedPackageInfoList = context.packageManager.getInstalledPackages(PackageManager.MATCH_UNINSTALLED_PACKAGES)<br>        <span class="hljs-keyword">for</span> (packageInfo <span class="hljs-keyword">in</span> installedPackageInfoList) &#123;<br>            installedPackageList.add(packageInfo.packageName)<br>        &#125;<br>        Log.e(TAG, <span class="hljs-string">&quot;getInstalledPackages: size：<span class="hljs-subst">$&#123;installedPackageList.size&#125;</span> pkg:<span class="hljs-variable">$installedPackageList</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> installedPackageList<br>    &#125;<br><br>    <span class="hljs-comment">//获取所有带有桌面属性的APK</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getAllLauncherIconPackages</span><span class="hljs-params">(context: <span class="hljs-type">Context</span>)</span></span>: List&lt;String&gt; &#123;<br>        <span class="hljs-keyword">val</span> launcherIconPackageList: MutableList&lt;String&gt; = ArrayList()<br>        <span class="hljs-keyword">val</span> intent = Intent()<br>        intent.setAction(Intent.ACTION_MAIN)<br>        intent.addCategory(Intent.CATEGORY_LAUNCHER)<br>        <span class="hljs-keyword">val</span> resolveInfos = context.packageManager.queryIntentActivities(intent, PackageManager.MATCH_ALL)<br>        <span class="hljs-keyword">for</span> (info <span class="hljs-keyword">in</span> resolveInfos) &#123;<br>            launcherIconPackageList.add(info.activityInfo.packageName)<br>        &#125;<br>        Log.e(TAG, <span class="hljs-string">&quot;getAllLauncherIconPackages: size:<span class="hljs-subst">$&#123;launcherIconPackageList.size&#125;</span> pkg:<span class="hljs-variable">$launcherIconPackageList</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> launcherIconPackageList<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="在禁止应用列表权限情况下测试"><a href="#在禁止应用列表权限情况下测试" class="headerlink" title="在禁止应用列表权限情况下测试"></a>在禁止应用列表权限情况下测试</h3><p>Oppo find8u Xiaomi13 都是安卓 15</p><h4 id="情况1-不申请QUERY-ALL-PACKAGES"><a href="#情况1-不申请QUERY-ALL-PACKAGES" class="headerlink" title="情况1 不申请QUERY_ALL_PACKAGES"></a>情况1 不申请<code>QUERY_ALL_PACKAGES</code></h4><p>oppo</p><blockquote><p>PermissionInjector: Permission denied: uid: 10445 or pid: 14074 have no permission: com.android.permission.GET_INSTALLED_APPS to access: get_installed</p><p>ApplicationPackageManagerExtImpl: com.example.myapplication in userId&#x3D;0 doesn’t have GET_INSTALLED_APPS perm, return self!</p><p>getInstalledPackages: size：1 pkg:[com.example.myapplication]</p><p>getAllLauncherIconPackages: size:8 pkg:[com.android.settings, com.android.vending, com.coloros.gallery3d, com.oplus.camera, com.android.documentsui, com.android.stk, com.android.stk, com.example.myapplication]</p></blockquote><p>xiaomi</p><blockquote><p>MIUILOG- Permission Denied getInstalledPackages. pkg : com.example.myapplication uid : 10236<br>getInstalledPackages: size：1 pkg:[com.example.myapplication]<br>getAllLauncherIconPackages: size:13 pkg:[com.android.browser, com.android.camera, com.android.fileexplorer, com.android.settings, com.android.thememanager, com.android.vending, com.miui.miservice, com.xiaomi.market, com.miui.notes, com.miui.securitycenter, com.miui.voiceassist, com.example.myapplication, com.miui.huanji]</p></blockquote><p><code>getInstalledPackages</code> 只能获取到自己的应用，且会被权限监控记录，<code>queryIntentActivities</code> 可以获取部分系统应用</p><h4 id="情况2-申请QUERY-ALL-PACKAGES"><a href="#情况2-申请QUERY-ALL-PACKAGES" class="headerlink" title="情况2 申请QUERY_ALL_PACKAGES"></a>情况2 申请<code>QUERY_ALL_PACKAGES</code></h4><p>oppo</p><blockquote><p>getInstalledPackages: size：1 pkg:[com.example.myapplication]</p><p>getAllLauncherIconPackages: size:<strong>155</strong> pkg:[com.android.contacts………….</p></blockquote><p>xiaomi</p><blockquote><p>getInstalledPackages: size：1 pkg:[com.example.myapplication]<br>getAllLauncherIconPackages: size:<strong>279</strong> pkg:[com.android.browser, com.android.camera, com.android.contacts…………</p></blockquote><p><code>getInstalledPackages</code> 只能获取到自己的应用，且会被权限监控记录，<code>queryIntentActivities</code> 可以获取所有带有桌面属性的应用</p><h4 id="情况3-不申请QUERY-ALL-PACKAGES但声明queries"><a href="#情况3-不申请QUERY-ALL-PACKAGES但声明queries" class="headerlink" title="情况3 不申请QUERY_ALL_PACKAGES但声明queries"></a>情况3 不申请<code>QUERY_ALL_PACKAGES</code>但声明queries</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">queries</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">queries</span>&gt;</span><br></code></pre></td></tr></table></figure><p>oppo</p><blockquote><p>getInstalledPackages: size：1 pkg:[com.example.myapplication]</p><p>getAllLauncherIconPackages: size:<strong>155</strong> pkg:[com.android.contacts,……………</p></blockquote><p>xiaomi</p><blockquote><p>getInstalledPackages: size：1 pkg:[com.example.myapplication]<br>getAllLauncherIconPackages: size:<strong>279</strong> pkg:[com.android.browser………..</p></blockquote><p><code>getInstalledPackages</code> 只能获取到自己的应用，且会被权限监控记录，<code>queryIntentActivities</code> 可以获取所有带有桌面属性的应用</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>还是很多应用申请了QUERY_ALL_PACKAGES 权限的，意味着很容易收集手机里面的安装列表。或者不申请QUERY_ALL_PACKAGES，直接声明queries，比如微信就是这么干的。所以厂商的这个应用列表管控能起到的作用可能不大。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">intent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">action</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">category</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">intent</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250511204049921.jpg" alt="IMG_20250511_203845" style="zoom:25%;" /><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>一般来说，这些权限都是通过 <strong>AppOps</strong>管控的，当初安卓 6 加入运行时权限时，对于那些没有适配运行时权限的应用，就是通过<strong>AppOps</strong>管控的。</p><p>oppo</p><blockquote><p>OP5DD3L1:&#x2F; $ appops get com.example.myapplication</p><p>GET_INSTALLED_APPS: ignore</p></blockquote><p>xiaomi</p><blockquote><p>fuxi:&#x2F; $ appops get com.example.myapplication</p><p>MIUIOP(10022): ignore; time&#x3D;+7h1m54s781ms ago; rejectTime&#x3D;+32m9s128ms ago</p></blockquote><p><code>public static final int OP_GET_INSTALLED_APPS = 10022;</code></p><p>他们都是只针对getInstalledPackages 权限做管控。有兴趣的可以 pull 手机里面的 framework 和 service jar 包来看一下他们的源代码。</p><h3 id="包可见性"><a href="#包可见性" class="headerlink" title="包可见性"></a>包可见性</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>Google官网特性介绍:</p><p><a href="https://developer.android.google.cn/preview/privacy/package-visibility">https://developer.android.google.cn/preview/privacy/package-visibility</a></p><p>Android 11 更改了应用查询用户已在设备上安装的其他应用以及与之交互的方式。使用 <queries> 元素，应用可以定义一组自身可访问的其他软件包。通过告知系统应向您的应用显示哪些其他软件包，此元素有助于鼓励最小权限原则。此外，此元素还可帮助 Google Play 等应用商店评估应用为用户提供的隐私权和安全性。</p><p>如果您的应用以 Android 11 或更高版本为目标平台，您可能需要在应用的清单文件中添加 <queries> 元素。在 <queries> 元素中，您可以按软件包名称、intent 签名或提供程序授权指定软件包。</p><h4 id="兼容性影响"><a href="#兼容性影响" class="headerlink" title="兼容性影响"></a>兼容性影响</h4><ol><li>SDK接口行为变更</li></ol><p>app默认不再能通过SDK接口获取其他app的信息，例如：</p><p><code>getPackageInfo(getPackageName(), 0)</code> 仍能正常返回应用自身的<code>PackageInfo</code>,但<code>getPackageInfo(“com.another.app”,0)</code>将抛出NameNotFoundException，即使<code>com.another.app</code>已经被安装到设备上。<code>getInstalledPackages(0)</code>，只能返回应用自身，以及少数的核心AOSP应用的信息。</p><ol start="2"><li>其他变更</li></ol><p>app不能感知<code>/data/data/com.another.app</code>等目录的存在。即使<code>com.another.app</code>已经被安装到设备上，app尝试访问<code>/data/data/com.another.app</code>也将提示“File not found”，而不是“Permission denied”。</p><p>类似的目录还有<code>/data/misc/profiles/cur/$&#123;userId&#125;/com.another.app</code>。此变更，可以防止app通过访问目录文件返回的错误不同，来判断特定app是否已被安装。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.android.google.cn/training/package-visibility?hl=zh-cn">Android 上的软件包可见性过滤  |  App architecture  |  Android Developers</a></p><p><a href="https://developer.android.com/training/package-visibility/automatic?hl=zh-cn">了解自动可见的软件包  |  App architecture  |  Android Developers</a></p><p><a href="https://developer.android.com/training/package-visibility/declaring?hl=zh-cn">声明软件包可见性需求  |  App architecture  |  Android Developers</a></p><p><a href="https://developer.android.com/training/package-visibility/testing?hl=zh-cn">测试软件包可见性行为  |  App architecture  |  Android Developers</a></p><p><a href="https://dev.mi.com/xiaomihyperos/documentation/detail?pId=1738">应用TargetSdkVersion 30升级适配指南 | 小米澎湃OS开发者平台</a></p><p><a href="https://open.oppomobile.com/new/developmentDoc/info?id=10724">OPPO 开放平台-OPPO开发者服务中心</a></p><p><a href="https://gddhy.net/2023/android-11-gua-pei-ruan-jian-bao-ke-jian-xing/">Android 11 适配 软件包可见性 | Gddhy’s Blog</a></p><p><a href="https://bbs.kanxue.com/thread-280415.htm">绕过 Android11新特性之 “包的可见性“-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://juejin.cn/post/7353292009086173218">Android11“包可见性”—动态修改queries方案Android 11引入了“包可见性”限制，默认情况下应用 - 掘金</a></p><p><a href="https://www.taf.org.cn/upload/AssociationStandard/TTAF%20108-2022%20%E7%A7%BB%E5%8A%A8%E7%BB%88%E7%AB%AF%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8%E6%9D%83%E9%99%90%E5%AE%9E%E6%96%BD%E6%8C%87%E5%8D%97.pdf">移动终端应用软件列表权限实施指南</a></p><p><a href="https://github.com/getActivity/XXPermissions/blob/master/library/src/main/java/com/hjq/permissions/Permission.java">XXPermissions&#x2F;library&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;hjq&#x2F;permissions&#x2F;Permission.java at master · getActivity&#x2F;XXPermissions</a></p><p><a href="https://gist.github.com/0awawa0/65bf88e43159750f596da194ed923522">XiaomiUtilities.java</a></p><p><a href="https://cn-sec.com/archives/2255540.html">隐私合规之MIUI自启动的监控原理分析 | CN-SEC 中文网</a></p><p><a href="https://juejin.cn/post/7189533089897381944">Android 获取应用列表方法记录</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;昨天使用&lt;strong&gt;做你的图标包&lt;/strong&gt;制作图标包的时候发现我并没有授予它获取应用列表的权限，但是依然可以获取到我安装的应用列表。&lt;/p&gt;
&lt;img</summary>
        
      
    
    
    
    <category term="安卓安全和逆向" scheme="https://iwesley.top/categories/%E5%AE%89%E5%8D%93%E5%AE%89%E5%85%A8%E5%92%8C%E9%80%86%E5%90%91/"/>
    
    
    <category term="jadx" scheme="https://iwesley.top/tags/jadx/"/>
    
    <category term="反编译" scheme="https://iwesley.top/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
    <category term="安卓权限" scheme="https://iwesley.top/tags/%E5%AE%89%E5%8D%93%E6%9D%83%E9%99%90/"/>
    
    <category term="安卓安全" scheme="https://iwesley.top/tags/%E5%AE%89%E5%8D%93%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>好用软件推荐</title>
    <link href="https://iwesley.top/article/9e5c606d/"/>
    <id>https://iwesley.top/article/9e5c606d/</id>
    <published>2025-05-03T08:23:55.000Z</published>
    <updated>2025-06-22T14:39:20.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Universal"><a href="#Universal" class="headerlink" title="Universal"></a>Universal</h2><h3 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h3><ul><li><p>截图：<a href="https://zh.snipaste.com/#">Snipaste - 截图 + 贴图</a></p></li><li><p>NAS 视频播放器：<a href="https://bmh.163.com/">网易爆米花（原网易Filmly） - 智能媒体库&amp;全能播放器</a></p></li><li><p>NAS 音乐播放器：音流，<a href="https://github.com/gitbobobo/StreamMusic">gitbobobo&#x2F;StreamMusic: 支持 Android、iOS、macOS、Windows 平台的 Subsonic&#x2F;Navidrome&#x2F;Jellyfin&#x2F;Emby&#x2F;AudioStation 客户端。</a></p></li><li><p>录屏或者直播：<a href="https://obsproject.com/">Open Broadcaster Software | OBS</a></p></li></ul><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><ul><li><p>klogg：日志查看工具，之前在 Windows 一直用notepad++，它可以高亮标记选中的字符串。但在 Mac 上面，我试了好几个类似的软件都没有该功能，后来，我发现了 klogg，基本满足了我的需求。</p><p>地址：<a href="https://github.com/variar/klogg">variar&#x2F;klogg: Really fast log explorer based on glogg project</a></p></li><li><p>NotepadNext：<a href="https://github.com/dail8859/NotepadNext">dail8859&#x2F;NotepadNext: A cross-platform, reimplementation of Notepad++</a>（V0.12 已经支持高亮了，我提的 issue 如下：<a href="https://github.com/dail8859/NotepadNext/issues/748">hightlight the select text with different color · Issue #748 · dail8859&#x2F;NotepadNext</a>）</p></li><li><p>语雀：高中的时候用有道笔记记录知识点和错题，大学的时候用 OneNote 来记录读书笔记，工作后刚开始用的是印象笔记，后面就转向语雀了。主要用来记录安卓相关的知识点。</p><p>地址：<a href="https://www.yuque.com/">语雀，为每一个人提供优秀的文档和知识库工具</a></p></li><li><p>反编译工具：<a href="https://github.com/skylot/jadx/releases">Releases · skylot&#x2F;jadx</a></p></li></ul><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="开发-1"><a href="#开发-1" class="headerlink" title="开发"></a>开发</h3><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><h3 id="日常-1"><a href="#日常-1" class="headerlink" title="日常"></a>日常</h3><ul><li><p>视频播放：<a href="https://github.com/iina/iina">iina&#x2F;iina: The modern video player for macOS.</a></p></li><li><p>性能监控：<a href="https://github.com/exelban/stats">exelban&#x2F;stats: macOS system monitor in your menu bar</a></p></li><li><p>鼠标控制：自定义滚轮方向和自定义按键功能 <a href="https://github.com/noah-nuebling/mac-mouse-fix/">noah-nuebling&#x2F;mac-mouse-fix: Mac Mouse Fix - Make Your $10 Mouse Better Than an Apple Trackpad!</a></p></li><li><p>显示器控制：<a href="https://github.com/waydabber/BetterDisplay">waydabber&#x2F;BetterDisplay: Unlock your displays on your Mac! Flexible HiDPI scaling, XDR&#x2F;HDR extra brightness, virtual screens, DDC control, extra dimming, PIP&#x2F;streaming, EDID override and lots more!</a></p></li><li><p>moonlight：方便局域网控制 windows 电脑 <a href="https://github.com/moonlight-stream/moonlight-qt">moonlight-stream&#x2F;moonlight-qt: GameStream client for PCs (Windows, Mac, Linux, and Steam Link)</a></p></li></ul><h3 id="开发-2"><a href="#开发-2" class="headerlink" title="开发"></a>开发</h3><ul><li>iTerm：命令行终端工具 <a href="https://iterm2.com/">iTerm2 - macOS Terminal Replacement</a></li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="开发-3"><a href="#开发-3" class="headerlink" title="开发"></a>开发</h3>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;Universal&quot;&gt;&lt;a href=&quot;#Universal&quot; class=&quot;headerlink&quot; title=&quot;Universal&quot;&gt;&lt;/a&gt;Universal&lt;/h2&gt;&lt;h3 id=&quot;日常&quot;&gt;&lt;a href=&quot;#日常&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="非技术" scheme="https://iwesley.top/categories/%E9%9D%9E%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="软件" scheme="https://iwesley.top/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Mac" scheme="https://iwesley.top/tags/Mac/"/>
    
    <category term="Windows" scheme="https://iwesley.top/tags/Windows/"/>
    
    <category term="Linux" scheme="https://iwesley.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>内存性能测试方法</title>
    <link href="https://iwesley.top/article/f42b9418/"/>
    <id>https://iwesley.top/article/f42b9418/</id>
    <published>2025-05-02T15:10:34.000Z</published>
    <updated>2025-05-03T09:31:42.929Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写于 2022 年 6 月 24 日</p></blockquote><h2 id="dd方法测试"><a href="#dd方法测试" class="headerlink" title="dd方法测试"></a>dd方法测试</h2><p>cat proc&#x2F;meminfo </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # cat proc/meminfo <br>MemTotal:        3858576 kB<br>MemFree:          675328 kB<br>MemAvailable:    1142452 kB<br>Buffers:           65280 kB<br>Cached:           992252 kB<br>SwapCached:           40 kB<br>Active:          1144480 kB<br>Inactive:         923220 kB<br>Active(anon):     875244 kB<br>Inactive(anon):   667400 kB<br>Active(file):     269236 kB<br>Inactive(file):   255820 kB<br>Unevictable:        4436 kB<br>Mlocked:            4436 kB<br>SwapTotal:        614396 kB<br>SwapFree:         601596 kB<br>Dirty:                 4 kB<br>Writeback:             0 kB<br>AnonPages:       1014744 kB<br>Mapped:           301460 kB<br>Shmem:            530712 kB<br>KReclaimable:      39912 kB<br>Slab:             142104 kB<br>SReclaimable:      39912 kB<br>SUnreclaim:       102192 kB<br>KernelStack:       33088 kB<br>ShadowCallStack:    2078 kB<br>PageTables:        39964 kB<br>NFS_Unstable:          0 kB<br>Bounce:                0 kB<br>WritebackTmp:          0 kB<br>CommitLimit:     2263732 kB<br>Committed_AS:   47064316 kB<br>VmallocTotal:   262930368 kB<br>VmallocUsed:       56632 kB<br>VmallocChunk:          0 kB<br>Percpu:             2768 kB<br>CmaTotal:        1921024 kB<br>CmaFree:          158092 kB<br></code></pre></td></tr></table></figure><p>剩1.1G左右，所以，我们创建一个挂载在内存上面的分区，大小为可用内存的一半左右。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">mount -o rw,remount /<br>mkdir memtest<br>mount -t tmpfs tmpfs /memtest  -o size=600m<br></code></pre></td></tr></table></figure><h3 id="内存写测试"><a href="#内存写测试" class="headerlink" title="内存写测试"></a>内存写测试</h3><p>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;memtest&#x2F;testfile bs&#x3D;1M count&#x3D;500</p><p>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;memtest&#x2F;testfile bs&#x3D;500M count&#x3D;1</p><p>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;memtest&#x2F;testfile bs&#x3D;512K count&#x3D;1000</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # dd if=/dev/zero of=/memtest/testfile bs=1M count=500<br>500+0 records in<br>500+0 records out<br>524288000 bytes (500 M) copied, 0.782312 s, 639 M/s<br>console:/ # dd if=/dev/zero of=/memtest/testfile bs=500M count=1<br>1+0 records in<br>1+0 records out<br>524288000 bytes (500 M) copied, 1.272919 s, 393 M/s<br>console:/ # dd if=/dev/zero of=/memtest/testfile bs=512K count=1000<br>1000+0 records in<br>1000+0 records out<br>524288000 bytes (500 M) copied, 0.794319 s, 629 M/s<br></code></pre></td></tr></table></figure><h3 id="内存读测试"><a href="#内存读测试" class="headerlink" title="内存读测试"></a>内存读测试</h3><p>dd if&#x3D;&#x2F;memtest&#x2F;testfile  of&#x3D;&#x2F;dev&#x2F;null bs&#x3D;1M count&#x3D;500 </p><p>dd if&#x3D;&#x2F;memtest&#x2F;testfile  of&#x3D;&#x2F;dev&#x2F;null bs&#x3D;500M count&#x3D;1       </p><p>dd if&#x3D;&#x2F;memtest&#x2F;testfile  of&#x3D;&#x2F;dev&#x2F;null bs&#x3D;512K count&#x3D;1000      </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # dd if=/memtest/testfile  of=/dev/null bs=1M count=500              <br>500+0 records in<br>500+0 records out<br>524288000 bytes (500 M) copied, 0.340277 s, 1.4 G/s<br>console:/ # dd if=/memtest/testfile  of=/dev/null bs=500M count=1                          &lt;<br>1+0 records in<br>1+0 records out<br>524288000 bytes (500 M) copied, 0.682501 s, 733 M/s<br>console:/ # dd if=/memtest/testfile  of=/dev/null bs=512K count=1000                       &lt;<br>1000+0 records in<br>1000+0 records out<br>524288000 bytes (500 M) copied, 0.226277 s, 2.1 G/s<br></code></pre></td></tr></table></figure><h2 id="Steam-benchmark（推荐）"><a href="#Steam-benchmark（推荐）" class="headerlink" title="Steam benchmark（推荐）"></a>Steam benchmark（推荐）</h2><p><a href="https://github.com/wesley666/source/blob/main/stream_benchmark">source&#x2F;stream_benchmark at main · wesley666&#x2F;source</a></p><p>Adb push到data&#x2F;local&#x2F;tmp目录，赋予执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/data/local/tmp # ./stream_benchmark                                   <br>-------------------------------------------------------------<br>STREAM version $Revision: 5.10 $<br>-------------------------------------------------------------<br>This system uses 8 bytes per array element.<br>-------------------------------------------------------------<br>Array size = 10000000 (elements), Offset = 0 (elements)<br>Memory per array = 76.3 MiB (= 0.1 GiB).<br>Total memory required = 228.9 MiB (= 0.2 GiB).<br>Each kernel will be executed 10 times.<br> The *best* time for each kernel (excluding the first iteration)<br> will be used to compute the reported bandwidth.<br>-------------------------------------------------------------<br>Your clock granularity/precision appears to be 1 microseconds.<br>Each test below will take on the order of 21376 microseconds.<br>   (= 21376 clock ticks)<br>Increase the size of the arrays if this shows that<br>you are not getting at least 20 clock ticks per test.<br>-------------------------------------------------------------<br>WARNING -- The above is only a rough guideline.<br>For best results, please be sure you know the<br>precision of your system timer.<br>-------------------------------------------------------------<br>Function    Best Rate MB/s  Avg time     Min time     Max time<br>Copy:           10748.4     0.015937     0.014886     0.017156<br>Scale:           8149.9     0.020030     0.019632     0.020463<br>Add:             9070.6     0.027085     0.026459     0.028024<br>Triad:           8255.9     0.029891     0.029070     0.030490<br>-------------------------------------------------------------<br>Solution Validates: avg error less than 1.000000e-13 on all three arrays<br>-------------------------------------------------------------<br></code></pre></td></tr></table></figure><p>Copy操作最为简单，它先访问一个内存单元读出其中的值，再将值写入到另一个内存单元。</p><p>Scale操作先从内存单元读出其中的值，作一个乘法运算，再将结果写入到另一个内存单元。</p><p>Add操作先从内存单元读出两个值，做加法运算， 再将结果写入到另一个内存单元。</p><p>Triad的中文含义是将三个组合起来，在本测试中表示的意思是将Copy、Scale、Add三种操作组合起来进行测试。具体操作方式是：先从内存单元中中读两个值a、b，对其进行乘加混合运算（a + 因子 * b ） ，将运算结果写入到另一个内存单元。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;写于 2022 年 6 月 24 日&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;dd方法测试&quot;&gt;&lt;a href=&quot;#dd方法测试&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Android性能优化" scheme="https://iwesley.top/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="内存" scheme="https://iwesley.top/tags/%E5%86%85%E5%AD%98/"/>
    
    <category term="性能工具" scheme="https://iwesley.top/tags/%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>EMMC存储性能测试方法</title>
    <link href="https://iwesley.top/article/7cf0bd29/"/>
    <id>https://iwesley.top/article/7cf0bd29/</id>
    <published>2025-05-02T15:10:23.000Z</published>
    <updated>2025-05-03T09:31:42.928Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记于 2022 年 9 月 15 日</p></blockquote><p>参考<a href="https://qiushao.net/2020/02/12/Android/emmc-performance-test/index.html">Android-emmc性能测试 | 一叶知秋</a>进行实践操作</p><h1 id="dd-命令"><a href="#dd-命令" class="headerlink" title="dd 命令"></a>dd 命令</h1><h2 id="页面缓存"><a href="#页面缓存" class="headerlink" title="页面缓存"></a>页面缓存</h2><p>为了测试 emmc 的真实读写性能，我们需要先把页面缓存给清理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Shell">echo 1 &gt; /proc/sys/vm/drop_caches<br>console:/ # echo 1 &gt; /proc/sys/vm/drop_caches                                  <br>console:/ # busybox dd if=/dev/block/mmcblk0 of=/dev/null bs=1M count=512                          &lt;<br>512+0 records in<br>512+0 records out<br>536870912 bytes (512.0MB) copied, 2.491718 seconds, 205.5MB/s<br>console:/ # busybox dd if=/dev/block/mmcblk0 of=/dev/null bs=1M count=512                          &lt;<br>512+0 records in<br>512+0 records out<br>536870912 bytes (512.0MB) copied, 0.290948 seconds, 1.7GB/s<br><br>console:/ # echo 1 &gt; /proc/sys/vm/drop_caches <br>console:/ # busybox  dd if=/dev/block/mmcblk0 of=/dev/null bs=1M count=512                          &lt;<br>512+0 records in<br>512+0 records out<br>536870912 bytes (512.0MB) copied, 2.508393 seconds, 204.1MB/s<br>console:/ # <br></code></pre></td></tr></table></figure><p>连续执行两次 <code>busybox  dd if=/dev/block/mmcblk0 of=/dev/null bs=1M count=512</code> ，从 &#x2F;dev&#x2F;block&#x2F;mmcblk0 (即emmc) 块设备中读取内容，写到 <code>/dev/null</code> 。</p><p><code>/dev/null</code> 是一个虚拟设备，写入这个路径并不会保存数据，可以认为这个设备的写入速度无限大，也就是写入速度不会成为这个命令的瓶颈，我们这个命令主要是为了测试 emmc 的读取速度。可以看到第一次执行的结果是 205.5MB&#x2F;s，第二次执行的结果是 1.7GB&#x2F;s。从这个数据来看，页面缓存极大的提高了热点文件的读取速度。然后我们用 <code>echo 1 &gt; /proc/sys/vm/drop_caches</code>命令清除一下页面缓存，再执行同样的 <code>dd</code>命令，发现速度跟第一次差不多了。</p><h2 id="写入性能测试"><a href="#写入性能测试" class="headerlink" title="写入性能测试"></a>写入性能测试</h2><h3 id="写入块设备"><a href="#写入块设备" class="headerlink" title="写入块设备"></a>写入块设备</h3><p>cache 分区一般是用来存放 OTA 升级包的，正常状态下挂载失败也不影响系统的正常运行，所以我们拿 cache 分区来作写入测试，先找到 cache 对应的块设备文件（df -h命令显示异常的话，可以执行<code>ls -l /dev/block/platform/*/by-name/cache</code>）</p><p><strong>注意：本测试方法可能会损坏cache分区导致ota失败，出现这种情况建议恢复出厂设置或者线刷。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # df -h<br>Filesystem            Size  Used Avail Use% Mounted on<br>tmpfs                 1.5G  892K  1.5G   1% /dev<br>tmpfs                 1.5G     0  1.5G   0% /mnt<br>/dev/block/mmcblk0p26  14M  168K   14M   2% /metadata<br>/dev/block/dm-1       1.1G  0.9G  199M  84% /<br>/dev/block/mmcblk0p40 379M   24M  356M   7% /wesley<br>/dev/block/mmcblk0p38 379M  154M  226M  41% /factory<br>/dev/block/mmcblk0p39  18M  1.3M   17M   8% /atv<br>/dev/block/mmcblk0p36 9.1M   24K  9.0M   1% /oem<br>/dev/block/dm-2       340M  240M  100M  71% /vendor<br>/dev/block/dm-0       167M   84K  167M   1% /mnt/scratch<br>overlay               167M   84K  167M   1% /system_ext<br>overlay               167M   84K  167M   1% /product<br>overlay               167M   84K  167M   1% /odm<br>tmpfs                 1.5G     0  1.5G   0% /apex<br>tmpfs                 1.5G  248K  1.5G   1% /linkerconfig<br>tmpfs                  20M  1.0M   19M   6% /mnt/vendor/rtdlog<br>tmpfs                  20M  8.0K   20M   1% /tmp<br>/dev/block/mmcblk0p23 1.4G  3.9M  1.4G   1% /cache<br>/dev/block/mmcblk0p31 236M   12M  224M   6% /mnt/vendor/tvconfigs<br>/dev/block/mmcblk0p32  26M   84K   26M   1% /mnt/vendor/tvdata<br>/dev/block/mmcblk0p33  18M   36K   18M   1% /mnt/vendor/impdata<br>/dev/block/mmcblk0p4  976K  228K  748K  24% /mnt/vendor/factory<br>/dev/block/mmcblk0p6  976K   28K  948K   3% /mnt/vendor/factory_ro<br>tmpfs                  20M     0   20M   0% /shm<br>tmpfs                 8.0M     0  8.0M   0% /mnt/EPGdb<br>/dev/block/mmcblk0p42 107G  4.8G  102G   5% /data<br>tmpfs                 1.5G     0  1.5G   0% /data_mirror<br>/dev/fuse             107G  4.8G  102G   5% /mnt/user/0/emulated<br>console:/ # <br></code></pre></td></tr></table></figure><p>cache分区的块设备文件为&#x2F;dev&#x2F;block&#x2F;mmcblk0p23。</p><p>写入测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ #  echo 1 &gt; /proc/sys/vm/drop_caches    <br>console:/ #  busybox dd if=/dev/zero of=/dev/block/mmcblk0p23 bs=1M count=1024 conv=fsync<br>1024+0 records in<br>1024+0 records out<br>1073741824 bytes (1.0GB) copied, 11.371810 seconds, 90.0MB/s<br></code></pre></td></tr></table></figure><p>输入文件为 &#x2F;dev&#x2F;zero，是一个虚拟设备，我们可以认为这个设备的读取速度无限大，也就是读取速度不会影响到写入的速度。</p><p>bs&#x3D;1M : 一次写入 1M</p><p>count&#x3D;1024 : 写入 1024 次，也就是写入的数据总量为 1G</p><p>conv&#x3D;fsync : dd 结束前，把数据同步到 emmc，如果没加这个参数的话，数据可能还在缓存之中。为了确保数据准确，一定要加这个参数。</p><p>可以重复测试几次</p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # echo 1 &gt; /proc/sys/vm/drop_caches<br>console:/ # busybox dd if=/dev/zero of=/data/ddtest.bin bs=1M count=1024 conv=fsync                   <br>1024+0 records in<br>1024+0 records out<br>1073741824 bytes (1.0GB) copied, 15.211609 seconds, 67.3MB/s<br>console:/ #<br></code></pre></td></tr></table></figure><p>要重复测试几次。相对直接写块设备文件慢了 30M&#x2F;s 左右。这可能是文件系统带来的影响。</p><h2 id="读取测试"><a href="#读取测试" class="headerlink" title="读取测试"></a>读取测试</h2><h3 id="读取块设备"><a href="#读取块设备" class="headerlink" title="读取块设备"></a>读取块设备</h3><p>直接用我们上面介绍清除缓存的例子就行，这里就不再重复了。</p><p>从上面的例子得到的数据为 205M&#x2F;s 左右。</p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # echo 1 &gt; /proc/sys/vm/drop_caches        <br>console:/ # busybox dd if=/data/ddtest.bin of=/dev/null bs=1M count=1024<br>1024+0 records in<br>1024+0 records out<br>1073741824 bytes (1.0GB) copied, 5.464306 seconds, 187.4MB/s<br>console:/ # <br></code></pre></td></tr></table></figure><p>直接拿测试写入速度时生成的文件，重复测试几次，速度基本上在 187MB&#x2F;s 左右。</p><h1 id="iozone"><a href="#iozone" class="headerlink" title="iozone"></a>iozone</h1><p>Android 系统源码中并没有 iozone，我们从官网上下载编译，我下载时最新版本为iozone3_493，这个版本已经有 Android.mk 在代码里面了，将源码放到 Android系统源码里面 mm 即可。下面已经是我编译好的文件。对应不同硬件使用对应版本即可，把文件push到&#x2F;data&#x2F;local&#x2F;tmp&#x2F;，并赋予执行权限。</p><p><a href="https://github.com/wesley666/source/blob/main/izone.zip">source&#x2F;izone.zip at main · wesley666&#x2F;source</a></p><h2 id="随机读写测试"><a href="#随机读写测试" class="headerlink" title="随机读写测试"></a>随机读写测试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console: echo 1 &gt; /proc/sys/vm/drop_caches                                              &lt;<br>console:/data/local/tmp # ./iozone -azecI -+n -L64 -S32 -r1m -s1024m -i0 -i1 -i2 -w -f /data/iozonetest.bin <br>        Iozone: Performance Test of File I/O<br>                Version $Revision: 3.493 $<br>                Compiled for 32 bit mode.<br>                Build: linux-arm <br><br>        Contributors:William Norcott, Don Capps, Isom Crawford, Kirby Collins<br>                     Al Slater, Scott Rhine, Mike Wisner, Ken Goss<br>                     Steve Landherr, Brad Smith, Mark Kelly, Dr. Alain CYR,<br>                     Randy Dunlap, Mark Montague, Dan Million, Gavin Brebner,<br>                     Jean-Marc Zucconi, Jeff Blomberg, Benny Halevy, Dave Boone,<br>                     Erik Habbinga, Kris Strecker, Walter Wong, Joshua Root,<br>                     Fabrice Bacchella, Zhenghua Xue, Qin Li, Darren Sawyer,<br>                     Vangel Bojaxhi, Ben England, Vikentsi Lapa,<br>                     Alexey Skidanov, Sudhir Kumar.<br><br>        Run began: Fri Jun 10 19:34:04 2022<br><br>        Auto Mode<br>        Cross over of record size disabled.<br>        Include fsync in write timing<br>        Include close in write timing<br>        O_DIRECT feature enabled<br>        No retest option selected<br>        Record Size 1024 kB<br>        File size set to 1048576 kB<br>        Setting no_unlink<br>        Command line used: ./iozone -azecI -+n -L64 -S32 -r1m -s1024m -i0 -i1 -i2 -w -f /data/iozonetest.bin<br>        Output is in kBytes/sec<br>        Time Resolution = 0.000001 seconds.<br>        Processor cache size set to 32 kBytes.<br>        Processor cache line size set to 64 bytes.<br>        File stride size set to 17 * record size.<br>                                                              random    random     bkwd    record    stride                                    <br>              kB  reclen    write  rewrite    read    reread    read     write     read   rewrite      read   fwrite frewrite    fread  freread<br>         1048576    1024   150737        0   210429        0   208681   173348                                                                <br><br>iozone test complete.<br>console:/data/local/tmp # <br></code></pre></td></tr></table></figure><p>从结果来看，写速度为150MB&#x2F;s，读速度为210MB&#x2F;s，随机读速度为208MB&#x2F;s。　随机写速度为 173MB&#x2F;s。</p><p>重复测试几次结果差不多，读的速度基本跟 dd 的一致。写入比 dd 的快了一倍几，这里面的差距待研究，可能跟参数设置有关。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./iozone -azecI -+n -L64 -S32 -r1m -s1024m -i0 -i1 -i2 -w -f /data/iozonetest.bin [-Rb /sdcard/emmc_test.xls] <br></code></pre></td></tr></table></figure><p>各个参数定义如下：</p><p>a: 使用全自动模式。生成涵盖所有测试操作的输出，记录大小为4k到16M，文件大小为64k到512M。</p><p>z: 与-a一起使用以测试所有可能的记录大小。通常，Iozone在全自动模式下使用时会忽略对非常大的文件的小记录大小的测试。此选项强制iozone在自动测试中也包括小记录大小。</p><p>e: 在时间计算中包括flush（fsync，fflush）</p><p>c: 在计时计算中包括close（）。 仅当您怀疑当前正在测试的操作系统中的close（）被破坏时，这才有用。 它对于NFS3测试也很有用，可以帮助识别nfs3_commit是否运行良好。</p><p>I: 对所有文件操作使用DIRECT I&#x2F;O. 告诉文件系统所有操作都绕过缓冲区缓存并直接转到磁盘。 这也将在VxFS上使用VX_DIRECT，在Linux上使用O_DIRECT，在Solaris上使用directio（）。</p><p>-+n: 没有选择重新测试。使用此选项可防止重新测试运行。</p><p>L64: Set processor cache line size to 64 Bytes</p><p>S32: Set processor cache size to 32KBytes</p><p>r2m: block size 指定一次写入&#x2F;读出的块大小：1M</p><p>s1024m: 用于指定要测试的文件的大小：1024M</p><p>-i N 用来选择测试项, 比如Read&#x2F;Write&#x2F;Random 比较常用的是0 1 2,可以指定成-i 0 -i 1 -i2.这些别的详细内容请查man</p><p>  0&#x3D;write&#x2F;rewrite</p><p>  1&#x3D;read&#x2F;re-read</p><p>  2&#x3D;random-read&#x2F;write</p><p>  3&#x3D;Read-backwards</p><p>  4&#x3D;Re-write-record</p><p>  5&#x3D;stride-read</p><p>  6&#x3D;fwrite&#x2F;re-fwrite</p><p>  7&#x3D;fread&#x2F;Re-fread</p><p>  8&#x3D;random mix</p><p>  9&#x3D;pwrite&#x2F;Re-pwrite</p><p>  10&#x3D;pread&#x2F;Re-pread</p><p>  11&#x3D;pwritev&#x2F;Re-pwritev</p><p>  12&#x3D;preadv&#x2F;Re-preadv</p><p>-+b 400000,30000: burst size 400000KBytes,sleep between burst 30000ms</p><p>w: 当临时文件使用完毕时不删除它们。把它们留在文件系统中。</p><p>f: 指定测试文件的名字(这个文件必须指定你要测试的那个硬件中)</p><p>可选参数：</p><p>R: Generate Excel report</p><p>b: Filename Create Excel worksheet file,emmc_test.xls</p><p>注意：</p><p>根据测试文件大小的不同，iozone 磁盘读写性能的测试方法主要包括1倍内存测试和2倍内存测试（避免缓存的影响）。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://qiushao.net/2020/02/12/Android/emmc-performance-test/index.html">Android-emmc性能测试 | 一叶知秋</a></p><p><a href="https://github.com/axboe/fio">axboe&#x2F;fio: Flexible I&#x2F;O Tester</a></p><p><a href="https://github.com/DevriesL/RaptorMark">DevriesL&#x2F;RaptorMark</a></p><p><a href="https://www.iozone.org/">Iozone Filesystem Benchmark</a></p><p><a href="https://www.iozone.org/src/current/">iozone: Index of &#x2F;src&#x2F;current</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;记于 2022 年 9 月 15 日&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考&lt;a</summary>
        
      
    
    
    
    <category term="Android性能优化" scheme="https://iwesley.top/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="EMMC" scheme="https://iwesley.top/tags/EMMC/"/>
    
    <category term="性能工具" scheme="https://iwesley.top/tags/%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>btrace2.0使用方法</title>
    <link href="https://iwesley.top/article/788e44fe/"/>
    <id>https://iwesley.top/article/788e44fe/</id>
    <published>2025-05-02T09:32:42.000Z</published>
    <updated>2025-05-02T09:50:02.236Z</updated>
    
    <content type="html"><![CDATA[<p>2022 年我研究安卓性能优化的时候，写过一篇：<a href="https://iwesley.top/article/69f32e87/">btrace1.0使用方法 - Wesley’s Blog</a>，现在 brace 进化到 2.0 了，让我们一起来看看如何使用。</p><p>具体的接入流程可以看官方文档：</p><p><a href="https://github.com/bytedance/btrace">bytedance&#x2F;btrace: 🔥🔥 btrace(AKA RheaTrace) is a high performance Android trace tool which is based on Perfetto, it support to define custom events automatically during building apk and using bhook to provider more native events like Render&#x2F;Binder&#x2F;IO etc.</a></p><p>我这里主要记录一下接入的一些报错问题：</p><p>目前最新版本是2.0.3-rc03</p><p>项目的gradle版本是7.0.2，gradle plugin是7.0.0</p><h2 id="编译报错"><a href="#编译报错" class="headerlink" title="编译报错"></a>编译报错</h2><blockquote><p>org.gradle.workers.WorkerExecutionException: There was a failure while executing work items</p><p>​at org.gradle.workers.internal.DefaultWorkerExecutor.workerExecutionException(DefaultWorkerExecutor.java:270)</p><p>​at org.gradle.workers.internal.DefaultWorkerExecutor.await(DefaultWorkerExecutor.java:252)</p><p>​at com.android.build.gradle.internal.tasks.DexArchiveBuilderTaskDelegate.doProcess(DexArchiveBuilderTaskDelegate.kt:227)</p><p>​at com.android.build.gradle.internal.tasks.DexArchiveBuilderTask.doTaskAction(DexArchiveBuilderTask.kt:256)</p><p>​at com.android.build.gradle.internal.tasks.NewIncrementalTask$taskAction$$inlined$recordTaskAction$1.invoke(BaseTask.kt:66)</p><p>​at com.android.build.gradle.internal.tasks.Blocks.recordSpan(Blocks.java:51)</p><p>Caused by: com.android.tools.r8.CompilationFailedException: <strong>Compilation failed to complete</strong>, position: Lcom&#x2F;xxx&#x2F;web&#x2F;CommonHeader;<init>()V, origin: D:\Project\p_dev\app\build\intermediates\transforms\analyticsTrack\Production\release\720.jar:com&#x2F;xxx&#x2F;web&#x2F;CommonHeader.class</p></blockquote><p>需要关注<strong>Compilation failed to complete</strong>后面的类</p><p>如果哪个类报错就可以加入下面的配置，路径”${project.rootDir}&#x2F;trace-filter&#x2F;traceFilter.txt”</p><p><a href="https://github.com/bytedance/btrace/blob/master/GRADLE_CONFIG.MD">btrace&#x2F;GRADLE_CONFIG.MD at master · bytedance&#x2F;btrace</a></p><p>注意：allowpackage必须先配置，blockpackage必须在其子包下面，可以是类或者包名</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">package</span>]<br><span class="hljs-string">-allowpackage</span> <span class="hljs-string">com</span><br><span class="hljs-string">-allowpackage</span> <span class="hljs-string">org</span><br><span class="hljs-string">-allowpackage</span> <span class="hljs-string">androidx</span><br><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">androidx/exifinterface/media</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">com/google/android/exoplayer2/ui</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">com/xxx/web/CommonHeader</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">org/bouncycastle/jcajce/provider/asymmetric/x509</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">org/bouncycastle/jcajce/provider/asymmetric/dh</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">com/nineoldandroids/util</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">org/bouncycastle/jce/provider/JCEDHPublicKey</span><br><span class="hljs-comment"># org/bouncycastle/jce/provider/X509CertificateObject</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">org/bouncycastle/jce/provider</span><br></code></pre></td></tr></table></figure><h3 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h3><p>如果是windows用户，traceFilter.txt换行符必须改为LF</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>com&#x2F;bytedance&#x2F;rheatrace&#x2F;plugin&#x2F;compiling&#x2F;filter&#x2F;RheaTraceMethodFilter.kt</p><p>parseTraceFilterFile</p><p>methodKeepStr.trim { it &lt;&#x3D; ‘ ‘ }.replace(“&#x2F;“, “.”).split(“\n”).toTypedArray()</p><p>这里只替换了\n，没有替换\r，会导致解析出来的包名带有\r，导致checkPath失败。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkPath</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">if</span> (allowPackages.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (blockPath <span class="hljs-keyword">in</span> blockPackages) &#123;<br>        <span class="hljs-keyword">var</span> isContain = <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">for</span> (allowPackage <span class="hljs-keyword">in</span> allowPackages) &#123;<br>            <span class="hljs-keyword">if</span> (blockPath == allowPackage) &#123;<br>                RheaLog.e(TAG, <span class="hljs-string">&quot;blockpackage cannot be equal to allowpackage:%s&quot;</span>, blockPath)<br>            &#125;<br>            <span class="hljs-keyword">if</span> (blockPath.startsWith(allowPackage)) &#123;<br>                isContain = <span class="hljs-literal">true</span><br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!isContain) &#123;<br>            <span class="hljs-keyword">throw</span> GradleException(<span class="hljs-string">&quot;allowpackage do not contains <span class="hljs-variable">$blockPath</span>&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7350256387161047077">BTrace和Perfetto如何分析性能手把手教你使用BTrace和Perfetto分析性能 高级android开发工 - 掘金</a></p><p><a href="https://mvnrepository.com/artifact/com.bytedance.btrace/rhea-gradle-plugin">Maven Repository: com.bytedance.btrace » rhea-gradle-plugin</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;2022 年我研究安卓性能优化的时候，写过一篇：&lt;a href=&quot;https://iwesley.top/article/69f32e87/&quot;&gt;btrace1.0使用方法 - Wesley’s Blog&lt;/a&gt;，现在 brace 进化到 2.0</summary>
        
      
    
    
    
    <category term="Android性能优化" scheme="https://iwesley.top/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="性能优化" scheme="https://iwesley.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="btrace" scheme="https://iwesley.top/tags/btrace/"/>
    
    <category term="systrace" scheme="https://iwesley.top/tags/systrace/"/>
    
    <category term="perfetto" scheme="https://iwesley.top/tags/perfetto/"/>
    
  </entry>
  
  <entry>
    <title>btrace1.0使用方法</title>
    <link href="https://iwesley.top/article/69f32e87/"/>
    <id>https://iwesley.top/article/69f32e87/</id>
    <published>2025-05-02T08:35:23.000Z</published>
    <updated>2025-05-02T09:30:00.285Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记于 2022 年 6 月 24 日</p></blockquote><p><strong>注意：目前仅限于macos和linux使用</strong></p><p><a href="https://github.com/bytedance/btrace/blob/master/README.zh-CN.md">btrace&#x2F;README.zh-CN.md at master · bytedance&#x2F;btrace · GitHub</a></p><p>btrace(又名 RheaTrace) 是一个基于 <a href="https://developer.android.com/topic/performance/tracing">Systrace</a> 实现的高性能 Android trace 工具，它支持在 App 编译期间自动注入自定义事件，并使用 <a href="https://github.com/bytedance/bhook">bhook</a> 额外提供 IO 等 native 事件。</p><h2 id="关键特征"><a href="#关键特征" class="headerlink" title="关键特征"></a>关键特征</h2><p>支持自动注入自定义事件，在编译 Apk 期间为 App 方法自动注入Trace#beginSection(String) 和 Trace#endSection()。</p><p>提供额外 IO 等 native 事件，方便定位耗时原因。</p><p>支持仅采集主线程 trace 事件。</p><p>使用便捷，稳定性高，性能优于 Systrace。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><strong>注意：存储权限要申请</strong></p><p>自定义的application必须有以下代码，否则会导致btrace插入初始化代码失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@OverRide</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachBaseContext</span><span class="hljs-params">(Context base)</span> &#123;<br>     <span class="hljs-built_in">super</span>.attachBaseContext(base);<br>&#125;<br></code></pre></td></tr></table></figure><p>在您项目根目录下 build.gradle 文件中增加 rhea-gradle-plugin 作为依赖。</p><p>注意：btrace版本号可以在这里查询：<a href="https://search.maven.org/">https://search.maven.org/</a> 如果打不开可以在阿里云查询：<a href="https://developer.aliyun.com/mvn/search">https://developer.aliyun.com/mvn/search</a></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250502163842049.png" alt="image-20250502163841997"></p><p>目前版本号是1.0.2</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Groovy">buildscript &#123;<br>    repositories &#123;<br>        ...<br>        mavenCentral()<br>        ...<br>    &#125;<br>    dependencies &#123;<br>        classpath <span class="hljs-string">&#x27;com.bytedance.btrace:rhea-gradle-plugin:1.0.2&#x27;</span><br>    &#125;<br>&#125;<br><br>allprojects &#123;<br>    repositories &#123;<br>        ...<br>        mavenCentral()<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着在 app&#x2F;build.gradle 文件中应用如下所示插件和依赖。</p><h3 id="androidx项目"><a href="#androidx项目" class="headerlink" title="androidx项目"></a>androidx项目</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Groovy">dependencies &#123;<br>    <span class="hljs-comment">//rheatrace core lib</span><br>    implementation <span class="hljs-string">&quot;com.bytedance.btrace:rhea-core:1.0.2&quot;</span><br>&#125;<br><br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;com.bytedance.rhea-trace&#x27;</span><br>rheaTrace &#123;<br><br>   compilation &#123;<br>      <span class="hljs-comment">//为减少 APK 体积, 你可以为 App 中需要跟踪的方法设置 id 以此来跟踪此自定义事件, 默认值 false。</span><br>      traceWithMethodID = <span class="hljs-literal">false</span> <br>      <span class="hljs-comment">//该文件配置决定哪些方法您不希望跟踪, 默认值 null。</span><br>      traceFilterFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/traceFilter.txt&quot;</span><br>      <span class="hljs-comment">//用特指定方法 id 来设置自定义事件名称, 默认值 null。</span><br>      applyMethodMappingFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/keep-method-id.txt&quot;</span><br>  &#125;<br><br>   runtime &#123;<br>      <span class="hljs-comment">//仅在主线程抓取跟踪事件, 默认值 false。</span><br>      mainThreadOnly <span class="hljs-literal">true</span> <br>      <span class="hljs-comment">//在 App 启动之初开始抓取跟踪事件, 默认值 true。</span><br>      startWhenAppLaunch <span class="hljs-literal">true</span><br>      <span class="hljs-comment">//指定内存存储 atrace 数据 ring buffer 的大小。</span><br>      atraceBufferSize <span class="hljs-string">&quot;500000&quot;</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="android-support项目"><a href="#android-support项目" class="headerlink" title="android-support项目"></a>android-support项目</h3><p><strong>本地需要依赖的文件：</strong> <a href="https://github.com/wesley666/source/blob/main/btrace-Android-support.zip">https://github.com/wesley666/source/blob/main/btrace-Android-support.zip</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Groovy">dependencies &#123;<br>    <span class="hljs-comment">//rheatrace core lib</span><br>    implementation <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-stdlib:1.3.72&quot;</span><br>    implementation files(<span class="hljs-string">&#x27;libs/rhea-common-1.0.2.jar&#x27;</span>)<br>    implementation files(<span class="hljs-string">&#x27;libs/rhea-core-release.aar&#x27;</span>)<br>    implementation files(<span class="hljs-string">&#x27;libs/rhea-atrace-release.aar&#x27;</span>)<br>    implementation <span class="hljs-string">&quot;com.bytedance:bytehook:1.0.3&quot;</span><br>&#125;<br><br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;com.bytedance.rhea-trace&#x27;</span><br>rheaTrace &#123;<br><br>   compilation &#123;<br>      <span class="hljs-comment">//为减少 APK 体积, 你可以为 App 中需要跟踪的方法设置 id 以此来跟踪此自定义事件, 默认值 false。</span><br>      traceWithMethodID = <span class="hljs-literal">false</span> <br>      <span class="hljs-comment">//该文件配置决定哪些方法您不希望跟踪, 默认值 null。</span><br>      traceFilterFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/traceFilter.txt&quot;</span><br>      <span class="hljs-comment">//用特指定方法 id 来设置自定义事件名称, 默认值 null。</span><br>      applyMethodMappingFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/keep-method-id.txt&quot;</span><br>  &#125;<br><br>   runtime &#123;<br>      <span class="hljs-comment">//仅在主线程抓取跟踪事件, 默认值 false。</span><br>      mainThreadOnly <span class="hljs-literal">true</span> <br>      <span class="hljs-comment">//在 App 启动之初开始抓取跟踪事件, 默认值 true。</span><br>      startWhenAppLaunch <span class="hljs-literal">true</span><br>      <span class="hljs-comment">//指定内存存储 atrace 数据 ring buffer 的大小。</span><br>      atraceBufferSize <span class="hljs-string">&quot;500000&quot;</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于 <code>rheaTrace </code>，从<a href="https://github.com/bytedance/btrace/blob/master/GRADLE_CONFIG.zh-CN.MD">RheaTrace Gradle Config</a>中了解更多信息。</p><p>最后，检测您电脑 python 版本，由于 Systrace 的关系 RheaTrace 仅支持 python 2.7 版本，请将 systrace 环境变量配置在 <em>~&#x2F;.bash_profile</em> 文件中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">export PATH=$&#123;PATH&#125;:/Users/$&#123;user_name&#125;/Library/Android/sdk/platform-tools/systrace<br></code></pre></td></tr></table></figure><p>RheaTrace使用方法请参考：</p><p><a href="https://github.com/bytedance/btrace/blob/master/README.zh-CN.md">btrace&#x2F;README.zh-CN.md at master · bytedance&#x2F;btrace · GitHub</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;记于 2022 年 6 月 24 日&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：目前仅限于macos和linux使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Android性能优化" scheme="https://iwesley.top/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="性能优化" scheme="https://iwesley.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="btrace" scheme="https://iwesley.top/tags/btrace/"/>
    
    <category term="systrace" scheme="https://iwesley.top/tags/systrace/"/>
    
  </entry>
  
  <entry>
    <title>音视频缓存数学模型</title>
    <link href="https://iwesley.top/article/36f6f986/"/>
    <id>https://iwesley.top/article/36f6f986/</id>
    <published>2025-03-16T09:55:28.000Z</published>
    <updated>2025-03-16T10:04:42.652Z</updated>
    
    <content type="html"><![CDATA[<p class="note note-success">2024年8月的笔记</p><p>播放器作为消费者，缓存作为生产者。</p><h2 id="进入缓冲一次"><a href="#进入缓冲一次" class="headerlink" title="进入缓冲一次"></a>进入缓冲一次</h2><p>设消费者速率为v1，生产者为v2，视频长度为l，x为生产者至少距离消费者多远才能保证在播完视频前两者重合。实际上就是一个追及问题。</p><p>v1<em>t &#x3D; v2</em>t + x，即 l &#x3D; v2*l&#x2F;v1 + x，因为播放器速度是1，继续简化得 x &#x3D; l(1 - v2)</p><p>如果v2大于1，即满足消费者需求时，可以流畅播放。</p><p>设l是一部45分钟的电视剧，即x &#x3D; 45<em>60</em>(1 - v2)</p><p>如果v2是1，即1s可以缓存1s时长视频，则x &#x3D; 0</p><p>v2是0.9，即1s可以缓存0.9s时长视频，则 x &#x3D; 270，意味着要提前缓存270s的视频才可以后续不进入缓冲状态。</p><p>同理，v2&#x3D;0.8，x&#x3D; 540</p><p>………….</p><p>v2 &#x3D; 0.1，x&#x3D;2430</p><p>斜率是-2700，意味着每变化百分之0.1，缓存长度都要增加270s。</p><p>拿v2&#x3D;0.9，x&#x3D; 270作为例子，要提前缓存270s，需要花费的时间是t&#x3D;270&#x2F;0.9&#x3D;300s</p><p>同理，v2&#x3D;0.8，x&#x3D; 540，t&#x3D;540&#x2F;0.8&#x3D;675s</p><p>……..</p><p>v2 &#x3D; 0.1，x&#x3D;2430,t&#x3D;2430&#x2F;0.1&#x3D;24300s&#x3D;405分钟</p><h2 id="进入缓冲多次"><a href="#进入缓冲多次" class="headerlink" title="进入缓冲多次"></a>进入缓冲多次</h2><p>实际上，用户是不能容忍等这么久的，所以意味着播放开始后会反复进入缓冲状态。</p><p>假设缓存1s播1s，</p><p>v2&#x3D;1，是可以正常播放</p><p>v2&#x3D;0.9，则用户要等待时长为 1&#x2F;0.9&#x3D;1.1111s，先缓存1s，则平均1&#x2F;（1-0.9）&#x3D;10s进入缓冲状态，每次1.1111s</p><p>v2&#x3D;0.8，则用户要等待时长为 1&#x2F;0.8&#x3D;1.25s，先缓存1s，则平均1&#x2F;（1-0.8）&#x3D;5s进入缓冲状态，每次1.25s</p><p>…….</p><p>v2&#x3D;0.1，则用户要等待时长为 1&#x2F;0.1&#x3D;10s，先缓存1s，则平均1&#x2F;（1-0.1）&#x3D;1.1111s进入缓冲状态，每次10s</p><p>同理每次缓存多1s再播放，都会增加一倍进入缓冲的时间和等待时间。</p><p>意味着，如果通过多线程不能显著提高v2速度超过1，对用户来说都是卡顿，无法忍受的。</p><p>当然，上面只是一个理论模型，实际上要复杂一些，因为每个ts包含的播放时间是不一样的。</p><h2 id="情况分析"><a href="#情况分析" class="headerlink" title="情况分析"></a>情况分析</h2><p>若带宽小于CDN速度，即v2总是小于v1，这样无论怎么优化都会卡顿。</p><p>若带宽大于CDN速度，若v2大于v1则可以正常播放；若单线程不能满足v2大于v1，多线程时v2大于v1，也可以正常播放。</p><h2 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h2><p>对于下载时间小于ts文件时长的，则串行下载，不需要并发。</p><p>以下是针对CDN速度小于网络带宽的：</p><h3 id="1-初始下载设置"><a href="#1-初始下载设置" class="headerlink" title="1. 初始下载设置"></a>1. <strong>初始下载设置</strong></h3><ul><li><strong>初始并发数</strong>：从1个文件开始下载。</li><li><strong>监控下载速度</strong>：监控下载速度和记录最大下载速度。</li></ul><h3 id="2-逐步增加并发"><a href="#2-逐步增加并发" class="headerlink" title="2. 逐步增加并发"></a>2. 逐步增加并发</h3><ul><li><strong>逐步增加</strong>：下载成功后，增加一个并发下载任务。</li><li><strong>监控变化</strong>：每次增加并发后，观察单个文件的下载速度变化。</li></ul><h3 id="3-检测瓶颈"><a href="#3-检测瓶颈" class="headerlink" title="3. 检测瓶颈"></a>3. <strong>检测瓶颈</strong></h3><ul><li><strong>观察限速</strong>：当下载速度达到某个稳定值（和最大下载速度相比不超过百分之十），或者单个文件下载速度显著下降时，说明可能触摸到了带宽上限或服务器限速。</li><li><strong>回退优化</strong>：如果发现并发数增加反而导致下载速度下降，要减少并发数，找到一个最佳的下载量。</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p class=&quot;note note-success&quot;&gt;2024年8月的笔记&lt;/p&gt;

&lt;p&gt;播放器作为消费者，缓存作为生产者。&lt;/p&gt;
&lt;h2 id=&quot;进入缓冲一次&quot;&gt;&lt;a href=&quot;#进入缓冲一次&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="音视频" scheme="https://iwesley.top/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
    <category term="音视频" scheme="https://iwesley.top/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>安卓屏保调试</title>
    <link href="https://iwesley.top/article/98c55340/"/>
    <id>https://iwesley.top/article/98c55340/</id>
    <published>2025-03-15T06:37:37.000Z</published>
    <updated>2025-03-16T09:34:10.864Z</updated>
    
    <content type="html"><![CDATA[<p>先看一下在设置点击屏保预览后的调用链（Android 14）</p><pre><code class=" mermaid">sequenceDiagram    participant User    participant MaterialButton    participant View    participant DreamSettings    participant DreamBackend    User-&gt;&gt;MaterialButton: 点击按钮（ performClick()）    MaterialButton-&gt;&gt;View: performClick()    View-&gt;&gt;DreamSettings: 触发 onClick() (lambda 表达式)    DreamSettings-&gt;&gt;DreamBackend: 调用 preview()</code></pre><p>DreamController的打印信息</p><blockquote><p>Starting dream: name&#x3D;ComponentInfo{com.google.android.apps.tv.dreamx&#x2F;com.google.android.apps.tv.dreamx.service.Backdrop}, <strong>isPreviewMode&#x3D;true</strong>, canDoze&#x3D;false, userId&#x3D;0, reason&#x3D;’test dream’</p></blockquote><p>DreamActivity是一个不需要注册的Activity，运行在各个屏保进程。</p><p>屏保应用实现DreamService即可。</p><p>屏保状态时，后台起应用会进入 onStop 状态（该例子 onStop 里面调用了 finish）</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250315143803024.png" alt="img"></p><h2 id="退出屏保的方法"><a href="#退出屏保的方法" class="headerlink" title="退出屏保的方法"></a>退出屏保的方法</h2><h3 id="1、有触摸或者按键输入"><a href="#1、有触摸或者按键输入" class="headerlink" title="1、有触摸或者按键输入"></a>1、有触摸或者按键输入</h3><h3 id="2、配置config-dismissDreamOnActivityStart-为-true-则会在新-activity-起来后退出屏保"><a href="#2、配置config-dismissDreamOnActivityStart-为-true-则会在新-activity-起来后退出屏保" class="headerlink" title="2、配置config_dismissDreamOnActivityStart 为 true 则会在新 activity 起来后退出屏保"></a>2、配置config_dismissDreamOnActivityStart 为 true 则会在新 activity 起来后退出屏保</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!-- Whether to dismiss the active dream when an activity is started. Doesn&#x27;t apply to</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">          assistant activities (ACTIVITY_TYPE_ASSISTANT) --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bool</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;config_dismissDreamOnActivityStart&quot;</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">bool</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250315143803153.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250315143803189.png" alt="img"></p><h3 id="3、跨进程调用DreamManagerService-的awaken（需要系统签名）"><a href="#3、跨进程调用DreamManagerService-的awaken（需要系统签名）" class="headerlink" title="3、跨进程调用DreamManagerService 的awaken（需要系统签名）"></a>3、跨进程调用DreamManagerService 的awaken（需要系统签名）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.os.IBinder<br><span class="hljs-keyword">import</span> androidx.annotation.RequiresPermission<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DreamManager</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">val</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DreamManager&quot;</span><br>    <span class="hljs-comment">//private var mDreamManager: Any? = context.getSystemService(&quot;dream&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> mDreamManager: Any? = <span class="hljs-literal">null</span><br><br>    init &#123;<br>        mDreamManager = <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">val</span> <span class="hljs-variable">dream</span> <span class="hljs-operator">=</span> Reflector.on(<span class="hljs-string">&quot;android.os.ServiceManager&quot;</span>).method(<span class="hljs-string">&quot;getService&quot;</span>, String::class.java).call&lt;Any&gt;(<span class="hljs-string">&quot;dreams&quot;</span>)<br>            Reflector.on(<span class="hljs-string">&quot;android.service.dreams.IDreamManager\$Stub&quot;</span>).method(<span class="hljs-string">&quot;asInterface&quot;</span>, IBinder::class.java).call&lt;Any&gt;(dream)<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            <span class="hljs-literal">null</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@RequiresPermission(&quot;android.permission.READ_DREAM_STATE&quot;)</span><br>    fun <span class="hljs-title function_">isDreaming</span><span class="hljs-params">()</span>: Boolean &#123;<br>        <span class="hljs-keyword">if</span> (mDreamManager == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> &#123;<br>            Reflector.with(mDreamManager!!).method(<span class="hljs-string">&quot;isDreaming&quot;</span>).call()<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@RequiresPermission(&quot;android.permission.WRITE_DREAM_STATE&quot;)</span><br>    fun <span class="hljs-title function_">stopDream</span><span class="hljs-params">()</span> &#123;<br>        mDreamManager?.let &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Reflector.with(it).method(<span class="hljs-string">&quot;awaken&quot;</span>).call&lt;Unit&gt;()<br>            &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="屏保调试命令：cmd-dreams"><a href="#屏保调试命令：cmd-dreams" class="headerlink" title="屏保调试命令：cmd dreams"></a>屏保调试命令：cmd dreams</h2><blockquote><p>roc_rk3588s_pc:&#x2F; # cmd dreams -h</p><p>Dream manager (dreams) commands:</p><p>  help</p><p>​      Print this help text.</p><p>  start-dreaming</p><p>​      Start the currently configured dream.</p><p>  stop-dreaming</p><p>​      Stops any active dream</p></blockquote><p>cmd dreams start-dreaming</p><p>cmd dreams stop-dreaming</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;先看一下在设置点击屏保预览后的调用链（Android 14）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot; mermaid&quot;&gt;sequenceDiagram
    participant User
    participant MaterialButton
   </summary>
        
      
    
    
    
    <category term="AndroidFrameworkFeature" scheme="https://iwesley.top/categories/AndroidFrameworkFeature/"/>
    
    
    <category term="DreamManagerService" scheme="https://iwesley.top/tags/DreamManagerService/"/>
    
    <category term="Framework" scheme="https://iwesley.top/tags/Framework/"/>
    
    <category term="屏保" scheme="https://iwesley.top/tags/%E5%B1%8F%E4%BF%9D/"/>
    
  </entry>
  
  <entry>
    <title>安卓内存泄露之DMA-BUF异常增长:Android Studio镜像引起DMA内存泄露</title>
    <link href="https://iwesley.top/article/f148a913/"/>
    <id>https://iwesley.top/article/f148a913/</id>
    <published>2025-03-04T13:10:58.000Z</published>
    <updated>2025-03-04T13:40:23.876Z</updated>
    
    <content type="html"><![CDATA[<p>今天用着安卓 14 的板子的时候突然系统卡死。</p><p>查看日志发现launcher都被干掉了</p><blockquote><p>03-04 06:13:35.544 7872 8479 I ActivityManager: vis BFGS 18740: com.android.launcher3 (pid 8407) service</p><p>03-04 06:13:35.544 7872 8479 I ActivityManager: com.android.launcher3&#x2F;com.android.quickstep.TouchInteractionService&lt;&#x3D;Proc{8077:com.android.systemui&#x2F;u0a70}</p><p>03-04 06:13:36.155 277 277 I lowmemorykiller: Kill ‘com.android.launcher3’ (8407), uid 10071, oom_score_adj 100 to free 39504kB rss, 46224kB swap; reason: device is low on swap (91200kB &lt; 199552kB) and thrashing (200%)</p></blockquote><p>看<code>dumpsys meminfo</code>发现DMA-BUF占了3G多（4G设备），应用free ram基本没了。</p><p>刚开始以为是scrcpy的问题。后来经调查发现是android studio的屏幕镜像问题。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>开机一段时间后</p><blockquote><p>Total RAM: 3,991,080K (status normal)</p><p>Free RAM: 1,166,810K (  124,454K cached pss +   623,088K cached kernel +   419,268K free)</p><p><strong>DMA-BUF: 1,477,628K (      876K mapped + 1,476,752K unmapped)</strong></p><p>DMA-BUF Heaps: 1,477,628K</p><p>DMA-BUF Heaps pool:   249,088K</p><p>​      GPU:   202,320K</p><p> Used RAM: 2,763,593K (1,036,373K used pss + 1,727,220K kernel)</p><p> Lost RAM:   195,490K</p><p>​     ZRAM:    72,700K physical used for   215,296K in swap (1,995,536K total swap)</p><p>   Tuning: 192 (large 512), oom   322,560K, restore limit   107,520K (high-end-gfx)</p></blockquote><p><code>cat /sys/kernel/dmabuf/buffers/*/size</code>，发现有好多483328字节的 inode</p><p><code>cat /sys/kernel/dmabuf/buffers/*/size  | grep 483328 | wc -l</code></p><p>有2957个，计算：2957*483328&#x3D;1429200896&#x3D;1.4G，和上面的结果差不多。</p><p>随便查看一个inode</p><blockquote><p>roc_rk3588s_pc:&#x2F; # lsof | grep -w 7248</p><p><a href="mailto:&#x63;&#50;&#x40;&#49;&#x2e;&#49;&#45;&#115;&#101;&#114;&#118;&#105;&#99;&#101;">&#x63;&#50;&#x40;&#49;&#x2e;&#49;&#45;&#115;&#101;&#114;&#118;&#105;&#99;&#101;</a>   543 mediacodec 2553u     0000                0,8       0t0       7248 &#x2F;dmabuf:system</p><p>main       4146       root 5088u     0000                0,8       0t0       7248 &#x2F;dmabuf:system</p><p>main       4146       root 5089u     0000                0,8       0t0       7248 &#x2F;dmabuf:system</p></blockquote><p><code>lsof | grep &quot;4146&quot; | grep dmabuf  | wc -l</code></p><p>有2958条这样的条目</p><p><code>main       4146       root 5973u     0000                0,8       0t0       7690 /dmabuf:system</code></p><p>和上面的数目一一对应</p><p>查看是哪一个程序</p><blockquote><p>roc_rk3588s_pc:&#x2F; # cat &#x2F;proc&#x2F;543&#x2F;cmdline</p><p>&#x2F;vendor&#x2F;bin&#x2F;hw&#x2F;<a href="mailto:&#x61;&#x6e;&#x64;&#114;&#111;&#105;&#100;&#x2e;&#x68;&#x61;&#114;&#x64;&#119;&#97;&#x72;&#101;&#x2e;&#x6d;&#101;&#x64;&#x69;&#x61;&#x2e;&#99;&#x32;&#64;&#49;&#46;&#x31;&#45;&#115;&#x65;&#x72;&#118;&#105;&#99;&#x65;">&#x61;&#x6e;&#x64;&#114;&#111;&#105;&#100;&#x2e;&#x68;&#x61;&#114;&#x64;&#119;&#97;&#x72;&#101;&#x2e;&#x6d;&#101;&#x64;&#x69;&#x61;&#x2e;&#99;&#x32;&#64;&#49;&#46;&#x31;&#45;&#115;&#x65;&#x72;&#118;&#105;&#99;&#x65;</a></p><p>roc_rk3588s_pc:&#x2F; # cat &#x2F;proc&#x2F;4146&#x2F;cmdline</p><p>app_process&#x2F;data&#x2F;local&#x2F;tmp&#x2F;.studiocom.android.tools.screensharing.Main–socket&#x3D;screen-sharing-agent-8055–flags&#x3D;16</p></blockquote><p>发现是android studio镜像导致的：应该是因为一直黑屏导致反复申请内存导致DMA-BUF泄露。</p><p>关闭Android Studio的Device Mirroring功能后，后面使用设备就正常了。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250304211421729.png" alt="img"></p><h2 id="dmabuf-dump"><a href="#dmabuf-dump" class="headerlink" title="dmabuf_dump"></a>dmabuf_dump</h2><p>通过dmabuf_dump命令可以更快地查看异常程序</p><blockquote><p>roc_rk3588s_pc:&#x2F; # dmabuf_dump -h</p><p>Usage: dmabuf_dump [-abh] [per-process&#x2F;per-buffer stats]</p><p>-a       show all dma buffers (ion) in big table, [buffer x process] grid</p><p>-b       show DMA-BUF per-buffer, per-exporter and per-device statistics</p><p>-h       show this help</p><p>​         If PID is supplied, the dmabuf information for that process is shown.</p><p>​         Per-buffer DMA-BUF stats do not take an argument.</p></blockquote><p>通过<code>dmabuf_dump</code>就可以查看各个程序DMA-BUF的占用情况（包含程序名字、pid、inode等等）或者加其他参数输出不同结果。</p><blockquote><p>roc_rk3588s_pc:&#x2F; # dmabuf_dump 4146</p><p>​            main:4146</p><p>​                  Name              Rss              Pss         nr_procs            Inode</p><p>​                system           472 kB           472 kB                1             4735</p><p>​                system           472 kB           472 kB                1             4736</p><p>​                system           472 kB           472 kB                1             4737</p><p>​               </p><p>​               ——————（省略几千行）—————-</p><p>​          </p><p>​                system           472 kB           472 kB                1             7688</p><p>​                system           472 kB           472 kB                1             7689</p><p>​                system           472 kB           472 kB                1             7690</p><p>​         PROCESS TOTAL       1395232 kB       1395232 kB</p><p>-———————</p><p>dmabuf total: 1477628 kB kernel_rss: 82396 kB userspace_rss: 1395232 kB userspace_pss: 1395232 kB</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://source.android.com/docs/core/graphics/implement-dma-buf-gpu-mem">Implement DMABUF and GPU memory accounting in Android 12  |  Android Open Source Project</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今天用着安卓 14 的板子的时候突然系统卡死。&lt;/p&gt;
&lt;p&gt;查看日志发现launcher都被干掉了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;03-04 06:13:35.544 7872 8479 I ActivityManager: vis BFGS 18740:</summary>
        
      
    
    
    
    <category term="Android性能优化" scheme="https://iwesley.top/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="内存" scheme="https://iwesley.top/tags/%E5%86%85%E5%AD%98/"/>
    
    <category term="性能优化" scheme="https://iwesley.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>安卓组件化之动态依赖功能模块</title>
    <link href="https://iwesley.top/article/67ca89d4/"/>
    <id>https://iwesley.top/article/67ca89d4/</id>
    <published>2025-03-03T10:34:03.000Z</published>
    <updated>2025-03-03T12:42:15.461Z</updated>
    
    <content type="html"><![CDATA[<p>对于拥有不同渠道的 APP 来说，可能需要集成不同的功能模块，也可能同一个功能有不同实现。最简单的方法可能是通过接口、工厂模式、 flavorImplement 和渠道自定义代码的方法来实现了。但是，如果不想建那么多渠道代码目录，需要通过一套代码来初始化模块，那么上述方法就不行了。</p><p>那么如何在不依赖模块的前提下动态调用其功能呢？</p><p>有几种方法：</p><p>1、反射、接口隔离和工厂模式</p><p>2、动态功能模块（Dynamic Feature Module），国内不适用。</p><p>3、利用 Java 的 <code>ServiceLoader</code> 机制，通过配置文件声明接口实现类。</p><p>综合考虑后决定采用反射、接口隔离和工厂模式。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>环境：agp 8.7.0，grade：8.10.2</p><h3 id="gradle：实现模块动态加载"><a href="#gradle：实现模块动态加载" class="headerlink" title="gradle：实现模块动态加载"></a>gradle：实现模块动态加载</h3><p>采用yaml文件进行功能配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#功能定义</span><br><span class="hljs-attr">features:</span><br>  <span class="hljs-attr">featureA:</span><br>    <span class="hljs-comment">#默认配置</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;:feature:featureA&#x27;</span> <span class="hljs-comment">#模块名字</span><br>    <span class="hljs-comment">#两个列表优先级最高，但不能同时包含一样的flavor</span><br>    <span class="hljs-comment">#如果enable为true，则建议使用disableFlavorsList。反之，亦然。</span><br>    <span class="hljs-attr">enableFlavorsList:</span> [<span class="hljs-string">demo</span>, <span class="hljs-string">companyA</span>, <span class="hljs-string">companyB</span>]<br>    <span class="hljs-attr">disableFlavorsList:</span> []<br></code></pre></td></tr></table></figure><p>libs.versions.toml</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">snakeyaml</span> = <span class="hljs-string">&quot;1.33&quot;</span><br><span class="hljs-attr">snakeyaml</span> = &#123; module = <span class="hljs-string">&quot;org.yaml:snakeyaml&quot;</span>, version.ref = <span class="hljs-string">&quot;snakeyaml&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>根build.gradle</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br>buildscript &#123;<br>    <span class="hljs-comment">// 自定义 gradle 插件</span><br>    dependencies &#123;<br>        <span class="hljs-comment">//classpath(libs.plugin)</span><br>        classpath libs.snakeyaml <span class="hljs-comment">// 添加 YAML 解析库</span><br>    &#125;<br>&#125;<br><br>plugins &#123;<br>    alias(libs.plugins.android.application) apply <span class="hljs-literal">false</span><br>    alias(libs.plugins.kotlin.android) apply <span class="hljs-literal">false</span><br>    alias(libs.plugins.android.library) apply <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>app build.gradle （根据配置动态依赖模块实现）</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">//Yaml放在其他xxx.gradle import会报找不到</span><br><span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml<br>ext &#123;<br>    loadYamlConfig = &#123; String fileName -&gt;<br>        <span class="hljs-keyword">def</span> configFile = file(fileName)<br>        <span class="hljs-keyword">if</span> (!configFile.exists()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GradleException(<span class="hljs-string">&quot;YAML config file not found: $&#123;configFile.absolutePath&#125;&quot;</span>)<br>        &#125;<br>        <span class="hljs-keyword">def</span> yaml = <span class="hljs-keyword">new</span> Yaml()<br>        <span class="hljs-keyword">def</span> config<br>        <span class="hljs-keyword">try</span> &#123;<br>            configFile.withReader &#123; reader -&gt;<br>                config = yaml.load(reader)<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GradleException(<span class="hljs-string">&quot;Failed to parse YAML file: $&#123;configFile.name&#125;&quot;</span>, e)<br>        &#125;<br>        <span class="hljs-keyword">return</span> config.asImmutable()<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">def</span> printlnRed(String msg) &#123;<br>    <span class="hljs-keyword">def</span> ANSI_RESET = <span class="hljs-string">&quot;\u001B[0m&quot;</span><br>    <span class="hljs-keyword">def</span> ANSI_RED = <span class="hljs-string">&quot;\u001B[31m&quot;</span><br>    println(<span class="hljs-string">&quot;$&#123;ANSI_RED&#125;$&#123;msg&#125;$&#123;ANSI_RESET&#125;&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">def</span> featureConfig = loadYamlConfig(<span class="hljs-string">&quot;feature_config.yaml&quot;</span>)<br>println(<span class="hljs-string">&quot;featureConfig: $&#123;featureConfig&#125;&quot;</span>)<br>afterEvaluate &#123;<br>    android.applicationVariants.configureEach &#123; variant -&gt;<br>        <span class="hljs-keyword">def</span> flavorCompanyName = variant.productFlavors.find &#123; it.dimension == <span class="hljs-string">&quot;COMPANY&quot;</span> &#125;?.name<br>        if (!flavorCompanyName) &#123;<br>            throw new GradleException(<span class="hljs-string">&quot;Variant $&#123;variant.name&#125; has no COMPANY flavor!&quot;</span>)<br>        &#125;<br>        println(<span class="hljs-string">&quot;variant.name:$&#123;variant.name&#125; variant.flavorName:$&#123;variant.flavorName&#125;&quot;</span>)<br>        featureConfig.features.each &#123; featureKey, defaultConfig  -&gt;<br>            def featureName = defaultConfig.name<br>            boolean isEnabled = defaultConfig.enable<br>            def enableFlavorsList = defaultConfig.enableFlavorsList<br>            def disableFlavorsList = defaultConfig.disableFlavorsList<br>            boolean hasFound = false<br>            for (flavor in enableFlavorsList) &#123;<br>                if (flavor == flavorCompanyName) &#123;<br>                    isEnabled = true<br>                    println(<span class="hljs-string">&quot;enable in enableFlavorsList&quot;</span>)<br>                    hasFound = true<br>                    break<br>                &#125;<br>            &#125;<br>            for (flavor in disableFlavorsList) &#123;<br>                if (flavor == flavorCompanyName) &#123;<br>                    if (hasFound) &#123;<br>                        throw new GradleException(<span class="hljs-string">&quot;Feature $featureKey in flavor $flavorCompanyName must not be in both enableFlavorsList and disableFlavorsList!&quot;</span>)<br>                    &#125;<br>                    isEnabled = false<br>                    printlnRed(<span class="hljs-string">&quot;disable in disableFlavorsList&quot;</span>)<br>                    break<br>                &#125;<br>            &#125;<br>            if (isEnabled) &#123;<br>                println(<span class="hljs-string">&quot;$&#123;flavorCompanyName&#125;Implementation $&#123;featureName&#125;&quot;</span>)<br>                <span class="hljs-comment">//动态依赖模块</span><br>                dependencies.add(<span class="hljs-string">&quot;$&#123;flavorCompanyName&#125;Implementation&quot;</span>, project(featureName))<br>            &#125; else &#123;<br>                printlnRed(<span class="hljs-string">&quot;$&#123;variant.name&#125; $&#123;flavorCompanyName&#125; Not Implementation $&#123;featureName&#125;&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模块实现"><a href="#模块实现" class="headerlink" title="模块实现"></a>模块实现</h3><h4 id="公共模块"><a href="#公共模块" class="headerlink" title="公共模块"></a>公共模块</h4><p>定义接口</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFeature</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个 Helper</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">object</span> FeatureHelper : IFeature &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> mFeature: IFeature? = <span class="hljs-literal">null</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setFeatureImpl</span><span class="hljs-params">(feature: <span class="hljs-type">IFeature</span>?)</span></span> &#123;<br>        mFeature = feature<br>    &#125;<br>    <br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span> &#123;<br>        mFeature?.doSomething()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Module</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">       采用java类 方便使用 java 的方式进行反射</span><br><span class="hljs-comment">     * 注意：包名和类名、方法名和参数不能随意修改，否则反射会找不到</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context Context</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> IFeature</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IFeature <span class="hljs-title function_">load</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-comment">//FeatureManager实现IFeature接口</span><br>        <span class="hljs-type">FeatureManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FeatureManager</span>(context);<br>        manager.init();<br>        <span class="hljs-keyword">return</span> manager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="app-模块"><a href="#app-模块" class="headerlink" title="app 模块"></a>app 模块</h4><p><a href="https://iwesley.top/article/ba67228f/">Java反射的优雅使用 - Wesley’s Blog</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">loadFeatureModule</span><span class="hljs-params">(application: <span class="hljs-type">Application</span>)</span></span>: IFeature? &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> &#123;<br>        Reflector.on(<span class="hljs-string">&quot;com.wesley.feature.Module&quot;</span>)<br>            .method(<span class="hljs-string">&quot;load&quot;</span>, Context::<span class="hljs-keyword">class</span>.java).call&lt;IFeature&gt;(application)<br>    &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>        <span class="hljs-literal">null</span> <span class="hljs-comment">// 模块未启用或未实现</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initModules</span><span class="hljs-params">(application: <span class="hljs-type">Application</span>)</span></span> &#123;<br>  FeatureHelper.setFeatureImpl(loadFeatureModule(application))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/97498337">Android 模块解耦和的实践</a></p><p><a href="https://blog.csdn.net/fesdgasdgasdg/article/details/106888077">Android 中使用 ServiceLoader、AutoService 摔坑记录</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;对于拥有不同渠道的 APP 来说，可能需要集成不同的功能模块，也可能同一个功能有不同实现。最简单的方法可能是通过接口、工厂模式、 flavorImplement</summary>
        
      
    
    
    
    <category term="AndroidAPP架构" scheme="https://iwesley.top/categories/AndroidAPP%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="gradle" scheme="https://iwesley.top/tags/gradle/"/>
    
    <category term="组件化" scheme="https://iwesley.top/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>DLNA库Platinum新增安卓64位so编译方法</title>
    <link href="https://iwesley.top/article/4339b418/"/>
    <id>https://iwesley.top/article/4339b418/</id>
    <published>2025-01-18T04:52:15.000Z</published>
    <updated>2025-01-18T11:12:45.426Z</updated>
    
    <content type="html"><![CDATA[<p>下载代码（该仓库我已经修改相关编译错误和支持安卓 64 位 so 编译）</p><p><code>git clone https://github.com/wesley666/Platinum -b master</code></p><p>下载Neptune</p><p><code>git submodule update --init</code></p><p>下载 ndk15：</p><p><a href="https://dl.google.com/android/repository/android-ndk-r15c-linux-x86_64.zip">https://dl.google.com/android/repository/android-ndk-r15c-linux-x86_64.zip</a></p><p>建议安装 conda 环境来进行编译</p><p><a href="https://www.anaconda.com/download/success">https://www.anaconda.com/download/success</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create -n dlna  python=2.7<br><br>pip install scons<br><br>conda activate dlna<br></code></pre></td></tr></table></figure><p>编译</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">以你的路径为准，如果出现路径错误，可以改成绝对路径</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">export</span> ANDROID_NDK_ROOT=/home/wesley/ndk/android-ndk-r15c/</span> <br>export ANDROID_NDK_ROOT=~/ndk/android-ndk-r15c/ <br>scons -c target=arm-android-linux build_config=Release<br>scons target=arm-android-linux build_config=Release<br>scons -c target=arm64-android-linux build_config=Release<br>scons target=arm64-android-linux build_config=Release<br>cd Source/Platform/Android/module/platinum<br>~/ndk/android-ndk-r15c/ndk-build clean<br>~/ndk/android-ndk-r15c/ndk-build NDK_DEBUG=0<br></code></pre></td></tr></table></figure><blockquote><p>(dlna) wesley@Wesley:~&#x2F;Project&#x2F;Platinum&#x2F;Source&#x2F;Platform&#x2F;Android&#x2F;module&#x2F;platinum$ ~&#x2F;ndk&#x2F;android-ndk-r15c&#x2F;ndk-build<br>Android NDK: Found platform level in .&#x2F;project.properties. Setting APP_PLATFORM to android-14.<br>jni&#x2F;Android.mk:5: “TARGET_ARCH_ABI:armeabi”<br>jni&#x2F;Android.mk:5: “TARGET_ARCH_ABI:armeabi-v7a”<br>jni&#x2F;Android.mk:5: “TARGET_ARCH_ABI:arm64-v8a”<br>jni&#x2F;Android.mk:15: “build arm64”<br>[armeabi] Compile++ thumb: platinum-jni &lt;&#x3D; platinum-jni.cpp<br>[armeabi] StaticLibrary  : libstdc++.a<br>[armeabi] SharedLibrary  : libplatinum-jni.so<br>[armeabi] Install        : libplatinum-jni.so &#x3D;&gt; libs&#x2F;armeabi&#x2F;libplatinum-jni.so<br>[armeabi-v7a] Compile++ thumb: platinum-jni &lt;&#x3D; platinum-jni.cpp<br>[armeabi-v7a] StaticLibrary  : libstdc++.a<br>[armeabi-v7a] SharedLibrary  : libplatinum-jni.so<br>[armeabi-v7a] Install        : libplatinum-jni.so &#x3D;&gt; libs&#x2F;armeabi-v7a&#x2F;libplatinum-jni.so<br>[arm64-v8a] Compile++      : platinum-jni &lt;&#x3D; platinum-jni.cpp<br>[arm64-v8a] StaticLibrary  : libstdc++.a<br>[arm64-v8a] SharedLibrary  : libplatinum-jni.so<br>[arm64-v8a] Install        : libplatinum-jni.so &#x3D;&gt; libs&#x2F;arm64-v8a&#x2F;libplatinum-jni.so</p></blockquote><p>obj和 libs目录区别：一个用于追溯和调试，一个用于正式版发布。</p><blockquote><p>(dlna) wesley@Wesley:~&#x2F;Project&#x2F;Platinum&#x2F;Source&#x2F;Platform&#x2F;Android&#x2F;module&#x2F;platinum$ file libs&#x2F;arm64-v8a&#x2F;libplatinum-jni.so<br>libs&#x2F;arm64-v8a&#x2F;libplatinum-jni.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]&#x3D;a8cdaa3a1288bd98c13556fbd4a1499e31005091, <strong>stripped</strong></p><p>(dlna) wesley@Wesley:~&#x2F;Project&#x2F;Platinum&#x2F;Source&#x2F;Platform&#x2F;Android&#x2F;module&#x2F;platinum$ file obj&#x2F;local&#x2F;arm64-v8a&#x2F;libplatinum-jni.so<br>obj&#x2F;local&#x2F;arm64-v8a&#x2F;libplatinum-jni.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]&#x3D;a8cdaa3a1288bd98c13556fbd4a1499e31005091, <strong>with debug_info, not stripped</strong></p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;下载代码（该仓库我已经修改相关编译错误和支持安卓 64 位 so 编译）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/wesley666/Platinum -b</summary>
        
      
    
    
    
    <category term="投屏" scheme="https://iwesley.top/categories/%E6%8A%95%E5%B1%8F/"/>
    
    
    <category term="投屏" scheme="https://iwesley.top/tags/%E6%8A%95%E5%B1%8F/"/>
    
    <category term="DLNA" scheme="https://iwesley.top/tags/DLNA/"/>
    
  </entry>
  
  <entry>
    <title>安卓Activity执行finish后onNewIntent也执行了</title>
    <link href="https://iwesley.top/article/88a54bc8/"/>
    <id>https://iwesley.top/article/88a54bc8/</id>
    <published>2025-01-04T09:34:44.000Z</published>
    <updated>2025-01-04T10:36:03.481Z</updated>
    
    <content type="html"><![CDATA[<p>测试反应投屏时下一集可能播放不成功。</p><p>首先看一下日志：</p><blockquote><p>onCompletion<br>onCast<br>handlerMessage: 2<br>finish: PlayerActivity@abc7fdc<br>onPause: PlayerActivity@abc7fdc<br>onNewIntent: PlayerActivity@abc7fdc<br>onResume: PlayerActivity@abc7fdc<br>onPause: PlayerActivity@abc7fdc<br>onResume: HomeActivity@71ec50a<br>onstop: PlayerActivity@abc7fdc<br>onDestroy:PlayerActivity@abc7fdc</p></blockquote><p>看到日志时很迷惑，为什么 finish 了，安卓还会执行onNewIntent，不应该是新建一个 activity 吗？</p><p>先来看一下场景描述：</p><p>视频播完后会发送一个 finish 信息，如果 3s 内没有下一个视频进来就会执行 finish，有视频进来就会在 onNewIntent 中 remove 掉这条信息。</p><p>经过实验和详细分析后，终于找到了问题原因：</p><p>首先因为视频播放结束发了一条finish消息，finish消息没有执行时突然来了下一集的消息，这时候执行startActivty会插入一条onNewIntent消息。结果，这时候finish因为时间到了，该执行了。然后 finish 执行完后，onNewIntent 也该执行了。执行完后因为 finish 的原因， onDestroy也执行了。结果就是下一集没播完就退出来了。</p><p>解决办法：在startActivity前remove掉finish消息，比onNewIntent 的时间节点还要提前。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>面试必备：Android（9.0）Activity启动流程(一) : <a href="https://juejin.cn/post/6844903959581163528">https://juejin.cn/post/6844903959581163528</a></p><p>面试必备：Android（9.0）Activity启动流程(二) : <a href="https://juejin.cn/post/6844903959589552142">https://juejin.cn/post/6844903959589552142</a></p><p><a href="https://stackoverflow.com/questions/24639272/onnewintent-called-after-finish-executed">android - onNewIntent called after finish() executed - Stack Overflow</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;测试反应投屏时下一集可能播放不成功。&lt;/p&gt;
&lt;p&gt;首先看一下日志：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;onCompletion&lt;br&gt;onCast&lt;br&gt;handlerMessage: 2&lt;br&gt;finish:</summary>
        
      
    
    
    
    <category term="AndroidBugFix" scheme="https://iwesley.top/categories/AndroidBugFix/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="AndroidActivity" scheme="https://iwesley.top/tags/AndroidActivity/"/>
    
  </entry>
  
  <entry>
    <title>安卓应用4字节不对齐导致so加载失败</title>
    <link href="https://iwesley.top/article/18f59983/"/>
    <id>https://iwesley.top/article/18f59983/</id>
    <published>2025-01-04T03:12:24.000Z</published>
    <updated>2025-01-04T08:32:28.983Z</updated>
    
    <content type="html"><![CDATA[<p>今天把一个apk给厂商签名后直接push到机器的&#x2F;system&#x2F;app,结果运行app时显示so找不到。报错：</p><blockquote><p> java stacktrace:<br>java.lang.UnsatisfiedLinkError: Library mmkv not found; tried [&#x2F;system&#x2F;lib&#x2F;libmmkv.so, &#x2F;product&#x2F;lib&#x2F;libmmkv.so]<br>at java.lang.Runtime.loadLibrary0(Runtime.java:1101)<br>at java.lang.System.loadLibrary(System.java:1669)<br>at com.tencent.mmkv.MMKV.doInitialize(MMKV.java:226)<br>at com.tencent.mmkv.MMKV.initialize(MMKV.java:208)<br>at com.tencent.mmkv.MMKV.initialize(MMKV.java:94)<br>at com.wesley.CustomApplication.onCreate(CustomApplication.kt:14)<br>at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1154)<br>at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5871)<br>at android.app.ActivityThread.access$1100(ActivityThread.java:199)<br>at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1650)<br>at android.os.Handler.dispatchMessage(Handler.java:106)<br>at android.os.Looper.loop(Looper.java:193)<br>at android.app.ActivityThread.main(ActivityThread.java:6669)<br>at java.lang.reflect.Method.invoke(Native Method)<br>at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)<br>at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:922)  </p></blockquote><p>日志（xcrash 自己有so异常捕获，所以直到加载 mmkv 才抛出异常）</p><blockquote><p> 12-27 14:58:04.840  9717  9717 E System  : ##loadLibrary0## &#x2F;system&#x2F;app&#x2F;demo&#x2F;demo_V1.0.0(2412261921)-release-signed.apk!&#x2F;lib&#x2F;armeabi-v7a&#x2F;libxcrash.so error: dlopen failed: library “&#x2F;system&#x2F;app&#x2F;demo&#x2F;demo_V1.0.0(2412261921)-release-signed.apk!&#x2F;lib&#x2F;armeabi-v7a&#x2F;libxcrash.so” not found, and try to find so file from the lib path<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper: xcrash: NativeHandler System.loadLibrary failed<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper: java.lang.UnsatisfiedLinkError: Library xcrash not found; tried [&#x2F;system&#x2F;lib&#x2F;libxcrash.so, &#x2F;product&#x2F;lib&#x2F;libxcrash.so]<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at java.lang.Runtime.loadLibrary0(Runtime.java:1101)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at java.lang.System.loadLibrary(System.java:1669)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at xcrash.NativeHandler.initialize(NativeHandler.java:89)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at xcrash.XCrash.init(XCrash.java:189)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.wesley.base.apm.XCrashWrapper.<init>(XCrashWrapper.kt:131)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.wesley.base.apm.XCrashWrapper.<init>(XCrashWrapper.kt:17)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.wesley.CastApplication.attachBaseContext(CastApplication.kt:43)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.Application.attach(Application.java:212)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.Instrumentation.newApplication(Instrumentation.java:1121)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.LoadedApk.makeApplication(LoadedApk.java:1065)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5842)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread.access$1100(ActivityThread.java:199)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1650)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.os.Handler.dispatchMessage(Handler.java:106)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.os.Looper.loop(Looper.java:193)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread.main(ActivityThread.java:6669)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at java.lang.reflect.Method.invoke(Native Method)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:922)  </p></blockquote><p>因为安卓6开始支持直接加载apk内部so，如果编译后的 apk 内部 so 是不压缩的，那么就不需要释放到目录了。所以排除是因为不解压 so 到&#x2F;system&#x2F;app&#x2F;demo&#x2F;lib&#x2F;arm 引起的问题，虽然这样也可以解决问题。</p><blockquote><p>如果apk的minSdkVersion &gt;&#x3D; 23 并且 Android Gradle plugin &gt;&#x3D; 3.6.0情况下，打包时android:extractNativeLibs&#x3D;false，apk的so默认是不压缩的。</p><p>在minSdkVersion &lt; 23 或 Android Gradle plugin &lt; 3.6.0情况下，打包时 android:extractNativeLibs&#x3D;true，apk的so默认是压缩的。</p></blockquote><p>然后，我尝试push没有给厂商签名前的版本 apk 到机器上是正常的，那么应该是厂商签名导致 apk 发生了变化。刚好前几天碰到安卓签名问题<a href="https://iwesley.top/article/133f2b7a/">安卓15预置第三方apk时签名报错问题解决 - Wesley’s Blog</a>。然后我就用命令看了一下：<code>zipalign -c -v  4 demo_sign.apk</code></p><p><a href="https://developer.android.com/tools/zipalign">zipalign  | Android Studio  | Android Developers</a></p><p>显示：<code>Verification FAILED</code>，那就是 4 字节没有对齐。</p><p>查看签名版本<code>apksigner verify -v demo_sign.apk | grep Verified</code></p><p>只有v1签名</p><blockquote><p>~&#x2F;Project$ apksigner verify -v demo_sign.apk | grep Verified</p><p>Verified using v1 scheme (JAR signing): true</p><p>Verified using v2 scheme (APK Signature Scheme v2): false</p><p>Verified using v3 scheme (APK Signature Scheme v3): false</p><p>Verified using v3.1 scheme (APK Signature Scheme v3.1): false</p><p>Verified using v4 scheme (APK Signature Scheme v4): false</p><p>Verified for SourceStamp: false</p></blockquote><p>因为是v1签名，执行<code>zipalign -v -p 4 demo_sign.apk  demo_sign_align.apk</code>对齐4 字节不会破坏厂商的签名信息，然后push进去果然好了。</p><p>然后我又试着安装没有对齐前的，结果直接报错了：</p><blockquote><p>PS C:\Users\Wesley&gt; adb  install Y:\Project\demo_sign.apk</p><p>Performing Streamed Install</p><p>adb: failed to install Y:\Project\demo_sign.apk: Failure [INSTALL_FAILED_INVALID_APK: Failed to extract native libraries, res&#x3D;-2]</p></blockquote><p>但是系统扫描安装却是可以通过的，所以很难发现是字节不对齐引起的。</p><h2 id="深究"><a href="#深究" class="headerlink" title="深究"></a>深究</h2><p>之前直接搜索安卓java.lang.UnsatisfiedLinkError是很难找到针对这种问题的解决方法的。因为现在有了解决办法，所以换成UnsatisfiedLinkError zipalign进行谷歌搜索。结果就出来了：</p><p><a href="https://stackoverflow.com/questions/72544099/java-lang-unsatisfiedlinkerror-when-installing-as-system-app">android - java.lang.UnsatisfiedLinkError when installing as system app - Stack Overflow</a></p><p><a href="https://ask.seowhy.com/question/175285">zipflinger导致的UnsatisfiedLinkError分析 - 搜外SEO问答</a></p><p><a href="https://blog.51cto.com/u_15075514/3336070">zipflinger导致的UnsatisfiedLinkError分析_mb5ff2f24b42377的技术博客_51CTO博客</a></p><p>用 AI大模型总结一下：</p><blockquote><p>这篇文章主要分析了在Android开发中，由于升级Android Gradle Plugin (AGP) 版本导致的UnsatisfiedLinkError问题，并提供了相应的解决方案。以下是文章的主要内容总结：</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><ul><li><strong>问题现象</strong>：在Android 9.0环境下，将AGP从3.6.1升级到4.1.0后，预装在&#x2F;system&#x2F;priv-app下的APP出现了UnsatisfiedLinkError崩溃。</li><li><strong>问题原因</strong>：升级AGP后，系统在加载so文件时失败，具体表现为so文件在APK中的对齐方式有问题。</li></ul><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ul><li><strong>so文件加载流程</strong>：系统使用“!&#x2F;”分隔符来定位so文件路径，并在APK中查找对应的entry。问题出在zipalign处理上，导致so文件的对齐不正确。</li><li><strong>zipalign的作用</strong>：确保APK中所有未压缩数据在4字节边界上对齐，以便使用mmap()直接访问，减少RAM消耗。</li><li><strong>系统编译处理</strong>：Android系统在编译时会对privileged app执行uncompress-dexs操作，将压缩存储的dex文件变为不压缩存储。之后还会进行align-package操作。</li></ul><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><ul><li><strong>zipflinger工具</strong>：从AGP 4.1开始，默认在构建release版本时启用zipflinger工具进行打包。zipflinger改变了APK的打包方式，导致uncompress-dexs操作后zipalign出现问题。</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><strong>禁用zipflinger</strong>：在app工程的gradle.properties中加入配置以禁用zipflinger。</li><li><strong>不解压 dex</strong>：DONT_UNCOMPRESS_PRIV_APPS_DEXS :&#x3D; true，可能会降低 dex 加载速度。</li><li><strong>使用zip2zip工具</strong>：在最新的AOSP源码中，使用zip2zip工具来处理dex文件的解压缩，以适配zipflinger打包的APK。</li><li><strong>其他方法</strong>：包括回退AGP版本、修改系统编译脚本等，但这些方法各有优缺点。</li></ul></blockquote><p>虽然引起问题的原因不一样，但都是因为字节不对齐引起的 so 找不到。</p><p>下面来分析一下具体原因：</p><p>so加载调用栈</p><blockquote><p>ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;lang&#x2F;System.java  –&gt; System.loadLibrary</p><p>ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;lang&#x2F;Runtime.java  –&gt; Runtime.loadLibrary0 -&gt; nativeLoad</p><p>ojluni&#x2F;src&#x2F;main&#x2F;native&#x2F;Runtime.c  –&gt; Runtime_nativeLoad</p><p>art&#x2F;openjdkjvm&#x2F;OpenjdkJvm.cc  –&gt; JVM_NativeLoad</p><p>art&#x2F;runtime&#x2F;java_vm_ext.cc –&gt; JavaVMExt::LoadNativeLibrary</p><p>system&#x2F;core&#x2F;libnativeloader&#x2F;native_loader.cpp –&gt; OpenNativeLibrary</p><p>bionic&#x2F;libdl&#x2F;libdl.cpp –&gt; android_dlopen_ext</p><p>bionic&#x2F;linker&#x2F;dlfcn.cpp –&gt; __loader_android_dlopen_ext</p><p>bionic&#x2F;linker&#x2F;dlfcn.cpp –&gt; dlopen_ext</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; do_dlopen</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; find_library</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; find_libraries</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; find_library_internal</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; load_library</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; open_library</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; open_library_in_zipfile</p></blockquote><p>重点看 <code>bionic/linker/linker.cpp --&gt; open_library_in_zipfile</code> 这个函数，导致加载失败的是以下条件 <code>entry.offset % PAGE_SIZE != 0</code></p><p><a href="http://xrefandroid.com/android-9.0.0_r61/xref/bionic/linker/linker.cpp#992">http://xrefandroid.com/android-9.0.0_r61/xref/bionic/linker/linker.cpp#992</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (entry.method != kCompressStored || (entry.offset % PAGE_SIZE) != <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结来说，就是签名的时候破坏了4字节对齐，导致 so 加载失败。所以，以后碰到此类问题时，可以执行<code>zipalign -c -v  4 xxx.apk</code>先看一下是否4字节对齐。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今天把一个apk给厂商签名后直接push到机器的&amp;#x2F;system&amp;#x2F;app,结果运行app时显示so找不到。报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; java</summary>
        
      
    
    
    
    <category term="Android Build System" scheme="https://iwesley.top/categories/Android-Build-System/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="aosp编译" scheme="https://iwesley.top/tags/aosp%E7%BC%96%E8%AF%91/"/>
    
    <category term="Android.mk" scheme="https://iwesley.top/tags/Android-mk/"/>
    
    <category term="Android.bp" scheme="https://iwesley.top/tags/Android-bp/"/>
    
  </entry>
  
  <entry>
    <title>安卓多渠道apk配置不同签名</title>
    <link href="https://iwesley.top/article/611fb416/"/>
    <id>https://iwesley.top/article/611fb416/</id>
    <published>2024-12-24T13:39:40.000Z</published>
    <updated>2024-12-29T07:06:02.588Z</updated>
    
    <content type="html"><![CDATA[<p>一般签名都是放在buildTypes里面：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs groovy">...<br>android &#123;<br>    ...<br>    defaultConfig &#123;...&#125;<br>    signingConfigs &#123;<br>        release &#123;<br>            storeFile file(<span class="hljs-string">&quot;myreleasekey.keystore&quot;</span>)<br>            storePassword <span class="hljs-string">&quot;password&quot;</span><br>            keyAlias <span class="hljs-string">&quot;MyReleaseKey&quot;</span><br>            keyPassword <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>    &#125;<br>    buildTypes &#123;<br>        release &#123;<br>            ...<br>            signingConfig signingConfigs.release<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是多渠道时，使用配置的优先级从高到低分别是buildTypes、productFlavor、defaultConfig，如果按上面配置的话，根本修改不了签名。所以修改成以下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    ...<br>    signingConfigs &#123;<br>        release &#123;<br>            storeFile file(<span class="hljs-string">&quot;myreleasekey.keystore&quot;</span>)<br>            storePassword <span class="hljs-string">&quot;password&quot;</span><br>            keyAlias <span class="hljs-string">&quot;MyReleaseKey&quot;</span><br>            keyPassword <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>        demo &#123;<br>            storeFile file(<span class="hljs-string">&quot;myreleasekey.keystore&quot;</span>)<br>            storePassword <span class="hljs-string">&quot;password&quot;</span><br>            keyAlias <span class="hljs-string">&quot;MyReleaseKey&quot;</span><br>            keyPassword <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>    &#125;<br>    defaultConfig &#123;<br>        signingConfig signingConfigs.release <span class="hljs-comment">//默认签名</span><br>    &#125;<br>    buildTypes &#123;<br>        debug&#123;<br>            signingConfig <span class="hljs-literal">null</span> <span class="hljs-comment">//这里一定要置null，否则gralde会插入默认签名</span><br>        &#125;<br>        release&#123;...&#125;<br>    &#125;<br>    <span class="hljs-comment">// Specifies one flavor dimension.</span><br>    flavorDimensions <span class="hljs-string">&quot;version&quot;</span><br>    productFlavors &#123;<br>        demo &#123;<br>            dimension <span class="hljs-string">&quot;version&quot;</span><br>            applicationIdSuffix <span class="hljs-string">&quot;.demo&quot;</span><br>            versionNameSuffix <span class="hljs-string">&quot;-demo&quot;</span><br>            signingConfig signingConfigs.demo <span class="hljs-comment">//渠道签名</span><br>        &#125;<br>        full &#123;<br>            dimension <span class="hljs-string">&quot;version&quot;</span><br>            applicationIdSuffix <span class="hljs-string">&quot;.full&quot;</span><br>            versionNameSuffix <span class="hljs-string">&quot;-full&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>按上面配置完后，渠道可以按照自己需求替换签名了。特别注意debug类型那里要置<code>signingConfig null</code>，否则编译debug版本时签名会不生效，因为gradle会插入默认签名，替换掉渠道的签名。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;一般签名都是放在buildTypes里面：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="AppBuild" scheme="https://iwesley.top/categories/AppBuild/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="Android多渠道" scheme="https://iwesley.top/tags/Android%E5%A4%9A%E6%B8%A0%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>安卓15预置第三方apk时签名报错问题解决</title>
    <link href="https://iwesley.top/article/133f2b7a/"/>
    <id>https://iwesley.top/article/133f2b7a/</id>
    <published>2024-12-24T13:13:45.000Z</published>
    <updated>2024-12-29T07:06:02.588Z</updated>
    
    <content type="html"><![CDATA[<p>有同事反馈集成apk时安装失败</p><blockquote><p>PackageManager: Failed to scan &#x2F;product&#x2F;app&#x2F;test: No APK Signature Scheme v2 signature in package &#x2F;product&#x2F;app&#x2F;test&#x2F;test.apk</p></blockquote><p>查看编译后的apk签名信息</p><blockquote><p>DOES NOT VERIFY</p><p>ERROR: JAR signer CERT.RSA: JAR signature META-INF&#x2F;CERT.SF indicates the APK is signed using APK Signature Scheme v2 but no such signature was found. Signature stripped?</p></blockquote><p>但是用命令查看我的apk是正常的<code>apksigner  verify -v  test.apk  | grep Verified</code></p><blockquote><p>Verified using v1 scheme (JAR signing): true</p><p>Verified using v2 scheme (APK Signature Scheme v2): true</p><p>Verified using v3 scheme (APK Signature Scheme v3): false</p><p>Verified using v3.1 scheme (APK Signature Scheme v3.1): false</p><p>Verified using v4 scheme (APK Signature Scheme v4): false</p><p>Verified for SourceStamp: false</p></blockquote><p>那么应该是编译过程做了某些变动。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h2 id="通过预编译的方法"><a href="#通过预编译的方法" class="headerlink" title="通过预编译的方法"></a>通过预编译的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">android_app_import &#123;<br>    name: <span class="hljs-string">&quot;test&quot;</span>,<br>    apk: <span class="hljs-string">&quot;test.apk&quot;</span>,<br>    <span class="hljs-comment">// 保留apk自己的签名</span><br>    presigned: <span class="hljs-literal">true</span>,<br>    preprocessed: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 打开将放到对应分区目录的priv-app文件夹下</span><br>    <span class="hljs-comment">// privileged: true,</span><br>    <span class="hljs-comment">// 打开将放到system_ext分区</span><br>    <span class="hljs-comment">// system_ext_specific: true,</span><br>    <span class="hljs-comment">// 打开将放到product分区</span><br>    <span class="hljs-comment">// product_specific: true,</span><br>    <span class="hljs-comment">// 打开将放到vendor分区</span><br>    <span class="hljs-comment">// proprietary: true,</span><br>    <span class="hljs-comment">// odm分区</span><br>    <span class="hljs-comment">// device_specific: true</span><br>    <span class="hljs-comment">// apk优化，内置三方apk时建议关闭</span><br>    dex_preopt: &#123;<br>        enabled: <span class="hljs-literal">false</span>,<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>在安卓15上新增了<a href="http://xrefandroid.com/android-15.0.0_r1/xref/build/soong/java/app_import.go#376">app_import.go - OpenGrok cross reference for &#x2F;build&#x2F;soong&#x2F;java&#x2F;app_import.go</a></p><p>validatePresignedApk检测</p><p>如果加了presigned，但不加preprocessed，同时targetSdk大于等于30就会编译报错，更加方便开发者定位问题：</p><blockquote><p>[100% 5&#x2F;5 0s remaining] Check presigned apkFAILED: out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stampbuild&#x2F;soong&#x2F;scripts&#x2F;check_prebuilt_presigned_apk.py –aapt2 out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;aapt2 –zipalign out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;zipalign packages&#x2F;test&#x2F;test.apk out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stamppackages&#x2F;test&#x2F;test.apk: Prebuilt, presigned apks with targetSdkVersion &gt;&#x3D; 30 (or a codename targetSdkVersion) must set <strong>preprocessed: true</strong> in the Android.bp definition (because they must be signed with signature v2, and the build system would wreck that signature otherwise)</p></blockquote><p>另外apk里面的so不能压缩，否则会报错</p><blockquote><p>FAILED: out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stamp</p><p>build&#x2F;soong&#x2F;scripts&#x2F;check_prebuilt_presigned_apk.py –aapt2 out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;aapt2 –zipalign out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;zipalign –preprocessed packages&#x2F;test&#x2F;test.apk out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stamp</p><p>packages&#x2F;test&#x2F;test.apk: <strong>Contains compressed JNI libraries</strong></p></blockquote><p>因为安卓6开始支持直接加载apk里面的so，如果压缩的话，预编译会在apk内部进行解压，那么就会破坏apk签名。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412242117760.png" alt="img"></p><p>其实，如果apk的minSdkVersion &gt;&#x3D; 23 并且 Android Gradle plugin &gt;&#x3D; 3.6.0情况下，打包时android:extractNativeLibs&#x3D;false，apk的so默认是不压缩的。</p><p>在minSdkVersion &lt; 23 或 Android Gradle plugin &lt; 3.6.0情况下，打包时 android:extractNativeLibs&#x3D;true，apk的so默认是压缩的。</p><p>参考：<a href="https://juejin.cn/post/6943920550125420558">https://juejin.cn/post/6943920550125420558</a></p><p><a href="https://blog.csdn.net/yzyeilin/article/details/139968840">Android13解决android_app_import内置第三方APK安装失败问题_but no such signature was found. signature strippe-CSDN博客</a></p><p><a href="https://blog.csdn.net/chuyouyinghe/article/details/131001532">浅谈extractNativeLibs</a></p><h2 id="通过直接拷贝的方法"><a href="#通过直接拷贝的方法" class="headerlink" title="通过直接拷贝的方法"></a>通过直接拷贝的方法</h2><p>参考：<a href="https://blog.csdn.net/wangwei6227/article/details/123727372">https://blog.csdn.net/wangwei6227/article/details/123727372</a></p><p>同样要注意apk so的压缩问题，如果是压缩过的，必须提取出来，并拷贝到apk机器目录。</p><h2 id="可能遇到的selinux权限问题"><a href="#可能遇到的selinux权限问题" class="headerlink" title="可能遇到的selinux权限问题"></a>可能遇到的selinux权限问题</h2><blockquote><p>01-01 12:00:39.520000  5326  5326 W om.skype.raider: type&#x3D;1400 audit(0.0:64): avc: denied { read } for name&#x3D;”libSkypeAndroid.so” dev&#x3D;”mmcblk0p22” ino&#x3D;770074 scontext&#x3D;u:r:untrusted_app:s0:c512,c768 tcontext&#x3D;u:object_r:system_data_file:s0 tclass&#x3D;file permissive&#x3D;0</p></blockquote><p>#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; untrusted_app.te &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>allow untrusted_app system_data_file:file r_file_perms;</p><p>参考：<a href="https://www.codeleading.com/article/6471686269/">采用Signature Scheme v2签名方式的APK预置失败 </a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;有同事反馈集成apk时安装失败&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PackageManager: Failed to scan &amp;#x2F;product&amp;#x2F;app&amp;#x2F;test: No APK Signature Scheme v2</summary>
        
      
    
    
    
    <category term="Android Build System" scheme="https://iwesley.top/categories/Android-Build-System/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="aosp编译" scheme="https://iwesley.top/tags/aosp%E7%BC%96%E8%AF%91/"/>
    
    <category term="Android.mk" scheme="https://iwesley.top/tags/Android-mk/"/>
    
    <category term="Android.bp" scheme="https://iwesley.top/tags/Android-bp/"/>
    
  </entry>
  
</feed>
