<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wesley&#39;s Blog</title>
  <icon>https://iwesley.top/icon.png</icon>
  <subtitle>我未曾珍惜的，我不再拥有。</subtitle>
  <link href="https://iwesley.top/atom.xml" rel="self"/>
  
  <link href="https://iwesley.top/"/>
  <updated>2025-03-03T12:42:15.461Z</updated>
  <id>https://iwesley.top/</id>
  
  <author>
    <name>Wesley</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安卓组件化之动态依赖功能模块</title>
    <link href="https://iwesley.top/article/67ca89d4/"/>
    <id>https://iwesley.top/article/67ca89d4/</id>
    <published>2025-03-03T10:34:03.000Z</published>
    <updated>2025-03-03T12:42:15.461Z</updated>
    
    <content type="html"><![CDATA[<p>对于拥有不同渠道的 APP 来说，可能需要集成不同的功能模块，也可能同一个功能有不同实现。最简单的方法可能是通过接口、工厂模式、 flavorImplement 和渠道自定义代码的方法来实现了。但是，如果不想建那么多渠道代码目录，需要通过一套代码来初始化模块，那么上述方法就不行了。</p><p>那么如何在不依赖模块的前提下动态调用其功能呢？</p><p>有几种方法：</p><p>1、反射、接口隔离和工厂模式</p><p>2、动态功能模块（Dynamic Feature Module），国内不适用。</p><p>3、利用 Java 的 <code>ServiceLoader</code> 机制，通过配置文件声明接口实现类。</p><p>综合考虑后决定采用反射、接口隔离和工厂模式。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>环境：agp 8.7.0，grade：8.10.2</p><h3 id="gradle：实现模块动态加载"><a href="#gradle：实现模块动态加载" class="headerlink" title="gradle：实现模块动态加载"></a>gradle：实现模块动态加载</h3><p>采用yaml文件进行功能配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#功能定义</span><br><span class="hljs-attr">features:</span><br>  <span class="hljs-attr">featureA:</span><br>    <span class="hljs-comment">#默认配置</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;:feature:featureA&#x27;</span> <span class="hljs-comment">#模块名字</span><br>    <span class="hljs-comment">#两个列表优先级最高，但不能同时包含一样的flavor</span><br>    <span class="hljs-comment">#如果enable为true，则建议使用disableFlavorsList。反之，亦然。</span><br>    <span class="hljs-attr">enableFlavorsList:</span> [<span class="hljs-string">demo</span>, <span class="hljs-string">companyA</span>, <span class="hljs-string">companyB</span>]<br>    <span class="hljs-attr">disableFlavorsList:</span> []<br></code></pre></td></tr></table></figure><p>libs.versions.toml</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">snakeyaml</span> = <span class="hljs-string">&quot;1.33&quot;</span><br><span class="hljs-attr">snakeyaml</span> = &#123; module = <span class="hljs-string">&quot;org.yaml:snakeyaml&quot;</span>, version.ref = <span class="hljs-string">&quot;snakeyaml&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>根build.gradle</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br>buildscript &#123;<br>    <span class="hljs-comment">// 自定义 gradle 插件</span><br>    dependencies &#123;<br>        <span class="hljs-comment">//classpath(libs.plugin)</span><br>        classpath libs.snakeyaml <span class="hljs-comment">// 添加 YAML 解析库</span><br>    &#125;<br>&#125;<br><br>plugins &#123;<br>    alias(libs.plugins.android.application) apply <span class="hljs-literal">false</span><br>    alias(libs.plugins.kotlin.android) apply <span class="hljs-literal">false</span><br>    alias(libs.plugins.android.library) apply <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>app build.gradle （根据配置动态依赖模块实现）</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">//Yaml放在其他xxx.gradle import会报找不到</span><br><span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml<br>ext &#123;<br>    loadYamlConfig = &#123; String fileName -&gt;<br>        <span class="hljs-keyword">def</span> configFile = file(fileName)<br>        <span class="hljs-keyword">if</span> (!configFile.exists()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GradleException(<span class="hljs-string">&quot;YAML config file not found: $&#123;configFile.absolutePath&#125;&quot;</span>)<br>        &#125;<br>        <span class="hljs-keyword">def</span> yaml = <span class="hljs-keyword">new</span> Yaml()<br>        <span class="hljs-keyword">def</span> config<br>        <span class="hljs-keyword">try</span> &#123;<br>            configFile.withReader &#123; reader -&gt;<br>                config = yaml.load(reader)<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GradleException(<span class="hljs-string">&quot;Failed to parse YAML file: $&#123;configFile.name&#125;&quot;</span>, e)<br>        &#125;<br>        <span class="hljs-keyword">return</span> config.asImmutable()<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">def</span> printlnRed(String msg) &#123;<br>    <span class="hljs-keyword">def</span> ANSI_RESET = <span class="hljs-string">&quot;\u001B[0m&quot;</span><br>    <span class="hljs-keyword">def</span> ANSI_RED = <span class="hljs-string">&quot;\u001B[31m&quot;</span><br>    println(<span class="hljs-string">&quot;$&#123;ANSI_RED&#125;$&#123;msg&#125;$&#123;ANSI_RESET&#125;&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">def</span> featureConfig = loadYamlConfig(<span class="hljs-string">&quot;feature_config.yaml&quot;</span>)<br>println(<span class="hljs-string">&quot;featureConfig: $&#123;featureConfig&#125;&quot;</span>)<br>afterEvaluate &#123;<br>    android.applicationVariants.configureEach &#123; variant -&gt;<br>        <span class="hljs-keyword">def</span> flavorCompanyName = variant.productFlavors.find &#123; it.dimension == <span class="hljs-string">&quot;COMPANY&quot;</span> &#125;?.name<br>        if (!flavorCompanyName) &#123;<br>            throw new GradleException(<span class="hljs-string">&quot;Variant $&#123;variant.name&#125; has no COMPANY flavor!&quot;</span>)<br>        &#125;<br>        println(<span class="hljs-string">&quot;variant.name:$&#123;variant.name&#125; variant.flavorName:$&#123;variant.flavorName&#125;&quot;</span>)<br>        featureConfig.features.each &#123; featureKey, defaultConfig  -&gt;<br>            def featureName = defaultConfig.name<br>            boolean isEnabled = defaultConfig.enable<br>            def enableFlavorsList = defaultConfig.enableFlavorsList<br>            def disableFlavorsList = defaultConfig.disableFlavorsList<br>            boolean hasFound = false<br>            for (flavor in enableFlavorsList) &#123;<br>                if (flavor == flavorCompanyName) &#123;<br>                    isEnabled = true<br>                    println(<span class="hljs-string">&quot;enable in enableFlavorsList&quot;</span>)<br>                    hasFound = true<br>                    break<br>                &#125;<br>            &#125;<br>            for (flavor in disableFlavorsList) &#123;<br>                if (flavor == flavorCompanyName) &#123;<br>                    if (hasFound) &#123;<br>                        throw new GradleException(<span class="hljs-string">&quot;Feature $featureKey in flavor $flavorCompanyName must not be in both enableFlavorsList and disableFlavorsList!&quot;</span>)<br>                    &#125;<br>                    isEnabled = false<br>                    printlnRed(<span class="hljs-string">&quot;disable in disableFlavorsList&quot;</span>)<br>                    break<br>                &#125;<br>            &#125;<br>            if (isEnabled) &#123;<br>                println(<span class="hljs-string">&quot;$&#123;flavorCompanyName&#125;Implementation $&#123;featureName&#125;&quot;</span>)<br>                <span class="hljs-comment">//动态依赖模块</span><br>                dependencies.add(<span class="hljs-string">&quot;$&#123;flavorCompanyName&#125;Implementation&quot;</span>, project(featureName))<br>            &#125; else &#123;<br>                printlnRed(<span class="hljs-string">&quot;$&#123;variant.name&#125; $&#123;flavorCompanyName&#125; Not Implementation $&#123;featureName&#125;&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模块实现"><a href="#模块实现" class="headerlink" title="模块实现"></a>模块实现</h3><h4 id="公共模块"><a href="#公共模块" class="headerlink" title="公共模块"></a>公共模块</h4><p>定义接口</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFeature</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个 Helper</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">object</span> FeatureHelper : IFeature &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> mFeature: IFeature? = <span class="hljs-literal">null</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setFeatureImpl</span><span class="hljs-params">(feature: <span class="hljs-type">IFeature</span>?)</span></span> &#123;<br>        mFeature = feature<br>    &#125;<br>    <br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span> &#123;<br>        mFeature?.doSomething()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Module</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">       采用java类 方便使用 java 的方式进行反射</span><br><span class="hljs-comment">     * 注意：包名和类名、方法名和参数不能随意修改，否则反射会找不到</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context Context</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> IFeature</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IFeature <span class="hljs-title function_">load</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-comment">//FeatureManager实现IFeature接口</span><br>        <span class="hljs-type">FeatureManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FeatureManager</span>(context);<br>        manager.init();<br>        <span class="hljs-keyword">return</span> manager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="app-模块"><a href="#app-模块" class="headerlink" title="app 模块"></a>app 模块</h4><p><a href="https://iwesley.top/article/ba67228f/">Java反射的优雅使用 - Wesley’s Blog</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">loadFeatureModule</span><span class="hljs-params">(application: <span class="hljs-type">Application</span>)</span></span>: IFeature? &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> &#123;<br>        Reflector.on(<span class="hljs-string">&quot;com.wesley.feature.Module&quot;</span>)<br>            .method(<span class="hljs-string">&quot;load&quot;</span>, Context::<span class="hljs-keyword">class</span>.java).call&lt;IFeature&gt;(application)<br>    &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>        <span class="hljs-literal">null</span> <span class="hljs-comment">// 模块未启用或未实现</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initModules</span><span class="hljs-params">(application: <span class="hljs-type">Application</span>)</span></span> &#123;<br>  FeatureHelper.setFeatureImpl(loadFeatureModule(application))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/97498337">Android 模块解耦和的实践</a></p><p><a href="https://blog.csdn.net/fesdgasdgasdg/article/details/106888077">Android 中使用 ServiceLoader、AutoService 摔坑记录</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;对于拥有不同渠道的 APP 来说，可能需要集成不同的功能模块，也可能同一个功能有不同实现。最简单的方法可能是通过接口、工厂模式、 flavorImplement</summary>
        
      
    
    
    
    <category term="AndroidAPP架构" scheme="https://iwesley.top/categories/AndroidAPP%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="gradle" scheme="https://iwesley.top/tags/gradle/"/>
    
    <category term="组件化" scheme="https://iwesley.top/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>DLNA库Platinum新增安卓64位so编译方法</title>
    <link href="https://iwesley.top/article/4339b418/"/>
    <id>https://iwesley.top/article/4339b418/</id>
    <published>2025-01-18T04:52:15.000Z</published>
    <updated>2025-01-18T11:12:45.426Z</updated>
    
    <content type="html"><![CDATA[<p>下载代码（该仓库我已经修改相关编译错误和支持安卓 64 位 so 编译）</p><p><code>git clone https://github.com/wesley666/Platinum -b master</code></p><p>下载Neptune</p><p><code>git submodule update --init</code></p><p>下载 ndk15：</p><p><a href="https://dl.google.com/android/repository/android-ndk-r15c-linux-x86_64.zip">https://dl.google.com/android/repository/android-ndk-r15c-linux-x86_64.zip</a></p><p>建议安装 conda 环境来进行编译</p><p><a href="https://www.anaconda.com/download/success">https://www.anaconda.com/download/success</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create -n dlna  python=2.7<br><br>pip install scons<br><br>conda activate dlna<br></code></pre></td></tr></table></figure><p>编译</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">以你的路径为准，如果出现路径错误，可以改成绝对路径</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">export</span> ANDROID_NDK_ROOT=/home/wesley/ndk/android-ndk-r15c/</span> <br>export ANDROID_NDK_ROOT=~/ndk/android-ndk-r15c/ <br>scons -c target=arm-android-linux build_config=Release<br>scons target=arm-android-linux build_config=Release<br>scons -c target=arm64-android-linux build_config=Release<br>scons target=arm64-android-linux build_config=Release<br>cd Source/Platform/Android/module/platinum<br>~/ndk/android-ndk-r15c/ndk-build clean<br>~/ndk/android-ndk-r15c/ndk-build NDK_DEBUG=0<br></code></pre></td></tr></table></figure><blockquote><p>(dlna) wesley@Wesley:~&#x2F;Project&#x2F;Platinum&#x2F;Source&#x2F;Platform&#x2F;Android&#x2F;module&#x2F;platinum$ ~&#x2F;ndk&#x2F;android-ndk-r15c&#x2F;ndk-build<br>Android NDK: Found platform level in .&#x2F;project.properties. Setting APP_PLATFORM to android-14.<br>jni&#x2F;Android.mk:5: “TARGET_ARCH_ABI:armeabi”<br>jni&#x2F;Android.mk:5: “TARGET_ARCH_ABI:armeabi-v7a”<br>jni&#x2F;Android.mk:5: “TARGET_ARCH_ABI:arm64-v8a”<br>jni&#x2F;Android.mk:15: “build arm64”<br>[armeabi] Compile++ thumb: platinum-jni &lt;&#x3D; platinum-jni.cpp<br>[armeabi] StaticLibrary  : libstdc++.a<br>[armeabi] SharedLibrary  : libplatinum-jni.so<br>[armeabi] Install        : libplatinum-jni.so &#x3D;&gt; libs&#x2F;armeabi&#x2F;libplatinum-jni.so<br>[armeabi-v7a] Compile++ thumb: platinum-jni &lt;&#x3D; platinum-jni.cpp<br>[armeabi-v7a] StaticLibrary  : libstdc++.a<br>[armeabi-v7a] SharedLibrary  : libplatinum-jni.so<br>[armeabi-v7a] Install        : libplatinum-jni.so &#x3D;&gt; libs&#x2F;armeabi-v7a&#x2F;libplatinum-jni.so<br>[arm64-v8a] Compile++      : platinum-jni &lt;&#x3D; platinum-jni.cpp<br>[arm64-v8a] StaticLibrary  : libstdc++.a<br>[arm64-v8a] SharedLibrary  : libplatinum-jni.so<br>[arm64-v8a] Install        : libplatinum-jni.so &#x3D;&gt; libs&#x2F;arm64-v8a&#x2F;libplatinum-jni.so</p></blockquote><p>obj和 libs目录区别：一个用于追溯和调试，一个用于正式版发布。</p><blockquote><p>(dlna) wesley@Wesley:~&#x2F;Project&#x2F;Platinum&#x2F;Source&#x2F;Platform&#x2F;Android&#x2F;module&#x2F;platinum$ file libs&#x2F;arm64-v8a&#x2F;libplatinum-jni.so<br>libs&#x2F;arm64-v8a&#x2F;libplatinum-jni.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]&#x3D;a8cdaa3a1288bd98c13556fbd4a1499e31005091, <strong>stripped</strong></p><p>(dlna) wesley@Wesley:~&#x2F;Project&#x2F;Platinum&#x2F;Source&#x2F;Platform&#x2F;Android&#x2F;module&#x2F;platinum$ file obj&#x2F;local&#x2F;arm64-v8a&#x2F;libplatinum-jni.so<br>obj&#x2F;local&#x2F;arm64-v8a&#x2F;libplatinum-jni.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]&#x3D;a8cdaa3a1288bd98c13556fbd4a1499e31005091, <strong>with debug_info, not stripped</strong></p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;下载代码（该仓库我已经修改相关编译错误和支持安卓 64 位 so 编译）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/wesley666/Platinum -b</summary>
        
      
    
    
    
    <category term="投屏" scheme="https://iwesley.top/categories/%E6%8A%95%E5%B1%8F/"/>
    
    
    <category term="投屏" scheme="https://iwesley.top/tags/%E6%8A%95%E5%B1%8F/"/>
    
    <category term="DLNA" scheme="https://iwesley.top/tags/DLNA/"/>
    
  </entry>
  
  <entry>
    <title>安卓Activity执行finish后onNewIntent也执行了</title>
    <link href="https://iwesley.top/article/88a54bc8/"/>
    <id>https://iwesley.top/article/88a54bc8/</id>
    <published>2025-01-04T09:34:44.000Z</published>
    <updated>2025-01-04T10:36:03.481Z</updated>
    
    <content type="html"><![CDATA[<p>测试反应投屏时下一集可能播放不成功。</p><p>首先看一下日志：</p><blockquote><p>onCompletion<br>onCast<br>handlerMessage: 2<br>finish: PlayerActivity@abc7fdc<br>onPause: PlayerActivity@abc7fdc<br>onNewIntent: PlayerActivity@abc7fdc<br>onResume: PlayerActivity@abc7fdc<br>onPause: PlayerActivity@abc7fdc<br>onResume: HomeActivity@71ec50a<br>onstop: PlayerActivity@abc7fdc<br>onDestroy:PlayerActivity@abc7fdc</p></blockquote><p>看到日志时很迷惑，为什么 finish 了，安卓还会执行onNewIntent，不应该是新建一个 activity 吗？</p><p>先来看一下场景描述：</p><p>视频播完后会发送一个 finish 信息，如果 3s 内没有下一个视频进来就会执行 finish，有视频进来就会在 onNewIntent 中 remove 掉这条信息。</p><p>经过实验和详细分析后，终于找到了问题原因：</p><p>首先因为视频播放结束发了一条finish消息，finish消息没有执行时突然来了下一集的消息，这时候执行startActivty会插入一条onNewIntent消息。结果，这时候finish因为时间到了，该执行了。然后 finish 执行完后，onNewIntent 也该执行了。执行完后因为 finish 的原因， onDestroy也执行了。结果就是下一集没播完就退出来了。</p><p>解决办法：在startActivity前remove掉finish消息，比onNewIntent 的时间节点还要提前。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>面试必备：Android（9.0）Activity启动流程(一) : <a href="https://juejin.cn/post/6844903959581163528">https://juejin.cn/post/6844903959581163528</a></p><p>面试必备：Android（9.0）Activity启动流程(二) : <a href="https://juejin.cn/post/6844903959589552142">https://juejin.cn/post/6844903959589552142</a></p><p><a href="https://stackoverflow.com/questions/24639272/onnewintent-called-after-finish-executed">android - onNewIntent called after finish() executed - Stack Overflow</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;测试反应投屏时下一集可能播放不成功。&lt;/p&gt;
&lt;p&gt;首先看一下日志：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;onCompletion&lt;br&gt;onCast&lt;br&gt;handlerMessage: 2&lt;br&gt;finish:</summary>
        
      
    
    
    
    <category term="AndroidBugFix" scheme="https://iwesley.top/categories/AndroidBugFix/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="AndroidActivity" scheme="https://iwesley.top/tags/AndroidActivity/"/>
    
  </entry>
  
  <entry>
    <title>安卓应用4字节不对齐导致so加载失败</title>
    <link href="https://iwesley.top/article/18f59983/"/>
    <id>https://iwesley.top/article/18f59983/</id>
    <published>2025-01-04T03:12:24.000Z</published>
    <updated>2025-01-04T08:32:28.983Z</updated>
    
    <content type="html"><![CDATA[<p>今天把一个apk给厂商签名后直接push到机器的&#x2F;system&#x2F;app,结果运行app时显示so找不到。报错：</p><blockquote><p> java stacktrace:<br>java.lang.UnsatisfiedLinkError: Library mmkv not found; tried [&#x2F;system&#x2F;lib&#x2F;libmmkv.so, &#x2F;product&#x2F;lib&#x2F;libmmkv.so]<br>at java.lang.Runtime.loadLibrary0(Runtime.java:1101)<br>at java.lang.System.loadLibrary(System.java:1669)<br>at com.tencent.mmkv.MMKV.doInitialize(MMKV.java:226)<br>at com.tencent.mmkv.MMKV.initialize(MMKV.java:208)<br>at com.tencent.mmkv.MMKV.initialize(MMKV.java:94)<br>at com.wesley.CustomApplication.onCreate(CustomApplication.kt:14)<br>at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1154)<br>at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5871)<br>at android.app.ActivityThread.access$1100(ActivityThread.java:199)<br>at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1650)<br>at android.os.Handler.dispatchMessage(Handler.java:106)<br>at android.os.Looper.loop(Looper.java:193)<br>at android.app.ActivityThread.main(ActivityThread.java:6669)<br>at java.lang.reflect.Method.invoke(Native Method)<br>at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)<br>at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:922)  </p></blockquote><p>日志（xcrash 自己有so异常捕获，所以直到加载 mmkv 才抛出异常）</p><blockquote><p> 12-27 14:58:04.840  9717  9717 E System  : ##loadLibrary0## &#x2F;system&#x2F;app&#x2F;demo&#x2F;demo_V1.0.0(2412261921)-release-signed.apk!&#x2F;lib&#x2F;armeabi-v7a&#x2F;libxcrash.so error: dlopen failed: library “&#x2F;system&#x2F;app&#x2F;demo&#x2F;demo_V1.0.0(2412261921)-release-signed.apk!&#x2F;lib&#x2F;armeabi-v7a&#x2F;libxcrash.so” not found, and try to find so file from the lib path<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper: xcrash: NativeHandler System.loadLibrary failed<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper: java.lang.UnsatisfiedLinkError: Library xcrash not found; tried [&#x2F;system&#x2F;lib&#x2F;libxcrash.so, &#x2F;product&#x2F;lib&#x2F;libxcrash.so]<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at java.lang.Runtime.loadLibrary0(Runtime.java:1101)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at java.lang.System.loadLibrary(System.java:1669)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at xcrash.NativeHandler.initialize(NativeHandler.java:89)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at xcrash.XCrash.init(XCrash.java:189)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.wesley.base.apm.XCrashWrapper.<init>(XCrashWrapper.kt:131)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.wesley.base.apm.XCrashWrapper.<init>(XCrashWrapper.kt:17)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.wesley.CastApplication.attachBaseContext(CastApplication.kt:43)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.Application.attach(Application.java:212)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.Instrumentation.newApplication(Instrumentation.java:1121)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.LoadedApk.makeApplication(LoadedApk.java:1065)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5842)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread.access$1100(ActivityThread.java:199)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1650)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.os.Handler.dispatchMessage(Handler.java:106)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.os.Looper.loop(Looper.java:193)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread.main(ActivityThread.java:6669)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at java.lang.reflect.Method.invoke(Native Method)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:922)  </p></blockquote><p>因为安卓6开始支持直接加载apk内部so，如果编译后的 apk 内部 so 是不压缩的，那么就不需要释放到目录了。所以排除是因为不解压 so 到&#x2F;system&#x2F;app&#x2F;demo&#x2F;lib&#x2F;arm 引起的问题，虽然这样也可以解决问题。</p><blockquote><p>如果apk的minSdkVersion &gt;&#x3D; 23 并且 Android Gradle plugin &gt;&#x3D; 3.6.0情况下，打包时android:extractNativeLibs&#x3D;false，apk的so默认是不压缩的。</p><p>在minSdkVersion &lt; 23 或 Android Gradle plugin &lt; 3.6.0情况下，打包时 android:extractNativeLibs&#x3D;true，apk的so默认是压缩的。</p></blockquote><p>然后，我尝试push没有给厂商签名前的版本 apk 到机器上是正常的，那么应该是厂商签名导致 apk 发生了变化。刚好前几天碰到安卓签名问题<a href="https://iwesley.top/article/133f2b7a/">安卓15预置第三方apk时签名报错问题解决 - Wesley’s Blog</a>。然后我就用命令看了一下：<code>zipalign -c -v  4 demo_sign.apk</code></p><p><a href="https://developer.android.com/tools/zipalign">zipalign  | Android Studio  | Android Developers</a></p><p>显示：<code>Verification FAILED</code>，那就是 4 字节没有对齐。</p><p>查看签名版本<code>apksigner verify -v demo_sign.apk | grep Verified</code></p><p>只有v1签名</p><blockquote><p>~&#x2F;Project$ apksigner verify -v demo_sign.apk | grep Verified</p><p>Verified using v1 scheme (JAR signing): true</p><p>Verified using v2 scheme (APK Signature Scheme v2): false</p><p>Verified using v3 scheme (APK Signature Scheme v3): false</p><p>Verified using v3.1 scheme (APK Signature Scheme v3.1): false</p><p>Verified using v4 scheme (APK Signature Scheme v4): false</p><p>Verified for SourceStamp: false</p></blockquote><p>因为是v1签名，执行<code>zipalign -v -p 4 demo_sign.apk  demo_sign_align.apk</code>对齐4 字节不会破坏厂商的签名信息，然后push进去果然好了。</p><p>然后我又试着安装没有对齐前的，结果直接报错了：</p><blockquote><p>PS C:\Users\Wesley&gt; adb  install Y:\Project\demo_sign.apk</p><p>Performing Streamed Install</p><p>adb: failed to install Y:\Project\demo_sign.apk: Failure [INSTALL_FAILED_INVALID_APK: Failed to extract native libraries, res&#x3D;-2]</p></blockquote><p>但是系统扫描安装却是可以通过的，所以很难发现是字节不对齐引起的。</p><h2 id="深究"><a href="#深究" class="headerlink" title="深究"></a>深究</h2><p>之前直接搜索安卓java.lang.UnsatisfiedLinkError是很难找到针对这种问题的解决方法的。因为现在有了解决办法，所以换成UnsatisfiedLinkError zipalign进行谷歌搜索。结果就出来了：</p><p><a href="https://stackoverflow.com/questions/72544099/java-lang-unsatisfiedlinkerror-when-installing-as-system-app">android - java.lang.UnsatisfiedLinkError when installing as system app - Stack Overflow</a></p><p><a href="https://ask.seowhy.com/question/175285">zipflinger导致的UnsatisfiedLinkError分析 - 搜外SEO问答</a></p><p><a href="https://blog.51cto.com/u_15075514/3336070">zipflinger导致的UnsatisfiedLinkError分析_mb5ff2f24b42377的技术博客_51CTO博客</a></p><p>用 AI大模型总结一下：</p><blockquote><p>这篇文章主要分析了在Android开发中，由于升级Android Gradle Plugin (AGP) 版本导致的UnsatisfiedLinkError问题，并提供了相应的解决方案。以下是文章的主要内容总结：</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><ul><li><strong>问题现象</strong>：在Android 9.0环境下，将AGP从3.6.1升级到4.1.0后，预装在&#x2F;system&#x2F;priv-app下的APP出现了UnsatisfiedLinkError崩溃。</li><li><strong>问题原因</strong>：升级AGP后，系统在加载so文件时失败，具体表现为so文件在APK中的对齐方式有问题。</li></ul><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ul><li><strong>so文件加载流程</strong>：系统使用“!&#x2F;”分隔符来定位so文件路径，并在APK中查找对应的entry。问题出在zipalign处理上，导致so文件的对齐不正确。</li><li><strong>zipalign的作用</strong>：确保APK中所有未压缩数据在4字节边界上对齐，以便使用mmap()直接访问，减少RAM消耗。</li><li><strong>系统编译处理</strong>：Android系统在编译时会对privileged app执行uncompress-dexs操作，将压缩存储的dex文件变为不压缩存储。之后还会进行align-package操作。</li></ul><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><ul><li><strong>zipflinger工具</strong>：从AGP 4.1开始，默认在构建release版本时启用zipflinger工具进行打包。zipflinger改变了APK的打包方式，导致uncompress-dexs操作后zipalign出现问题。</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><strong>禁用zipflinger</strong>：在app工程的gradle.properties中加入配置以禁用zipflinger。</li><li><strong>不解压 dex</strong>：DONT_UNCOMPRESS_PRIV_APPS_DEXS :&#x3D; true，可能会降低 dex 加载速度。</li><li><strong>使用zip2zip工具</strong>：在最新的AOSP源码中，使用zip2zip工具来处理dex文件的解压缩，以适配zipflinger打包的APK。</li><li><strong>其他方法</strong>：包括回退AGP版本、修改系统编译脚本等，但这些方法各有优缺点。</li></ul></blockquote><p>虽然引起问题的原因不一样，但都是因为字节不对齐引起的 so 找不到。</p><p>下面来分析一下具体原因：</p><p>so加载调用栈</p><blockquote><p>ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;lang&#x2F;System.java  –&gt; System.loadLibrary</p><p>ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;lang&#x2F;Runtime.java  –&gt; Runtime.loadLibrary0 -&gt; nativeLoad</p><p>ojluni&#x2F;src&#x2F;main&#x2F;native&#x2F;Runtime.c  –&gt; Runtime_nativeLoad</p><p>art&#x2F;openjdkjvm&#x2F;OpenjdkJvm.cc  –&gt; JVM_NativeLoad</p><p>art&#x2F;runtime&#x2F;java_vm_ext.cc –&gt; JavaVMExt::LoadNativeLibrary</p><p>system&#x2F;core&#x2F;libnativeloader&#x2F;native_loader.cpp –&gt; OpenNativeLibrary</p><p>bionic&#x2F;libdl&#x2F;libdl.cpp –&gt; android_dlopen_ext</p><p>bionic&#x2F;linker&#x2F;dlfcn.cpp –&gt; __loader_android_dlopen_ext</p><p>bionic&#x2F;linker&#x2F;dlfcn.cpp –&gt; dlopen_ext</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; do_dlopen</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; find_library</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; find_libraries</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; find_library_internal</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; load_library</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; open_library</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; open_library_in_zipfile</p></blockquote><p>重点看 <code>bionic/linker/linker.cpp --&gt; open_library_in_zipfile</code> 这个函数，导致加载失败的是以下条件 <code>entry.offset % PAGE_SIZE != 0</code></p><p><a href="http://xrefandroid.com/android-9.0.0_r61/xref/bionic/linker/linker.cpp#992">http://xrefandroid.com/android-9.0.0_r61/xref/bionic/linker/linker.cpp#992</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (entry.method != kCompressStored || (entry.offset % PAGE_SIZE) != <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结来说，就是签名的时候破坏了4字节对齐，导致 so 加载失败。所以，以后碰到此类问题时，可以执行<code>zipalign -c -v  4 xxx.apk</code>先看一下是否4字节对齐。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今天把一个apk给厂商签名后直接push到机器的&amp;#x2F;system&amp;#x2F;app,结果运行app时显示so找不到。报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; java</summary>
        
      
    
    
    
    <category term="Android Build System" scheme="https://iwesley.top/categories/Android-Build-System/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="aosp编译" scheme="https://iwesley.top/tags/aosp%E7%BC%96%E8%AF%91/"/>
    
    <category term="Android.mk" scheme="https://iwesley.top/tags/Android-mk/"/>
    
    <category term="Android.bp" scheme="https://iwesley.top/tags/Android-bp/"/>
    
  </entry>
  
  <entry>
    <title>安卓多渠道apk配置不同签名</title>
    <link href="https://iwesley.top/article/611fb416/"/>
    <id>https://iwesley.top/article/611fb416/</id>
    <published>2024-12-24T13:39:40.000Z</published>
    <updated>2024-12-29T07:06:02.588Z</updated>
    
    <content type="html"><![CDATA[<p>一般签名都是放在buildTypes里面：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs groovy">...<br>android &#123;<br>    ...<br>    defaultConfig &#123;...&#125;<br>    signingConfigs &#123;<br>        release &#123;<br>            storeFile file(<span class="hljs-string">&quot;myreleasekey.keystore&quot;</span>)<br>            storePassword <span class="hljs-string">&quot;password&quot;</span><br>            keyAlias <span class="hljs-string">&quot;MyReleaseKey&quot;</span><br>            keyPassword <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>    &#125;<br>    buildTypes &#123;<br>        release &#123;<br>            ...<br>            signingConfig signingConfigs.release<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是多渠道时，使用配置的优先级从高到低分别是buildTypes、productFlavor、defaultConfig，如果按上面配置的话，根本修改不了签名。所以修改成以下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    ...<br>    signingConfigs &#123;<br>        release &#123;<br>            storeFile file(<span class="hljs-string">&quot;myreleasekey.keystore&quot;</span>)<br>            storePassword <span class="hljs-string">&quot;password&quot;</span><br>            keyAlias <span class="hljs-string">&quot;MyReleaseKey&quot;</span><br>            keyPassword <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>        demo &#123;<br>            storeFile file(<span class="hljs-string">&quot;myreleasekey.keystore&quot;</span>)<br>            storePassword <span class="hljs-string">&quot;password&quot;</span><br>            keyAlias <span class="hljs-string">&quot;MyReleaseKey&quot;</span><br>            keyPassword <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>    &#125;<br>    defaultConfig &#123;<br>        signingConfig signingConfigs.release <span class="hljs-comment">//默认签名</span><br>    &#125;<br>    buildTypes &#123;<br>        debug&#123;<br>            signingConfig <span class="hljs-literal">null</span> <span class="hljs-comment">//这里一定要置null，否则gralde会插入默认签名</span><br>        &#125;<br>        release&#123;...&#125;<br>    &#125;<br>    <span class="hljs-comment">// Specifies one flavor dimension.</span><br>    flavorDimensions <span class="hljs-string">&quot;version&quot;</span><br>    productFlavors &#123;<br>        demo &#123;<br>            dimension <span class="hljs-string">&quot;version&quot;</span><br>            applicationIdSuffix <span class="hljs-string">&quot;.demo&quot;</span><br>            versionNameSuffix <span class="hljs-string">&quot;-demo&quot;</span><br>            signingConfig signingConfigs.demo <span class="hljs-comment">//渠道签名</span><br>        &#125;<br>        full &#123;<br>            dimension <span class="hljs-string">&quot;version&quot;</span><br>            applicationIdSuffix <span class="hljs-string">&quot;.full&quot;</span><br>            versionNameSuffix <span class="hljs-string">&quot;-full&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>按上面配置完后，渠道可以按照自己需求替换签名了。特别注意debug类型那里要置<code>signingConfig null</code>，否则编译debug版本时签名会不生效，因为gradle会插入默认签名，替换掉渠道的签名。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;一般签名都是放在buildTypes里面：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="AppBuild" scheme="https://iwesley.top/categories/AppBuild/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="Android多渠道" scheme="https://iwesley.top/tags/Android%E5%A4%9A%E6%B8%A0%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>安卓15预置第三方apk时签名报错问题解决</title>
    <link href="https://iwesley.top/article/133f2b7a/"/>
    <id>https://iwesley.top/article/133f2b7a/</id>
    <published>2024-12-24T13:13:45.000Z</published>
    <updated>2024-12-29T07:06:02.588Z</updated>
    
    <content type="html"><![CDATA[<p>有同事反馈集成apk时安装失败</p><blockquote><p>PackageManager: Failed to scan &#x2F;product&#x2F;app&#x2F;test: No APK Signature Scheme v2 signature in package &#x2F;product&#x2F;app&#x2F;test&#x2F;test.apk</p></blockquote><p>查看编译后的apk签名信息</p><blockquote><p>DOES NOT VERIFY</p><p>ERROR: JAR signer CERT.RSA: JAR signature META-INF&#x2F;CERT.SF indicates the APK is signed using APK Signature Scheme v2 but no such signature was found. Signature stripped?</p></blockquote><p>但是用命令查看我的apk是正常的<code>apksigner  verify -v  test.apk  | grep Verified</code></p><blockquote><p>Verified using v1 scheme (JAR signing): true</p><p>Verified using v2 scheme (APK Signature Scheme v2): true</p><p>Verified using v3 scheme (APK Signature Scheme v3): false</p><p>Verified using v3.1 scheme (APK Signature Scheme v3.1): false</p><p>Verified using v4 scheme (APK Signature Scheme v4): false</p><p>Verified for SourceStamp: false</p></blockquote><p>那么应该是编译过程做了某些变动。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h2 id="通过预编译的方法"><a href="#通过预编译的方法" class="headerlink" title="通过预编译的方法"></a>通过预编译的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">android_app_import &#123;<br>    name: <span class="hljs-string">&quot;test&quot;</span>,<br>    apk: <span class="hljs-string">&quot;test.apk&quot;</span>,<br>    <span class="hljs-comment">// 保留apk自己的签名</span><br>    presigned: <span class="hljs-literal">true</span>,<br>    preprocessed: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 打开将放到对应分区目录的priv-app文件夹下</span><br>    <span class="hljs-comment">// privileged: true,</span><br>    <span class="hljs-comment">// 打开将放到system_ext分区</span><br>    <span class="hljs-comment">// system_ext_specific: true,</span><br>    <span class="hljs-comment">// 打开将放到product分区</span><br>    <span class="hljs-comment">// product_specific: true,</span><br>    <span class="hljs-comment">// 打开将放到vendor分区</span><br>    <span class="hljs-comment">// proprietary: true,</span><br>    <span class="hljs-comment">// odm分区</span><br>    <span class="hljs-comment">// device_specific: true</span><br>    <span class="hljs-comment">// apk优化，内置三方apk时建议关闭</span><br>    dex_preopt: &#123;<br>        enabled: <span class="hljs-literal">false</span>,<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>在安卓15上新增了<a href="http://xrefandroid.com/android-15.0.0_r1/xref/build/soong/java/app_import.go#376">app_import.go - OpenGrok cross reference for &#x2F;build&#x2F;soong&#x2F;java&#x2F;app_import.go</a></p><p>validatePresignedApk检测</p><p>如果加了presigned，但不加preprocessed，同时targetSdk大于等于30就会编译报错，更加方便开发者定位问题：</p><blockquote><p>[100% 5&#x2F;5 0s remaining] Check presigned apkFAILED: out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stampbuild&#x2F;soong&#x2F;scripts&#x2F;check_prebuilt_presigned_apk.py –aapt2 out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;aapt2 –zipalign out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;zipalign packages&#x2F;test&#x2F;test.apk out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stamppackages&#x2F;test&#x2F;test.apk: Prebuilt, presigned apks with targetSdkVersion &gt;&#x3D; 30 (or a codename targetSdkVersion) must set <strong>preprocessed: true</strong> in the Android.bp definition (because they must be signed with signature v2, and the build system would wreck that signature otherwise)</p></blockquote><p>另外apk里面的so不能压缩，否则会报错</p><blockquote><p>FAILED: out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stamp</p><p>build&#x2F;soong&#x2F;scripts&#x2F;check_prebuilt_presigned_apk.py –aapt2 out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;aapt2 –zipalign out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;zipalign –preprocessed packages&#x2F;test&#x2F;test.apk out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stamp</p><p>packages&#x2F;test&#x2F;test.apk: <strong>Contains compressed JNI libraries</strong></p></blockquote><p>因为安卓6开始支持直接加载apk里面的so，如果压缩的话，预编译会在apk内部进行解压，那么就会破坏apk签名。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412242117760.png" alt="img"></p><p>其实，如果apk的minSdkVersion &gt;&#x3D; 23 并且 Android Gradle plugin &gt;&#x3D; 3.6.0情况下，打包时android:extractNativeLibs&#x3D;false，apk的so默认是不压缩的。</p><p>在minSdkVersion &lt; 23 或 Android Gradle plugin &lt; 3.6.0情况下，打包时 android:extractNativeLibs&#x3D;true，apk的so默认是压缩的。</p><p>参考：<a href="https://juejin.cn/post/6943920550125420558">https://juejin.cn/post/6943920550125420558</a></p><p><a href="https://blog.csdn.net/yzyeilin/article/details/139968840">Android13解决android_app_import内置第三方APK安装失败问题_but no such signature was found. signature strippe-CSDN博客</a></p><p><a href="https://blog.csdn.net/chuyouyinghe/article/details/131001532">浅谈extractNativeLibs</a></p><h2 id="通过直接拷贝的方法"><a href="#通过直接拷贝的方法" class="headerlink" title="通过直接拷贝的方法"></a>通过直接拷贝的方法</h2><p>参考：<a href="https://blog.csdn.net/wangwei6227/article/details/123727372">https://blog.csdn.net/wangwei6227/article/details/123727372</a></p><p>同样要注意apk so的压缩问题，如果是压缩过的，必须提取出来，并拷贝到apk机器目录。</p><h2 id="可能遇到的selinux权限问题"><a href="#可能遇到的selinux权限问题" class="headerlink" title="可能遇到的selinux权限问题"></a>可能遇到的selinux权限问题</h2><blockquote><p>01-01 12:00:39.520000  5326  5326 W om.skype.raider: type&#x3D;1400 audit(0.0:64): avc: denied { read } for name&#x3D;”libSkypeAndroid.so” dev&#x3D;”mmcblk0p22” ino&#x3D;770074 scontext&#x3D;u:r:untrusted_app:s0:c512,c768 tcontext&#x3D;u:object_r:system_data_file:s0 tclass&#x3D;file permissive&#x3D;0</p></blockquote><p>#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; untrusted_app.te &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>allow untrusted_app system_data_file:file r_file_perms;</p><p>参考：<a href="https://www.codeleading.com/article/6471686269/">采用Signature Scheme v2签名方式的APK预置失败 </a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;有同事反馈集成apk时安装失败&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PackageManager: Failed to scan &amp;#x2F;product&amp;#x2F;app&amp;#x2F;test: No APK Signature Scheme v2</summary>
        
      
    
    
    
    <category term="Android Build System" scheme="https://iwesley.top/categories/Android-Build-System/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="aosp编译" scheme="https://iwesley.top/tags/aosp%E7%BC%96%E8%AF%91/"/>
    
    <category term="Android.mk" scheme="https://iwesley.top/tags/Android-mk/"/>
    
    <category term="Android.bp" scheme="https://iwesley.top/tags/Android-bp/"/>
    
  </entry>
  
  <entry>
    <title>咪咕视频DLNA投屏跳集问题分析</title>
    <link href="https://iwesley.top/article/73728aea/"/>
    <id>https://iwesley.top/article/73728aea/</id>
    <published>2024-12-08T12:08:50.000Z</published>
    <updated>2024-12-24T12:51:46.756Z</updated>
    
    <content type="html"><![CDATA[<p>QA在测试公司投屏应用时，发现咪咕视频DLNA投剧集时有时候会跳过一集直接播下一集的问题。</p><p>尝试自行分析解决不了后，我决定分析一下竞品应用：当贝投屏，结果发现它是正常的。由于当贝投屏是个黑盒子，所以决定抓包看一下。</p><p><a href="https://www.androidtcpdump.com/android-tcpdump/downloads">Android tcpdump</a></p><p><code>tcpdump tcp -i any -p -s 0 -w /sdcard/capture.pcap</code></p><h2 id="当贝投屏抓包分析"><a href="#当贝投屏抓包分析" class="headerlink" title="当贝投屏抓包分析"></a>当贝投屏抓包分析</h2><p>运行命令后开始投剧集到当贝投屏并通过进度条操作触发切集，把抓包文件adb pull出来放到WireShark去分析。</p><p>由于DLNA建连后的命令交互是通过http的，所以这里只显示http协议，并通过搜索SetAVTransportURI定位到投屏时间点。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082026499-wireshark.jpg" alt="img_v3_02h8_65bf3dab-7966-48b1-bdaa-8343bca7898g"></p><p>首先看一下即将切集前手机端获取到的信息：</p><p>可以看到影片的时长和进度都有值，快播完了。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082039758-wireshark.jpg" alt="img_v3_02h8_fe3604f0-5242-41b8-b950-fab2c62663dg"></p><p>切集时：</p><p>手机端获取到的播放状态是stopped，影片时长和进度都是0</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082042875.jpg" alt="img_v3_02h8_954cb5c2-08c9-47ec-8d47-0c14b51b600g"></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082041740.jpg" alt="img_v3_02h8_613904b8-aa1e-4128-b904-164ff238ed3g"></p><p>切集后：</p><p>手机端获取的信息正常</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082044535.jpg" alt="img_v3_02h8_f8a5dc01-ae9d-47d8-9abc-0a395a68bd8g"></p><h2 id="我司投屏抓包分析"><a href="#我司投屏抓包分析" class="headerlink" title="我司投屏抓包分析"></a>我司投屏抓包分析</h2><p>切集前：</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082045162.jpg" alt="img_v3_02h8_ef543816-16f1-4e55-a74b-e703ef21e46g"></p><p>切集后：</p><p>获取到的影片进度和时长都是上个视频的信息，导致咪咕产生了误判断，认为这一集也播完了，造成跳集。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082045275.jpg" alt="img_v3_02h8_dac2eede-52f2-4137-8b42-18b7081eaaeg"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>收到手机端的stop指令后，立即将播放状态置stopped，同时将影片时长和进度也置0。此外，还要拦截播放器到手机端的状态同步直到新的视频起播。</p><p>另外还要注意处理线程调度延迟的问题，如果stop指令和setUri指令发送时间比较接近，虽然看起来是stop在前，setUri在后，但如果是在不同线程回调上来的，可能存在setUri先执行的情况，要注意处理这种情况，避免误退出。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;QA在测试公司投屏应用时，发现咪咕视频DLNA投剧集时有时候会跳过一集直接播下一集的问题。&lt;/p&gt;
&lt;p&gt;尝试自行分析解决不了后，我决定分析一下竞品应用：当贝投屏，结果发现它是正常的。由于当贝投屏是个黑盒子，所以决定抓包看一下。&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="投屏" scheme="https://iwesley.top/categories/%E6%8A%95%E5%B1%8F/"/>
    
    
    <category term="投屏" scheme="https://iwesley.top/tags/%E6%8A%95%E5%B1%8F/"/>
    
    <category term="DLNA" scheme="https://iwesley.top/tags/DLNA/"/>
    
  </entry>
  
  <entry>
    <title>Android.mk基础知识</title>
    <link href="https://iwesley.top/article/eaba12cd/"/>
    <id>https://iwesley.top/article/eaba12cd/</id>
    <published>2024-11-17T11:11:07.000Z</published>
    <updated>2024-12-24T12:51:46.755Z</updated>
    
    <content type="html"><![CDATA[<p>Android 浅度解析：mk预置AAR、SO文件、APP包和签名-阿里云开发者社区: <a href="https://developer.aliyun.com/article/1488469">https://developer.aliyun.com/article/1488469</a></p><p>android系统添加预置APP（so库自动释放) - 庚拓天下 - 博客园: <a href="https://www.cnblogs.com/genggeng/p/10563585.html">https://www.cnblogs.com/genggeng/p/10563585.html</a></p><p>使用@符号和不使用@符号的区别<br>在Android.mk中，使用@符号和不使用@符号有一些区别：<br>? 使用@符号可以提高性能，因为不需要解压和拷贝SO文件，也可以节省空间，因为不需要存储多余的SO文件。<br>? 不使用@符号可以提高兼容性，因为可以针对不同的平台提供相应的SO文件，而不需要考虑APK中是否有对应平台的SO文件。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Android 浅度解析：mk预置AAR、SO文件、APP包和签名-阿里云开发者社区: &lt;a</summary>
        
      
    
    
    
    <category term="Android Build System" scheme="https://iwesley.top/categories/Android-Build-System/"/>
    
    
    <category term="安卓Makefile" scheme="https://iwesley.top/tags/%E5%AE%89%E5%8D%93Makefile/"/>
    
  </entry>
  
  <entry>
    <title>Android APP drawable不同文件夹的用法</title>
    <link href="https://iwesley.top/article/b1dcee32/"/>
    <id>https://iwesley.top/article/b1dcee32/</id>
    <published>2024-11-17T10:33:19.000Z</published>
    <updated>2025-01-04T13:32:28.888Z</updated>
    
    <content type="html"><![CDATA[<p>Screen compatibility: <a href="https://developer.android.com/guide/practices/screens_support.html">https://developer.android.com/guide/practices/screens_support.html</a></p><p>App resources: <a href="https://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources">https://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources</a></p><p>Support different pixel densities: <a href="https://developer.android.com/training/multiscreen/screendensities">https://developer.android.com/training/multiscreen/screendensities</a></p><p>Drawable resources : <a href="https://developer.android.com/guide/topics/resources/drawable-resource">https://developer.android.com/guide/topics/resources/drawable-resource</a></p><p>res&#x2F;drawable&#x2F; is a legacy synonym for res&#x2F;drawable-mdpi&#x2F;, indicating that the drawables in that directory are set for mdpi density. If the device is running another density, those images will be downsampled (to ldpi) or upsampled (to anything else) to match the device density.</p><p>res&#x2F;drawable-nodpi&#x2F; says “these drawables should not be resampled for any density, but instead should be used as-is on all densities”.</p><p>drawable-nodpi will bypass scaling and drawable will use the default scaling:</p><p>mdpi &#x3D; 1x<br>hdpi &#x3D; 1.5x<br>xhdpi &#x3D; 2x<br>xxhdpi &#x3D; 3x<br>xxxhdpi &#x3D; 4x<br>drawable-nodpi is efficient if your code will be doing its own scaling (or no scaling) and you don’t want the image pre-scaled by Android.</p><p>There is also drawable-anydpi, just to make things more confusing.</p><p>drawable with no specifications will be used if an exact match on density and screen specifications does not exist. drawable-nodpi will be used after drawable.</p><p>UPDATE If you have both drawable and drawble-nodpi, the select order is either a more complex rule not documented or Android is broken. Through experimentation I confirmed that devices with screen density &lt; xhdpi will correctly select the drawable image. Devices with screen density &gt;&#x3D; xhdpi will select the drawable-nodpi.</p><p>Selection rule: 1. Pick match to screen density, one of these:</p><p>drawable-ldpi<br>drawable-mdpi<br>drawable-hdpi<br>drawable-xhdpi<br>drawable-xxhdpi<br>drawable-xxxhdpi<br>If no match on density, then select one of these<br>drawable (automatic scaling mdpi&#x3D;none… xxxhdpi&#x3D;4x)<br>drawable-nodpi (no scaling)<br>drawable-tvdpi<br>drawable-anydpi (no scaling)</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>android - Will a density qualified drawable folder or drawable-nodpi take precedence? - Stack Overflow: <a href="https://stackoverflow.com/questions/24682094/will-a-density-qualified-drawable-folder-or-drawable-nodpi-take-precedence">https://stackoverflow.com/questions/24682094/will-a-density-qualified-drawable-folder-or-drawable-nodpi-take-precedence</a></p><p>android - What is the difference between putting images in drawable and drawable-nodpi folder? - Stack Overflow: <a href="https://stackoverflow.com/questions/33631995/what-is-the-difference-between-putting-images-in-drawable-and-drawable-nodpi-fol">https://stackoverflow.com/questions/33631995/what-is-the-difference-between-putting-images-in-drawable-and-drawable-nodpi-fol</a></p><p>玩转Android drawable图片适配 - 漫思 - 博客园: <a href="https://www.cnblogs.com/sexintercourse/p/17020569.html">https://www.cnblogs.com/sexintercourse/p/17020569.html</a></p><p>Android 适配（drawable文件夹）图片适配（二） - 张亚楠 - 博客园: <a href="https://www.cnblogs.com/huihuizhang/p/9473698.html">https://www.cnblogs.com/huihuizhang/p/9473698.html</a></p><p>android（drawable文件夹）图片适配_drawable是什么文件-CSDN博客: <a href="https://blog.csdn.net/xuaho0907/article/details/72848520#:~:text=%E5%A6%82%E6%9E%9C%E5%9B%BE%E7%89%87%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95%E4%B8%BA,%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F%EF%BC%8C%E4%B8%8D%E8%BF%9B%E8%A1%8C%E7%BC%A9%E6%94%BE%E3%80%82&text=drawable%2Dnodpi%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E8%BF%99%E4%B8%AA,%E5%B0%B1%E4%BC%9A%E5%AE%9E%E9%99%85%E5%B1%95%E7%A4%BA%E5%A4%9A%E5%A4%A7%E3%80%82">https://blog.csdn.net/xuaho0907/article/details/72848520#:~:text=%E5%A6%82%E6%9E%9C%E5%9B%BE%E7%89%87%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95%E4%B8%BA,%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F%EF%BC%8C%E4%B8%8D%E8%BF%9B%E8%A1%8C%E7%BC%A9%E6%94%BE%E3%80%82&amp;text=drawable%2Dnodpi%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E8%BF%99%E4%B8%AA,%E5%B0%B1%E4%BC%9A%E5%AE%9E%E9%99%85%E5%B1%95%E7%A4%BA%E5%A4%9A%E5%A4%A7%E3%80%82</a></p><p>Android知识体系之drawable文件夹顺序 - 作业部落 Cmd Markdown 编辑阅读器: <a href="https://www.zybuluo.com/TryLoveCatch/note/590965">https://www.zybuluo.com/TryLoveCatch/note/590965</a></p><p>Android drawable文件夹那些事_安卓drawable文件夹的作用-CSDN博客: <a href="https://blog.csdn.net/qq_34341338/article/details/86706751">https://blog.csdn.net/qq_34341338/article/details/86706751</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Screen compatibility: &lt;a</summary>
        
      
    
    
    
    <category term="安卓APP" scheme="https://iwesley.top/categories/%E5%AE%89%E5%8D%93APP/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="AndroidAPPUI" scheme="https://iwesley.top/tags/AndroidAPPUI/"/>
    
  </entry>
  
  <entry>
    <title>Android ADB 常用命令</title>
    <link href="https://iwesley.top/article/dfa112ac/"/>
    <id>https://iwesley.top/article/dfa112ac/</id>
    <published>2024-11-17T10:27:15.000Z</published>
    <updated>2025-01-19T09:08:40.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="toybox和busybox"><a href="#toybox和busybox" class="headerlink" title="toybox和busybox"></a>toybox和busybox</h2><p><a href="https://blog.csdn.net/weixin_44311012/article/details/130203207">toybox 和 busybox 的作用</a></p><p>am monitor  可以持续监控App的包名，当切换应用时，如果包名有变化，就会在终端输出</p><h2 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h2><p>查看audio的全部信息（各音频流音量，焦点，策略等）</p><p>dumpsys audio</p><h3 id="音量"><a href="#音量" class="headerlink" title="音量"></a>音量</h3><h4 id="按键方式"><a href="#按键方式" class="headerlink" title="按键方式"></a>按键方式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">增加</span><br>input keyevent 24<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">减少</span><br>input keyevent 25<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">静音</span><br>input keyevent 164<br></code></pre></td></tr></table></figure><h4 id="media命令"><a href="#media命令" class="headerlink" title="media命令"></a>media命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设置音量并且显示音量UI</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3 代表STREAM_SYSTEM</span><br>media volume --show --stream 3 --set 11 <br>media volume --show --stream 3 --adj raise<br>media volume --show --stream 0 --adj lower<br>media volume --show --stream 3 --get<br><span class="hljs-meta prompt_">#</span><span class="language-bash">控制播放暂停</span><br>media dispatch play<br>media dispatch pause<br></code></pre></td></tr></table></figure><p>安卓 11 开始 media 命令没有了，使用<code>cmd media_session</code> </p><p><code>cmd media_session  volume  --stream 3 --get</code></p><p><code>cmd media_session  volume --show --stream 3 --set 11</code></p><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p><code>service call audio</code></p><p><code>adb shell service call audio 9 i32 &lt;编号&gt; i32 &lt;类型&gt; i32 1</code></p><p>使用ADB调整Android设备音量及解决常见问题-CSDN博客: <a href="https://blog.csdn.net/run068/article/details/122824920">https://blog.csdn.net/run068/article/details/122824920</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;toybox和busybox&quot;&gt;&lt;a href=&quot;#toybox和busybox&quot; class=&quot;headerlink&quot; title=&quot;toybox和busybox&quot;&gt;&lt;/a&gt;toybox和busybox&lt;/h2&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Android调试相关" scheme="https://iwesley.top/categories/Android%E8%B0%83%E8%AF%95%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android APP组件化</title>
    <link href="https://iwesley.top/article/69eef408/"/>
    <id>https://iwesley.top/article/69eef408/</id>
    <published>2024-11-17T09:58:13.000Z</published>
    <updated>2024-12-24T12:51:46.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前导知识"><a href="#前导知识" class="headerlink" title="前导知识"></a>前导知识</h2><p>配置 build 变体 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/build/build-variants?hl=zh-cn#groovy">https://developer.android.com/build/build-variants?hl=zh-cn#groovy</a></p><p>Android模块化之MicroModule（微信Pins工程）相信你看过微信关于模块化的分享《微信Android模块化 - 掘金: <a href="https://juejin.cn/post/6844903647956959246?from=search-suggest">https://juejin.cn/post/6844903647956959246?from=search-suggest</a></p><p>怎么实现微信Android Pins工程结构？Pins工程结构是什么？ 如何做代码边界检查？ - 掘金: <a href="https://juejin.cn/post/6844903602645893128">https://juejin.cn/post/6844903602645893128</a></p><p>微信Android模块化架构重构实践: <a href="https://mp.weixin.qq.com/s/6Q818XA5FaHd7jJMFBG60w">https://mp.weixin.qq.com/s/6Q818XA5FaHd7jJMFBG60w</a></p><p>美团外卖Android平台化架构演进实践 - 美团技术团队: <a href="https://tech.meituan.com/2018/03/16/meituan-food-delivery-android-architecture-evolution.html">https://tech.meituan.com/2018/03/16/meituan-food-delivery-android-architecture-evolution.html</a></p><p>Android消息总线的演进之路：用LiveDataBus替代RxBus、EventBus - 美团技术团队: <a href="https://tech.meituan.com/2018/07/26/android-livedatabus.html">https://tech.meituan.com/2018/07/26/android-livedatabus.html</a></p><p>Android组件化方案及组件消息总线modular-event实战 - 美团技术团队: <a href="https://tech.meituan.com/2018/12/20/modular-event.html">https://tech.meituan.com/2018/12/20/modular-event.html</a></p><p>创建 Android 库 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/studio/projects/android-library?hl=zh-cn">https://developer.android.com/studio/projects/android-library?hl=zh-cn</a></p><p>添加 build 依赖项 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/build/dependencies?hl=zh-cn">https://developer.android.com/build/dependencies?hl=zh-cn</a></p><p>高级测试设置 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/studio/test/advanced-test-setup?hl=zh-cn#create-instrumented-test-for-build-variant">https://developer.android.com/studio/test/advanced-test-setup?hl=zh-cn#create-instrumented-test-for-build-variant</a></p><p>Andriod 多渠道分包，实用的module分层，开发代码混淆规Andriod studio 3.0 有必要重新学习更 - 掘金: <a href="https://juejin.cn/post/6844903518411702286">https://juejin.cn/post/6844903518411702286</a> （混淆规则）</p><h2 id="资源冲突"><a href="#资源冲突" class="headerlink" title="资源冲突"></a>资源冲突</h2><p>Android 组件资源覆盖冲突解决方案在 Android 的日常开发中，我们会使用到大量的第三方库或者自己编写的组件库 - 掘金: <a href="https://juejin.cn/post/6844903993894780942">https://juejin.cn/post/6844903993894780942</a></p><p><a href="https://github.com/hust201010701/CheckResourceConflict">https://github.com/hust201010701/CheckResourceConflict</a></p><p>Android Gradle Plugin 3.3 版本及其以上，提供了一个 API 可以获取编译所有的资源文件。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs groovy">variants.forEach &#123; variant -&gt;<br>    variant <span class="hljs-keyword">as</span> BaseVariantImpl<br>    <span class="hljs-comment">// files 即对应所有的编译资源</span><br>    <span class="hljs-keyword">def</span> files = variant.allRawAndroidResources.files<br><br></code></pre></td></tr></table></figure><p>终于理解～Android 模块化里的资源冲突? 前言 作为 Android 开发者，我们常常需要去管理非常多不同的资源文 - 掘金: <a href="https://juejin.cn/post/7170562275374268447">https://juejin.cn/post/7170562275374268447</a></p><p>利用Android Gradle进行自动化设置资源名命名规则一、背景描述： ????公司再不断推进组件化，多个Modul - 掘金: <a href="https://juejin.cn/post/7065889116780494855">https://juejin.cn/post/7065889116780494855</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;  <br>  <br>  flavorDimensions <span class="hljs-string">&quot;versionCode&quot;</span>  <br>  <br>  productFlavors &#123;  <br>      productFlavors.all &#123;<span class="hljs-comment">//遍历productFlavors多渠道，设置渠道号（xiaomi 、huawei）  </span><br>          flavor -&gt; flavor.manifestPlaceholders.put(<span class="hljs-string">&quot;CHANNEL&quot;</span>, name)  <br>      &#125;<br>  &#125;<br>  applicationVariants.all &#123; variant -&gt;  <br>      <span class="hljs-comment">// 打包完成后输出路径</span><br>      <span class="hljs-keyword">def</span> name = ((project.name != <span class="hljs-string">&quot;app&quot;</span>) ? project.name : rootProject.name.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>)) + <br>      <span class="hljs-string">&quot;_&quot;</span> + variant.flavorName + <br>      <span class="hljs-string">&quot;_&quot;</span> + variant.buildType.name + <br>      <span class="hljs-string">&quot;_&quot;</span> + variant.versionName + <br>      <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-keyword">new</span> Date().format(<span class="hljs-string">&#x27;yyyyMMddhhmm&#x27;</span>) + <span class="hljs-string">&quot;.apk&quot;</span>  <br>      <span class="hljs-comment">//相对路径app/build/outputs/apk/huawei/release/</span><br>      <span class="hljs-keyword">def</span> path = <span class="hljs-string">&quot;../../../../../apk/&quot;</span> <span class="hljs-comment">//相当于路径 app/apk/</span><br>      variant.outputs.each &#123; output -&gt;<br>          <span class="hljs-keyword">def</span> outputFile = output.outputFile<br>          <span class="hljs-keyword">if</span> (outputFile != <span class="hljs-literal">null</span> &amp;&amp; outputFile.name.endsWith(<span class="hljs-string">&#x27;.apk&#x27;</span>)) &#123;<br>               <span class="hljs-comment">//指定路径输出</span><br>               output.outputFileName = <span class="hljs-keyword">new</span> File(path, name)<br>          &#125;<br>      &#125; <br>      <span class="hljs-comment">// 在打包完成后还可以做一些别的操作，可以复制到指定目录，或者移动文件到指定目录</span><br>      variant.assemble.doLast &#123;  <br>          File out = <span class="hljs-keyword">new</span> File(“$&#123;project.rootDir&#125;/apk”)  <br>          variant.outputs.forEach &#123; file -&gt;  <br>            <span class="hljs-comment">//复制apk到指定文件夹</span><br>            <span class="hljs-comment">//copy &#123;  </span><br>            <span class="hljs-comment">//  from file.outputFile  </span><br>            <span class="hljs-comment">//  into out  </span><br>            <span class="hljs-comment">//&#125;</span><br>         <span class="hljs-comment">//把文件移动到指定文件夹  </span><br>          ant.move <span class="hljs-attr">file:</span> file.outputFile,  <br>                 <span class="hljs-symbol">todir:</span> <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/apk&quot;</span><br>        &#125;  <br>      &#125; <br>  &#125;<br><span class="hljs-comment">//多渠道签名的配置</span><br>  signingConfigs &#123;<br>     test &#123;<br>        storeFile file(<span class="hljs-string">&quot;../test.keystore&quot;</span>)<br>        storePassword <span class="hljs-string">&#x27;test&#x27;</span><br>        keyAlias <span class="hljs-string">&#x27;test&#x27;</span><br>        keyPassword <span class="hljs-string">&#x27;test&#x27;</span><br>        v1SigningEnabled <span class="hljs-literal">true</span><br>        v2SigningEnabled <span class="hljs-literal">true</span><br>     &#125;<br>     xiaomi &#123;<br>        storeFile file(<span class="hljs-string">&quot;../xiaomi.keystore&quot;</span>)<br>        storePassword <span class="hljs-string">&#x27;xiaomi&#x27;</span><br>        keyAlias <span class="hljs-string">&#x27;xiaomi&#x27;</span><br>        keyPassword <span class="hljs-string">&#x27;xiaomi&#x27;</span><br>        v1SigningEnabled <span class="hljs-literal">true</span><br>        v2SigningEnabled <span class="hljs-literal">true</span><br>     &#125;<br>  &#125;<br>  buildTypes &#123;<br>       debug &#123;<br><span class="hljs-comment">//        debug这里设置不起作用，可能是编译器的问题？</span><br><span class="hljs-comment">//         productFlavors.xiaomi.signingConfig signingConfigs.test</span><br><span class="hljs-comment">//         productFlavors.huawei.signingConfig signingConfigs.test</span><br>       &#125;<br>       release &#123;<br>           productFlavors.xiaomi.signingConfig signingConfigs.xiaomi<br>           productFlavors.huawei.signingConfig signingConfigs.huawei<br>       &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    variantFilter &#123; variant -&gt;<br>        <span class="hljs-keyword">if</span> (variant.buildType.name.equals(<span class="hljs-string">&#x27;debug&#x27;</span>)) &#123;<br>            variant.setIgnore(<span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">//执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。</span><br>    lintOptions &#123;<br>        checkReleaseBuilds <span class="hljs-literal">false</span><br>        abortOnError <span class="hljs-literal">false</span><br>        <span class="hljs-comment">// 防止在发布的时候出现因MissingTranslation导致Build Failed!</span><br>        disable <span class="hljs-string">&#x27;MissingTranslation&#x27;</span><br>    &#125;<br> <br>    dexOptions &#123;<br>        incremental <span class="hljs-literal">true</span><br>        javaMaxHeapSize <span class="hljs-string">&quot;8g&quot;</span><br>        jumboMode = <span class="hljs-literal">true</span><br>        preDexLibraries = <span class="hljs-literal">false</span><br>        threadCount =<span class="hljs-string">&quot;8&quot;</span><br>    &#125;<br><br></code></pre></td></tr></table></figure><p>missingDimensionStrategy </p><p>配置产品变种productFlavors matchingFallbacks missingDimensionStrategy - 简书: <a href="https://www.jianshu.com/p/4b311bd9840d">https://www.jianshu.com/p/4b311bd9840d</a></p><p>gradle - Android buildTypes vs. productFlavors error - Stack Overflow: <a href="https://stackoverflow.com/questions/64758477/android-buildtypes-vs-productflavors-error">https://stackoverflow.com/questions/64758477/android-buildtypes-vs-productflavors-error</a></p><p>ProductFlavor多渠道的神器 - 简书: <a href="https://www.jianshu.com/p/00ceb35b090b">https://www.jianshu.com/p/00ceb35b090b</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Android 多渠道打包多渠道配置（2 种方式） 1、可写在主模块（app）的 build.gradle 下 2、在项 - 掘金: <a href="https://juejin.cn/post/7023661293781385247">https://juejin.cn/post/7023661293781385247</a></p><p>Gradle多渠道打包(动态设定App名称，应用图标，替换常量，更改包名，变更渠道) - 简书: <a href="https://www.jianshu.com/p/533240d222d3">https://www.jianshu.com/p/533240d222d3</a></p><p>Android 官方模块化方案解读快速了解 Android 官方模块化方案。还有一些你可能不知道的实用小技巧。还有官方模 - 掘金: <a href="https://juejin.cn/post/7142884855091560479">https://juejin.cn/post/7142884855091560479</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;前导知识&quot;&gt;&lt;a href=&quot;#前导知识&quot; class=&quot;headerlink&quot; title=&quot;前导知识&quot;&gt;&lt;/a&gt;前导知识&lt;/h2&gt;&lt;p&gt;配置 build 变体 ?|? Android Studio ?|? Android Developers: &lt;a</summary>
        
      
    
    
    
    <category term="AndroidAPP架构" scheme="https://iwesley.top/categories/AndroidAPP%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="AndroidAPP" scheme="https://iwesley.top/tags/AndroidAPP/"/>
    
  </entry>
  
  <entry>
    <title>Tencent mars Xlog编译及使用方法</title>
    <link href="https://iwesley.top/article/ca471381/"/>
    <id>https://iwesley.top/article/ca471381/</id>
    <published>2024-11-17T09:40:51.000Z</published>
    <updated>2024-12-24T12:51:46.755Z</updated>
    
    <content type="html"><![CDATA[<p>Window11编译</p><blockquote><p>如果已经安装了cygwin，不需要卸载重装，只需要再次运行安装文件setup-x86_64.exe就可以下载或者卸载包。</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Window11编译&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果已经安装了cygwin，不需要卸载重装，只需要再次运行安装文件setup-x86_64.exe就可以下载或者卸载包。&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
        
      
    
    
    
    <category term="AndroidThirdPartSDK" scheme="https://iwesley.top/categories/AndroidThirdPartSDK/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="AndroidThirdPartySDK" scheme="https://iwesley.top/tags/AndroidThirdPartySDK/"/>
    
  </entry>
  
  <entry>
    <title>git常见问题</title>
    <link href="https://iwesley.top/article/ca7dd2f8/"/>
    <id>https://iwesley.top/article/ca7dd2f8/</id>
    <published>2024-11-17T09:20:38.000Z</published>
    <updated>2025-01-18T14:35:28.362Z</updated>
    
    <content type="html"><![CDATA[<p>gerrit draft and topic |: <a href="https://breezetemple.github.io/2019/08/30/gerrit-draft-and-topic/">https://breezetemple.github.io/2019/08/30/gerrit-draft-and-topic/</a></p><p>Gerrit相对Git提供了一个特有的命名空间refs&#x2F;for&#x2F;用来定义我们的提交上传到哪个branch，且可以用来区分我们的commit是提交到Gerrit进行审核还是直接提交到Git仓库，格式如下：</p><p>refs&#x2F;for&#x2F;<target-branch></p><p>Push 一个 Commit 到 Gerrit: git push origin HEAD:refs&#x2F;for&#x2F;master<br>直接 Push 一个 commit 到 Git 仓库：（默认配置成不允许） git push origin HEAD:master<br>当commit Push到Gerrit等待review时，Gerrit会将此commit保存在一个名为refs&#x2F;changes&#x2F;xx&#x2F;yy&#x2F;zz的一个暂存branch中。</p><p>zz为这个commit的patch set号<br>yy是change号<br>xx是change号的后两位</p><p>Draft<br>refs&#x2F;drafts&#x2F;<target branch></p><p>$ git push origin HEAD:refs&#x2F;drafts&#x2F;xxx<br>在Gerrit中点击Publish按钮转换为正式Change</p><p>Topic<br>refs&#x2F;for&#x2F;<target branch><br>refs&#x2F;for&#x2F;<target branch>&#x2F;<topic name></p><p>$ git push origin HEAD:refs&#x2F;for&#x2F;xxx%topic&#x3D;123<br>$ git push origin HEAD:refs&#x2F;for&#x2F;xxx&#x2F;123<br>Topic用于归类相关的提交，可以用上述的命令，同时可以在Gerrit中编辑Topic</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>为 http 设置代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">一次性代理</span><br>git clone -c http.proxy=&quot;http://127.0.0.1:1087&quot; https://github.com/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">全局设置代理</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">仅为github.com设置socks5代理</span><br>git config --global http.https://github.com.proxy socks5://127.0.0.1:1086<br><br>git config --global https.proxy http://127.0.0.1:1080<br><br>git config --global https.proxy https://127.0.0.1:1080<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">取消</span><br><br>git config --global --unset http.proxy<br><br>git config --global --unset https.proxy<br></code></pre></td></tr></table></figure><p>为 ssh 协议设置代理</p><blockquote><p>下文配置其中的ip和端口修改成你自己代理的参数</p></blockquote><p>windows</p><p>修改C:\Users${your username}.ssh目录下的config文件，若没有则新建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com                                                <br>    Hostname ssh.github.com                                    <br>    Port 443                                                  <br>    User git<br>    ProxyCommand connect -S 127.0.0.1:7890 %h %p<br></code></pre></td></tr></table></figure><p>Linux、MacOS</p><p>修改~&#x2F;.ssh目录下的config文件，若没有则新建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com<br>        Hostname ssh.github.com<br>        Port 443<br>        User git<br>        ProxyCommand nc -v -x 172.28.208.1:7890 %h %p<br></code></pre></td></tr></table></figure><p>验证</p><p><code>ssh -T git@github.com</code></p><p>若出现错误，则删除.ssh目录中known_hosts文件重试</p><p><a href="https://seepine.com/git/ssh-proxy/">Git 为 ssh 协议设置代理 - Seepine’s Blog</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;gerrit draft and topic |: &lt;a</summary>
        
      
    
    
    
    <category term="git" scheme="https://iwesley.top/categories/git/"/>
    
    
    <category term="git" scheme="https://iwesley.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Android Activity常见问题</title>
    <link href="https://iwesley.top/article/a218b21a/"/>
    <id>https://iwesley.top/article/a218b21a/</id>
    <published>2024-11-17T09:15:36.000Z</published>
    <updated>2025-01-04T13:33:26.143Z</updated>
    
    <content type="html"><![CDATA[<p>android finishAffinity()-CSDN博客: <a href="https://blog.csdn.net/mr_orange_klj/article/details/43244603">https://blog.csdn.net/mr_orange_klj/article/details/43244603</a></p><p>调用activity对象的finishiAffinity()方法，可以关闭当前activity所属的activity栈中所有的activity。如果所有activity都保存在默认栈中，则使用该方法会直接退出程序。如果要回到程序的主界面，则可以在manifest文件中将主界面的activity设置为单独的栈保存。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">activity</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.weishi.UserMain&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:taskAffinity</span>=<span class="hljs-string">&quot;:finish&quot;</span>//<span class="hljs-attr">该句用来指定栈</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:label</span>=<span class="hljs-string">&quot;@string/title_activity_user_main&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;android finishAffinity()-CSDN博客: &lt;a</summary>
        
      
    
    
    
    <category term="Android" scheme="https://iwesley.top/categories/Android/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="AndroidActivity" scheme="https://iwesley.top/tags/AndroidActivity/"/>
    
  </entry>
  
  <entry>
    <title>安卓常用工具方法</title>
    <link href="https://iwesley.top/article/bf556c88/"/>
    <id>https://iwesley.top/article/bf556c88/</id>
    <published>2024-11-17T08:17:32.000Z</published>
    <updated>2024-12-24T12:51:46.756Z</updated>
    
    <content type="html"><![CDATA[<p>获取进程名字</p><p>【Android】获取当前进程名的四种方法及效率对比_android获取当前进程名-CSDN博客: <a href="https://blog.csdn.net/qq_23049111/article/details/126097443">https://blog.csdn.net/qq_23049111/article/details/126097443</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getAppProcessName</span><span class="hljs-params">()</span></span>: String &#123;<br>    <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.P) &#123;<br>        <span class="hljs-keyword">return</span> Application.getProcessName()<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR2) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">val</span> processName =<br>                Reflector.on(<span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>).method(<span class="hljs-string">&quot;currentProcessName&quot;</span>)<br>                    .call&lt;String&gt;()<br>            Log.d(TAG, <span class="hljs-string">&quot;getAppProcessName: <span class="hljs-variable">$processName</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> processName<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;getAppProcessName error&quot;</span>, e)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//安卓4.2的的currentPackageName实际上就是currentProcessName</span><br>            <span class="hljs-comment">//http://xrefandroid.com/android-4.2.2_r1/xref/frameworks/base/core/java/android/app/ActivityThread.java</span><br>            <span class="hljs-keyword">val</span> processName =<br>                Reflector.on(<span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>).method(<span class="hljs-string">&quot;currentPackageName&quot;</span>)<br>                    .call&lt;String&gt;()<br>            Log.d(TAG, <span class="hljs-string">&quot;getAppProcessName: <span class="hljs-variable">$processName</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> processName<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;getAppProcessName error&quot;</span>, e)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取应用名称</p><p>Android 获取应用的icon、名字、版本号_查看安卓app类名-CSDN博客: <a href="https://blog.csdn.net/LoveDou0816/article/details/78135201">https://blog.csdn.net/LoveDou0816/article/details/78135201</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> Context.<span class="hljs-title">getAppName</span><span class="hljs-params">(pkgName: <span class="hljs-type">String</span>)</span></span>: String &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">val</span> info: PackageInfo = packageManager.getPackageInfo(pkgName, <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">//resources.getString(info.applicationInfo.labelRes)</span><br>        info.applicationInfo.loadLabel(packageManager).toString() <span class="hljs-comment">//兼容android:label=&quot;$&#123;APP_NAME&#125;&quot;</span><br>    &#125; <span class="hljs-keyword">catch</span> (e: PackageManager.NameNotFoundException) &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;getAppName error&quot;</span>, e)<br>        <span class="hljs-string">&quot;&quot;</span><br>    &#125; <span class="hljs-keyword">catch</span> (e: Resources.NotFoundException) &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;getAppName error&quot;</span>, e)<br>        <span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;获取进程名字&lt;/p&gt;
&lt;p&gt;【Android】获取当前进程名的四种方法及效率对比_android获取当前进程名-CSDN博客: &lt;a</summary>
        
      
    
    
    
    <category term="Android" scheme="https://iwesley.top/categories/Android/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="AndroidUtils" scheme="https://iwesley.top/tags/AndroidUtils/"/>
    
  </entry>
  
  <entry>
    <title>gradle常见问题</title>
    <link href="https://iwesley.top/article/a7bee58f/"/>
    <id>https://iwesley.top/article/a7bee58f/</id>
    <published>2024-11-17T07:46:40.000Z</published>
    <updated>2025-01-04T13:22:42.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="aar相关"><a href="#aar相关" class="headerlink" title="aar相关"></a>aar相关</h1><h2 id="添加aar包依赖"><a href="#添加aar包依赖" class="headerlink" title="添加aar包依赖"></a>添加aar包依赖</h2><p>gradle - How to include different .aar depending on the android build variant - Stack Overflow: <a href="https://stackoverflow.com/questions/41373333/how-to-include-different-aar-depending-on-the-android-build-variant">https://stackoverflow.com/questions/41373333/how-to-include-different-aar-depending-on-the-android-build-variant</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs groovy">configurations.maybeCreate(<span class="hljs-string">&quot;default&quot;</span>)<br>artifacts.add(<span class="hljs-string">&quot;default&quot;</span>, file(<span class="hljs-string">&#x27;xyz.aar&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>包装本地 aar 的模块中禁止包含任何代码和资源文件，包括库或 AndroidManifest。即使包含，也无法生效；如果有多个本地的aar需要引用，需要分别创建工程目录及build.gradle文件。</p></blockquote><p>AndroidStudio根据环境打包不同的aar文件 - 简书: <a href="https://www.jianshu.com/p/bc61ed8dcce3">https://www.jianshu.com/p/bc61ed8dcce3</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy">configurations.maybeCreate(<span class="hljs-string">&quot;default&quot;</span>)<br>artifacts.add(<span class="hljs-string">&quot;default&quot;</span>, file(<span class="hljs-string">&#x27;demolib_release.aar&#x27;</span>))<br>configurations.maybeCreate(<span class="hljs-string">&quot;debug&quot;</span>)<br>artifacts.add(<span class="hljs-string">&quot;debug&quot;</span>, file(<span class="hljs-string">&#x27;demolib_debug.aar&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>    implementation project(<span class="hljs-string">&#x27;:demolib&#x27;</span>)<br>    debugImplementation project(<span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;:demolib&#x27;</span>, <span class="hljs-attr">configuration:</span> <span class="hljs-string">&#x27;debug&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>【Android】如何引入本地 aar？ 原生集成常见问题 - 开发指南 - 开发文档 - 飞书开放平台: <a href="https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/native-integration/native-integration-qa">https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/native-integration/native-integration-qa</a></p><h2 id="编译成app后aar里面的资源找不到，实际上aar里面有"><a href="#编译成app后aar里面的资源找不到，实际上aar里面有" class="headerlink" title="编译成app后aar里面的资源找不到，实际上aar里面有"></a>编译成app后aar里面的资源找不到，实际上aar里面有</h2><p>把apk放到android studio 查看里面的资源情况，一般是由于资源冲突被其他module资源替换了</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;aar相关&quot;&gt;&lt;a href=&quot;#aar相关&quot; class=&quot;headerlink&quot; title=&quot;aar相关&quot;&gt;&lt;/a&gt;aar相关&lt;/h1&gt;&lt;h2 id=&quot;添加aar包依赖&quot;&gt;&lt;a href=&quot;#添加aar包依赖&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="AppBuild" scheme="https://iwesley.top/categories/AppBuild/"/>
    
    
    <category term="gradle" scheme="https://iwesley.top/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>安卓相关知识点网站</title>
    <link href="https://iwesley.top/article/ed7f9345/"/>
    <id>https://iwesley.top/article/ed7f9345/</id>
    <published>2024-11-10T08:38:56.000Z</published>
    <updated>2025-01-19T10:05:34.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发者文档"><a href="#开发者文档" class="headerlink" title="开发者文档"></a>开发者文档</h1><p>OPPO 开放平台-OPPO开发者服务中心: <a href="https://open.oppomobile.com/new/wiki">https://open.oppomobile.com/new/wiki</a></p><p>OPPO 开放平台-安卓版本适配: <a href="https://open.oppomobile.com/new/developmentDoc/info?id=10960">https://open.oppomobile.com/new/developmentDoc/info?id=10960</a></p><p>Java教程 - 廖雪峰的官方网站: <a href="https://liaoxuefeng.com/books/java/introduction/index.html">https://liaoxuefeng.com/books/java/introduction/index.html</a></p><p>查看各版本行为变更: <a href="https://developer.android.com/about/versions">https://developer.android.com/about/versions</a></p><h1 id="Android-APP"><a href="#Android-APP" class="headerlink" title="Android APP"></a>Android APP</h1><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><p><a href="https://developer.android.com/build/configure-apk-splits?hl=zh-cn">构建多个 APK ?|? Android Studio ?|? Android Developers</a></p><p>迁移到 Gradle 7.x 使用 Version Catalogs 管理依赖 - SharpCJ - 博客园: <a href="https://www.cnblogs.com/joy99/p/17397989.html">https://www.cnblogs.com/joy99/p/17397989.html</a></p><p>Android Studio开发环境兼容性梳理（AGP、KGP、Gradle）本文主要介绍了Android Studio - 掘金: <a href="https://juejin.cn/post/7362924623825403919">https://juejin.cn/post/7362924623825403919</a></p><p>AweiLoveAndroid&#x2F;The-pit-of-the-Android-Studio: :octocat: :+1: :clap: :star2: :star: Everything about the Android Studio and Intellij IDEAfor example:Install,common problems and solutions,each libraries for android and androidx library,code and peoject templates,etc.全面总结Android Studio以及Intellij IDEA的填坑指南，详解AS版本号、Gradle版本、BuildTools三者的对照关系，AS模板配置,gradle插件,Android自带注解库详解，support详解等干货。: <a href="https://github.com/AweiLoveAndroid/The-pit-of-the-Android-Studio">https://github.com/AweiLoveAndroid/The-pit-of-the-Android-Studio</a></p><p>过往的 Android Gradle 插件版本 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/build/releases/past-releases?hl=zh-cn">https://developer.android.com/build/releases/past-releases?hl=zh-cn</a></p><p>美团外卖Android Lint代码检查实践 - 美团技术团队: <a href="https://tech.meituan.com/2018/04/13/waimai-android-lint.html">https://tech.meituan.com/2018/04/13/waimai-android-lint.html</a></p><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p>利用ASM完成第三方SDK安全整改利用ASM完成第三方SDK安全整改: 使用自定义Gradle插件、Transform、 - 掘金: <a href="https://juejin.cn/post/7293122002724945955">https://juejin.cn/post/7293122002724945955</a></p><p>Blogs&#x2F;Android编译时修改字节码——以Logcat自动打TAG为例.md at master · hqzxzwb&#x2F;Blogs: <a href="https://github.com/hqzxzwb/Blogs/blob/master/Android%E7%BC%96%E8%AF%91%E6%97%B6%E4%BF%AE%E6%94%B9%E5%AD%97%E8%8A%82%E7%A0%81%E2%80%94%E2%80%94%E4%BB%A5Logcat%E8%87%AA%E5%8A%A8%E6%89%93TAG%E4%B8%BA%E4%BE%8B.md">https://github.com/hqzxzwb/Blogs/blob/master/Android%E7%BC%96%E8%AF%91%E6%97%B6%E4%BF%AE%E6%94%B9%E5%AD%97%E8%8A%82%E7%A0%81%E2%80%94%E2%80%94%E4%BB%A5Logcat%E8%87%AA%E5%8A%A8%E6%89%93TAG%E4%B8%BA%E4%BE%8B.md</a></p><p>查询权限的定义 Manifest.permission ?|? Android Developers: <a href="https://developer.android.com/reference/android/Manifest.permission">https://developer.android.com/reference/android/Manifest.permission</a></p><p>Android 中的权限 ?|? Android Developers: <a href="https://developer.android.com/guide/topics/permissions/overview?hl=zh-cn#runtime">https://developer.android.com/guide/topics/permissions/overview?hl=zh-cn#runtime</a></p><p>guolindev&#x2F;PermissionX: An open source Android library that makes handling runtime permissions extremely easy.: <a href="https://github.com/guolindev/PermissionX?tab=readme-ov-file">https://github.com/guolindev/PermissionX?tab=readme-ov-file</a></p><p>Android FBE - 魅族内核团队: <a href="https://kernel.meizu.com/2018/07/12//android-p-fbe.html/">https://kernel.meizu.com/2018/07/12//android-p-fbe.html/</a></p><p>展讯平台AndroidP迁移指导文档——FBE-一牛网论坛: <a href="https://bbs.16rd.com/thread-586509-1-1.html">https://bbs.16rd.com/thread-586509-1-1.html</a></p><p>Support Direct Boot mode ?|? Security ?|? Android Developers: <a href="https://developer.android.com/privacy-and-security/direct-boot">https://developer.android.com/privacy-and-security/direct-boot</a></p><p>directBootAware 和 defaultToDeviceProtectedStorage - 亦幻 - 博客园: <a href="https://www.cnblogs.com/Bolia/p/18361343">https://www.cnblogs.com/Bolia/p/18361343</a></p><p>UserDataPrepare创建系统以及应用APP的ce和de目录的流程_prepareuserdatali-CSDN博客: <a href="https://blog.csdn.net/CHALLENG_EVERYTHING/article/details/84654184">https://blog.csdn.net/CHALLENG_EVERYTHING/article/details/84654184</a></p><p>数据绑定库 ?|? Android Developers: <a href="https://developer.android.google.cn/topic/libraries/data-binding?hl=zh-cn">https://developer.android.google.cn/topic/libraries/data-binding?hl=zh-cn</a></p><h2 id="兼容性变更"><a href="#兼容性变更" class="headerlink" title="兼容性变更"></a>兼容性变更</h2><p>Android App兼容8.0和9.0_兼容到android 8 android 开发-CSDN博客: <a href="https://blog.csdn.net/wxz1179503422/article/details/83031724">https://blog.csdn.net/wxz1179503422/article/details/83031724</a></p><p>这可能是最好的 Android&#x2F;Kotlin日志输出方法 - 技术小黑屋: <a href="https://droidyue.com/blog/2019/11/24/smart-log-in-android-slash-kotlin/">https://droidyue.com/blog/2019/11/24/smart-log-in-android-slash-kotlin/</a></p><p>判断某App位于前台还是后台的6种方法_判断应用是否在前台-CSDN博客: <a href="https://blog.csdn.net/yzwfeng/article/details/124584900">https://blog.csdn.net/yzwfeng/article/details/124584900</a></p><p>Android App如何屏蔽三方SDK（无法修改源码）中Activity的返回事件？Android 中如何屏蔽第三方S - 掘金: <a href="https://juejin.cn/post/7387094749931618358">https://juejin.cn/post/7387094749931618358</a></p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>AndroidNote&#x2F;AdavancedPart&#x2F;Android开发中的MVP模式详解.md at master · CharonChui&#x2F;AndroidNote: <a href="https://github.com/CharonChui/AndroidNote/blob/master/AdavancedPart/Android%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84MVP%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3.md">https://github.com/CharonChui/AndroidNote/blob/master/AdavancedPart/Android%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84MVP%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3.md</a></p><p>[最全]Android安卓架构MVC、MVP、MVVM之间的区别和联系(图解+案例+源码)_mvc框架与android-CSDN博客: <a href="https://blog.csdn.net/wq6ylg08/article/details/105023009">https://blog.csdn.net/wq6ylg08/article/details/105023009</a></p><h2 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h2><p>一种Android应用内全局获取Context实例的装置 - 中二病也要开发ANDROID - SegmentFault 思否: <a href="https://segmentfault.com/a/1190000009015732">https://segmentfault.com/a/1190000009015732</a></p><p>Gson的TypeToken与泛型擦除问题 在Java的json框架中，Gson是使用得比较广泛的一个，其Gson类提供 - 掘金: <a href="https://juejin.cn/post/7139889375923585038">https://juejin.cn/post/7139889375923585038</a></p><p>[原创]一 Android ELF系列:ELF文件格式简析到linker的链接so文件原理分析-Android安全-看雪-安全社区|安全招聘|kanxue.com: <a href="https://bbs.kanxue.com/thread-249589-1.htm">https://bbs.kanxue.com/thread-249589-1.htm</a></p><p>生产者-消费者来谈谈OkHttp 和 Android平台提供的生产者-消费者模型 .. 消费者 生成者 产品 Andro - 掘金: <a href="https://juejin.cn/post/6969193786098483237">https://juejin.cn/post/6969193786098483237</a></p><p>View的onAttachedToWindow和onDetachedFromWindow的调用时机分析 - 简书: <a href="https://www.jianshu.com/p/e7b6fa788ae6">https://www.jianshu.com/p/e7b6fa788ae6</a></p><p>AndroidUtilCode&#x2F;lib&#x2F;subutil&#x2F;README-CN.md at master · Blankj&#x2F;AndroidUtilCode: <a href="https://github.com/Blankj/AndroidUtilCode/blob/master/lib/subutil/README-CN.md">https://github.com/Blankj/AndroidUtilCode/blob/master/lib/subutil/README-CN.md</a></p><p>Android 获取设备的CPU型号和设备型号 - Stars-one - 博客园: <a href="https://www.cnblogs.com/stars-one/p/18066008">https://www.cnblogs.com/stars-one/p/18066008</a></p><p>Android 下高效复制文件的方法-千古八方的博客: <a href="https://rangotec.com/blog/61.html">https://rangotec.com/blog/61.html</a></p><p>Java implementation of a Disk-based LRU cache which specifically targets Android compatibility(okhttp、glide): <a href="https://github.com/JakeWharton/DiskLruCache">https://github.com/JakeWharton/DiskLruCache</a></p><p>Android缓存机制-LRU cache原理与用法在使用Android图片加载框架时，经常会提到三级缓存，其中主要的是 - 掘金: <a href="https://juejin.cn/post/6844903678474715143">https://juejin.cn/post/6844903678474715143</a></p><p>先入先出-FIFOCache | Hutool: <a href="https://doc.hutool.cn/pages/FIFOCache/#%E4%BB%8B%E7%BB%8D">https://doc.hutool.cn/pages/FIFOCache/#%E4%BB%8B%E7%BB%8D</a></p><p>Android 内存缓存框架 LruCache 的实现原理，手写试试？ - 彭旭锐 - 博客园: <a href="https://www.cnblogs.com/pengxurui/p/16948336.html">https://www.cnblogs.com/pengxurui/p/16948336.html</a></p><h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><p>Android五大常用布局：FrameLayout、LinearLayout、ConstraintLayout 、TableLayout和RelativeLayout - subeiLY - 博客园: <a href="https://www.cnblogs.com/gh110/p/12489701.html#RelativeLayout%EF%BC%88%E7%9B%B8%E5%AF%B9%E5%B8%83%E5%B1%80%EF%BC%89">https://www.cnblogs.com/gh110/p/12489701.html#RelativeLayout%EF%BC%88%E7%9B%B8%E5%AF%B9%E5%B8%83%E5%B1%80%EF%BC%89</a></p><p>Android View的生命周期函数总结_android springanimation 放大view生命周期-CSDN博客: <a href="https://blog.csdn.net/nihaomabmt/article/details/109777372">https://blog.csdn.net/nihaomabmt/article/details/109777372</a></p><p>Android 简单的 Dialog 队列 | aitsuki: <a href="https://aitsuki.com/blog/android-dialog-queue/">https://aitsuki.com/blog/android-dialog-queue/</a></p><p>Android 同步的 Dialog | aitsuki: <a href="https://aitsuki.com/blog/android-synchronous-dialog/">https://aitsuki.com/blog/android-synchronous-dialog/</a></p><p>Android 开发绕不过的坑：你的 Bitmap 究竟占多大内存？: <a href="https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&mid=403263974&idx=1&sn=b0315addbc47f3c38e65d9c633a12cd6&scene=0#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=403263974&amp;idx=1&amp;sn=b0315addbc47f3c38e65d9c633a12cd6&amp;scene=0#wechat_redirect</a></p><p>支持不同的像素密度 ?|? Android Developers: <a href="https://developer.android.com/training/multiscreen/screendensities?hl=zh-cn">https://developer.android.com/training/multiscreen/screendensities?hl=zh-cn</a></p><p>Android mipmap中的图标icon 对应的尺寸大小_android mipmap 大小-CSDN博客: <a href="https://blog.csdn.net/qq_32227681/article/details/122232039">https://blog.csdn.net/qq_32227681/article/details/122232039</a></p><p>android res 资源匹配目录 、 drawable与 mipmap的区别 - 简书: <a href="https://www.jianshu.com/p/6743f4303321">https://www.jianshu.com/p/6743f4303321</a></p><h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><p>Android 性能优化之黑科技开道（一）电视系统原本剩余的可用资源就少，而随着 9.0 功能的进一步增多，特别是门铃、 - 掘金: <a href="https://juejin.cn/post/7353442647765991435">https://juejin.cn/post/7353442647765991435</a></p><p>canyie&#x2F;pine: Dynamic java method hook framework on ART. Allowing you to change almost all java methods’ behavior dynamically.: <a href="https://github.com/canyie/pine">https://github.com/canyie/pine</a></p><p>sanfengAndroid&#x2F;fake-linker: Modify Android linker to provide loading module and hook function: <a href="https://github.com/sanfengAndroid/fake-linker">https://github.com/sanfengAndroid/fake-linker</a></p><p>[原创]一种通用超简单的Android Java Native方法Hook，无需依赖Hook框架-Android安全-看雪-安全社区|安全招聘|kanxue.com: <a href="https://bbs.kanxue.com/thread-266238.htm">https://bbs.kanxue.com/thread-266238.htm</a></p><h2 id="开源库"><a href="#开源库" class="headerlink" title="开源库"></a>开源库</h2><p>Tencent&#x2F;mars: Mars is a cross-platform network component developed by WeChat.: <a href="https://github.com/Tencent/mars">https://github.com/Tencent/mars</a></p><h4 id="xlog"><a href="#xlog" class="headerlink" title="xlog"></a>xlog</h4><p>Home · Tencent&#x2F;mars Wiki: <a href="https://github.com/Tencent/mars/wiki">https://github.com/Tencent/mars/wiki</a></p><p>Mars Android 接入指南 · Tencent&#x2F;mars Wiki: <a href="https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97">https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97</a></p><p>腾讯 Xlog 上手指南_com.tencent.mars:mars-xlog-CSDN博客: <a href="https://blog.csdn.net/qian520ao/article/details/88047573">https://blog.csdn.net/qian520ao/article/details/88047573</a></p><p>Mars Android 接口详细说明 · Tencent&#x2F;mars Wiki: <a href="https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%8F%A3%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E">https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%8F%A3%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E</a></p><p>Android基于微信 xlog 开源 日志框架 - IM Geek开发者社区-移动开发者社区-开源社区-IM Geek官网: <a href="https://www.imgeek.net/article/825357157">https://www.imgeek.net/article/825357157</a></p><p>win10下腾讯 mars下xlog编译详解 - 简书: <a href="https://www.jianshu.com/p/61b9ffc1d688">https://www.jianshu.com/p/61b9ffc1d688</a></p><p>Windows下安装cygwin_cygwin win 下载-CSDN博客: <a href="https://blog.csdn.net/EthanCo/article/details/104375839">https://blog.csdn.net/EthanCo/article/details/104375839</a></p><p>Android Mars XLog的编译-CSDN博客: <a href="https://blog.csdn.net/EthanCo/article/details/104375215">https://blog.csdn.net/EthanCo/article/details/104375215</a></p><p>从Mars的Xlog组件学习日志系统 - 简书: <a href="https://www.jianshu.com/p/f53b4575d3ae">https://www.jianshu.com/p/f53b4575d3ae</a></p><p>腾讯mars xlog源码解析_腾讯 mars-CSDN博客: <a href="https://blog.csdn.net/qq372848728/article/details/89215295">https://blog.csdn.net/qq372848728/article/details/89215295</a></p><p>Tencent Mars 源码解析 | Edgar’s Blog: <a href="https://tbfungeek.github.io/2019/12/05/Tencent-Mars-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/">https://tbfungeek.github.io/2019/12/05/Tencent-Mars-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</a></p><p>Add python 3 support to decode_mars_nocrypt_log_file.py by ChaseChoi · Pull Request #1048 · Tencent&#x2F;mars: <a href="https://github.com/Tencent/mars/pull/1048">https://github.com/Tencent/mars/pull/1048</a></p><p>ChaseChoi&#x2F;mars: Mars is a cross-platform network component developed by WeChat.: <a href="https://github.com/ChaseChoi/mars">https://github.com/ChaseChoi/mars</a> （解析xlog python）</p><p>Android Mars XLog 自定义存储格式_android xlog-CSDN博客: <a href="https://blog.csdn.net/EthanCo/article/details/104378841">https://blog.csdn.net/EthanCo/article/details/104378841</a></p><p>xLog日志文件写入改成24小时制_xlog时间-CSDN博客: <a href="https://blog.csdn.net/qq_35662742/article/details/78830895">https://blog.csdn.net/qq_35662742/article/details/78830895</a></p><p>日志丢失问题。 · Issue #1109 · Tencent&#x2F;mars: <a href="https://github.com/Tencent/mars/issues/1109">https://github.com/Tencent/mars/issues/1109</a></p><p>接入 Mars XLog 的坎坷历程: <a href="https://kentl.dev/post/mars-xlog/">https://kentl.dev/post/mars-xlog/</a></p><p>修改mars-xlog 源码并编译成so文件（全程记录）-小王同学: <a href="https://amarantos-blog.cn/archives/modify-and-compile-xlog">https://amarantos-blog.cn/archives/modify-and-compile-xlog</a></p><p>xlog使用-CSDN博客: <a href="https://blog.csdn.net/ming54ming/article/details/122528580">https://blog.csdn.net/ming54ming/article/details/122528580</a></p><p>XLog日志组件的学习和使用首先简简单单介绍一下XLog吧，因为我个人也不是特别了解，所以就简简单单说一下，作为微信开源 - 掘金: <a href="https://juejin.cn/post/6855454731716952078">https://juejin.cn/post/6855454731716952078</a></p><p>mars的xlog日志文件解析以及日志查看工具介绍 - 简书: <a href="https://www.jianshu.com/p/21eab5b59676">https://www.jianshu.com/p/21eab5b59676</a></p><p>Android 微信高性能日志存储库Xlog的使用-CSDN博客: <a href="https://blog.csdn.net/EthanCo/article/details/104374108">https://blog.csdn.net/EthanCo/article/details/104374108</a></p><p>luojilab&#x2F;DataTransHub: 跨平台Android&#x2F;iOS海量数据上报组件，基于Xlog完善，解决Xlog痛点问题。: <a href="https://github.com/luojilab/DataTransHub">https://github.com/luojilab/DataTransHub</a></p><p>开源系列 | 基于微信XLog的日志框架&amp;&amp;对于XLog的分析之前写过一个 日志框架LogHelper ,是基于 Lo - 掘金: <a href="https://juejin.cn/post/6850418121279438855">https://juejin.cn/post/6850418121279438855</a></p><h2 id="APM"><a href="#APM" class="headerlink" title="APM"></a>APM</h2><p>Android Native 异常捕获库Android Native 异常捕获库 基于google&#x2F;breakpa, 让 - 掘金: <a href="https://juejin.cn/post/7067052595331727390">https://juejin.cn/post/7067052595331727390</a></p><h2 id="投屏"><a href="#投屏" class="headerlink" title="投屏"></a>投屏</h2><h3 id="DLNA"><a href="#DLNA" class="headerlink" title="DLNA"></a>DLNA</h3><p>AndroidNote&#x2F;VideoDevelopment&#x2F;Android音视频开发&#x2F;DLNA简介.md at master · CharonChui&#x2F;AndroidNote: <a href="https://github.com/CharonChui/AndroidNote/blob/master/VideoDevelopment/Android%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/DLNA%E7%AE%80%E4%BB%8B.md">https://github.com/CharonChui/AndroidNote/blob/master/VideoDevelopment/Android%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BC%80%E5%8F%91/DLNA%E7%AE%80%E4%BB%8B.md</a></p><p>lebosdk&#x2F;LelinkSource-android: <a href="https://github.com/lebosdk/LelinkSource-android">https://github.com/lebosdk/LelinkSource-android</a></p><h2 id="调试命令"><a href="#调试命令" class="headerlink" title="调试命令"></a>调试命令</h2><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><p>Android So动态加载原理分析与优雅实现 - AndroidSummary: <a href="https://androidsummary.gitbook.io/androidsummary/manpin/xiaoshuointroduction/sodynamicload">https://androidsummary.gitbook.io/androidsummary/manpin/xiaoshuointroduction/sodynamicload</a></p><p>android签名证书文件的解析和签名校验的加强 - liwugang: <a href="https://liwugang.github.io/2016/02/21/android_verify_apk.html">https://liwugang.github.io/2016/02/21/android_verify_apk.html</a></p><p>挂载命名空间 与 共享子树 在 Android 中的应用 - LibXZR 的小本本: <a href="https://blog.xzr.moe/archives/194/">https://blog.xzr.moe/archives/194/</a></p><p>Android 之 一种以特定应用身份执行操作的方式 - LibXZR 的小本本: <a href="https://blog.xzr.moe/archives/195/">https://blog.xzr.moe/archives/195/</a></p><p>sepolicy进阶小记 - LibXZR 的小本本: <a href="https://blog.xzr.moe/archives/111/">https://blog.xzr.moe/archives/111/</a></p><p>selinux contexts 安全上下文的临时更改 - 行走的思想 - 博客园: <a href="https://www.cnblogs.com/onelikeone/p/14978651.html">https://www.cnblogs.com/onelikeone/p/14978651.html</a></p><p>【android】 使用vpn实现抓包 | iTimeTraveler: <a href="https://itimetraveler.github.io/2019/07/25/%E3%80%90Android%E3%80%91%E4%BD%BF%E7%94%A8VPN%E5%AE%9E%E7%8E%B0%E6%8A%93%E5%8C%85/?hmsr=joyk.com&utm_source=joyk.com&utm_medium=referral">https://itimetraveler.github.io/2019/07/25/%E3%80%90Android%E3%80%91%E4%BD%BF%E7%94%A8VPN%E5%AE%9E%E7%8E%B0%E6%8A%93%E5%8C%85/?hmsr=joyk.com&amp;utm_source=joyk.com&amp;utm_medium=referral</a></p><p>Gpt告诉你如何通过代码获取安卓root权限并创建虚拟网卡 - 方东信 - 博客园: <a href="https://www.cnblogs.com/cfas/p/17253314.html">https://www.cnblogs.com/cfas/p/17253314.html</a></p><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>Android（6-13）适配Android?6 1、运行时权限 android6.0以前，我们把app需要用到的权限全 - 掘金: <a href="https://juejin.cn/post/7203310104011456573">https://juejin.cn/post/7203310104011456573</a></p><h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><p>[原创]dvm探讨之odex绕过-Android安全-看雪-安全社区|安全招聘|kanxue.com: <a href="https://bbs.kanxue.com/thread-209631.htm">https://bbs.kanxue.com/thread-209631.htm</a></p><p>Linux 下如何隐藏自己不被发现？ - liwugang: <a href="https://liwugang.github.io/2020/03/22/hide_process.html">https://liwugang.github.io/2020/03/22/hide_process.html</a></p><p>Android中进程注入(一) - 简书: <a href="https://www.jianshu.com/p/0f8e999344af">https://www.jianshu.com/p/0f8e999344af</a></p><p>Android系统篇之—-Hook系统的AMS服务实现应用启动的拦截功能 | 尼古拉斯.赵四: <a href="http://www.520monkey.com/archives/870">http://www.520monkey.com/archives/870</a></p><p>Android 免 root 实现 hook 系统服务拦截方法 | Agehua: <a href="https://conorlee.top/2017/07/12/android-noroot-hook/">https://conorlee.top/2017/07/12/android-noroot-hook/</a></p><h2 id="ebpf"><a href="#ebpf" class="headerlink" title="ebpf"></a>ebpf</h2><p>在 Android 中使用 eBPF：开篇 | Weishu’s Notes: <a href="https://weishu.me/2022/06/12/eBPF-on-Android/">https://weishu.me/2022/06/12/eBPF-on-Android/</a></p><p>60秒学会用eBPF-BCC hook系统调用 hook安卓所有syscall - 网安 - 专业的网络安全产业、社区、知识平台: <a href="https://www.wangan.com/p/11v6c44b6a74cb70">https://www.wangan.com/p/11v6c44b6a74cb70</a></p><p>Android-eBPF监控所有系统调用 | Shocker: <a href="https://pshocker.github.io/2022/06/18/Android-eBPF%E7%9B%91%E6%8E%A7%E6%89%80%E6%9C%89%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/">https://pshocker.github.io/2022/06/18/Android-eBPF%E7%9B%91%E6%8E%A7%E6%89%80%E6%9C%89%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</a></p><h1 id="Android-TV"><a href="#Android-TV" class="headerlink" title="Android TV"></a>Android TV</h1><p>Android Pixel Calculator: <a href="https://angrytools.com/android/pixelcalc/">https://angrytools.com/android/pixelcalc/</a></p><p>像素计算器: <a href="https://www.zelyo.cn/tools/Pixelcal/Pixelcal.html">https://www.zelyo.cn/tools/Pixelcal/Pixelcal.html</a></p><p>Android屏幕适配总结好久之前就想写一篇跟屏幕适配相关的文章一直没有动笔，这次下决心抽周末的时间结合我在实际项目中所 - 掘金: <a href="https://juejin.cn/post/6844904064392626189">https://juejin.cn/post/6844904064392626189</a></p><p>Android TV 屏幕适配_androidtv屏幕适配-CSDN博客: <a href="https://blog.csdn.net/newairzhang/article/details/62062020">https://blog.csdn.net/newairzhang/article/details/62062020</a></p><p>Android TV开发总结【适配】-腾讯云开发者社区-腾讯云: <a href="https://cloud.tencent.com/developer/article/1385737">https://cloud.tencent.com/developer/article/1385737</a></p><p>Android TV开发总结（五）TV上屏幕适配总结_android tv屏幕适配-CSDN博客: <a href="https://blog.csdn.net/hejjunlin/article/details/52886107">https://blog.csdn.net/hejjunlin/article/details/52886107</a></p><p>mlabalabala&#x2F;box: TVBox的一个可以处理多源的版本，支持安卓4.4: <a href="https://github.com/mlabalabala/box">https://github.com/mlabalabala/box</a></p><p>Android电视配置遥控器或者修改遥控器按键 - 简书: <a href="https://www.jianshu.com/p/5a4b97d9b963">https://www.jianshu.com/p/5a4b97d9b963</a></p><p>Android 系统遥控器匹配kl文件_遥控器kl文件看不到-CSDN博客: <a href="https://blog.csdn.net/angelsmiling/article/details/105306388#:~:text=%E6%88%91%E4%BB%AC%E5%9C%A8%E8%BE%93%E5%85%A5getevent%20-l%20%E5%91%BD%E4%BB%A4%E7%9A%84%E6%97%B6%E5%80%99%E5%86%8D%E6%8C%89%E9%81%A5%E6%8E%A7%E5%99%A8%E9%94%AE%E5%80%BC%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%96%B0%E5%A2%9E%E4%BA%86%E4%BB%A5%2Fdev%2Finput%2Fevent0%E5%BC%80%E5%A4%B4%E7%9A%84%E4%B8%A4%E5%88%97%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%80%8Cevent0%E5%AF%B9%E5%BA%94%E7%9A%84%E6%98%AF%E4%BB%A5ce_keypad%E5%90%8D%E5%AD%97%E7%9A%84%E8%AE%BE%E5%A4%87%EF%BC%8C%E7%84%B6%E5%90%8E%E6%88%91%E4%BB%AC%E5%86%8D%E5%8E%BB%E7%AC%AC%E4%B8%80%E6%AD%A5%E4%B8%AD%E6%89%BE%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%A1%AE%E5%AE%9A%E9%81%A5%E6%8E%A7%E5%99%A8%E7%9A%84kl%E6%96%87%E4%BB%B6%E7%9A%84Vendor%3D0001,Product%3D0001%20Version%3D0100%E4%BA%86%EF%BC%8C%E6%9C%80%E7%BB%88%E5%8F%AF%E4%BB%A5%E7%A1%AE%E5%AE%9A%E5%8C%B9%E9%85%8D%E7%9A%84kl%E6%96%87%E4%BB%B6%E4%B8%BA%EF%BC%9AVendor_0001_Product_0001%20%28_Version_0100%29.kl%E3%80%82">https://blog.csdn.net/angelsmiling/article/details/105306388#:~:text=%E6%88%91%E4%BB%AC%E5%9C%A8%E8%BE%93%E5%85%A5getevent%20-l%20%E5%91%BD%E4%BB%A4%E7%9A%84%E6%97%B6%E5%80%99%E5%86%8D%E6%8C%89%E9%81%A5%E6%8E%A7%E5%99%A8%E9%94%AE%E5%80%BC%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%96%B0%E5%A2%9E%E4%BA%86%E4%BB%A5%2Fdev%2Finput%2Fevent0%E5%BC%80%E5%A4%B4%E7%9A%84%E4%B8%A4%E5%88%97%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%80%8Cevent0%E5%AF%B9%E5%BA%94%E7%9A%84%E6%98%AF%E4%BB%A5ce_keypad%E5%90%8D%E5%AD%97%E7%9A%84%E8%AE%BE%E5%A4%87%EF%BC%8C%E7%84%B6%E5%90%8E%E6%88%91%E4%BB%AC%E5%86%8D%E5%8E%BB%E7%AC%AC%E4%B8%80%E6%AD%A5%E4%B8%AD%E6%89%BE%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%A1%AE%E5%AE%9A%E9%81%A5%E6%8E%A7%E5%99%A8%E7%9A%84kl%E6%96%87%E4%BB%B6%E7%9A%84Vendor%3D0001,Product%3D0001%20Version%3D0100%E4%BA%86%EF%BC%8C%E6%9C%80%E7%BB%88%E5%8F%AF%E4%BB%A5%E7%A1%AE%E5%AE%9A%E5%8C%B9%E9%85%8D%E7%9A%84kl%E6%96%87%E4%BB%B6%E4%B8%BA%EF%BC%9AVendor_0001_Product_0001%20%28_Version_0100%29.kl%E3%80%82</a></p><p>Android10 （.kl）按键布局文件的解析过程分析_generic.kl-CSDN博客: <a href="https://blog.csdn.net/weixin_44904296/article/details/112566710">https://blog.csdn.net/weixin_44904296/article/details/112566710</a></p><p>Android源码解析（二十九）–&gt;应用程序返回按键执行流程_android应用返回处理流程-CSDN博客: <a href="https://blog.csdn.net/qq_23547831/article/details/51513771">https://blog.csdn.net/qq_23547831/article/details/51513771</a></p><h1 id="NDK"><a href="#NDK" class="headerlink" title="NDK"></a>NDK</h1><p>安卓so版本ndk版本查看以及strip命令的使用_so strip-CSDN博客: <a href="https://blog.csdn.net/lzz137/article/details/114830319">https://blog.csdn.net/lzz137/article/details/114830319</a></p><p>C语言调用so动态库的两种方式_c语言加载so-CSDN博客: <a href="https://blog.csdn.net/shaosunrise/article/details/81161064">https://blog.csdn.net/shaosunrise/article/details/81161064</a></p><p>Android Cmake 增加第三方库的依赖_libmarsxlog.so-CSDN博客: <a href="https://blog.csdn.net/ImTryCatchException/article/details/134306328">https://blog.csdn.net/ImTryCatchException/article/details/134306328</a></p><p>调试和减少内存错误 ?|? Android NDK ?|? Android Developers: <a href="https://developer.android.com/ndk/guides/memory-debug?hl=zh-cn">https://developer.android.com/ndk/guides/memory-debug?hl=zh-cn</a></p><p>JNI常见类型传参_jni jobject 传参-CSDN博客: <a href="https://blog.csdn.net/duanchuadnong/article/details/116655308">https://blog.csdn.net/duanchuadnong/article/details/116655308</a></p><p>JNI与C++的数据类型转换_jboolean-CSDN博客: <a href="https://blog.csdn.net/u014300915/article/details/52916086">https://blog.csdn.net/u014300915/article/details/52916086</a></p><p>snprintf 函数用法详解-CSDN博客: <a href="https://blog.csdn.net/m0_50668851/article/details/110000520">https://blog.csdn.net/m0_50668851/article/details/110000520</a></p><p>【Cmake】利用NDK进行Android的交叉编译（附实例）_android ndk 交叉编译-CSDN博客: <a href="https://blog.csdn.net/qq_38410730/article/details/103622813">https://blog.csdn.net/qq_38410730/article/details/103622813</a></p><p>NDK 修订历史记录 ?|? Android NDK ?|? Android Developers: <a href="https://developer.android.com/ndk/downloads/revision_history?hl=zh-cn">https://developer.android.com/ndk/downloads/revision_history?hl=zh-cn</a> (每个NDK版本所支持API级别可以通过NDK解压缩包中platforms目录查看)</p><p>Android-NDK开发之概述 | 苍耳的博客: <a href="https://ljd1996.github.io/2021/06/01/Android-NDK%E5%BC%80%E5%8F%91%E4%B9%8B%E6%A6%82%E8%BF%B0/">https://ljd1996.github.io/2021/06/01/Android-NDK%E5%BC%80%E5%8F%91%E4%B9%8B%E6%A6%82%E8%BF%B0/</a></p><p>Android-NDK开发之JNI | 苍耳的博客: <a href="https://ljd1996.github.io/2021/06/01/Android-NDK%E5%BC%80%E5%8F%91%E4%B9%8BJNI/">https://ljd1996.github.io/2021/06/01/Android-NDK%E5%BC%80%E5%8F%91%E4%B9%8BJNI/</a></p><p>Android JNI手册——Java&#x2F;Kotlin与Native层的相互调用_kotlin external fun-CSDN博客: <a href="https://blog.csdn.net/ma598214297/article/details/106456535">https://blog.csdn.net/ma598214297/article/details/106456535</a></p><p>Android Gradle 插件可以使用的原生依赖项 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/build/native-dependencies?hl=zh-cn&agpversion=4.0">https://developer.android.com/build/native-dependencies?hl=zh-cn&amp;agpversion=4.0</a></p><p>Android Cmake 增加第三方库的依赖_libmarsxlog.so-CSDN博客: <a href="https://blog.csdn.net/ImTryCatchException/article/details/134306328">https://blog.csdn.net/ImTryCatchException/article/details/134306328</a></p><p>Kotlin 和 Java 中内部类中的 static native 方法（JNI 函数）-CSDN博客: <a href="https://blog.csdn.net/u013553529/article/details/124478522">https://blog.csdn.net/u013553529/article/details/124478522</a></p><p>JNI内存方面说明以及相关类型手动释放内存-阿里云开发者社区: <a href="https://developer.aliyun.com/article/1112357">https://developer.aliyun.com/article/1112357</a></p><p>7.JNI 内存泄漏 处理 方法总结_jni string 返回值会导致内存泄漏吗-CSDN博客: <a href="https://blog.csdn.net/a2241076850/article/details/81092211">https://blog.csdn.net/a2241076850/article/details/81092211</a></p><p>Link Gradle to your native library ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/studio/projects/gradle-external-native-builds">https://developer.android.com/studio/projects/gradle-external-native-builds</a></p><h1 id="Android-OS"><a href="#Android-OS" class="headerlink" title="Android OS"></a>Android OS</h1><p>AOSP源码定制-so注入并集成hook框架 - gakkkkkkiii: <a href="https://www.c0bra.xyz/2023/12/28/AOSP%E6%BA%90%E7%A0%81%E5%AE%9A%E5%88%B6-so%E6%B3%A8%E5%85%A5%E5%B9%B6%E9%9B%86%E6%88%90hook%E6%A1%86%E6%9E%B6/">https://www.c0bra.xyz/2023/12/28/AOSP%E6%BA%90%E7%A0%81%E5%AE%9A%E5%88%B6-so%E6%B3%A8%E5%85%A5%E5%B9%B6%E9%9B%86%E6%88%90hook%E6%A1%86%E6%9E%B6/</a></p><p>android使用logwrapper进行log重定向_android logwrapper-CSDN博客: <a href="https://blog.csdn.net/rikeyone/article/details/80307975">https://blog.csdn.net/rikeyone/article/details/80307975</a></p><p>Android Hook技术防范漫谈 - 美团技术团队: <a href="https://tech.meituan.com/2018/02/02/android-anti-hooking.html">https://tech.meituan.com/2018/02/02/android-anti-hooking.html</a></p><p>jmpews&#x2F;Dobby: a lightweight, multi-platform, multi-architecture hook framework.: <a href="https://github.com/jmpews/Dobby">https://github.com/jmpews/Dobby</a></p><p>Android 对 so 进行简单 hook - Android社区 - <a href="https://www.androidos.net.cn/">https://www.androidos.net.cn/</a>: <a href="https://www.androidos.net.cn/doc/2023/76146513.html">https://www.androidos.net.cn/doc/2023/76146513.html</a></p><p>Matrix-IOCanary解析 - Yorek’s Blog: <a href="https://blog.yorek.xyz/android/3rd-library/matrix-io/#4-android-p">https://blog.yorek.xyz/android/3rd-library/matrix-io/#4-android-p</a></p><p>最常用的PLT Hook框架：xHook - Yorek’s Blog: <a href="https://blog.yorek.xyz/android/3rd-library/xhook/#41-xhook">https://blog.yorek.xyz/android/3rd-library/xhook/#41-xhook</a></p><p>Android Log写日志流程分析 - Bill聪的博客 | Bill’s Blog: <a href="http://www.cjcbill.com/2019/01/12/android-log-api/">http://www.cjcbill.com/2019/01/12/android-log-api/</a></p><p>Android 日志系统–03：logd、logcat源码分析1.概述 ??上一节我们看了Android日志系统的架构 - 掘金: <a href="https://juejin.cn/post/7424902549256175652">https://juejin.cn/post/7424902549256175652</a></p><p>Android之进程 crash监听 - 简书: <a href="https://www.jianshu.com/p/b1d03d464f62">https://www.jianshu.com/p/b1d03d464f62</a></p><p>Android Native crash触发原理及处理-CSDN博客: <a href="https://blog.csdn.net/youthcowboy/article/details/135505161">https://blog.csdn.net/youthcowboy/article/details/135505161</a></p><p>Android App Crash之后如何禁止Activity重启 - 简书: <a href="https://www.jianshu.com/p/636edca24443">https://www.jianshu.com/p/636edca24443</a></p><p>Android实现APP启动监听和拦截_android监听某个应用打开了没有（ActivityController ）: <a href="https://blog.csdn.net/lontano_0406/article/details/129611053">https://blog.csdn.net/lontano_0406/article/details/129611053</a></p><p>RK3288 Android 7.1 dumpsys meminfo 无法获取内存信息问题-阿里云开发者社区: <a href="https://developer.aliyun.com/article/1158680">https://developer.aliyun.com/article/1158680</a></p><p>android如何分析进程被杀问题_has died: fg top-CSDN博客: <a href="https://blog.csdn.net/qq_28852011/article/details/123569047">https://blog.csdn.net/qq_28852011/article/details/123569047</a></p><p>截图框架代码原理 android 11 - 简书: <a href="https://www.jianshu.com/p/90571763c3d3">https://www.jianshu.com/p/90571763c3d3</a></p><p>WMS常见问题一（Activity displayed延迟）_wms event log-CSDN博客: <a href="https://blog.csdn.net/kc58236582/article/details/60134836">https://blog.csdn.net/kc58236582/article/details/60134836</a></p><p>android 静态和动态设置 Receiver的 android:enabled值 - 寸草之心 - 博客园: <a href="https://www.cnblogs.com/LuLei1990/p/4484798.html">https://www.cnblogs.com/LuLei1990/p/4484798.html</a></p><p>Android10 系统发送开机广播时机_performenablescreen-CSDN博客: <a href="https://blog.csdn.net/tangedegushi/article/details/120512883">https://blog.csdn.net/tangedegushi/article/details/120512883</a></p><p>android-new-features&#x2F;android11&#x2F;新功能&#x2F;ADB增量APK安装.md at master · lacuz&#x2F;android-new-features: <a href="https://github.com/lacuz/android-new-features/blob/master/android11/%E6%96%B0%E5%8A%9F%E8%83%BD/ADB%E5%A2%9E%E9%87%8FAPK%E5%AE%89%E8%A3%85.md">https://github.com/lacuz/android-new-features/blob/master/android11/%E6%96%B0%E5%8A%9F%E8%83%BD/ADB%E5%A2%9E%E9%87%8FAPK%E5%AE%89%E8%A3%85.md</a></p><p>Android增量更新原理和实践 - 简书: <a href="https://www.jianshu.com/p/9b0c10270759">https://www.jianshu.com/p/9b0c10270759</a></p><p>blog&#x2F;source&#x2F;_posts&#x2F;Android各版本唤起app安装解决方案.md at master · halfcupCn&#x2F;blog: <a href="https://github.com/halfcupCn/blog/blob/master/source/_posts/Android%E5%90%84%E7%89%88%E6%9C%AC%E5%94%A4%E8%B5%B7app%E5%AE%89%E8%A3%85%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md">https://github.com/halfcupCn/blog/blob/master/source/_posts/Android%E5%90%84%E7%89%88%E6%9C%AC%E5%94%A4%E8%B5%B7app%E5%AE%89%E8%A3%85%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.md</a></p><p>Android 之 ViewTreeObserver 全面解析 - 简书: <a href="https://www.jianshu.com/p/59d636695d42">https://www.jianshu.com/p/59d636695d42</a></p><p>AOSP 的进程管理 | Caturra’s Blog: <a href="https://www.bluepuni.com/archives/aosp-process-management/">https://www.bluepuni.com/archives/aosp-process-management/</a></p><p>Android：修改连接到AP端显示的设备名 - sheldon_blogs - 博客园: <a href="https://www.cnblogs.com/blogs-of-lxl/p/11742031.html">https://www.cnblogs.com/blogs-of-lxl/p/11742031.html</a></p><p>安卓高级用户的福音 Android 12扩展支持mDNS可以使用.local访问本地设备 – 蓝点网: <a href="https://www.landiannews.com/archives/94395.html">https://www.landiannews.com/archives/94395.html</a></p><p>如何根据TCP连接的源端口索引来源APP（即UID）？Notes&#x2F;AclInProxy.md at master · daBisNewBee&#x2F;Notes: <a href="https://github.com/daBisNewBee/Notes/blob/master/AclInProxy.md">https://github.com/daBisNewBee/Notes/blob/master/AclInProxy.md</a><br>Go 语言实现简易版 netstat 命令-51CTO.COM: <a href="https://www.51cto.com/article/671735.html">https://www.51cto.com/article/671735.html</a></p><p>android如何通过代码来获取每个应用访问过的ip和端口_安卓源码如何查看调用了哪些接口地址-CSDN博客: <a href="https://blog.csdn.net/zhao007z5/article/details/79977630">https://blog.csdn.net/zhao007z5/article/details/79977630</a></p><h2 id="AMS"><a href="#AMS" class="headerlink" title="AMS"></a>AMS</h2><p>onNewIntent()方法介绍·This is called for activities that set lau - 掘金: <a href="https://juejin.cn/post/6844904007085850631">https://juejin.cn/post/6844904007085850631</a></p><p>Activity启动模式二上篇文章Activity启动模式一主要介绍了Activity的四种启动模式，这些启动模式都是在 - 掘金: <a href="https://juejin.cn/post/6844903974269648903#heading-10">https://juejin.cn/post/6844903974269648903#heading-10</a></p><p>android - onNewIntent called after finish() executed - Stack Overflow: <a href="https://stackoverflow.com/questions/24639272/onnewintent-called-after-finish-executed">https://stackoverflow.com/questions/24639272/onnewintent-called-after-finish-executed</a></p><p>面试官：为什么 Activity.finish() 之后 10s 才 onDestroy ？交流群里碰到一个很有意思的问 - 掘金: <a href="https://juejin.cn/post/6898588053451833351">https://juejin.cn/post/6898588053451833351</a></p><p>在调用finish()之后，可以保证调用哪些android生命周期方法？-腾讯云开发者社区-腾讯云: <a href="https://cloud.tencent.com/developer/ask/sof/106897129">https://cloud.tencent.com/developer/ask/sof/106897129</a></p><p>Tasks and the back stack ?|? Android Developers: <a href="https://developer.android.google.cn/guide/components/activities/tasks-and-back-stack">https://developer.android.google.cn/guide/components/activities/tasks-and-back-stack</a></p><p>（会返回delay）</p><p>明修”栈”道——越过Android启动栈陷阱本文从一例业务中遇到的问题出发，以FLAG_ACTIVITY_NEW_TAS - 掘金: <a href="https://juejin.cn/post/7223175468621774907#heading-11">https://juejin.cn/post/7223175468621774907#heading-11</a> </p><p>深入排查 FLAG 导致的 Activity 无法正常启动 - 脉脉: <a href="https://maimai.cn/article/detail?fid=1693592616&efid=5YwMmIAys4HBa0yIzYKTFQ">https://maimai.cn/article/detail?fid=1693592616&amp;efid=5YwMmIAys4HBa0yIzYKTFQ</a></p><p>启动模式”singleTask”和FLAG_ACTIVITY_NEW_TASK具有不同的行为！-CSDN博客: <a href="https://blog.csdn.net/lincyang/article/details/6802017">https://blog.csdn.net/lincyang/article/details/6802017</a></p><p>Android Intent.FLAG_ACTIVITY_NEW_TASK的个人理解-CSDN博客: <a href="https://blog.csdn.net/u010389391/article/details/78558475">https://blog.csdn.net/u010389391/article/details/78558475</a></p><p>对 FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TOP 的实践对 FLAG - 掘金: <a href="https://juejin.cn/post/7222897518501347383?from=search-suggest">https://juejin.cn/post/7222897518501347383?from=search-suggest</a></p><p>Activity的加载模式，以及singleTask的坑 - 简书: <a href="https://www.jianshu.com/p/841cfe3fcbc6">https://www.jianshu.com/p/841cfe3fcbc6</a></p><p>Android的启动模式：singleTask与singleTop的使用 - 简书: <a href="https://www.jianshu.com/p/f32b40db6141">https://www.jianshu.com/p/f32b40db6141</a></p><p>Activity启动模式singleTask的理解-CSDN博客: <a href="https://blog.csdn.net/fxjzzyo/article/details/109293098">https://blog.csdn.net/fxjzzyo/article/details/109293098</a></p><p>Android-Interview&#x2F;Activity&#x2F;深刻剖析activity启动模式-3.md at master · JackChan1999&#x2F;Android-Interview: <a href="https://github.com/JackChan1999/Android-Interview/blob/master/Activity/%E6%B7%B1%E5%88%BB%E5%89%96%E6%9E%90activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F-3.md">https://github.com/JackChan1999/Android-Interview/blob/master/Activity/%E6%B7%B1%E5%88%BB%E5%89%96%E6%9E%90activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F-3.md</a></p><p>android 10 后台无法 startActivity 原理分析_abort background activity starts from-CSDN博客: <a href="https://blog.csdn.net/int_65536/article/details/120476839">https://blog.csdn.net/int_65536/article/details/120476839</a></p><h2 id="WMS"><a href="#WMS" class="headerlink" title="WMS"></a>WMS</h2><h2 id="PMS"><a href="#PMS" class="headerlink" title="PMS"></a>PMS</h2><h2 id="IMS"><a href="#IMS" class="headerlink" title="IMS"></a>IMS</h2><p>Android-TV开发按键与焦点深入分析（一）–KeyEvent的分发 | chenxin’s blog: <a href="https://msisuzney.github.io/2020/08/24/Android-TV%E5%BC%80%E5%8F%91%E6%8C%89%E9%94%AE%E4%B8%8E%E7%84%A6%E7%82%B9%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89-KeyEvent%E7%9A%84%E5%88%86%E5%8F%91/">https://msisuzney.github.io/2020/08/24/Android-TV%E5%BC%80%E5%8F%91%E6%8C%89%E9%94%AE%E4%B8%8E%E7%84%A6%E7%82%B9%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89-KeyEvent%E7%9A%84%E5%88%86%E5%8F%91/</a></p><p>Android KeyEvent分发与焦点切换. 2016年年底的时候，给一个App适配了D-pad，D-pad就是下图红框里的东… | by Wan Xiao | Medium: <a href="https://medium.com/@wanxiao1994/android-keyevent%E5%88%86%E5%8F%91%E4%B8%8E%E7%84%A6%E7%82%B9%E5%88%87%E6%8D%A2-a72eebc0ea92">https://medium.com/@wanxiao1994/android-keyevent%E5%88%86%E5%8F%91%E4%B8%8E%E7%84%A6%E7%82%B9%E5%88%87%E6%8D%A2-a72eebc0ea92</a></p><h2 id="ART"><a href="#ART" class="headerlink" title="ART"></a>ART</h2><h2 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h2><p>Android异步通信：详解 Handler 内存泄露的原因 - 简书: <a href="https://www.jianshu.com/p/ed9e15eff47a">https://www.jianshu.com/p/ed9e15eff47a</a></p><h3 id="Binder"><a href="#Binder" class="headerlink" title="Binder"></a>Binder</h3><p>Binder 为什么只需要拷贝一次 · Android 面试文档 · 看云: <a href="https://www.kancloud.cn/smartsean/android/1123813">https://www.kancloud.cn/smartsean/android/1123813</a></p><p>guardian&#x2F;toolargetool: A tool to help you debug TransactionTooLargeExceptions on Android 7+: <a href="https://github.com/guardian/toolargetool">https://github.com/guardian/toolargetool</a></p><h2 id="app-process"><a href="#app-process" class="headerlink" title="app_process"></a>app_process</h2><p>[求助]在root下app_process启动的java进程怎么获取context-Android安全-看雪-安全社区|安全招聘|kanxue.com: <a href="https://bbs.kanxue.com/thread-276469.htm">https://bbs.kanxue.com/thread-276469.htm</a></p><p>topjohnwu&#x2F;libsu: A complete solution for apps using root permissions: <a href="https://github.com/topjohnwu/libsu?utm_source=ld246.com">https://github.com/topjohnwu/libsu?utm_source=ld246.com</a></p><p>跨进程root读写内存原理(JNIRoot方案)-CSDN博客: <a href="https://blog.csdn.net/qq_38944721/article/details/114363535#:~:text=libsu%E5%8C%85%E5%90%AB%E4%B8%A4%E4%B8%AA%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%EF%BC%9A%20core%E6%A8%A1%E5%9D%97%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%80%E4%B8%AA%E5%81%A5%E5%A3%AE%E7%9A%84API%E4%B8%8EUni%E2%80%8B%E2%80%8Bx%20shell%E8%BF%9B%E8%A1%8C%E4%BA%A4%E4%BA%92%EF%BC%9B%20service%E6%A8%A1%E5%9D%97%E5%85%81%E8%AE%B8%E6%82%A8%E5%88%9B%E5%BB%BA%E6%A0%B9%E6%9C%8D%E5%8A%A1%E4%BB%A5%E8%BF%90%E8%A1%8CJava%20%2F%20Kotlin%E5%92%8C%E6%9C%AC%E6%9C%BAC%20%2F,C%20%2B%2B%E4%BB%A3%E7%A0%81%EF%BC%88%E9%80%9A%E8%BF%87JNI%EF%BC%89%E3%80%82%20%E8%AF%A5%E5%BA%93%E4%B8%BA%E6%82%A8%E5%A4%84%E7%90%86Shell%20%E8%BF%9B%E7%A8%8B%20%E7%9A%84%E5%88%9B%E5%BB%BA%EF%BC%8C%E5%85%B7%E6%9C%89%E6%A0%87%E5%87%86%E6%B5%81%E7%9A%84I%20%2F%20O%EF%BC%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%8C%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E5%AF%B9%E8%BF%9C%E7%A8%8B%E6%A0%B9%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%AE%A1%E7%90%86%E3%80%82">https://blog.csdn.net/qq_38944721/article/details/114363535#:~:text=libsu%E5%8C%85%E5%90%AB%E4%B8%A4%E4%B8%AA%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6%EF%BC%9A%20core%E6%A8%A1%E5%9D%97%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%80%E4%B8%AA%E5%81%A5%E5%A3%AE%E7%9A%84API%E4%B8%8EUni%E2%80%8B%E2%80%8Bx%20shell%E8%BF%9B%E8%A1%8C%E4%BA%A4%E4%BA%92%EF%BC%9B%20service%E6%A8%A1%E5%9D%97%E5%85%81%E8%AE%B8%E6%82%A8%E5%88%9B%E5%BB%BA%E6%A0%B9%E6%9C%8D%E5%8A%A1%E4%BB%A5%E8%BF%90%E8%A1%8CJava%20%2F%20Kotlin%E5%92%8C%E6%9C%AC%E6%9C%BAC%20%2F,C%20%2B%2B%E4%BB%A3%E7%A0%81%EF%BC%88%E9%80%9A%E8%BF%87JNI%EF%BC%89%E3%80%82%20%E8%AF%A5%E5%BA%93%E4%B8%BA%E6%82%A8%E5%A4%84%E7%90%86Shell%20%E8%BF%9B%E7%A8%8B%20%E7%9A%84%E5%88%9B%E5%BB%BA%EF%BC%8C%E5%85%B7%E6%9C%89%E6%A0%87%E5%87%86%E6%B5%81%E7%9A%84I%20%2F%20O%EF%BC%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%8C%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E5%AF%B9%E8%BF%9C%E7%A8%8B%E6%A0%B9%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%AE%A1%E7%90%86%E3%80%82</a></p><h2 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h2><h1 id="Android性能优化"><a href="#Android性能优化" class="headerlink" title="Android性能优化"></a>Android性能优化</h1><p>adb shell cat &#x2F;proc&#x2F;self&#x2F;cgroup</p><p>Linux zram 开启 | myfreax: <a href="https://www.myfreax.com/linux-zram-enabled/">https://www.myfreax.com/linux-zram-enabled/</a></p><p>android 临时关闭ZRAM_android 关闭zram-CSDN博客: <a href="https://blog.csdn.net/zyfzhangyafei/article/details/106362038">https://blog.csdn.net/zyfzhangyafei/article/details/106362038</a></p><p>修改安卓的zram大小 - T^3 Blog: <a href="https://blog.virt.ltd/archives/88/">https://blog.virt.ltd/archives/88/</a></p><p>“暂停执行已缓存的应用” 是如何工作的 - LibXZR 的小本本: <a href="https://blog.xzr.moe/archives/190/">https://blog.xzr.moe/archives/190/</a></p><p>Android开发高手课NOTE - 梦和远方 - 博客园: <a href="https://www.cnblogs.com/sixrain/p/11777135.html">https://www.cnblogs.com/sixrain/p/11777135.html</a></p><p>为何高帧率对于电竞比赛十分重要？ | GeForce 新闻 | NVIDIA: <a href="https://www.nvidia.cn/geforce/news/what-is-fps-and-how-it-helps-you-win-games/">https://www.nvidia.cn/geforce/news/what-is-fps-and-how-it-helps-you-win-games/</a></p><p>缓存的应用冻结器 ?|? Android Open Source Project: <a href="https://source.android.google.cn/docs/core/perf/cached-apps-freezer?hl=zh-cn">https://source.android.google.cn/docs/core/perf/cached-apps-freezer?hl=zh-cn</a></p><p>Android13冻结进程分析：如何提高设备性能和用户体验 | 10cl: <a href="https://www.toscl.com/android_freezer/#%E5%86%BB%E7%BB%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%BD%9C%E7%94%A8">https://www.toscl.com/android_freezer/#%E5%86%BB%E7%BB%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%BD%9C%E7%94%A8</a></p><p>识别与负载能力相关的卡顿 ?|? Android Open Source Project: <a href="https://source.android.com/docs/core/tests/debug/jank_capacity?hl=zh-cn">https://source.android.com/docs/core/tests/debug/jank_capacity?hl=zh-cn</a></p><p>Android性能优化：定性和定位Android图形性能问题——以后台录屏进程为例Android性能优化。借助性能工具的 - 掘金: <a href="https://juejin.cn/post/7096288511053004830">https://juejin.cn/post/7096288511053004830</a></p><h2 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h2><p>Android Framework 常见解决方案（25-1）定制CPUSET解决方案-framework部分修改_android cpuset-CSDN博客: <a href="https://blog.csdn.net/vviccc/article/details/135487983">https://blog.csdn.net/vviccc/article/details/135487983</a></p><p>Android Framework 常见解决方案（25-2）定制CPUSET解决方案-system修改及编译部分调整_audio-app cpuset-CSDN博客: <a href="https://blog.csdn.net/vviccc/article/details/135486191">https://blog.csdn.net/vviccc/article/details/135486191</a></p><p>Android Framework 常见解决方案（25-1）定制CPUSET解决方案-framework部分修改 - 服务器托管|北京服务器租用|机房托管租用|IDC托管租用|机房机柜带宽租用-价格及费用咨询: <a href="https://www.fwqtg.net/android-framework-%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%8825-1%EF%BC%89%E5%AE%9A%E5%88%B6cpuset%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-framework%E9%83%A8%E5%88%86%E4%BF%AE%E6%94%B9.html">https://www.fwqtg.net/android-framework-%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%8825-1%EF%BC%89%E5%AE%9A%E5%88%B6cpuset%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-framework%E9%83%A8%E5%88%86%E4%BF%AE%E6%94%B9.html</a></p><p>Android Framework 常见解决方案（25-2）定制CPUSET解决方案-system修改及编译部分调整: <a href="http://www.coreui.cn/news/281462.html">http://www.coreui.cn/news/281462.html</a></p><p>android核绑定cpuset配置与检测进程所在核cpuset方法_cpuset top-app-CSDN博客: <a href="https://blog.csdn.net/suixin______/article/details/132358622">https://blog.csdn.net/suixin______/article/details/132358622</a></p><p>Android中关于cpu&#x2F;cpuset&#x2F;schedtune的应用 - ArnoldLu - 博客园: <a href="https://www.cnblogs.com/arnoldlu/p/6221608.html">https://www.cnblogs.com/arnoldlu/p/6221608.html</a></p><p>Android&#x2F;Linux EAS优化-Cpuset_cpuset如何设置进程独占cpu核-CSDN博客: <a href="https://blog.csdn.net/liaochaoyun/article/details/122112026">https://blog.csdn.net/liaochaoyun/article/details/122112026</a></p><p>在 Android 底下使用 CGROUP – Cash Chou’s Blog: <a href="https://cashchou.com/2014/07/20/%E5%9C%A8-android-%E5%BA%95%E4%B8%8B%E4%BD%BF%E7%94%A8-cgroup/">https://cashchou.com/2014/07/20/%E5%9C%A8-android-%E5%BA%95%E4%B8%8B%E4%BD%BF%E7%94%A8-cgroup/</a></p><p>高通骁龙 CPU 绑核操作 - SeanHHX 点点滴滴: <a href="https://seanhhx.cn/post/%E9%AB%98%E9%80%9A%E9%AA%81%E9%BE%99-cpu-%E7%BB%91%E6%A0%B8%E6%93%8D%E4%BD%9C/">https://seanhhx.cn/post/%E9%AB%98%E9%80%9A%E9%AA%81%E9%BE%99-cpu-%E7%BB%91%E6%A0%B8%E6%93%8D%E4%BD%9C/</a></p><p>android app cpu核心限制尝试 | mjblog: <a href="https://mjblog.github.io/2021/02/26/android_core_limit/">https://mjblog.github.io/2021/02/26/android_core_limit/</a></p><p>Android进程线程调度之cgroups - 技术小黑屋: <a href="https://droidyue.com/blog/2015/09/17/android-process-and-thread-schedule-cgroups/">https://droidyue.com/blog/2015/09/17/android-process-and-thread-schedule-cgroups/</a></p><p>Android Framework 常见解决方案（25-1）定制CPUSET解决方案-framework部分修改 - 服务器托管|北京服务器租用|机房托管租用|IDC托管租用|机房机柜带宽租用-价格及费用咨询: <a href="https://www.fwqtg.net/android-framework-%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%8825-1%EF%BC%89%E5%AE%9A%E5%88%B6cpuset%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-framework%E9%83%A8%E5%88%86%E4%BF%AE%E6%94%B9.html">https://www.fwqtg.net/android-framework-%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%8825-1%EF%BC%89%E5%AE%9A%E5%88%B6cpuset%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-framework%E9%83%A8%E5%88%86%E4%BF%AE%E6%94%B9.html</a></p><p>你想要的Android性能优化系列：启动优化 ！手机桌面点击一个应用，用户希望应用能 及时响应、快速加载。启动时间过长的 - 掘金: <a href="https://juejin.cn/post/6854573215474253838">https://juejin.cn/post/6854573215474253838</a></p><p>Android-bugreport-分析方法####Android bugreport 概述 bugreport 是An - 掘金: <a href="https://juejin.cn/post/7201091178488840250">https://juejin.cn/post/7201091178488840250</a></p><p>zRAM内存压缩技术原理与应用: <a href="http://www.wowotech.net/memory_management/zram.html">http://www.wowotech.net/memory_management/zram.html</a></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h2><p>Android中模拟点击类软件实现原理探究 - 知乎: <a href="https://zhuanlan.zhihu.com/p/37672098">https://zhuanlan.zhihu.com/p/37672098</a></p><p>minitouch点击原理-CSDN博客: <a href="https://blog.csdn.net/aaajj/article/details/125836403">https://blog.csdn.net/aaajj/article/details/125836403</a></p><p>libevdev(3): <a href="https://man.freebsd.org/cgi/man.cgi?query=libevdev&sektion=3&manpath=FreeBSD+13.1-RELEASE+and+Ports">https://man.freebsd.org/cgi/man.cgi?query=libevdev&amp;sektion=3&amp;manpath=FreeBSD+13.1-RELEASE+and+Ports</a></p><p>Python+scrcpy+pyminitouch实现自动化（一）——scrcpy的安装_python scrcpy-CSDN博客: <a href="https://blog.csdn.net/Alkaid2000/article/details/123034871?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-123034871-blog-123411963.235%5Ev40%5Epc_relevant_3m_sort_dl_base1&spm=1001.2101.3001.4242.2&utm_relevant_index=4">https://blog.csdn.net/Alkaid2000/article/details/123034871?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-123034871-blog-123411963.235^v40^pc_relevant_3m_sort_dl_base1&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4</a></p><p>UiAutomator2+Pytest+Allure+PO模型实现Android自动化测试_atx-agent po模式-CSDN博客: <a href="https://blog.csdn.net/Q0717168/article/details/122272374">https://blog.csdn.net/Q0717168/article/details/122272374</a></p><p>使用adb screenrecord命令通过USB将Android投屏到PC - KirimaSharo’s Blog | Syaro最可爱了: <a href="https://kirimasharo.com/archives/455.html">https://kirimasharo.com/archives/455.html</a></p><p>DeviceFarmer&#x2F;minicap: Stream real-time screen capture data out of Android devices.: <a href="https://github.com/DeviceFarmer/minicap">https://github.com/DeviceFarmer/minicap</a></p><h1 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h1><p>从根上理解用户态与内核态欢迎来到操作系统系列，采用图解 + 大白话的形式来讲解，让小白也能看懂，帮助大家快速科普入门。 - 掘金: <a href="https://juejin.cn/post/6923863670132850701">https://juejin.cn/post/6923863670132850701</a></p><p>Android8添加arm64系统调用_arm64 unistd32.h-CSDN博客: <a href="https://blog.csdn.net/m0_37340681/article/details/98734047">https://blog.csdn.net/m0_37340681/article/details/98734047</a></p><p>ARM64内核系统调用添加方法（基于kernel-4.9）_arm64添加系统调用如何在应用层使用函数-CSDN博客: <a href="https://blog.csdn.net/rikeyone/article/details/79929032">https://blog.csdn.net/rikeyone/article/details/79929032</a></p><p>Android添加内核系统调用_rwprocmem33-CSDN博客: <a href="https://blog.csdn.net/m0_37340681/article/details/89704825">https://blog.csdn.net/m0_37340681/article/details/89704825</a></p><p>三、Android系统内核编译及刷机实战 （修改反调试标志位）_bootimg-tools-CSDN博客: <a href="https://blog.csdn.net/u012417380/article/details/73353670">https://blog.csdn.net/u012417380/article/details/73353670</a></p><p>android Bionic 添加系统调用_android bionic 添加指令-CSDN博客: <a href="https://blog.csdn.net/zhbpd/article/details/80988421">https://blog.csdn.net/zhbpd/article/details/80988421</a></p><p>【从源码过反调试】给安卓12内核增加个syscall - 知乎: <a href="https://zhuanlan.zhihu.com/p/597784829">https://zhuanlan.zhihu.com/p/597784829</a></p><p>【从源码过反调试】给安卓12内核增加个syscall - 知乎: <a href="https://zhuanlan.zhihu.com/p/597784829">https://zhuanlan.zhihu.com/p/597784829</a></p><h1 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h1><h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><p>Kotlin 官方文档 中文版: <a href="https://book.kotlincn.net/">https://book.kotlincn.net/</a></p><p>View Binding 与Kotlin委托属性的巧妙结合，告别垃圾代码！ViewBinding 是Android St - 掘金: <a href="https://juejin.cn/post/6844904157808164878">https://juejin.cn/post/6844904157808164878</a></p><p>Kotlin | 利用by委托机制封装SharedPreference写在前面 Kotlin 中的委托机制是一种非常灵活 - 掘金: <a href="https://juejin.cn/post/7254581070876000293">https://juejin.cn/post/7254581070876000293</a></p><p>databinding设置View的layout_width和layout_height属性You must supply a layout_width attribute错误_databinding设置控件高度-CSDN博客: <a href="https://blog.csdn.net/zhuhai__yizhi/article/details/52921374">https://blog.csdn.net/zhuhai__yizhi/article/details/52921374</a></p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>Java LinkedHashMap 实现原理 - RustFisher 安卓|Java|设计模式|WebRTC|Python|NestJS|PyQt: <a href="https://www.an.rustfisher.com/java/container/map/Java-LinkedHashMap-code/">https://www.an.rustfisher.com/java/container/map/Java-LinkedHashMap-code/</a></p><p>Java集合分析之Map-这个Map有顺序（LinkedHashMap &amp; TreeMap）? 前文已经分析了 Hash - 掘金: <a href="https://juejin.cn/post/6844903581884088327#heading-12">https://juejin.cn/post/6844903581884088327#heading-12</a></p><p>Android-Interview&#x2F;Java&#x2F;JavaConcurrent&#x2F;多线程下生产者消费者问题的五种同步方法实现.md at master · LuckyTerry&#x2F;Android-Interview: <a href="https://github.com/LuckyTerry/Android-Interview/blob/master/Java/JavaConcurrent/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98%E7%9A%84%E4%BA%94%E7%A7%8D%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0.md">https://github.com/LuckyTerry/Android-Interview/blob/master/Java/JavaConcurrent/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98%E7%9A%84%E4%BA%94%E7%A7%8D%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0.md</a></p><p>Java并发编程之闭锁与栅栏闭锁与栅栏是在多线程编程中的概念，因为在多线程中，我们不能控制线程的执行状态，所以给线程加锁 - 掘金: <a href="https://juejin.cn/post/6854573208130027533">https://juejin.cn/post/6854573208130027533</a></p><p>Android（Java）—你知道吗？Java匿名内部类其实是有“名字”和构造方法的！##要点 匿名类的概念和用法 - 掘金: <a href="https://juejin.cn/post/7241385639504527397">https://juejin.cn/post/7241385639504527397</a></p><p>线程中断：Thread类中interrupt（）、interrupted（）和 isInterrupted（）方法详解 - myseries - 博客园: <a href="https://www.cnblogs.com/myseries/p/11107432.html">https://www.cnblogs.com/myseries/p/11107432.html</a></p><p>深入了解–线程中断 “interrupt()”,”isInterrupted()”和”interrupted()”-超详细介绍 - 掘金: <a href="https://juejin.cn/post/6905205099648417800">https://juejin.cn/post/6905205099648417800</a></p><p>Thread类中的interrupt()，interrupted()以及isInterrupted()区别_thread interrupt interrupted-CSDN博客: <a href="https://blog.csdn.net/yytree123/article/details/108896876">https://blog.csdn.net/yytree123/article/details/108896876</a></p><p>为什么调用了 interrupt() 后，isInterrupted() 返回的中断标识仍为 false_在sleep状态下被interrupt,interrupted 状态会被擦除,返回false-CSDN博客: <a href="https://blog.csdn.net/m0_51928480/article/details/129421747?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-129421747-blog-78913911.235%5Ev43%5Epc_blog_bottom_relevance_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-129421747-blog-78913911.235%5Ev43%5Epc_blog_bottom_relevance_base1&utm_relevant_index=2">https://blog.csdn.net/m0_51928480/article/details/129421747?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-129421747-blog-78913911.235%5Ev43%5Epc_blog_bottom_relevance_base1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-129421747-blog-78913911.235%5Ev43%5Epc_blog_bottom_relevance_base1&amp;utm_relevant_index=2</a></p><p>全网最详细的线程池 ThreadPoolExecutor 详解，建议收藏！ - Java技术栈 - 博客园: <a href="https://www.cnblogs.com/javastack/p/17958522">https://www.cnblogs.com/javastack/p/17958522</a></p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ol start="7"><li>命名约定 — Google 开源项目风格指南: <a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/naming.html">https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/naming.html</a></li><li>zh-cn&#x2F;contribute&#x2F;OpenHarmony-c-coding-style-guide.md · OpenHarmony&#x2F;docs - Gitee.com: <a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/contribute/OpenHarmony-c-coding-style-guide.md#%E5%BB%BA%E8%AE%AE13-%E5%87%BD%E6%95%B0%E7%9A%84%E5%91%BD%E5%90%8D%E9%81%B5%E5%BE%AA%E9%98%85%E8%AF%BB%E4%B9%A0%E6%83%AF">https://gitee.com/openharmony/docs/blob/master/zh-cn/contribute/OpenHarmony-c-coding-style-guide.md#%E5%BB%BA%E8%AE%AE13-%E5%87%BD%E6%95%B0%E7%9A%84%E5%91%BD%E5%90%8D%E9%81%B5%E5%BE%AA%E9%98%85%E8%AF%BB%E4%B9%A0%E6%83%AF</a></li></ol><h1 id="算法与设计模式"><a href="#算法与设计模式" class="headerlink" title="算法与设计模式"></a>算法与设计模式</h1><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>详解责任链模式以及Android事件分发简介 责任链模式，是行为型设计模式之一。我们将多个节点首尾相连所构成的模型称之为 - 掘金: <a href="https://juejin.cn/post/7001323545909264420">https://juejin.cn/post/7001323545909264420</a></p><p>Nice-Knowledge-System&#x2F;计算机基础&#x2F;设计模式&#x2F;责任链模式(Iterator-chain)&#x2F;责任链模式.md at master · maoqitian&#x2F;Nice-Knowledge-System: <a href="https://github.com/maoqitian/Nice-Knowledge-System/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F(Iterator-chain)/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.md">https://github.com/maoqitian/Nice-Knowledge-System/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F(Iterator-chain)/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.md</a></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>第 7 章 ? 树 - Hello 算法: <a href="https://www.hello-algo.com/chapter_tree/#_1">https://www.hello-algo.com/chapter_tree/#_1</a></p><p>krahets&#x2F;LeetCode-Book: 《剑指 Offer》 Python, Java, C++ 解题代码，LeetBook《图解算法数据结构》配套代码仓: <a href="https://github.com/krahets/LeetCode-Book">https://github.com/krahets/LeetCode-Book</a></p><h1 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h1><p>IjkPlayer 播放音频、完整代码；_ijk播放器 setaudioattributes-CSDN博客: <a href="https://blog.csdn.net/BirdEatBug/article/details/116715193">https://blog.csdn.net/BirdEatBug/article/details/116715193</a></p><p>leavesCZY&#x2F;ijkplayer-so-extend: 自定义编译 ijkplayer so 库以便支持无损音乐，支持 ape，wav，flac等格式: <a href="https://github.com/leavesCZY/ijkplayer-so-extend">https://github.com/leavesCZY/ijkplayer-so-extend</a></p><p>播放器性能优化之路下面是播放的完整流程：播放器加载一个网络url，首先要进行网络请求，网络如何优化，涉及到网络优化的方方 - 掘金: <a href="https://juejin.cn/post/6898867991161602061#heading-12">https://juejin.cn/post/6898867991161602061#heading-12</a></p><p>Android使用ExoPlayer(PlayerView)播放网络视频 前言 最近有个项目需要更新，发现ijkplay - 掘金: <a href="https://juejin.cn/post/7384636994980921382">https://juejin.cn/post/7384636994980921382</a></p><p>原生VideoView使用总结 | Jianqiu’s blog: <a href="https://niorgai.github.io/2016/11/02/Android-VideoView-tips/">https://niorgai.github.io/2016/11/02/Android-VideoView-tips/</a></p><p>支持的媒体格式 ?|? Android media ?|? Android Developers: <a href="https://developer.android.com/media/platform/supported-formats?hl=zh-cn">https://developer.android.com/media/platform/supported-formats?hl=zh-cn</a></p><p>Android修行手册 - VideoView全解-上??关于作者 ??前提 这是小空坚持写的Android新手向系列， - 掘金: <a href="https://juejin.cn/post/7101672387078258701">https://juejin.cn/post/7101672387078258701</a></p><p>Android修行手册 - VideoView全解-下??关于作者 ??前提 这是小空坚持写的Android新手向系列， - 掘金: <a href="https://juejin.cn/post/7101838355700121613">https://juejin.cn/post/7101838355700121613</a></p><p>好看视频Android重构——围绕于播放器的重构实践_51CTO博客_android视频播放器的制作: <a href="https://blog.51cto.com/u_15082365/3992395">https://blog.51cto.com/u_15082365/3992395</a></p><p>04.视频播放器通用架构实践对于视图状态切换和后期维护拓展，避免功能和业务出现耦合。比如需要支持播放器UI高度定制，而不 - 掘金: <a href="https://juejin.cn/post/6884170166863986695">https://juejin.cn/post/6884170166863986695</a></p><p>一个被标记为图片的“视频”可以播放吗视频竟然被识别为png，我们能够播放它吗？本文为了呈现一个png视频文件如何被播放出 - 掘金: <a href="https://juejin.cn/post/6964241629720887327#heading-5">https://juejin.cn/post/6964241629720887327#heading-5</a></p><p>Android 系统播放器的一些使用注意事项 - 简书: <a href="https://www.jianshu.com/p/d27f79119691">https://www.jianshu.com/p/d27f79119691</a></p><p>Android音视频开发系列-VideoView使用一起养成写作习惯！这是我参与「掘金日新计划 · 4 月更文挑战」的第 - 掘金: <a href="https://juejin.cn/post/7085243234523283464">https://juejin.cn/post/7085243234523283464</a></p><p>jiajunhui&#x2F;PlayerBase: The basic library of Android player will process complex business components. The access is simple。Android播放器基础库，专注于播放视图组件的高复用性和组件间的低耦合，轻松处理复杂业务。: <a href="https://github.com/jiajunhui/PlayerBase">https://github.com/jiajunhui/PlayerBase</a></p><p>探索移动端音视频与GSYVideoPlayer之旅 ｜ Agora Talk今天将给你恶补各种平时可能你不会在意的音视频 - 掘金: <a href="https://juejin.cn/post/7057132141875822622">https://juejin.cn/post/7057132141875822622</a></p><p>移动开发者的必知音视频基础知识作为移动开发者，大多数时候会需要接触到音视频相关的开发，而其实严格意义上我也并不是专职的音 - 掘金: <a href="https://juejin.cn/post/6844904039503626247">https://juejin.cn/post/6844904039503626247</a></p><p>06.播放器UI抽取封装对于视图状态切换和后期维护拓展，避免功能和业务出现耦合。比如需要支持播放器UI高度定制，而不是该 - 掘金: <a href="https://juejin.cn/post/6884028627697500167#heading-2">https://juejin.cn/post/6884028627697500167#heading-2</a></p><p>01.视频播放器框架介绍对于视图状态切换和后期维护拓展，避免功能和业务出现耦合。比如需要支持播放器UI高度定制，而不是该 - 掘金: <a href="https://juejin.cn/post/6883457444752654343">https://juejin.cn/post/6883457444752654343</a></p><p>pili-engineering&#x2F;QPlayer2-Android: <a href="https://github.com/pili-engineering/QPlayer2-Android">https://github.com/pili-engineering/QPlayer2-Android</a></p><p>基础功能–视频直播-火山引擎: <a href="https://www.volcengine.com/docs/6469/95393">https://www.volcengine.com/docs/6469/95393</a> （接口设计）</p><p>最新有效m3u8格式直播地址(亲测有效长期维护)_m3u8直播源-CSDN博客: <a href="https://blog.csdn.net/u014696856/article/details/134442845">https://blog.csdn.net/u014696856/article/details/134442845</a></p><p>M3U8播放器|M3U8视频|M3U8 Player|直播源|解析器|下载器|转换器|APP|Windows|下载 - m3u8play.com: <a href="https://m3u8play.com/">https://m3u8play.com/</a></p><p>Android中播放音乐的几种方式_安卓开发播放音乐-CSDN博客: <a href="https://blog.csdn.net/u013366008/article/details/76577372">https://blog.csdn.net/u013366008/article/details/76577372</a></p><h2 id="IJK"><a href="#IJK" class="headerlink" title="IJK"></a>IJK</h2><p>ijk播放器缓冲机制_ijk缓存-CSDN博客: <a href="https://blog.csdn.net/m0_37624402/article/details/127768229">https://blog.csdn.net/m0_37624402/article/details/127768229</a></p><p>IjkPlayer播放器秒开优化以及常用Option设置 - 简书: <a href="https://www.jianshu.com/p/843c86a9e9ad">https://www.jianshu.com/p/843c86a9e9ad</a></p><p>请问ijkhttphook如何设置？ · Issue #3508 · bilibili&#x2F;ijkplayer: <a href="https://github.com/Bilibili/ijkplayer/issues/3508">https://github.com/Bilibili/ijkplayer/issues/3508</a></p><p>ijkplayer-hook协议实现分析_ijkmediaplayer.onnativeinvokelistener-CSDN博客: <a href="https://blog.csdn.net/u010029439/article/details/106940633">https://blog.csdn.net/u010029439/article/details/106940633</a></p><p>android ijkplayer 中遇到的问题_ijk 4k卡顿-CSDN博客: <a href="https://blog.csdn.net/Zophar_Development/article/details/105681351">https://blog.csdn.net/Zophar_Development/article/details/105681351</a></p><p>ijkplayer直播播放器使用经验之谈——卡顿优化和秒开实现_libijkplayer 播放直播流卡顿-CSDN博客: <a href="https://blog.csdn.net/cmshao/article/details/80149176">https://blog.csdn.net/cmshao/article/details/80149176</a></p><p>ijkplayer 断线重连问题_移动开发-CSDN问答: <a href="https://ask.csdn.net/questions/7462194">https://ask.csdn.net/questions/7462194</a></p><p>音频开发ijkplayer小结 android-腾讯云开发者社区-腾讯云: <a href="https://cloud.tencent.com/developer/article/1141278">https://cloud.tencent.com/developer/article/1141278</a></p><p>ijkplayer音频播放分析_ijkplayer 播放音频-CSDN博客: <a href="https://blog.csdn.net/sjdjdjdjahd/article/details/125656367">https://blog.csdn.net/sjdjdjdjahd/article/details/125656367</a></p><p>ijkplayer中遇到的问题汇总在做音频播放的时候，很多公司使用的是开源的ijkplayer播放器，ijkplayer - 掘金: <a href="https://juejin.cn/post/6844904101717737486">https://juejin.cn/post/6844904101717737486</a></p><h2 id="本地代理（缓存）"><a href="#本地代理（缓存）" class="headerlink" title="本地代理（缓存）"></a>本地代理（缓存）</h2><p>反思 | Android 音视频缓存机制的系统性设计本文将针对 Android 音视频缓存解决方案中，先驱级别的 And - 掘金: <a href="https://juejin.cn/post/7011881370968408071">https://juejin.cn/post/7011881370968408071</a></p><p>Robin-jiangyufeng&#x2F;LazyCacheForAndroid: android缓存库,具有二级缓存功能,可以自己定实现三级缓存;可扩展性高: <a href="https://github.com/Robin-jiangyufeng/LazyCacheForAndroid">https://github.com/Robin-jiangyufeng/LazyCacheForAndroid</a></p><p>Android 的二级缓存如此简单 - 简书: <a href="https://www.jianshu.com/p/6146de689e2a">https://www.jianshu.com/p/6146de689e2a</a></p><p>Android 边播放边缓存视频框架AndroidVideoCache简析 - 个人文章 - SegmentFault 思否: <a href="https://segmentfault.com/a/1190000042342132">https://segmentfault.com/a/1190000042342132</a></p><p>Android进阶之路 - VideoView从入门到实践_android videoview-CSDN博客: <a href="https://blog.csdn.net/qq_20451879/article/details/118151866">https://blog.csdn.net/qq_20451879/article/details/118151866</a></p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><p>基础能力 &#x2F; 网络 &#x2F; 局域网通信: <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/mDNS.html">https://developers.weixin.qq.com/miniprogram/dev/framework/ability/mDNS.html</a><br>小程序有没有能实现dlna投屏功能的方法？ | 微信开放社区: <a href="https://developers.weixin.qq.com/community/develop/doc/0000ca60784748677d7f569b65d000?highLine=dlna">https://developers.weixin.qq.com/community/develop/doc/0000ca60784748677d7f569b65d000?highLine=dlna</a></p><p>媒体 &#x2F; 视频 &#x2F; VideoContext: <a href="https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.html">https://developers.weixin.qq.com/miniprogram/dev/api/media/video/VideoContext.html</a></p><p>从文档出发，来聊一聊小程序的服务端开发 | 微信开放社区: <a href="https://developers.weixin.qq.com/community/develop/article/doc/0004ce700c8350866929e10515b413">https://developers.weixin.qq.com/community/develop/article/doc/0004ce700c8350866929e10515b413</a></p><p>mDNS 局域网通信 | 微信开放社区: <a href="https://developers.weixin.qq.com/community/develop/doc/0004ac496908a0e6fe97d103851000?highLine=dlna">https://developers.weixin.qq.com/community/develop/doc/0004ac496908a0e6fe97d103851000?highLine=dlna</a></p><p>使用小程序UDP API功能，实现调试本地UDP服务 | 微信开放社区: <a href="https://developers.weixin.qq.com/community/develop/article/doc/000c8ad4ec8338dc754178f9666813">https://developers.weixin.qq.com/community/develop/article/doc/000c8ad4ec8338dc754178f9666813</a></p><h1 id="专利"><a href="#专利" class="headerlink" title="专利"></a>专利</h1><p>CN108595214A - 安卓user版本在SELinux强制模式下获取root特权的方法及系统 - Google Patents: <a href="https://patents.google.com/patent/CN108595214A/zh">https://patents.google.com/patent/CN108595214A/zh</a></p><p>CN105607921A - 一种基于Android系统的系统服务启动方法及系统 - Google Patents: <a href="https://patents.google.com/patent/CN105607921A/zh">https://patents.google.com/patent/CN105607921A/zh</a></p><p>CN111382425A - 多签名机制下的应用安装管理方法、智能终端及存储介质 - Google Patents: <a href="https://patents.google.com/patent/CN111382425A/zh">https://patents.google.com/patent/CN111382425A/zh</a></p><p>CN102662870A - 基于vfs层拦截读写请求的安卓操作系统保护方法 - Google Patents: <a href="https://patents.google.com/patent/CN102662870A/zh">https://patents.google.com/patent/CN102662870A/zh</a></p><p>CN103455416A - 一种基于占用Android系统智能设备内存和CPU的压力测试方法 - Google Patents: <a href="https://patents.google.com/patent/CN103455416A/zh">https://patents.google.com/patent/CN103455416A/zh</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;开发者文档&quot;&gt;&lt;a href=&quot;#开发者文档&quot; class=&quot;headerlink&quot; title=&quot;开发者文档&quot;&gt;&lt;/a&gt;开发者文档&lt;/h1&gt;&lt;p&gt;OPPO 开放平台-OPPO开发者服务中心: &lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>一些有效的工作方法</title>
    <link href="https://iwesley.top/article/b6e36186/"/>
    <id>https://iwesley.top/article/b6e36186/</id>
    <published>2024-11-10T08:37:15.000Z</published>
    <updated>2024-12-24T12:51:46.756Z</updated>
    
    <content type="html"><![CDATA[<p>安卓第三方库选择：要考虑兼容性、可维护性、性能比较</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;安卓第三方库选择：要考虑兼容性、可维护性、性能比较&lt;/p&gt;
</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>android IPC: 安卓进程间通讯的几种方式</title>
    <link href="https://iwesley.top/article/7bbe7ac8/"/>
    <id>https://iwesley.top/article/7bbe7ac8/</id>
    <published>2024-11-10T08:17:50.000Z</published>
    <updated>2024-12-24T12:51:46.755Z</updated>
    
    <content type="html"><![CDATA[<p>Android中目前存在多种IPC方式，分别为：</p><ul><li><p>Bundle</p></li><li><p>文件共享</p></li><li><p>Messenger</p></li><li><p>AIDL</p></li><li><p>ContentProvider</p></li><li><p>Socket</p></li><li><h3 id="IPC方式的优缺点和适用场景"><a href="#IPC方式的优缺点和适用场景" class="headerlink" title="IPC方式的优缺点和适用场景"></a>IPC方式的优缺点和适用场景</h3><table><thead><tr><th>方式</th><th>能力</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td>AIDL</td><td>支持一对多并发通信、支持实时通信、支持跨进程函数调用</td><td>需要独立定义.aidl规范、需要添加.aidl文件、使用较复杂</td><td>一对多即时通信，有RPC需求</td></tr><tr><td>Messenger</td><td>支持一对多串行通信、支持实时通信、支持Bundle传递</td><td>无需独立定义.aidl规范、无需添加.aidl文件、使用较简洁</td><td>低并发的一对多即时通信，无返回结果的RPC需求</td></tr></tbody></table></li></ul><p><a href="https://segmentfault.com/a/1190000040558520">「Android」基于轻量级Messenger的进程通信 - 个人文章 - SegmentFault 思否</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Android中目前存在多种IPC方式，分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bundle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文件共享&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Messenger&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AIDL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C</summary>
        
      
    
    
    
    <category term="Android IPC" scheme="https://iwesley.top/categories/Android-IPC/"/>
    
    
    <category term="android ipc" scheme="https://iwesley.top/tags/android-ipc/"/>
    
    <category term="android rpc" scheme="https://iwesley.top/tags/android-rpc/"/>
    
  </entry>
  
  <entry>
    <title>安卓源码环境:Android.mk如何编译aar包?</title>
    <link href="https://iwesley.top/article/797e1cc1/"/>
    <id>https://iwesley.top/article/797e1cc1/</id>
    <published>2024-11-10T02:56:10.000Z</published>
    <updated>2024-11-10T02:56:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在安卓源码top目录执行编译命令：（注意：下面的Android.mk要被include进去）</p><p><code>make test_aar out/target/common/obj/JAVA_LIBRARIES/test_aar_intermediates/javalib.aar</code></p><p>通用格式：<code>make &lt;module-name&gt; out/target/common/obj/JAVA_LIBRARIES/&lt;module-name&gt;_intermediates/javalib.aar</code></p><p>把<module-name>替换成LOCAL_MODULE的名字。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs makefile">LOCAL_PATH := <span class="hljs-variable">$(<span class="hljs-built_in">call</span> my-<span class="hljs-built_in">dir</span>)</span><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(CLEAR_VARS)</span><br><br>LOCAL_MODULE_TAGS := optional<br><br>LOCAL_MODULE := test_aar<br><br>LOCAL_STATIC_JAVA_LIBRARIES :=android-common \<br>    android-support-v4 \<br><br><span class="hljs-comment"># LOCAL_STATIC_JAVA_AAR_LIBRARIES:= abc</span><br><br>LOCAL_SRC_FILES := <span class="hljs-variable">$(<span class="hljs-built_in">call</span> all-java-files-under, java)</span><br><br>res_dirs := res \<br><br>LOCAL_RESOURCE_DIR := <span class="hljs-variable">$(<span class="hljs-built_in">addprefix</span> <span class="hljs-variable">$(LOCAL_PATH)</span>/, <span class="hljs-variable">$(res_dirs)</span>)</span> \<br>    prebuilts/sdk/current/support/v7/cardview/res \<br>    prebuilts/sdk/current/support/v7/appcompat/res \<br>    prebuilts/sdk/current/support/design/res \<br><br>LOCAL_AAPT_FLAGS := \<br>    --auto-add-overlay \<br>    --extra-packages android.support.v7.cardview \<br>    --extra-packages android.support.v7.appcompat \<br>    --extra-packages android.support.design \<br>    --extra-packages com.abc.abc<br><br><br>LOCAL_JACK_ENABLED := disabled <br>LOCAL_PROGUARD_ENABLED := disabled <br><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(BUILD_STATIC_JAVA_LIBRARY)</span><br></code></pre></td></tr></table></figure><p><a href="https://android.googlesource.com/platform/build/+/master/core/static_java_library.mk#133">https://android.googlesource.com/platform/build/+/master/core/static_java_library.mk#133</a></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># Rule to build AAR, archive including classes.jar, resource, etc.</span><br>built_aar := $(intermediates.COMMON)/javalib.aar<br><span class="hljs-variable">$(built_aar)</span>: PRIVATE_MODULE := <span class="hljs-variable">$(LOCAL_MODULE)</span><br><span class="hljs-variable">$(built_aar)</span>: PRIVATE_ANDROID_MANIFEST := <span class="hljs-variable">$(full_android_manifest)</span><br><span class="hljs-variable">$(built_aar)</span>: PRIVATE_CLASSES_JAR := <span class="hljs-variable">$(aar_classes_jar)</span><br><span class="hljs-variable">$(built_aar)</span>: PRIVATE_RESOURCE_DIR := <span class="hljs-variable">$(LOCAL_RESOURCE_DIR)</span><br><span class="hljs-variable">$(built_aar)</span>: PRIVATE_R_TXT := $(intermediates.COMMON)/R.txt<br><span class="hljs-variable">$(built_aar)</span>: <span class="hljs-variable">$(JAR_ARGS)</span><br><span class="hljs-variable">$(built_aar)</span> : <span class="hljs-variable">$(aar_classes_jar)</span> <span class="hljs-variable">$(full_android_manifest)</span> $(intermediates.COMMON)/R.txt<br>@echo <span class="hljs-string">&quot;target AAR:  <span class="hljs-variable">$(PRIVATE_MODULE)</span> (<span class="hljs-variable">$@</span>)&quot;</span><br><span class="hljs-variable">$(hide)</span> rm -rf <span class="hljs-variable">$(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$@</span>)</span>aar &amp;&amp; mkdir -p <span class="hljs-variable">$(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$@</span>)</span>aar/res<br><span class="hljs-variable">$(hide)</span> cp <span class="hljs-variable">$(PRIVATE_ANDROID_MANIFEST)</span> <span class="hljs-variable">$(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$@</span>)</span>aar/AndroidManifest.xml<br><span class="hljs-variable">$(hide)</span> cp <span class="hljs-variable">$(PRIVATE_CLASSES_JAR)</span> <span class="hljs-variable">$(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$@</span>)</span>aar/classes.jar<br><span class="hljs-comment"># Note: Use &quot;cp -n&quot; to honor the resource overlay rules, if multiple res dirs exist.</span><br><span class="hljs-variable">$(hide)</span> <span class="hljs-variable">$(<span class="hljs-built_in">foreach</span> res,<span class="hljs-variable">$(PRIVATE_RESOURCE_DIR)</span>,cp -Rfn <span class="hljs-variable">$(res)</span>/* $(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$@</span>)</span>aar/res;)<br><span class="hljs-variable">$(hide)</span> cp <span class="hljs-variable">$(PRIVATE_R_TXT)</span> <span class="hljs-variable">$(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$@</span>)</span>aar/R.txt<br><span class="hljs-variable">$(hide)</span> <span class="hljs-variable">$(JAR)</span> -cMf <span class="hljs-variable">$@</span> \<br>  <span class="hljs-variable">$(<span class="hljs-built_in">call</span> jar-args-sorted-files-in-directory,$(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$@</span>)</span>aar)<br><br></code></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>how to create AAR archive file from Android.mk - Stack Overflow: <a href="https://stackoverflow.com/questions/42070123/how-to-create-aar-archive-file-from-android-mk">https://stackoverflow.com/questions/42070123/how-to-create-aar-archive-file-from-android-mk</a></p><p>Build AAR package as part of AOSP build: <a href="https://groups.google.com/g/android-building/c/htNXz9Lkq7E?pli=1">https://groups.google.com/g/android-building/c/htNXz9Lkq7E?pli=1</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在安卓源码top目录执行编译命令：（注意：下面的Android.mk要被include进去）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make test_aar</summary>
        
      
    
    
    
    <category term="Android Build System" scheme="https://iwesley.top/categories/Android-Build-System/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="aosp编译" scheme="https://iwesley.top/tags/aosp%E7%BC%96%E8%AF%91/"/>
    
    <category term="Android.mk" scheme="https://iwesley.top/tags/Android-mk/"/>
    
  </entry>
  
</feed>
