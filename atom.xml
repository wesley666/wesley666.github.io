<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wesley&#39;s Blog</title>
  <icon>https://iwesley.top/icon.png</icon>
  <subtitle>我未曾珍惜的，我不再拥有。</subtitle>
  <link href="https://iwesley.top/atom.xml" rel="self"/>
  
  <link href="https://iwesley.top/"/>
  <updated>2025-06-22T11:59:26.009Z</updated>
  <id>https://iwesley.top/</id>
  
  <author>
    <name>Wesley</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安卓对外发布工程源码:怎么做到仅UI层公布</title>
    <link href="https://iwesley.top/article/9f1bc6ae/"/>
    <id>https://iwesley.top/article/9f1bc6ae/</id>
    <published>2025-06-22T08:37:36.000Z</published>
    <updated>2025-06-22T11:59:26.009Z</updated>
    
    <content type="html"><![CDATA[<p>最近新客户要求将软件的代码公开给他们，允许他们自己修改 UI，进行定制。由于我们工程包含其他核心模块，不能全部开放，所以需要将非 UI 模块进行整合并混淆再发布。</p><p>由于工程具有良好的模块化，所以一开始想到的是参考<a href="https://iwesley.top/article/a43c0ba5/">安卓官方版fat-aar:使用Fused Library将多个Android库发布为一个库 - Wesley’s Blog</a>将非 UI 模块合并成一个 aar。</p><p>但有挑战：</p><ul><li><p>依赖传递很难处理，就算处理了也不方便后续维护</p></li><li><p>存在部分内网 SDK 依赖</p></li></ul><p>为了不改变 maven 的管理方式，决定使用本地 maven 的方式。</p><p>可以先用<code>gradlew build --scan</code>生成一棵依赖树，网页版方便查看 app 有哪些依赖，还可以定位内网的依赖来自于哪个地址。</p><h2 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h2><p>在gradle.properties 定义本地 maven 路径</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">LOCAL_MAVEN_URL=maven_repo<br>GROUP_ID=com.wesley.test<br>SDK_VERSION=<span class="hljs-number">1.0</span><span class="hljs-number">.0</span> #统一控制所有模块版本<br></code></pre></td></tr></table></figure><p>settings.gradle引入本地依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy">maven &#123;<br>            url = uri(<span class="hljs-string">&quot;file://$&#123;rootProject.projectDir&#125;/$&#123;LOCAL_MAVEN_URL&#125;&quot;</span>)<br><br>        &#125;<br></code></pre></td></tr></table></figure><p>各自模块接入maven-publish</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    alias(libs.plugins.android.library)<br>    alias(libs.plugins.kotlin.android)<br>    id <span class="hljs-string">&#x27;maven-publish&#x27;</span><br>&#125;<br><span class="hljs-keyword">def</span> ARTIFACT_ID=<span class="hljs-string">&#x27;base-base&#x27;</span><br>android &#123;<br>    <span class="hljs-comment">//不能发布源码给第三方</span><br>    publishing &#123;<br>        singleVariant(<span class="hljs-string">&#x27;release&#x27;</span>) <span class="hljs-comment">// 不生成 sources JAR</span><br>    &#125;<br><br>    ...............<br><br>     <span class="hljs-comment">//如果有模块重名，比如 feature:base, base:base, 需要定义</span><br>    compileOptions &#123;<br>        kotlinOptions.freeCompilerArgs += [<span class="hljs-string">&#x27;-module-name&#x27;</span>, <span class="hljs-string">&quot;$GROUP_ID.$ARTIFACT_ID&quot;</span>]<br>    &#125;<br>    <br>&#125;<br><br><br>publishing &#123;<br>    publications &#123;<br>        maven(MavenPublication) &#123;<br>            groupId GROUP_ID<br>            artifactId ARTIFACT_ID<br>            version SDK_VERSION<br><br>            afterEvaluate &#123;<br>                from components.release<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    repositories &#123;<br>        maven &#123;<br>            url rootProject.file(LOCAL_MAVEN_URL).toURI()<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果模块存在多个 flavor：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    alias(libs.plugins.android.library)<br>    alias(libs.plugins.kotlin.android)<br>    id <span class="hljs-string">&#x27;maven-publish&#x27;</span><br>&#125;<br>android &#123;<br>    publishing &#123;<br>        multipleVariants &#123;<br>            allVariants()<br>            <span class="hljs-comment">//withJavadocJar()</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>publishing &#123;<br>    publications &#123;<br>        maven(MavenPublication) &#123;<br>            groupId GROUP_ID<br>            artifactId <span class="hljs-string">&quot;feature-xxx&quot;</span><br>            version SDK_VERSION<br><br>            afterEvaluate &#123;<br>                from components.<span class="hljs-keyword">default</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    repositories &#123;<br>        maven &#123;<br>            url rootProject.file(LOCAL_MAVEN_URL).toURI()<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果要在发布时控制某些代码不混淆或者依赖方式变更：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// 在根项目的 build.gradle 中</span><br>ext &#123;<br>    <span class="hljs-comment">// 定义判断是否是发布任务的方法</span><br>    isPublishTask = &#123; -&gt;<br>        gradle.startParameter.taskNames.any &#123;<br>            it.startsWith(<span class="hljs-string">&quot;publish&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">if</span> (isPublishTask()) &#123;<br>        <span class="hljs-comment">// 发布时将 aar 打包进 sdk</span><br>        println(<span class="hljs-string">&quot;wesley publish&quot;</span>)<br>        <span class="hljs-comment">//embed(project( &quot;:feature:testAAR&quot; ))</span><br>        <span class="hljs-comment">// id(&quot;com.kezong.fat-aar&quot;)</span><br>        embed project(<span class="hljs-attr">path:</span> <span class="hljs-string">&quot;:feature:testAAR&quot;</span>, <span class="hljs-attr">configuration:</span> <span class="hljs-string">&#x27;default&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        implementation(project( <span class="hljs-string">&quot;:feature:testAAR&quot;</span> ))<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>对于不携带 aar 包的模块，比如某 B 模块implementation(project( “:base:base” ))，如果:base:base 也配置了 publish 任务，依赖它的模块不需要修改成远程依赖方式。为什么呢？问了一下 AI：</p><blockquote><h3 id="核心原因：项目内依赖（Project-Dependency）-vs-Maven-依赖（Maven-Dependency）的转换"><a href="#核心原因：项目内依赖（Project-Dependency）-vs-Maven-依赖（Maven-Dependency）的转换" class="headerlink" title="核心原因：项目内依赖（Project Dependency） vs. Maven 依赖（Maven Dependency）的转换"></a>核心原因：项目内依赖（Project Dependency） vs. Maven 依赖（Maven Dependency）的转换</h3><ol><li><strong>在模块 A 的构建期间： (<code>implementation project(&quot;:base:base&quot;)</code>)</strong><ul><li>当 Gradle 构建你的 <code>A</code> 模块时，它看到了 <code>implementation project(&quot;:base:base&quot;)</code>。</li><li>这里的 <code>project(...)</code> 告诉 Gradle：“这是一个<strong>项目内依赖</strong>。你不需要去远程仓库下载任何东西，直接在本次构建中找到 <code>:base:base</code> 模块，编译它，然后让 <code>A</code> 模块使用它的代码即可。”</li><li>在这个阶段，一切都在你的本地项目中进行，与 Maven 仓库和版本 <code>1.1</code> 是否已发布<strong>完全无关</strong>。</li></ul></li><li><strong>在发布模块 A 时：（生成 <code>pom.xml</code>）</strong><ul><li>当你运行 <code>publish</code> 任务时，<code>maven-publish</code> 插件的职责是为模块 <code>A</code> 创建一个元数据文件，也就是 <code>pom.xml</code>。</li><li>这个 POM 文件是给<strong>外部用户</strong>看的。外部用户（比如你的同事或者一个CI服务器）没有你项目的完整源码，他们需要通过 Maven 坐标（groupId:artifactId:version）来下载依赖。</li><li>因此，<code>maven-publish</code> 插件必须将项目内依赖 <code>project(&quot;:base:base&quot;)</code> <strong>“翻译”</strong> 成一个外部用户可以理解的 Maven 依赖。</li></ul></li></ol><h3 id="“翻译”的过程是怎样的？"><a href="#“翻译”的过程是怎样的？" class="headerlink" title="“翻译”的过程是怎样的？"></a>“翻译”的过程是怎样的？</h3><p><code>maven-publish</code> 插件非常智能，它会执行以下操作：</p><ol><li><p>它发现 <code>A</code> 依赖于 <code>project(&quot;:base:base&quot;)</code>。</p></li><li><p>它会去检查 <code>:base:base</code> 模块的 <code>build.gradle.kts</code> 文件。</p></li><li><p>它在文件中找到了 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">publishing</span><br></code></pre></td></tr></table></figure><p> 配置块，并读取了里面定义的 Maven 坐标：</p><ul><li><code>groupId: &quot;com.wesley.test&quot;</code></li><li><code>artifactId: &quot;base-base&quot;</code></li><li><code>version: &quot;1.1&quot;</code></li></ul></li><li><p>然后，它将这些信息忠实地写入 <code>A</code> 模块的 <code>pom.xml</code> 文件中，生成了你看到的 <code>&lt;dependency&gt;</code> 块。</p></li></ol><blockquote><p><strong>一个形象的比喻：</strong> 这就像你在写一份菜谱（发布模块 A）。你在菜谱里写到需要“我祖母的秘制酱料”（项目内依赖 <code>:base:base</code>）。为了让别人也能做出这道菜，你必须在菜谱的配料表上写清楚这种酱料在超市里的商品名和品牌（Maven坐标 <code>com.wesley.test:base-base:1.1</code>），而不是只写“我祖母的秘制酱料”。</p><p><code>maven-publish</code> 就是那个负责把“我祖母的秘制酱料”翻译成商品名的角色。它并不关心此刻超市里到底有没有货（<code>1.1</code> 版本是否已发布），它只负责正确地翻译菜谱。</p></blockquote><hr><h3 id="为什么它不关心-1-1-是否已发布？"><a href="#为什么它不关心-1-1-是否已发布？" class="headerlink" title="为什么它不关心 1.1 是否已发布？"></a>为什么它不关心 <code>1.1</code> 是否已发布？</h3><p><code>publish</code> 任务的职责是<strong>生成并上传当前模块的构件和元数据</strong>。它假设你（开发者）会确保所有声明的依赖项最终都是可用的。</p><ul><li><strong>后果的承担者是消费者：</strong> 如果你发布了 <code>A</code>，但没有发布 <code>:base:base</code> 的 <code>1.1</code> 版本，那么问题不会在你发布时出现，而是在<strong>别人使用你的 <code>A</code> 模块时</strong>出现。当他们的项目尝试根据 <code>A</code> 的 <code>pom.xml</code> 去下载 com.wesley.test:base-base:1.1&#96; 时，Maven 会因为找不到这个依赖而构建失败。</li><li><strong>责任在你：</strong> Gradle 将保证依赖关系链正确的责任交给了开发者。你需要在发布 <code>A</code> 之前，先将它的所有依赖（如 <code>:base:base</code>）发布到 Maven 仓库。</li></ul></blockquote><p>最后执行 publish任务，所有模块都发布到maven_repo 里面了，以后向客户更新这个目录就行。</p><p>而对于内网 SDK，可以在网页版依赖树找到他们，然后通过类似</p><p><code>wget -r -np -nH --cut-dirs=8 -R &quot;index.html*&quot;      http://172.20.135.19:8080/nexus/content/repositories/releases/com/wesley/sdk/protocol/2.1.8/</code>的命令下载，把文件丢进maven_repo（注意目录结构），这样依赖也可以正确传递了。（如果包含源码，可以考虑删除）</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>删掉工程签名文件。</p><p>如果有些模块不能公开，混淆后不能发布源码。</p><p>不能携带 .git 目录。</p><p>注意处理 UI 模块依赖其他模块的方法或者类，不能混淆。</p><p>注意处理一些配置信息或者关键代码，可以考虑转移到 native 层。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近新客户要求将软件的代码公开给他们，允许他们自己修改 UI，进行定制。由于我们工程包含其他核心模块，不能全部开放，所以需要将非 UI 模块进行整合并混淆再发布。&lt;/p&gt;
&lt;p&gt;由于工程具有良好的模块化，所以一开始想到的是参考&lt;a</summary>
        
      
    
    
    
    <category term="AppBuild" scheme="https://iwesley.top/categories/AppBuild/"/>
    
    
    <category term="gradle" scheme="https://iwesley.top/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>安卓官方版fat-aar:使用Fused Library将多个Android库发布为一个库</title>
    <link href="https://iwesley.top/article/a43c0ba5/"/>
    <id>https://iwesley.top/article/a43c0ba5/</id>
    <published>2025-06-22T06:21:49.000Z</published>
    <updated>2025-06-22T07:35:28.833Z</updated>
    
    <content type="html"><![CDATA[<p>在开发 sdk 时，内部一般会划分好几个模块。但当需要打包成一个模块发布时，往往需要依赖第三方插件。比如著名的 fat-aar：<a href="https://github.com/kezong/fat-aar-android%EF%BC%8C%E4%BD%86%E8%AF%A5%E5%BA%93%E4%B8%8D%E6%94%AF%E6%8C%81">https://github.com/kezong/fat-aar-android，但该库不支持</a> AGP8.0 了，有其他开发者单独fork了一个仓库来进行维护，支持 AGP8.0+：<a href="https://github.com/aasitnikov/fat-aar-android">aasitnikov&#x2F;fat-aar-android: Gradle plugin for merging android libraries (AAR)</a>。</p><p>现在安卓官方终于支持将多个库打包成一个aar 了：<a href="https://developer.android.com/build/publish-library/fused-library">Publish multiple Android libraries as one with Fused Library  |  Android Studio  |  Android Developers</a>。宣布从 AGP8.12 开始可以使用<code>com.android.fused-library</code>来进行合并多模块。不过从<a href="https://mvnrepository.com/artifact/com.android.fused-library/com.android.fused-library.gradle.plugin">Maven Repository: com.android.fused-library » com.android.fused-library.gradle.plugin</a>上面可以看到，一些早期版本也可以支持的，不过可能有 bug，我试了 AGP8.10 也是可以的。</p><p>相比 fat-aar 的优点是：</p><ul><li>官方支持</li><li>合并模块时支持依赖传递，也就是子模块的依赖树会出现在 pom 文件里面。fat-aar 需要通过pom.withXml 来处理。</li></ul><p>缺点是：</p><ul><li>支持插件版本有限，官方表示是AGP8.12 开始才支持。</li><li>传递依赖项不会打包。需要逐个指定打包进 aar 的依赖。</li></ul><p>后面还会继续说该库目前的问题，先看看怎么用。</p><p>官方的工程示范：</p><blockquote><p>readme 的插件名称目前是写错了的：应该是<code>com.android.fused-library</code></p></blockquote><p><a href="https://github.com/android/gradle-recipes/tree/agp-8.10/applyFusedLibraryPlugin">gradle-recipes&#x2F;applyFusedLibraryPlugin at agp-8.10 · android&#x2F;gradle-recipes</a></p><p>可以参考这个进行插件引入：</p><p><a href="https://developer.android.com/build/publish-library/fused-library">Publish multiple Android libraries as one with Fused Library  |  Android Studio  |  Android Developers</a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="嵌套依赖不支持打包"><a href="#嵌套依赖不支持打包" class="headerlink" title="嵌套依赖不支持打包"></a>嵌套依赖不支持打包</h3><p>官方的例子是支持嵌套的：</p><blockquote><p><code>*</code> indicates an <code>include</code> dependency of the <code>:fusedLibrary</code> module</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs elixir">┌─────────────────────────────────────────┐<br>│             <span class="hljs-symbol">:app</span>                        │<br>│               ▲                         │<br>│               │                         │<br>│         <span class="hljs-symbol">:fusedLibrary</span>                   │<br>│         ▲           ▲                   │<br>│         │           │                   │<br>│    <span class="hljs-symbol">:androidLib2*</span>  <span class="hljs-symbol">:androidLib1*</span>         │<br>│         ▲            ▲                  │<br>│         │            │                  │<br>│ <span class="hljs-symbol">:androidLib3</span> <span class="hljs-symbol">com.google.code.gson:</span>gson* │<br>└─────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">dependencies &#123;<br>    include(project(<span class="hljs-string">&quot;:androidLib1&quot;</span>))<br>    include(project(<span class="hljs-string">&quot;:androidLib2&quot;</span>))<br>    include(<span class="hljs-string">&quot;com.google.code.gson:gson:2.10.1&quot;</span>)<br>    include(files(<span class="hljs-string">&quot;libs/simple-jar-with-A_DoIExist-class.jar&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上androidLib3 没有被打包，变成了一个依赖fused-library-samples:androidLib3:unspecified：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;included&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;project :androidLib1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;project :androidLib2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;com.google.code.gson:gson:2.10.1&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-stdlib:1.9.22&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;org.jetbrains:annotations:13.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;fused-library-samples:androidLib3:unspecified&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="有一些远程包暂时打包不了"><a href="#有一些远程包暂时打包不了" class="headerlink" title="有一些远程包暂时打包不了"></a>有一些远程包暂时打包不了</h3><p>A failure occurred while executing com.android.build.gradle.tasks.FusedLibraryMergeArtifactTask$FusedLibraryMergeArtifactWorkAction</p><p>   &gt; java.lang.NullPointerException (no error message)</p><h3 id="暂不支持携带源码发布"><a href="#暂不支持携带源码发布" class="headerlink" title="暂不支持携带源码发布"></a>暂不支持携带源码发布</h3><h3 id="暂不能混淆"><a href="#暂不能混淆" class="headerlink" title="暂不能混淆"></a>暂不能混淆</h3><h3 id="不支持Databinding"><a href="#不支持Databinding" class="headerlink" title="不支持Databinding"></a>不支持Databinding</h3><h3 id="无法在单个融合库中融合多个-build-类型和产品变种。需要为不同的变体创建单独的融合库。"><a href="#无法在单个融合库中融合多个-build-类型和产品变种。需要为不同的变体创建单独的融合库。" class="headerlink" title="无法在单个融合库中融合多个 build 类型和产品变种。需要为不同的变体创建单独的融合库。"></a>无法在单个融合库中融合多个 build 类型和产品变种。需要为不同的变体创建单独的融合库。</h3><h3 id="kotlin-module冲突"><a href="#kotlin-module冲突" class="headerlink" title="kotlin_module冲突"></a>kotlin_module冲突</h3><p>如果有两个base模块会产生冲突， base&#x2F;base ，feature&#x2F;base</p><p>2 files found with path ‘META-INF&#x2F;base_release.kotlin_module’ from inputs:</p><p>需要修改一下kotlin_module 的名字</p><p><a href="https://stackoverflow.com/questions/44509608/duplicate-files-copied-in-apk-meta-inf-library-release-kotlin-module">android - Duplicate files copied in APK META-INF&#x2F;library_release.kotlin_module - Stack Overflow</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs groovy">ext &#123;<br>    GROUP_ID = <span class="hljs-string">&#x27;custom.group.id&#x27;</span><br>    ARTIFACT_ID = <span class="hljs-string">&#x27;artifactid&#x27;</span><br>&#125;<br><br>android &#123;<br>    compileSdkVersion <span class="hljs-number">25</span><br>    buildToolsVersion <span class="hljs-string">&quot;25.0.0&quot;</span><br><br>    compileOptions &#123;<br>        kotlinOptions.freeCompilerArgs += [<span class="hljs-string">&#x27;-module-name&#x27;</span>, <span class="hljs-string">&quot;$GROUP_ID.$ARTIFACT_ID&quot;</span>]<br>    &#125;<br><br>    defaultConfig &#123;<br>        ...<br>    &#125;<br>    buildTypes &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="官方已知问题"><a href="#官方已知问题" class="headerlink" title="官方已知问题"></a>官方已知问题</h3><p>融合库是一个新插件，我们正在解决一些已知问题，以实现所有用例。</p><ul><li>合并的 AAR 中未包含 <code>lint.jar</code> 文件</li><li>向其他 .aar 文件添加文件依赖项</li><li>不支持合并 RenderScript 和 Prefab 工件</li></ul><p>期待官方进一步完善。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在开发 sdk 时，内部一般会划分好几个模块。但当需要打包成一个模块发布时，往往需要依赖第三方插件。比如著名的 fat-aar：&lt;a</summary>
        
      
    
    
    
    <category term="AppBuild" scheme="https://iwesley.top/categories/AppBuild/"/>
    
    
    <category term="gradle" scheme="https://iwesley.top/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>手机厂商的应用列表权限管控真的起效了吗</title>
    <link href="https://iwesley.top/article/e6389157/"/>
    <id>https://iwesley.top/article/e6389157/</id>
    <published>2025-05-11T10:50:19.000Z</published>
    <updated>2025-05-11T13:26:37.659Z</updated>
    
    <content type="html"><![CDATA[<p>昨天使用<strong>做你的图标包</strong>制作图标包的时候发现我并没有授予它获取应用列表的权限，但是依然可以获取到我安装的应用列表。</p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250511190040532.jpg" style="zoom:25%;" /><p>然后发现它的 targetSDK 是 33 并申请了<code>&lt;uses-permission android:name=&quot;android.permission.QUERY_ALL_PACKAGES&quot;/&gt;</code>权限和使用了如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PackageManager</span> <span class="hljs-variable">packageManager</span> <span class="hljs-operator">=</span> context2.getPackageManager();<br><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span>);<br>intent.addCategory(<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span>);<br>List&lt;ResolveInfo&gt; queryIntentActivities = packageManager.queryIntentActivities(intent, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250511190439764.png" alt="image-20250511190439462" style="zoom: 50%;" /><p>正常拿到了我手机上的设备应用安装列表并且权限监控里面没有看到记录。这是怎么回事？</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>通过下面的代码进行实验</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getInstalledPackages</span><span class="hljs-params">(context: <span class="hljs-type">Context</span>)</span></span>: List&lt;String&gt; &#123;<br>        <span class="hljs-keyword">val</span> installedPackageList: MutableList&lt;String&gt; = ArrayList()<br>        <span class="hljs-keyword">val</span> installedPackageInfoList = context.packageManager.getInstalledPackages(PackageManager.MATCH_UNINSTALLED_PACKAGES)<br>        <span class="hljs-keyword">for</span> (packageInfo <span class="hljs-keyword">in</span> installedPackageInfoList) &#123;<br>            installedPackageList.add(packageInfo.packageName)<br>        &#125;<br>        Log.e(TAG, <span class="hljs-string">&quot;getInstalledPackages: size：<span class="hljs-subst">$&#123;installedPackageList.size&#125;</span> pkg:<span class="hljs-variable">$installedPackageList</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> installedPackageList<br>    &#125;<br><br>    <span class="hljs-comment">//获取所有带有桌面属性的APK</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getAllLauncherIconPackages</span><span class="hljs-params">(context: <span class="hljs-type">Context</span>)</span></span>: List&lt;String&gt; &#123;<br>        <span class="hljs-keyword">val</span> launcherIconPackageList: MutableList&lt;String&gt; = ArrayList()<br>        <span class="hljs-keyword">val</span> intent = Intent()<br>        intent.setAction(Intent.ACTION_MAIN)<br>        intent.addCategory(Intent.CATEGORY_LAUNCHER)<br>        <span class="hljs-keyword">val</span> resolveInfos = context.packageManager.queryIntentActivities(intent, PackageManager.MATCH_ALL)<br>        <span class="hljs-keyword">for</span> (info <span class="hljs-keyword">in</span> resolveInfos) &#123;<br>            launcherIconPackageList.add(info.activityInfo.packageName)<br>        &#125;<br>        Log.e(TAG, <span class="hljs-string">&quot;getAllLauncherIconPackages: size:<span class="hljs-subst">$&#123;launcherIconPackageList.size&#125;</span> pkg:<span class="hljs-variable">$launcherIconPackageList</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> launcherIconPackageList<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="在禁止应用列表权限情况下测试"><a href="#在禁止应用列表权限情况下测试" class="headerlink" title="在禁止应用列表权限情况下测试"></a>在禁止应用列表权限情况下测试</h3><p>Oppo find8u Xiaomi13 都是安卓 15</p><h4 id="情况1-不申请QUERY-ALL-PACKAGES"><a href="#情况1-不申请QUERY-ALL-PACKAGES" class="headerlink" title="情况1 不申请QUERY_ALL_PACKAGES"></a>情况1 不申请<code>QUERY_ALL_PACKAGES</code></h4><p>oppo</p><blockquote><p>PermissionInjector: Permission denied: uid: 10445 or pid: 14074 have no permission: com.android.permission.GET_INSTALLED_APPS to access: get_installed</p><p>ApplicationPackageManagerExtImpl: com.example.myapplication in userId&#x3D;0 doesn’t have GET_INSTALLED_APPS perm, return self!</p><p>getInstalledPackages: size：1 pkg:[com.example.myapplication]</p><p>getAllLauncherIconPackages: size:8 pkg:[com.android.settings, com.android.vending, com.coloros.gallery3d, com.oplus.camera, com.android.documentsui, com.android.stk, com.android.stk, com.example.myapplication]</p></blockquote><p>xiaomi</p><blockquote><p>MIUILOG- Permission Denied getInstalledPackages. pkg : com.example.myapplication uid : 10236<br>getInstalledPackages: size：1 pkg:[com.example.myapplication]<br>getAllLauncherIconPackages: size:13 pkg:[com.android.browser, com.android.camera, com.android.fileexplorer, com.android.settings, com.android.thememanager, com.android.vending, com.miui.miservice, com.xiaomi.market, com.miui.notes, com.miui.securitycenter, com.miui.voiceassist, com.example.myapplication, com.miui.huanji]</p></blockquote><p><code>getInstalledPackages</code> 只能获取到自己的应用，且会被权限监控记录，<code>queryIntentActivities</code> 可以获取部分系统应用</p><h4 id="情况2-申请QUERY-ALL-PACKAGES"><a href="#情况2-申请QUERY-ALL-PACKAGES" class="headerlink" title="情况2 申请QUERY_ALL_PACKAGES"></a>情况2 申请<code>QUERY_ALL_PACKAGES</code></h4><p>oppo</p><blockquote><p>getInstalledPackages: size：1 pkg:[com.example.myapplication]</p><p>getAllLauncherIconPackages: size:<strong>155</strong> pkg:[com.android.contacts………….</p></blockquote><p>xiaomi</p><blockquote><p>getInstalledPackages: size：1 pkg:[com.example.myapplication]<br>getAllLauncherIconPackages: size:<strong>279</strong> pkg:[com.android.browser, com.android.camera, com.android.contacts…………</p></blockquote><p><code>getInstalledPackages</code> 只能获取到自己的应用，且会被权限监控记录，<code>queryIntentActivities</code> 可以获取所有带有桌面属性的应用</p><h4 id="情况3-不申请QUERY-ALL-PACKAGES但声明queries"><a href="#情况3-不申请QUERY-ALL-PACKAGES但声明queries" class="headerlink" title="情况3 不申请QUERY_ALL_PACKAGES但声明queries"></a>情况3 不申请<code>QUERY_ALL_PACKAGES</code>但声明queries</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">queries</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">queries</span>&gt;</span><br></code></pre></td></tr></table></figure><p>oppo</p><blockquote><p>getInstalledPackages: size：1 pkg:[com.example.myapplication]</p><p>getAllLauncherIconPackages: size:<strong>155</strong> pkg:[com.android.contacts,……………</p></blockquote><p>xiaomi</p><blockquote><p>getInstalledPackages: size：1 pkg:[com.example.myapplication]<br>getAllLauncherIconPackages: size:<strong>279</strong> pkg:[com.android.browser………..</p></blockquote><p><code>getInstalledPackages</code> 只能获取到自己的应用，且会被权限监控记录，<code>queryIntentActivities</code> 可以获取所有带有桌面属性的应用</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>还是很多应用申请了QUERY_ALL_PACKAGES 权限的，意味着很容易收集手机里面的安装列表。或者不申请QUERY_ALL_PACKAGES，直接声明queries，比如微信就是这么干的。所以厂商的这个应用列表管控能起到的作用可能不大。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">intent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">action</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">category</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">intent</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250511204049921.jpg" alt="IMG_20250511_203845" style="zoom:25%;" /><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>一般来说，这些权限都是通过 <strong>AppOps</strong>管控的，当初安卓 6 加入运行时权限时，对于那些没有适配运行时权限的应用，就是通过<strong>AppOps</strong>管控的。</p><p>oppo</p><blockquote><p>OP5DD3L1:&#x2F; $ appops get com.example.myapplication</p><p>GET_INSTALLED_APPS: ignore</p></blockquote><p>xiaomi</p><blockquote><p>fuxi:&#x2F; $ appops get com.example.myapplication</p><p>MIUIOP(10022): ignore; time&#x3D;+7h1m54s781ms ago; rejectTime&#x3D;+32m9s128ms ago</p></blockquote><p><code>public static final int OP_GET_INSTALLED_APPS = 10022;</code></p><p>他们都是只针对getInstalledPackages 权限做管控。有兴趣的可以 pull 手机里面的 framework 和 service jar 包来看一下他们的源代码。</p><h3 id="包可见性"><a href="#包可见性" class="headerlink" title="包可见性"></a>包可见性</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>Google官网特性介绍:</p><p><a href="https://developer.android.google.cn/preview/privacy/package-visibility">https://developer.android.google.cn/preview/privacy/package-visibility</a></p><p>Android 11 更改了应用查询用户已在设备上安装的其他应用以及与之交互的方式。使用 <queries> 元素，应用可以定义一组自身可访问的其他软件包。通过告知系统应向您的应用显示哪些其他软件包，此元素有助于鼓励最小权限原则。此外，此元素还可帮助 Google Play 等应用商店评估应用为用户提供的隐私权和安全性。</p><p>如果您的应用以 Android 11 或更高版本为目标平台，您可能需要在应用的清单文件中添加 <queries> 元素。在 <queries> 元素中，您可以按软件包名称、intent 签名或提供程序授权指定软件包。</p><h4 id="兼容性影响"><a href="#兼容性影响" class="headerlink" title="兼容性影响"></a>兼容性影响</h4><ol><li>SDK接口行为变更</li></ol><p>app默认不再能通过SDK接口获取其他app的信息，例如：</p><p><code>getPackageInfo(getPackageName(), 0)</code> 仍能正常返回应用自身的<code>PackageInfo</code>,但<code>getPackageInfo(“com.another.app”,0)</code>将抛出NameNotFoundException，即使<code>com.another.app</code>已经被安装到设备上。<code>getInstalledPackages(0)</code>，只能返回应用自身，以及少数的核心AOSP应用的信息。</p><ol start="2"><li>其他变更</li></ol><p>app不能感知<code>/data/data/com.another.app</code>等目录的存在。即使<code>com.another.app</code>已经被安装到设备上，app尝试访问<code>/data/data/com.another.app</code>也将提示“File not found”，而不是“Permission denied”。</p><p>类似的目录还有<code>/data/misc/profiles/cur/$&#123;userId&#125;/com.another.app</code>。此变更，可以防止app通过访问目录文件返回的错误不同，来判断特定app是否已被安装。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.android.google.cn/training/package-visibility?hl=zh-cn">Android 上的软件包可见性过滤  |  App architecture  |  Android Developers</a></p><p><a href="https://developer.android.com/training/package-visibility/automatic?hl=zh-cn">了解自动可见的软件包  |  App architecture  |  Android Developers</a></p><p><a href="https://developer.android.com/training/package-visibility/declaring?hl=zh-cn">声明软件包可见性需求  |  App architecture  |  Android Developers</a></p><p><a href="https://developer.android.com/training/package-visibility/testing?hl=zh-cn">测试软件包可见性行为  |  App architecture  |  Android Developers</a></p><p><a href="https://dev.mi.com/xiaomihyperos/documentation/detail?pId=1738">应用TargetSdkVersion 30升级适配指南 | 小米澎湃OS开发者平台</a></p><p><a href="https://open.oppomobile.com/new/developmentDoc/info?id=10724">OPPO 开放平台-OPPO开发者服务中心</a></p><p><a href="https://gddhy.net/2023/android-11-gua-pei-ruan-jian-bao-ke-jian-xing/">Android 11 适配 软件包可见性 | Gddhy’s Blog</a></p><p><a href="https://bbs.kanxue.com/thread-280415.htm">绕过 Android11新特性之 “包的可见性“-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://juejin.cn/post/7353292009086173218">Android11“包可见性”—动态修改queries方案Android 11引入了“包可见性”限制，默认情况下应用 - 掘金</a></p><p><a href="https://www.taf.org.cn/upload/AssociationStandard/TTAF%20108-2022%20%E7%A7%BB%E5%8A%A8%E7%BB%88%E7%AB%AF%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8%E6%9D%83%E9%99%90%E5%AE%9E%E6%96%BD%E6%8C%87%E5%8D%97.pdf">移动终端应用软件列表权限实施指南</a></p><p><a href="https://github.com/getActivity/XXPermissions/blob/master/library/src/main/java/com/hjq/permissions/Permission.java">XXPermissions&#x2F;library&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;hjq&#x2F;permissions&#x2F;Permission.java at master · getActivity&#x2F;XXPermissions</a></p><p><a href="https://gist.github.com/0awawa0/65bf88e43159750f596da194ed923522">XiaomiUtilities.java</a></p><p><a href="https://cn-sec.com/archives/2255540.html">隐私合规之MIUI自启动的监控原理分析 | CN-SEC 中文网</a></p><p><a href="https://juejin.cn/post/7189533089897381944">Android 获取应用列表方法记录</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;昨天使用&lt;strong&gt;做你的图标包&lt;/strong&gt;制作图标包的时候发现我并没有授予它获取应用列表的权限，但是依然可以获取到我安装的应用列表。&lt;/p&gt;
&lt;img</summary>
        
      
    
    
    
    <category term="安卓安全和逆向" scheme="https://iwesley.top/categories/%E5%AE%89%E5%8D%93%E5%AE%89%E5%85%A8%E5%92%8C%E9%80%86%E5%90%91/"/>
    
    
    <category term="jadx" scheme="https://iwesley.top/tags/jadx/"/>
    
    <category term="反编译" scheme="https://iwesley.top/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
    <category term="安卓权限" scheme="https://iwesley.top/tags/%E5%AE%89%E5%8D%93%E6%9D%83%E9%99%90/"/>
    
    <category term="安卓安全" scheme="https://iwesley.top/tags/%E5%AE%89%E5%8D%93%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>好用软件推荐</title>
    <link href="https://iwesley.top/article/9e5c606d/"/>
    <id>https://iwesley.top/article/9e5c606d/</id>
    <published>2025-05-03T08:23:55.000Z</published>
    <updated>2025-06-22T14:39:20.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Universal"><a href="#Universal" class="headerlink" title="Universal"></a>Universal</h2><h3 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h3><ul><li><p>截图：<a href="https://zh.snipaste.com/#">Snipaste - 截图 + 贴图</a></p></li><li><p>NAS 视频播放器：<a href="https://bmh.163.com/">网易爆米花（原网易Filmly） - 智能媒体库&amp;全能播放器</a></p></li><li><p>NAS 音乐播放器：音流，<a href="https://github.com/gitbobobo/StreamMusic">gitbobobo&#x2F;StreamMusic: 支持 Android、iOS、macOS、Windows 平台的 Subsonic&#x2F;Navidrome&#x2F;Jellyfin&#x2F;Emby&#x2F;AudioStation 客户端。</a></p></li><li><p>录屏或者直播：<a href="https://obsproject.com/">Open Broadcaster Software | OBS</a></p></li></ul><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><ul><li><p>klogg：日志查看工具，之前在 Windows 一直用notepad++，它可以高亮标记选中的字符串。但在 Mac 上面，我试了好几个类似的软件都没有该功能，后来，我发现了 klogg，基本满足了我的需求。</p><p>地址：<a href="https://github.com/variar/klogg">variar&#x2F;klogg: Really fast log explorer based on glogg project</a></p></li><li><p>NotepadNext：<a href="https://github.com/dail8859/NotepadNext">dail8859&#x2F;NotepadNext: A cross-platform, reimplementation of Notepad++</a>（V0.12 已经支持高亮了，我提的 issue 如下：<a href="https://github.com/dail8859/NotepadNext/issues/748">hightlight the select text with different color · Issue #748 · dail8859&#x2F;NotepadNext</a>）</p></li><li><p>语雀：高中的时候用有道笔记记录知识点和错题，大学的时候用 OneNote 来记录读书笔记，工作后刚开始用的是印象笔记，后面就转向语雀了。主要用来记录安卓相关的知识点。</p><p>地址：<a href="https://www.yuque.com/">语雀，为每一个人提供优秀的文档和知识库工具</a></p></li><li><p>反编译工具：<a href="https://github.com/skylot/jadx/releases">Releases · skylot&#x2F;jadx</a></p></li></ul><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="开发-1"><a href="#开发-1" class="headerlink" title="开发"></a>开发</h3><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><h3 id="日常-1"><a href="#日常-1" class="headerlink" title="日常"></a>日常</h3><ul><li><p>视频播放：<a href="https://github.com/iina/iina">iina&#x2F;iina: The modern video player for macOS.</a></p></li><li><p>性能监控：<a href="https://github.com/exelban/stats">exelban&#x2F;stats: macOS system monitor in your menu bar</a></p></li><li><p>鼠标控制：自定义滚轮方向和自定义按键功能 <a href="https://github.com/noah-nuebling/mac-mouse-fix/">noah-nuebling&#x2F;mac-mouse-fix: Mac Mouse Fix - Make Your $10 Mouse Better Than an Apple Trackpad!</a></p></li><li><p>显示器控制：<a href="https://github.com/waydabber/BetterDisplay">waydabber&#x2F;BetterDisplay: Unlock your displays on your Mac! Flexible HiDPI scaling, XDR&#x2F;HDR extra brightness, virtual screens, DDC control, extra dimming, PIP&#x2F;streaming, EDID override and lots more!</a></p></li><li><p>moonlight：方便局域网控制 windows 电脑 <a href="https://github.com/moonlight-stream/moonlight-qt">moonlight-stream&#x2F;moonlight-qt: GameStream client for PCs (Windows, Mac, Linux, and Steam Link)</a></p></li></ul><h3 id="开发-2"><a href="#开发-2" class="headerlink" title="开发"></a>开发</h3><ul><li>iTerm：命令行终端工具 <a href="https://iterm2.com/">iTerm2 - macOS Terminal Replacement</a></li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="开发-3"><a href="#开发-3" class="headerlink" title="开发"></a>开发</h3>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;Universal&quot;&gt;&lt;a href=&quot;#Universal&quot; class=&quot;headerlink&quot; title=&quot;Universal&quot;&gt;&lt;/a&gt;Universal&lt;/h2&gt;&lt;h3 id=&quot;日常&quot;&gt;&lt;a href=&quot;#日常&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="非技术" scheme="https://iwesley.top/categories/%E9%9D%9E%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="软件" scheme="https://iwesley.top/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="Mac" scheme="https://iwesley.top/tags/Mac/"/>
    
    <category term="Windows" scheme="https://iwesley.top/tags/Windows/"/>
    
    <category term="Linux" scheme="https://iwesley.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>内存性能测试方法</title>
    <link href="https://iwesley.top/article/f42b9418/"/>
    <id>https://iwesley.top/article/f42b9418/</id>
    <published>2025-05-02T15:10:34.000Z</published>
    <updated>2025-05-03T09:31:42.929Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写于 2022 年 6 月 24 日</p></blockquote><h2 id="dd方法测试"><a href="#dd方法测试" class="headerlink" title="dd方法测试"></a>dd方法测试</h2><p>cat proc&#x2F;meminfo </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # cat proc/meminfo <br>MemTotal:        3858576 kB<br>MemFree:          675328 kB<br>MemAvailable:    1142452 kB<br>Buffers:           65280 kB<br>Cached:           992252 kB<br>SwapCached:           40 kB<br>Active:          1144480 kB<br>Inactive:         923220 kB<br>Active(anon):     875244 kB<br>Inactive(anon):   667400 kB<br>Active(file):     269236 kB<br>Inactive(file):   255820 kB<br>Unevictable:        4436 kB<br>Mlocked:            4436 kB<br>SwapTotal:        614396 kB<br>SwapFree:         601596 kB<br>Dirty:                 4 kB<br>Writeback:             0 kB<br>AnonPages:       1014744 kB<br>Mapped:           301460 kB<br>Shmem:            530712 kB<br>KReclaimable:      39912 kB<br>Slab:             142104 kB<br>SReclaimable:      39912 kB<br>SUnreclaim:       102192 kB<br>KernelStack:       33088 kB<br>ShadowCallStack:    2078 kB<br>PageTables:        39964 kB<br>NFS_Unstable:          0 kB<br>Bounce:                0 kB<br>WritebackTmp:          0 kB<br>CommitLimit:     2263732 kB<br>Committed_AS:   47064316 kB<br>VmallocTotal:   262930368 kB<br>VmallocUsed:       56632 kB<br>VmallocChunk:          0 kB<br>Percpu:             2768 kB<br>CmaTotal:        1921024 kB<br>CmaFree:          158092 kB<br></code></pre></td></tr></table></figure><p>剩1.1G左右，所以，我们创建一个挂载在内存上面的分区，大小为可用内存的一半左右。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">mount -o rw,remount /<br>mkdir memtest<br>mount -t tmpfs tmpfs /memtest  -o size=600m<br></code></pre></td></tr></table></figure><h3 id="内存写测试"><a href="#内存写测试" class="headerlink" title="内存写测试"></a>内存写测试</h3><p>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;memtest&#x2F;testfile bs&#x3D;1M count&#x3D;500</p><p>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;memtest&#x2F;testfile bs&#x3D;500M count&#x3D;1</p><p>dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;memtest&#x2F;testfile bs&#x3D;512K count&#x3D;1000</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # dd if=/dev/zero of=/memtest/testfile bs=1M count=500<br>500+0 records in<br>500+0 records out<br>524288000 bytes (500 M) copied, 0.782312 s, 639 M/s<br>console:/ # dd if=/dev/zero of=/memtest/testfile bs=500M count=1<br>1+0 records in<br>1+0 records out<br>524288000 bytes (500 M) copied, 1.272919 s, 393 M/s<br>console:/ # dd if=/dev/zero of=/memtest/testfile bs=512K count=1000<br>1000+0 records in<br>1000+0 records out<br>524288000 bytes (500 M) copied, 0.794319 s, 629 M/s<br></code></pre></td></tr></table></figure><h3 id="内存读测试"><a href="#内存读测试" class="headerlink" title="内存读测试"></a>内存读测试</h3><p>dd if&#x3D;&#x2F;memtest&#x2F;testfile  of&#x3D;&#x2F;dev&#x2F;null bs&#x3D;1M count&#x3D;500 </p><p>dd if&#x3D;&#x2F;memtest&#x2F;testfile  of&#x3D;&#x2F;dev&#x2F;null bs&#x3D;500M count&#x3D;1       </p><p>dd if&#x3D;&#x2F;memtest&#x2F;testfile  of&#x3D;&#x2F;dev&#x2F;null bs&#x3D;512K count&#x3D;1000      </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # dd if=/memtest/testfile  of=/dev/null bs=1M count=500              <br>500+0 records in<br>500+0 records out<br>524288000 bytes (500 M) copied, 0.340277 s, 1.4 G/s<br>console:/ # dd if=/memtest/testfile  of=/dev/null bs=500M count=1                          &lt;<br>1+0 records in<br>1+0 records out<br>524288000 bytes (500 M) copied, 0.682501 s, 733 M/s<br>console:/ # dd if=/memtest/testfile  of=/dev/null bs=512K count=1000                       &lt;<br>1000+0 records in<br>1000+0 records out<br>524288000 bytes (500 M) copied, 0.226277 s, 2.1 G/s<br></code></pre></td></tr></table></figure><h2 id="Steam-benchmark（推荐）"><a href="#Steam-benchmark（推荐）" class="headerlink" title="Steam benchmark（推荐）"></a>Steam benchmark（推荐）</h2><p><a href="https://github.com/wesley666/source/blob/main/stream_benchmark">source&#x2F;stream_benchmark at main · wesley666&#x2F;source</a></p><p>Adb push到data&#x2F;local&#x2F;tmp目录，赋予执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/data/local/tmp # ./stream_benchmark                                   <br>-------------------------------------------------------------<br>STREAM version $Revision: 5.10 $<br>-------------------------------------------------------------<br>This system uses 8 bytes per array element.<br>-------------------------------------------------------------<br>Array size = 10000000 (elements), Offset = 0 (elements)<br>Memory per array = 76.3 MiB (= 0.1 GiB).<br>Total memory required = 228.9 MiB (= 0.2 GiB).<br>Each kernel will be executed 10 times.<br> The *best* time for each kernel (excluding the first iteration)<br> will be used to compute the reported bandwidth.<br>-------------------------------------------------------------<br>Your clock granularity/precision appears to be 1 microseconds.<br>Each test below will take on the order of 21376 microseconds.<br>   (= 21376 clock ticks)<br>Increase the size of the arrays if this shows that<br>you are not getting at least 20 clock ticks per test.<br>-------------------------------------------------------------<br>WARNING -- The above is only a rough guideline.<br>For best results, please be sure you know the<br>precision of your system timer.<br>-------------------------------------------------------------<br>Function    Best Rate MB/s  Avg time     Min time     Max time<br>Copy:           10748.4     0.015937     0.014886     0.017156<br>Scale:           8149.9     0.020030     0.019632     0.020463<br>Add:             9070.6     0.027085     0.026459     0.028024<br>Triad:           8255.9     0.029891     0.029070     0.030490<br>-------------------------------------------------------------<br>Solution Validates: avg error less than 1.000000e-13 on all three arrays<br>-------------------------------------------------------------<br></code></pre></td></tr></table></figure><p>Copy操作最为简单，它先访问一个内存单元读出其中的值，再将值写入到另一个内存单元。</p><p>Scale操作先从内存单元读出其中的值，作一个乘法运算，再将结果写入到另一个内存单元。</p><p>Add操作先从内存单元读出两个值，做加法运算， 再将结果写入到另一个内存单元。</p><p>Triad的中文含义是将三个组合起来，在本测试中表示的意思是将Copy、Scale、Add三种操作组合起来进行测试。具体操作方式是：先从内存单元中中读两个值a、b，对其进行乘加混合运算（a + 因子 * b ） ，将运算结果写入到另一个内存单元。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;写于 2022 年 6 月 24 日&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;dd方法测试&quot;&gt;&lt;a href=&quot;#dd方法测试&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Android性能优化" scheme="https://iwesley.top/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="内存" scheme="https://iwesley.top/tags/%E5%86%85%E5%AD%98/"/>
    
    <category term="性能工具" scheme="https://iwesley.top/tags/%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>EMMC存储性能测试方法</title>
    <link href="https://iwesley.top/article/7cf0bd29/"/>
    <id>https://iwesley.top/article/7cf0bd29/</id>
    <published>2025-05-02T15:10:23.000Z</published>
    <updated>2025-05-03T09:31:42.928Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记于 2022 年 9 月 15 日</p></blockquote><p>参考<a href="https://qiushao.net/2020/02/12/Android/emmc-performance-test/index.html">Android-emmc性能测试 | 一叶知秋</a>进行实践操作</p><h1 id="dd-命令"><a href="#dd-命令" class="headerlink" title="dd 命令"></a>dd 命令</h1><h2 id="页面缓存"><a href="#页面缓存" class="headerlink" title="页面缓存"></a>页面缓存</h2><p>为了测试 emmc 的真实读写性能，我们需要先把页面缓存给清理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Shell">echo 1 &gt; /proc/sys/vm/drop_caches<br>console:/ # echo 1 &gt; /proc/sys/vm/drop_caches                                  <br>console:/ # busybox dd if=/dev/block/mmcblk0 of=/dev/null bs=1M count=512                          &lt;<br>512+0 records in<br>512+0 records out<br>536870912 bytes (512.0MB) copied, 2.491718 seconds, 205.5MB/s<br>console:/ # busybox dd if=/dev/block/mmcblk0 of=/dev/null bs=1M count=512                          &lt;<br>512+0 records in<br>512+0 records out<br>536870912 bytes (512.0MB) copied, 0.290948 seconds, 1.7GB/s<br><br>console:/ # echo 1 &gt; /proc/sys/vm/drop_caches <br>console:/ # busybox  dd if=/dev/block/mmcblk0 of=/dev/null bs=1M count=512                          &lt;<br>512+0 records in<br>512+0 records out<br>536870912 bytes (512.0MB) copied, 2.508393 seconds, 204.1MB/s<br>console:/ # <br></code></pre></td></tr></table></figure><p>连续执行两次 <code>busybox  dd if=/dev/block/mmcblk0 of=/dev/null bs=1M count=512</code> ，从 &#x2F;dev&#x2F;block&#x2F;mmcblk0 (即emmc) 块设备中读取内容，写到 <code>/dev/null</code> 。</p><p><code>/dev/null</code> 是一个虚拟设备，写入这个路径并不会保存数据，可以认为这个设备的写入速度无限大，也就是写入速度不会成为这个命令的瓶颈，我们这个命令主要是为了测试 emmc 的读取速度。可以看到第一次执行的结果是 205.5MB&#x2F;s，第二次执行的结果是 1.7GB&#x2F;s。从这个数据来看，页面缓存极大的提高了热点文件的读取速度。然后我们用 <code>echo 1 &gt; /proc/sys/vm/drop_caches</code>命令清除一下页面缓存，再执行同样的 <code>dd</code>命令，发现速度跟第一次差不多了。</p><h2 id="写入性能测试"><a href="#写入性能测试" class="headerlink" title="写入性能测试"></a>写入性能测试</h2><h3 id="写入块设备"><a href="#写入块设备" class="headerlink" title="写入块设备"></a>写入块设备</h3><p>cache 分区一般是用来存放 OTA 升级包的，正常状态下挂载失败也不影响系统的正常运行，所以我们拿 cache 分区来作写入测试，先找到 cache 对应的块设备文件（df -h命令显示异常的话，可以执行<code>ls -l /dev/block/platform/*/by-name/cache</code>）</p><p><strong>注意：本测试方法可能会损坏cache分区导致ota失败，出现这种情况建议恢复出厂设置或者线刷。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # df -h<br>Filesystem            Size  Used Avail Use% Mounted on<br>tmpfs                 1.5G  892K  1.5G   1% /dev<br>tmpfs                 1.5G     0  1.5G   0% /mnt<br>/dev/block/mmcblk0p26  14M  168K   14M   2% /metadata<br>/dev/block/dm-1       1.1G  0.9G  199M  84% /<br>/dev/block/mmcblk0p40 379M   24M  356M   7% /wesley<br>/dev/block/mmcblk0p38 379M  154M  226M  41% /factory<br>/dev/block/mmcblk0p39  18M  1.3M   17M   8% /atv<br>/dev/block/mmcblk0p36 9.1M   24K  9.0M   1% /oem<br>/dev/block/dm-2       340M  240M  100M  71% /vendor<br>/dev/block/dm-0       167M   84K  167M   1% /mnt/scratch<br>overlay               167M   84K  167M   1% /system_ext<br>overlay               167M   84K  167M   1% /product<br>overlay               167M   84K  167M   1% /odm<br>tmpfs                 1.5G     0  1.5G   0% /apex<br>tmpfs                 1.5G  248K  1.5G   1% /linkerconfig<br>tmpfs                  20M  1.0M   19M   6% /mnt/vendor/rtdlog<br>tmpfs                  20M  8.0K   20M   1% /tmp<br>/dev/block/mmcblk0p23 1.4G  3.9M  1.4G   1% /cache<br>/dev/block/mmcblk0p31 236M   12M  224M   6% /mnt/vendor/tvconfigs<br>/dev/block/mmcblk0p32  26M   84K   26M   1% /mnt/vendor/tvdata<br>/dev/block/mmcblk0p33  18M   36K   18M   1% /mnt/vendor/impdata<br>/dev/block/mmcblk0p4  976K  228K  748K  24% /mnt/vendor/factory<br>/dev/block/mmcblk0p6  976K   28K  948K   3% /mnt/vendor/factory_ro<br>tmpfs                  20M     0   20M   0% /shm<br>tmpfs                 8.0M     0  8.0M   0% /mnt/EPGdb<br>/dev/block/mmcblk0p42 107G  4.8G  102G   5% /data<br>tmpfs                 1.5G     0  1.5G   0% /data_mirror<br>/dev/fuse             107G  4.8G  102G   5% /mnt/user/0/emulated<br>console:/ # <br></code></pre></td></tr></table></figure><p>cache分区的块设备文件为&#x2F;dev&#x2F;block&#x2F;mmcblk0p23。</p><p>写入测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ #  echo 1 &gt; /proc/sys/vm/drop_caches    <br>console:/ #  busybox dd if=/dev/zero of=/dev/block/mmcblk0p23 bs=1M count=1024 conv=fsync<br>1024+0 records in<br>1024+0 records out<br>1073741824 bytes (1.0GB) copied, 11.371810 seconds, 90.0MB/s<br></code></pre></td></tr></table></figure><p>输入文件为 &#x2F;dev&#x2F;zero，是一个虚拟设备，我们可以认为这个设备的读取速度无限大，也就是读取速度不会影响到写入的速度。</p><p>bs&#x3D;1M : 一次写入 1M</p><p>count&#x3D;1024 : 写入 1024 次，也就是写入的数据总量为 1G</p><p>conv&#x3D;fsync : dd 结束前，把数据同步到 emmc，如果没加这个参数的话，数据可能还在缓存之中。为了确保数据准确，一定要加这个参数。</p><p>可以重复测试几次</p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # echo 1 &gt; /proc/sys/vm/drop_caches<br>console:/ # busybox dd if=/dev/zero of=/data/ddtest.bin bs=1M count=1024 conv=fsync                   <br>1024+0 records in<br>1024+0 records out<br>1073741824 bytes (1.0GB) copied, 15.211609 seconds, 67.3MB/s<br>console:/ #<br></code></pre></td></tr></table></figure><p>要重复测试几次。相对直接写块设备文件慢了 30M&#x2F;s 左右。这可能是文件系统带来的影响。</p><h2 id="读取测试"><a href="#读取测试" class="headerlink" title="读取测试"></a>读取测试</h2><h3 id="读取块设备"><a href="#读取块设备" class="headerlink" title="读取块设备"></a>读取块设备</h3><p>直接用我们上面介绍清除缓存的例子就行，这里就不再重复了。</p><p>从上面的例子得到的数据为 205M&#x2F;s 左右。</p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console:/ # echo 1 &gt; /proc/sys/vm/drop_caches        <br>console:/ # busybox dd if=/data/ddtest.bin of=/dev/null bs=1M count=1024<br>1024+0 records in<br>1024+0 records out<br>1073741824 bytes (1.0GB) copied, 5.464306 seconds, 187.4MB/s<br>console:/ # <br></code></pre></td></tr></table></figure><p>直接拿测试写入速度时生成的文件，重复测试几次，速度基本上在 187MB&#x2F;s 左右。</p><h1 id="iozone"><a href="#iozone" class="headerlink" title="iozone"></a>iozone</h1><p>Android 系统源码中并没有 iozone，我们从官网上下载编译，我下载时最新版本为iozone3_493，这个版本已经有 Android.mk 在代码里面了，将源码放到 Android系统源码里面 mm 即可。下面已经是我编译好的文件。对应不同硬件使用对应版本即可，把文件push到&#x2F;data&#x2F;local&#x2F;tmp&#x2F;，并赋予执行权限。</p><p><a href="https://github.com/wesley666/source/blob/main/izone.zip">source&#x2F;izone.zip at main · wesley666&#x2F;source</a></p><h2 id="随机读写测试"><a href="#随机读写测试" class="headerlink" title="随机读写测试"></a>随机读写测试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Shell">console: echo 1 &gt; /proc/sys/vm/drop_caches                                              &lt;<br>console:/data/local/tmp # ./iozone -azecI -+n -L64 -S32 -r1m -s1024m -i0 -i1 -i2 -w -f /data/iozonetest.bin <br>        Iozone: Performance Test of File I/O<br>                Version $Revision: 3.493 $<br>                Compiled for 32 bit mode.<br>                Build: linux-arm <br><br>        Contributors:William Norcott, Don Capps, Isom Crawford, Kirby Collins<br>                     Al Slater, Scott Rhine, Mike Wisner, Ken Goss<br>                     Steve Landherr, Brad Smith, Mark Kelly, Dr. Alain CYR,<br>                     Randy Dunlap, Mark Montague, Dan Million, Gavin Brebner,<br>                     Jean-Marc Zucconi, Jeff Blomberg, Benny Halevy, Dave Boone,<br>                     Erik Habbinga, Kris Strecker, Walter Wong, Joshua Root,<br>                     Fabrice Bacchella, Zhenghua Xue, Qin Li, Darren Sawyer,<br>                     Vangel Bojaxhi, Ben England, Vikentsi Lapa,<br>                     Alexey Skidanov, Sudhir Kumar.<br><br>        Run began: Fri Jun 10 19:34:04 2022<br><br>        Auto Mode<br>        Cross over of record size disabled.<br>        Include fsync in write timing<br>        Include close in write timing<br>        O_DIRECT feature enabled<br>        No retest option selected<br>        Record Size 1024 kB<br>        File size set to 1048576 kB<br>        Setting no_unlink<br>        Command line used: ./iozone -azecI -+n -L64 -S32 -r1m -s1024m -i0 -i1 -i2 -w -f /data/iozonetest.bin<br>        Output is in kBytes/sec<br>        Time Resolution = 0.000001 seconds.<br>        Processor cache size set to 32 kBytes.<br>        Processor cache line size set to 64 bytes.<br>        File stride size set to 17 * record size.<br>                                                              random    random     bkwd    record    stride                                    <br>              kB  reclen    write  rewrite    read    reread    read     write     read   rewrite      read   fwrite frewrite    fread  freread<br>         1048576    1024   150737        0   210429        0   208681   173348                                                                <br><br>iozone test complete.<br>console:/data/local/tmp # <br></code></pre></td></tr></table></figure><p>从结果来看，写速度为150MB&#x2F;s，读速度为210MB&#x2F;s，随机读速度为208MB&#x2F;s。　随机写速度为 173MB&#x2F;s。</p><p>重复测试几次结果差不多，读的速度基本跟 dd 的一致。写入比 dd 的快了一倍几，这里面的差距待研究，可能跟参数设置有关。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./iozone -azecI -+n -L64 -S32 -r1m -s1024m -i0 -i1 -i2 -w -f /data/iozonetest.bin [-Rb /sdcard/emmc_test.xls] <br></code></pre></td></tr></table></figure><p>各个参数定义如下：</p><p>a: 使用全自动模式。生成涵盖所有测试操作的输出，记录大小为4k到16M，文件大小为64k到512M。</p><p>z: 与-a一起使用以测试所有可能的记录大小。通常，Iozone在全自动模式下使用时会忽略对非常大的文件的小记录大小的测试。此选项强制iozone在自动测试中也包括小记录大小。</p><p>e: 在时间计算中包括flush（fsync，fflush）</p><p>c: 在计时计算中包括close（）。 仅当您怀疑当前正在测试的操作系统中的close（）被破坏时，这才有用。 它对于NFS3测试也很有用，可以帮助识别nfs3_commit是否运行良好。</p><p>I: 对所有文件操作使用DIRECT I&#x2F;O. 告诉文件系统所有操作都绕过缓冲区缓存并直接转到磁盘。 这也将在VxFS上使用VX_DIRECT，在Linux上使用O_DIRECT，在Solaris上使用directio（）。</p><p>-+n: 没有选择重新测试。使用此选项可防止重新测试运行。</p><p>L64: Set processor cache line size to 64 Bytes</p><p>S32: Set processor cache size to 32KBytes</p><p>r2m: block size 指定一次写入&#x2F;读出的块大小：1M</p><p>s1024m: 用于指定要测试的文件的大小：1024M</p><p>-i N 用来选择测试项, 比如Read&#x2F;Write&#x2F;Random 比较常用的是0 1 2,可以指定成-i 0 -i 1 -i2.这些别的详细内容请查man</p><p>  0&#x3D;write&#x2F;rewrite</p><p>  1&#x3D;read&#x2F;re-read</p><p>  2&#x3D;random-read&#x2F;write</p><p>  3&#x3D;Read-backwards</p><p>  4&#x3D;Re-write-record</p><p>  5&#x3D;stride-read</p><p>  6&#x3D;fwrite&#x2F;re-fwrite</p><p>  7&#x3D;fread&#x2F;Re-fread</p><p>  8&#x3D;random mix</p><p>  9&#x3D;pwrite&#x2F;Re-pwrite</p><p>  10&#x3D;pread&#x2F;Re-pread</p><p>  11&#x3D;pwritev&#x2F;Re-pwritev</p><p>  12&#x3D;preadv&#x2F;Re-preadv</p><p>-+b 400000,30000: burst size 400000KBytes,sleep between burst 30000ms</p><p>w: 当临时文件使用完毕时不删除它们。把它们留在文件系统中。</p><p>f: 指定测试文件的名字(这个文件必须指定你要测试的那个硬件中)</p><p>可选参数：</p><p>R: Generate Excel report</p><p>b: Filename Create Excel worksheet file,emmc_test.xls</p><p>注意：</p><p>根据测试文件大小的不同，iozone 磁盘读写性能的测试方法主要包括1倍内存测试和2倍内存测试（避免缓存的影响）。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://qiushao.net/2020/02/12/Android/emmc-performance-test/index.html">Android-emmc性能测试 | 一叶知秋</a></p><p><a href="https://github.com/axboe/fio">axboe&#x2F;fio: Flexible I&#x2F;O Tester</a></p><p><a href="https://github.com/DevriesL/RaptorMark">DevriesL&#x2F;RaptorMark</a></p><p><a href="https://www.iozone.org/">Iozone Filesystem Benchmark</a></p><p><a href="https://www.iozone.org/src/current/">iozone: Index of &#x2F;src&#x2F;current</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;记于 2022 年 9 月 15 日&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考&lt;a</summary>
        
      
    
    
    
    <category term="Android性能优化" scheme="https://iwesley.top/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="EMMC" scheme="https://iwesley.top/tags/EMMC/"/>
    
    <category term="性能工具" scheme="https://iwesley.top/tags/%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>btrace2.0使用方法</title>
    <link href="https://iwesley.top/article/788e44fe/"/>
    <id>https://iwesley.top/article/788e44fe/</id>
    <published>2025-05-02T09:32:42.000Z</published>
    <updated>2025-05-02T09:50:02.236Z</updated>
    
    <content type="html"><![CDATA[<p>2022 年我研究安卓性能优化的时候，写过一篇：<a href="https://iwesley.top/article/69f32e87/">btrace1.0使用方法 - Wesley’s Blog</a>，现在 brace 进化到 2.0 了，让我们一起来看看如何使用。</p><p>具体的接入流程可以看官方文档：</p><p><a href="https://github.com/bytedance/btrace">bytedance&#x2F;btrace: 🔥🔥 btrace(AKA RheaTrace) is a high performance Android trace tool which is based on Perfetto, it support to define custom events automatically during building apk and using bhook to provider more native events like Render&#x2F;Binder&#x2F;IO etc.</a></p><p>我这里主要记录一下接入的一些报错问题：</p><p>目前最新版本是2.0.3-rc03</p><p>项目的gradle版本是7.0.2，gradle plugin是7.0.0</p><h2 id="编译报错"><a href="#编译报错" class="headerlink" title="编译报错"></a>编译报错</h2><blockquote><p>org.gradle.workers.WorkerExecutionException: There was a failure while executing work items</p><p>​at org.gradle.workers.internal.DefaultWorkerExecutor.workerExecutionException(DefaultWorkerExecutor.java:270)</p><p>​at org.gradle.workers.internal.DefaultWorkerExecutor.await(DefaultWorkerExecutor.java:252)</p><p>​at com.android.build.gradle.internal.tasks.DexArchiveBuilderTaskDelegate.doProcess(DexArchiveBuilderTaskDelegate.kt:227)</p><p>​at com.android.build.gradle.internal.tasks.DexArchiveBuilderTask.doTaskAction(DexArchiveBuilderTask.kt:256)</p><p>​at com.android.build.gradle.internal.tasks.NewIncrementalTask$taskAction$$inlined$recordTaskAction$1.invoke(BaseTask.kt:66)</p><p>​at com.android.build.gradle.internal.tasks.Blocks.recordSpan(Blocks.java:51)</p><p>Caused by: com.android.tools.r8.CompilationFailedException: <strong>Compilation failed to complete</strong>, position: Lcom&#x2F;xxx&#x2F;web&#x2F;CommonHeader;<init>()V, origin: D:\Project\p_dev\app\build\intermediates\transforms\analyticsTrack\Production\release\720.jar:com&#x2F;xxx&#x2F;web&#x2F;CommonHeader.class</p></blockquote><p>需要关注<strong>Compilation failed to complete</strong>后面的类</p><p>如果哪个类报错就可以加入下面的配置，路径”${project.rootDir}&#x2F;trace-filter&#x2F;traceFilter.txt”</p><p><a href="https://github.com/bytedance/btrace/blob/master/GRADLE_CONFIG.MD">btrace&#x2F;GRADLE_CONFIG.MD at master · bytedance&#x2F;btrace</a></p><p>注意：allowpackage必须先配置，blockpackage必须在其子包下面，可以是类或者包名</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">package</span>]<br><span class="hljs-string">-allowpackage</span> <span class="hljs-string">com</span><br><span class="hljs-string">-allowpackage</span> <span class="hljs-string">org</span><br><span class="hljs-string">-allowpackage</span> <span class="hljs-string">androidx</span><br><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">androidx/exifinterface/media</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">com/google/android/exoplayer2/ui</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">com/xxx/web/CommonHeader</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">org/bouncycastle/jcajce/provider/asymmetric/x509</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">org/bouncycastle/jcajce/provider/asymmetric/dh</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">com/nineoldandroids/util</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">org/bouncycastle/jce/provider/JCEDHPublicKey</span><br><span class="hljs-comment"># org/bouncycastle/jce/provider/X509CertificateObject</span><br><span class="hljs-string">-blockpackage</span> <span class="hljs-string">org/bouncycastle/jce/provider</span><br></code></pre></td></tr></table></figure><h3 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h3><p>如果是windows用户，traceFilter.txt换行符必须改为LF</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>com&#x2F;bytedance&#x2F;rheatrace&#x2F;plugin&#x2F;compiling&#x2F;filter&#x2F;RheaTraceMethodFilter.kt</p><p>parseTraceFilterFile</p><p>methodKeepStr.trim { it &lt;&#x3D; ‘ ‘ }.replace(“&#x2F;“, “.”).split(“\n”).toTypedArray()</p><p>这里只替换了\n，没有替换\r，会导致解析出来的包名带有\r，导致checkPath失败。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkPath</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">if</span> (allowPackages.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (blockPath <span class="hljs-keyword">in</span> blockPackages) &#123;<br>        <span class="hljs-keyword">var</span> isContain = <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">for</span> (allowPackage <span class="hljs-keyword">in</span> allowPackages) &#123;<br>            <span class="hljs-keyword">if</span> (blockPath == allowPackage) &#123;<br>                RheaLog.e(TAG, <span class="hljs-string">&quot;blockpackage cannot be equal to allowpackage:%s&quot;</span>, blockPath)<br>            &#125;<br>            <span class="hljs-keyword">if</span> (blockPath.startsWith(allowPackage)) &#123;<br>                isContain = <span class="hljs-literal">true</span><br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!isContain) &#123;<br>            <span class="hljs-keyword">throw</span> GradleException(<span class="hljs-string">&quot;allowpackage do not contains <span class="hljs-variable">$blockPath</span>&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/7350256387161047077">BTrace和Perfetto如何分析性能手把手教你使用BTrace和Perfetto分析性能 高级android开发工 - 掘金</a></p><p><a href="https://mvnrepository.com/artifact/com.bytedance.btrace/rhea-gradle-plugin">Maven Repository: com.bytedance.btrace » rhea-gradle-plugin</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;2022 年我研究安卓性能优化的时候，写过一篇：&lt;a href=&quot;https://iwesley.top/article/69f32e87/&quot;&gt;btrace1.0使用方法 - Wesley’s Blog&lt;/a&gt;，现在 brace 进化到 2.0</summary>
        
      
    
    
    
    <category term="Android性能优化" scheme="https://iwesley.top/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="性能优化" scheme="https://iwesley.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="btrace" scheme="https://iwesley.top/tags/btrace/"/>
    
    <category term="systrace" scheme="https://iwesley.top/tags/systrace/"/>
    
    <category term="perfetto" scheme="https://iwesley.top/tags/perfetto/"/>
    
  </entry>
  
  <entry>
    <title>btrace1.0使用方法</title>
    <link href="https://iwesley.top/article/69f32e87/"/>
    <id>https://iwesley.top/article/69f32e87/</id>
    <published>2025-05-02T08:35:23.000Z</published>
    <updated>2025-05-02T09:30:00.285Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记于 2022 年 6 月 24 日</p></blockquote><p><strong>注意：目前仅限于macos和linux使用</strong></p><p><a href="https://github.com/bytedance/btrace/blob/master/README.zh-CN.md">btrace&#x2F;README.zh-CN.md at master · bytedance&#x2F;btrace · GitHub</a></p><p>btrace(又名 RheaTrace) 是一个基于 <a href="https://developer.android.com/topic/performance/tracing">Systrace</a> 实现的高性能 Android trace 工具，它支持在 App 编译期间自动注入自定义事件，并使用 <a href="https://github.com/bytedance/bhook">bhook</a> 额外提供 IO 等 native 事件。</p><h2 id="关键特征"><a href="#关键特征" class="headerlink" title="关键特征"></a>关键特征</h2><p>支持自动注入自定义事件，在编译 Apk 期间为 App 方法自动注入Trace#beginSection(String) 和 Trace#endSection()。</p><p>提供额外 IO 等 native 事件，方便定位耗时原因。</p><p>支持仅采集主线程 trace 事件。</p><p>使用便捷，稳定性高，性能优于 Systrace。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><strong>注意：存储权限要申请</strong></p><p>自定义的application必须有以下代码，否则会导致btrace插入初始化代码失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@OverRide</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachBaseContext</span><span class="hljs-params">(Context base)</span> &#123;<br>     <span class="hljs-built_in">super</span>.attachBaseContext(base);<br>&#125;<br></code></pre></td></tr></table></figure><p>在您项目根目录下 build.gradle 文件中增加 rhea-gradle-plugin 作为依赖。</p><p>注意：btrace版本号可以在这里查询：<a href="https://search.maven.org/">https://search.maven.org/</a> 如果打不开可以在阿里云查询：<a href="https://developer.aliyun.com/mvn/search">https://developer.aliyun.com/mvn/search</a></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250502163842049.png" alt="image-20250502163841997"></p><p>目前版本号是1.0.2</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Groovy">buildscript &#123;<br>    repositories &#123;<br>        ...<br>        mavenCentral()<br>        ...<br>    &#125;<br>    dependencies &#123;<br>        classpath <span class="hljs-string">&#x27;com.bytedance.btrace:rhea-gradle-plugin:1.0.2&#x27;</span><br>    &#125;<br>&#125;<br><br>allprojects &#123;<br>    repositories &#123;<br>        ...<br>        mavenCentral()<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着在 app&#x2F;build.gradle 文件中应用如下所示插件和依赖。</p><h3 id="androidx项目"><a href="#androidx项目" class="headerlink" title="androidx项目"></a>androidx项目</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Groovy">dependencies &#123;<br>    <span class="hljs-comment">//rheatrace core lib</span><br>    implementation <span class="hljs-string">&quot;com.bytedance.btrace:rhea-core:1.0.2&quot;</span><br>&#125;<br><br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;com.bytedance.rhea-trace&#x27;</span><br>rheaTrace &#123;<br><br>   compilation &#123;<br>      <span class="hljs-comment">//为减少 APK 体积, 你可以为 App 中需要跟踪的方法设置 id 以此来跟踪此自定义事件, 默认值 false。</span><br>      traceWithMethodID = <span class="hljs-literal">false</span> <br>      <span class="hljs-comment">//该文件配置决定哪些方法您不希望跟踪, 默认值 null。</span><br>      traceFilterFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/traceFilter.txt&quot;</span><br>      <span class="hljs-comment">//用特指定方法 id 来设置自定义事件名称, 默认值 null。</span><br>      applyMethodMappingFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/keep-method-id.txt&quot;</span><br>  &#125;<br><br>   runtime &#123;<br>      <span class="hljs-comment">//仅在主线程抓取跟踪事件, 默认值 false。</span><br>      mainThreadOnly <span class="hljs-literal">true</span> <br>      <span class="hljs-comment">//在 App 启动之初开始抓取跟踪事件, 默认值 true。</span><br>      startWhenAppLaunch <span class="hljs-literal">true</span><br>      <span class="hljs-comment">//指定内存存储 atrace 数据 ring buffer 的大小。</span><br>      atraceBufferSize <span class="hljs-string">&quot;500000&quot;</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="android-support项目"><a href="#android-support项目" class="headerlink" title="android-support项目"></a>android-support项目</h3><p><strong>本地需要依赖的文件：</strong> <a href="https://github.com/wesley666/source/blob/main/btrace-Android-support.zip">https://github.com/wesley666/source/blob/main/btrace-Android-support.zip</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Groovy">dependencies &#123;<br>    <span class="hljs-comment">//rheatrace core lib</span><br>    implementation <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-stdlib:1.3.72&quot;</span><br>    implementation files(<span class="hljs-string">&#x27;libs/rhea-common-1.0.2.jar&#x27;</span>)<br>    implementation files(<span class="hljs-string">&#x27;libs/rhea-core-release.aar&#x27;</span>)<br>    implementation files(<span class="hljs-string">&#x27;libs/rhea-atrace-release.aar&#x27;</span>)<br>    implementation <span class="hljs-string">&quot;com.bytedance:bytehook:1.0.3&quot;</span><br>&#125;<br><br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;com.bytedance.rhea-trace&#x27;</span><br>rheaTrace &#123;<br><br>   compilation &#123;<br>      <span class="hljs-comment">//为减少 APK 体积, 你可以为 App 中需要跟踪的方法设置 id 以此来跟踪此自定义事件, 默认值 false。</span><br>      traceWithMethodID = <span class="hljs-literal">false</span> <br>      <span class="hljs-comment">//该文件配置决定哪些方法您不希望跟踪, 默认值 null。</span><br>      traceFilterFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/traceFilter.txt&quot;</span><br>      <span class="hljs-comment">//用特指定方法 id 来设置自定义事件名称, 默认值 null。</span><br>      applyMethodMappingFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/keep-method-id.txt&quot;</span><br>  &#125;<br><br>   runtime &#123;<br>      <span class="hljs-comment">//仅在主线程抓取跟踪事件, 默认值 false。</span><br>      mainThreadOnly <span class="hljs-literal">true</span> <br>      <span class="hljs-comment">//在 App 启动之初开始抓取跟踪事件, 默认值 true。</span><br>      startWhenAppLaunch <span class="hljs-literal">true</span><br>      <span class="hljs-comment">//指定内存存储 atrace 数据 ring buffer 的大小。</span><br>      atraceBufferSize <span class="hljs-string">&quot;500000&quot;</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于 <code>rheaTrace </code>，从<a href="https://github.com/bytedance/btrace/blob/master/GRADLE_CONFIG.zh-CN.MD">RheaTrace Gradle Config</a>中了解更多信息。</p><p>最后，检测您电脑 python 版本，由于 Systrace 的关系 RheaTrace 仅支持 python 2.7 版本，请将 systrace 环境变量配置在 <em>~&#x2F;.bash_profile</em> 文件中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">export PATH=$&#123;PATH&#125;:/Users/$&#123;user_name&#125;/Library/Android/sdk/platform-tools/systrace<br></code></pre></td></tr></table></figure><p>RheaTrace使用方法请参考：</p><p><a href="https://github.com/bytedance/btrace/blob/master/README.zh-CN.md">btrace&#x2F;README.zh-CN.md at master · bytedance&#x2F;btrace · GitHub</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;记于 2022 年 6 月 24 日&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：目前仅限于macos和linux使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Android性能优化" scheme="https://iwesley.top/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="性能优化" scheme="https://iwesley.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="btrace" scheme="https://iwesley.top/tags/btrace/"/>
    
    <category term="systrace" scheme="https://iwesley.top/tags/systrace/"/>
    
  </entry>
  
  <entry>
    <title>音视频缓存数学模型</title>
    <link href="https://iwesley.top/article/36f6f986/"/>
    <id>https://iwesley.top/article/36f6f986/</id>
    <published>2025-03-16T09:55:28.000Z</published>
    <updated>2025-03-16T10:04:42.652Z</updated>
    
    <content type="html"><![CDATA[<p class="note note-success">2024年8月的笔记</p><p>播放器作为消费者，缓存作为生产者。</p><h2 id="进入缓冲一次"><a href="#进入缓冲一次" class="headerlink" title="进入缓冲一次"></a>进入缓冲一次</h2><p>设消费者速率为v1，生产者为v2，视频长度为l，x为生产者至少距离消费者多远才能保证在播完视频前两者重合。实际上就是一个追及问题。</p><p>v1<em>t &#x3D; v2</em>t + x，即 l &#x3D; v2*l&#x2F;v1 + x，因为播放器速度是1，继续简化得 x &#x3D; l(1 - v2)</p><p>如果v2大于1，即满足消费者需求时，可以流畅播放。</p><p>设l是一部45分钟的电视剧，即x &#x3D; 45<em>60</em>(1 - v2)</p><p>如果v2是1，即1s可以缓存1s时长视频，则x &#x3D; 0</p><p>v2是0.9，即1s可以缓存0.9s时长视频，则 x &#x3D; 270，意味着要提前缓存270s的视频才可以后续不进入缓冲状态。</p><p>同理，v2&#x3D;0.8，x&#x3D; 540</p><p>………….</p><p>v2 &#x3D; 0.1，x&#x3D;2430</p><p>斜率是-2700，意味着每变化百分之0.1，缓存长度都要增加270s。</p><p>拿v2&#x3D;0.9，x&#x3D; 270作为例子，要提前缓存270s，需要花费的时间是t&#x3D;270&#x2F;0.9&#x3D;300s</p><p>同理，v2&#x3D;0.8，x&#x3D; 540，t&#x3D;540&#x2F;0.8&#x3D;675s</p><p>……..</p><p>v2 &#x3D; 0.1，x&#x3D;2430,t&#x3D;2430&#x2F;0.1&#x3D;24300s&#x3D;405分钟</p><h2 id="进入缓冲多次"><a href="#进入缓冲多次" class="headerlink" title="进入缓冲多次"></a>进入缓冲多次</h2><p>实际上，用户是不能容忍等这么久的，所以意味着播放开始后会反复进入缓冲状态。</p><p>假设缓存1s播1s，</p><p>v2&#x3D;1，是可以正常播放</p><p>v2&#x3D;0.9，则用户要等待时长为 1&#x2F;0.9&#x3D;1.1111s，先缓存1s，则平均1&#x2F;（1-0.9）&#x3D;10s进入缓冲状态，每次1.1111s</p><p>v2&#x3D;0.8，则用户要等待时长为 1&#x2F;0.8&#x3D;1.25s，先缓存1s，则平均1&#x2F;（1-0.8）&#x3D;5s进入缓冲状态，每次1.25s</p><p>…….</p><p>v2&#x3D;0.1，则用户要等待时长为 1&#x2F;0.1&#x3D;10s，先缓存1s，则平均1&#x2F;（1-0.1）&#x3D;1.1111s进入缓冲状态，每次10s</p><p>同理每次缓存多1s再播放，都会增加一倍进入缓冲的时间和等待时间。</p><p>意味着，如果通过多线程不能显著提高v2速度超过1，对用户来说都是卡顿，无法忍受的。</p><p>当然，上面只是一个理论模型，实际上要复杂一些，因为每个ts包含的播放时间是不一样的。</p><h2 id="情况分析"><a href="#情况分析" class="headerlink" title="情况分析"></a>情况分析</h2><p>若带宽小于CDN速度，即v2总是小于v1，这样无论怎么优化都会卡顿。</p><p>若带宽大于CDN速度，若v2大于v1则可以正常播放；若单线程不能满足v2大于v1，多线程时v2大于v1，也可以正常播放。</p><h2 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h2><p>对于下载时间小于ts文件时长的，则串行下载，不需要并发。</p><p>以下是针对CDN速度小于网络带宽的：</p><h3 id="1-初始下载设置"><a href="#1-初始下载设置" class="headerlink" title="1. 初始下载设置"></a>1. <strong>初始下载设置</strong></h3><ul><li><strong>初始并发数</strong>：从1个文件开始下载。</li><li><strong>监控下载速度</strong>：监控下载速度和记录最大下载速度。</li></ul><h3 id="2-逐步增加并发"><a href="#2-逐步增加并发" class="headerlink" title="2. 逐步增加并发"></a>2. 逐步增加并发</h3><ul><li><strong>逐步增加</strong>：下载成功后，增加一个并发下载任务。</li><li><strong>监控变化</strong>：每次增加并发后，观察单个文件的下载速度变化。</li></ul><h3 id="3-检测瓶颈"><a href="#3-检测瓶颈" class="headerlink" title="3. 检测瓶颈"></a>3. <strong>检测瓶颈</strong></h3><ul><li><strong>观察限速</strong>：当下载速度达到某个稳定值（和最大下载速度相比不超过百分之十），或者单个文件下载速度显著下降时，说明可能触摸到了带宽上限或服务器限速。</li><li><strong>回退优化</strong>：如果发现并发数增加反而导致下载速度下降，要减少并发数，找到一个最佳的下载量。</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p class=&quot;note note-success&quot;&gt;2024年8月的笔记&lt;/p&gt;

&lt;p&gt;播放器作为消费者，缓存作为生产者。&lt;/p&gt;
&lt;h2 id=&quot;进入缓冲一次&quot;&gt;&lt;a href=&quot;#进入缓冲一次&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="音视频" scheme="https://iwesley.top/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
    <category term="音视频" scheme="https://iwesley.top/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>安卓屏保调试</title>
    <link href="https://iwesley.top/article/98c55340/"/>
    <id>https://iwesley.top/article/98c55340/</id>
    <published>2025-03-15T06:37:37.000Z</published>
    <updated>2025-03-16T09:34:10.864Z</updated>
    
    <content type="html"><![CDATA[<p>先看一下在设置点击屏保预览后的调用链（Android 14）</p><pre><code class=" mermaid">sequenceDiagram    participant User    participant MaterialButton    participant View    participant DreamSettings    participant DreamBackend    User-&gt;&gt;MaterialButton: 点击按钮（ performClick()）    MaterialButton-&gt;&gt;View: performClick()    View-&gt;&gt;DreamSettings: 触发 onClick() (lambda 表达式)    DreamSettings-&gt;&gt;DreamBackend: 调用 preview()</code></pre><p>DreamController的打印信息</p><blockquote><p>Starting dream: name&#x3D;ComponentInfo{com.google.android.apps.tv.dreamx&#x2F;com.google.android.apps.tv.dreamx.service.Backdrop}, <strong>isPreviewMode&#x3D;true</strong>, canDoze&#x3D;false, userId&#x3D;0, reason&#x3D;’test dream’</p></blockquote><p>DreamActivity是一个不需要注册的Activity，运行在各个屏保进程。</p><p>屏保应用实现DreamService即可。</p><p>屏保状态时，后台起应用会进入 onStop 状态（该例子 onStop 里面调用了 finish）</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250315143803024.png" alt="img"></p><h2 id="退出屏保的方法"><a href="#退出屏保的方法" class="headerlink" title="退出屏保的方法"></a>退出屏保的方法</h2><h3 id="1、有触摸或者按键输入"><a href="#1、有触摸或者按键输入" class="headerlink" title="1、有触摸或者按键输入"></a>1、有触摸或者按键输入</h3><h3 id="2、配置config-dismissDreamOnActivityStart-为-true-则会在新-activity-起来后退出屏保"><a href="#2、配置config-dismissDreamOnActivityStart-为-true-则会在新-activity-起来后退出屏保" class="headerlink" title="2、配置config_dismissDreamOnActivityStart 为 true 则会在新 activity 起来后退出屏保"></a>2、配置config_dismissDreamOnActivityStart 为 true 则会在新 activity 起来后退出屏保</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!-- Whether to dismiss the active dream when an activity is started. Doesn&#x27;t apply to</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">          assistant activities (ACTIVITY_TYPE_ASSISTANT) --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bool</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;config_dismissDreamOnActivityStart&quot;</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">bool</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250315143803153.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250315143803189.png" alt="img"></p><h3 id="3、跨进程调用DreamManagerService-的awaken（需要系统签名）"><a href="#3、跨进程调用DreamManagerService-的awaken（需要系统签名）" class="headerlink" title="3、跨进程调用DreamManagerService 的awaken（需要系统签名）"></a>3、跨进程调用DreamManagerService 的awaken（需要系统签名）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.os.IBinder<br><span class="hljs-keyword">import</span> androidx.annotation.RequiresPermission<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DreamManager</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">val</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DreamManager&quot;</span><br>    <span class="hljs-comment">//private var mDreamManager: Any? = context.getSystemService(&quot;dream&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> mDreamManager: Any? = <span class="hljs-literal">null</span><br><br>    init &#123;<br>        mDreamManager = <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">val</span> <span class="hljs-variable">dream</span> <span class="hljs-operator">=</span> Reflector.on(<span class="hljs-string">&quot;android.os.ServiceManager&quot;</span>).method(<span class="hljs-string">&quot;getService&quot;</span>, String::class.java).call&lt;Any&gt;(<span class="hljs-string">&quot;dreams&quot;</span>)<br>            Reflector.on(<span class="hljs-string">&quot;android.service.dreams.IDreamManager\$Stub&quot;</span>).method(<span class="hljs-string">&quot;asInterface&quot;</span>, IBinder::class.java).call&lt;Any&gt;(dream)<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            <span class="hljs-literal">null</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@RequiresPermission(&quot;android.permission.READ_DREAM_STATE&quot;)</span><br>    fun <span class="hljs-title function_">isDreaming</span><span class="hljs-params">()</span>: Boolean &#123;<br>        <span class="hljs-keyword">if</span> (mDreamManager == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> &#123;<br>            Reflector.with(mDreamManager!!).method(<span class="hljs-string">&quot;isDreaming&quot;</span>).call()<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@RequiresPermission(&quot;android.permission.WRITE_DREAM_STATE&quot;)</span><br>    fun <span class="hljs-title function_">stopDream</span><span class="hljs-params">()</span> &#123;<br>        mDreamManager?.let &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Reflector.with(it).method(<span class="hljs-string">&quot;awaken&quot;</span>).call&lt;Unit&gt;()<br>            &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="屏保调试命令：cmd-dreams"><a href="#屏保调试命令：cmd-dreams" class="headerlink" title="屏保调试命令：cmd dreams"></a>屏保调试命令：cmd dreams</h2><blockquote><p>roc_rk3588s_pc:&#x2F; # cmd dreams -h</p><p>Dream manager (dreams) commands:</p><p>  help</p><p>​      Print this help text.</p><p>  start-dreaming</p><p>​      Start the currently configured dream.</p><p>  stop-dreaming</p><p>​      Stops any active dream</p></blockquote><p>cmd dreams start-dreaming</p><p>cmd dreams stop-dreaming</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;先看一下在设置点击屏保预览后的调用链（Android 14）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot; mermaid&quot;&gt;sequenceDiagram
    participant User
    participant MaterialButton
   </summary>
        
      
    
    
    
    <category term="AndroidFrameworkFeature" scheme="https://iwesley.top/categories/AndroidFrameworkFeature/"/>
    
    
    <category term="DreamManagerService" scheme="https://iwesley.top/tags/DreamManagerService/"/>
    
    <category term="Framework" scheme="https://iwesley.top/tags/Framework/"/>
    
    <category term="屏保" scheme="https://iwesley.top/tags/%E5%B1%8F%E4%BF%9D/"/>
    
  </entry>
  
  <entry>
    <title>安卓内存泄露之DMA-BUF异常增长:Android Studio镜像引起DMA内存泄露</title>
    <link href="https://iwesley.top/article/f148a913/"/>
    <id>https://iwesley.top/article/f148a913/</id>
    <published>2025-03-04T13:10:58.000Z</published>
    <updated>2025-03-04T13:40:23.876Z</updated>
    
    <content type="html"><![CDATA[<p>今天用着安卓 14 的板子的时候突然系统卡死。</p><p>查看日志发现launcher都被干掉了</p><blockquote><p>03-04 06:13:35.544 7872 8479 I ActivityManager: vis BFGS 18740: com.android.launcher3 (pid 8407) service</p><p>03-04 06:13:35.544 7872 8479 I ActivityManager: com.android.launcher3&#x2F;com.android.quickstep.TouchInteractionService&lt;&#x3D;Proc{8077:com.android.systemui&#x2F;u0a70}</p><p>03-04 06:13:36.155 277 277 I lowmemorykiller: Kill ‘com.android.launcher3’ (8407), uid 10071, oom_score_adj 100 to free 39504kB rss, 46224kB swap; reason: device is low on swap (91200kB &lt; 199552kB) and thrashing (200%)</p></blockquote><p>看<code>dumpsys meminfo</code>发现DMA-BUF占了3G多（4G设备），应用free ram基本没了。</p><p>刚开始以为是scrcpy的问题。后来经调查发现是android studio的屏幕镜像问题。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>开机一段时间后</p><blockquote><p>Total RAM: 3,991,080K (status normal)</p><p>Free RAM: 1,166,810K (  124,454K cached pss +   623,088K cached kernel +   419,268K free)</p><p><strong>DMA-BUF: 1,477,628K (      876K mapped + 1,476,752K unmapped)</strong></p><p>DMA-BUF Heaps: 1,477,628K</p><p>DMA-BUF Heaps pool:   249,088K</p><p>​      GPU:   202,320K</p><p> Used RAM: 2,763,593K (1,036,373K used pss + 1,727,220K kernel)</p><p> Lost RAM:   195,490K</p><p>​     ZRAM:    72,700K physical used for   215,296K in swap (1,995,536K total swap)</p><p>   Tuning: 192 (large 512), oom   322,560K, restore limit   107,520K (high-end-gfx)</p></blockquote><p><code>cat /sys/kernel/dmabuf/buffers/*/size</code>，发现有好多483328字节的 inode</p><p><code>cat /sys/kernel/dmabuf/buffers/*/size  | grep 483328 | wc -l</code></p><p>有2957个，计算：2957*483328&#x3D;1429200896&#x3D;1.4G，和上面的结果差不多。</p><p>随便查看一个inode</p><blockquote><p>roc_rk3588s_pc:&#x2F; # lsof | grep -w 7248</p><p><a href="mailto:&#99;&#50;&#x40;&#x31;&#46;&#x31;&#45;&#115;&#x65;&#114;&#x76;&#x69;&#x63;&#101;">&#99;&#50;&#x40;&#x31;&#46;&#x31;&#45;&#115;&#x65;&#114;&#x76;&#x69;&#x63;&#101;</a>   543 mediacodec 2553u     0000                0,8       0t0       7248 &#x2F;dmabuf:system</p><p>main       4146       root 5088u     0000                0,8       0t0       7248 &#x2F;dmabuf:system</p><p>main       4146       root 5089u     0000                0,8       0t0       7248 &#x2F;dmabuf:system</p></blockquote><p><code>lsof | grep &quot;4146&quot; | grep dmabuf  | wc -l</code></p><p>有2958条这样的条目</p><p><code>main       4146       root 5973u     0000                0,8       0t0       7690 /dmabuf:system</code></p><p>和上面的数目一一对应</p><p>查看是哪一个程序</p><blockquote><p>roc_rk3588s_pc:&#x2F; # cat &#x2F;proc&#x2F;543&#x2F;cmdline</p><p>&#x2F;vendor&#x2F;bin&#x2F;hw&#x2F;<a href="mailto:&#x61;&#110;&#x64;&#114;&#111;&#x69;&#x64;&#x2e;&#104;&#x61;&#x72;&#100;&#119;&#x61;&#x72;&#101;&#46;&#x6d;&#x65;&#x64;&#105;&#x61;&#46;&#99;&#x32;&#64;&#49;&#46;&#49;&#x2d;&#x73;&#101;&#114;&#x76;&#105;&#99;&#101;">&#x61;&#110;&#x64;&#114;&#111;&#x69;&#x64;&#x2e;&#104;&#x61;&#x72;&#100;&#119;&#x61;&#x72;&#101;&#46;&#x6d;&#x65;&#x64;&#105;&#x61;&#46;&#99;&#x32;&#64;&#49;&#46;&#49;&#x2d;&#x73;&#101;&#114;&#x76;&#105;&#99;&#101;</a></p><p>roc_rk3588s_pc:&#x2F; # cat &#x2F;proc&#x2F;4146&#x2F;cmdline</p><p>app_process&#x2F;data&#x2F;local&#x2F;tmp&#x2F;.studiocom.android.tools.screensharing.Main–socket&#x3D;screen-sharing-agent-8055–flags&#x3D;16</p></blockquote><p>发现是android studio镜像导致的：应该是因为一直黑屏导致反复申请内存导致DMA-BUF泄露。</p><p>关闭Android Studio的Device Mirroring功能后，后面使用设备就正常了。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250304211421729.png" alt="img"></p><h2 id="dmabuf-dump"><a href="#dmabuf-dump" class="headerlink" title="dmabuf_dump"></a>dmabuf_dump</h2><p>通过dmabuf_dump命令可以更快地查看异常程序</p><blockquote><p>roc_rk3588s_pc:&#x2F; # dmabuf_dump -h</p><p>Usage: dmabuf_dump [-abh] [per-process&#x2F;per-buffer stats]</p><p>-a       show all dma buffers (ion) in big table, [buffer x process] grid</p><p>-b       show DMA-BUF per-buffer, per-exporter and per-device statistics</p><p>-h       show this help</p><p>​         If PID is supplied, the dmabuf information for that process is shown.</p><p>​         Per-buffer DMA-BUF stats do not take an argument.</p></blockquote><p>通过<code>dmabuf_dump</code>就可以查看各个程序DMA-BUF的占用情况（包含程序名字、pid、inode等等）或者加其他参数输出不同结果。</p><blockquote><p>roc_rk3588s_pc:&#x2F; # dmabuf_dump 4146</p><p>​            main:4146</p><p>​                  Name              Rss              Pss         nr_procs            Inode</p><p>​                system           472 kB           472 kB                1             4735</p><p>​                system           472 kB           472 kB                1             4736</p><p>​                system           472 kB           472 kB                1             4737</p><p>​               </p><p>​               ——————（省略几千行）—————-</p><p>​          </p><p>​                system           472 kB           472 kB                1             7688</p><p>​                system           472 kB           472 kB                1             7689</p><p>​                system           472 kB           472 kB                1             7690</p><p>​         PROCESS TOTAL       1395232 kB       1395232 kB</p><p>-———————</p><p>dmabuf total: 1477628 kB kernel_rss: 82396 kB userspace_rss: 1395232 kB userspace_pss: 1395232 kB</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://source.android.com/docs/core/graphics/implement-dma-buf-gpu-mem">Implement DMABUF and GPU memory accounting in Android 12  |  Android Open Source Project</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今天用着安卓 14 的板子的时候突然系统卡死。&lt;/p&gt;
&lt;p&gt;查看日志发现launcher都被干掉了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;03-04 06:13:35.544 7872 8479 I ActivityManager: vis BFGS 18740:</summary>
        
      
    
    
    
    <category term="Android性能优化" scheme="https://iwesley.top/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="内存" scheme="https://iwesley.top/tags/%E5%86%85%E5%AD%98/"/>
    
    <category term="性能优化" scheme="https://iwesley.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>安卓组件化之动态依赖功能模块</title>
    <link href="https://iwesley.top/article/67ca89d4/"/>
    <id>https://iwesley.top/article/67ca89d4/</id>
    <published>2025-03-03T10:34:03.000Z</published>
    <updated>2025-03-03T12:42:15.461Z</updated>
    
    <content type="html"><![CDATA[<p>对于拥有不同渠道的 APP 来说，可能需要集成不同的功能模块，也可能同一个功能有不同实现。最简单的方法可能是通过接口、工厂模式、 flavorImplement 和渠道自定义代码的方法来实现了。但是，如果不想建那么多渠道代码目录，需要通过一套代码来初始化模块，那么上述方法就不行了。</p><p>那么如何在不依赖模块的前提下动态调用其功能呢？</p><p>有几种方法：</p><p>1、反射、接口隔离和工厂模式</p><p>2、动态功能模块（Dynamic Feature Module），国内不适用。</p><p>3、利用 Java 的 <code>ServiceLoader</code> 机制，通过配置文件声明接口实现类。</p><p>综合考虑后决定采用反射、接口隔离和工厂模式。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>环境：agp 8.7.0，grade：8.10.2</p><h3 id="gradle：实现模块动态加载"><a href="#gradle：实现模块动态加载" class="headerlink" title="gradle：实现模块动态加载"></a>gradle：实现模块动态加载</h3><p>采用yaml文件进行功能配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#功能定义</span><br><span class="hljs-attr">features:</span><br>  <span class="hljs-attr">featureA:</span><br>    <span class="hljs-comment">#默认配置</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;:feature:featureA&#x27;</span> <span class="hljs-comment">#模块名字</span><br>    <span class="hljs-comment">#两个列表优先级最高，但不能同时包含一样的flavor</span><br>    <span class="hljs-comment">#如果enable为true，则建议使用disableFlavorsList。反之，亦然。</span><br>    <span class="hljs-attr">enableFlavorsList:</span> [<span class="hljs-string">demo</span>, <span class="hljs-string">companyA</span>, <span class="hljs-string">companyB</span>]<br>    <span class="hljs-attr">disableFlavorsList:</span> []<br></code></pre></td></tr></table></figure><p>libs.versions.toml</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">snakeyaml</span> = <span class="hljs-string">&quot;1.33&quot;</span><br><span class="hljs-attr">snakeyaml</span> = &#123; module = <span class="hljs-string">&quot;org.yaml:snakeyaml&quot;</span>, version.ref = <span class="hljs-string">&quot;snakeyaml&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>根build.gradle</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br>buildscript &#123;<br>    <span class="hljs-comment">// 自定义 gradle 插件</span><br>    dependencies &#123;<br>        <span class="hljs-comment">//classpath(libs.plugin)</span><br>        classpath libs.snakeyaml <span class="hljs-comment">// 添加 YAML 解析库</span><br>    &#125;<br>&#125;<br><br>plugins &#123;<br>    alias(libs.plugins.android.application) apply <span class="hljs-literal">false</span><br>    alias(libs.plugins.kotlin.android) apply <span class="hljs-literal">false</span><br>    alias(libs.plugins.android.library) apply <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>app build.gradle （根据配置动态依赖模块实现）</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">//Yaml放在其他xxx.gradle import会报找不到</span><br><span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml<br>ext &#123;<br>    loadYamlConfig = &#123; String fileName -&gt;<br>        <span class="hljs-keyword">def</span> configFile = file(fileName)<br>        <span class="hljs-keyword">if</span> (!configFile.exists()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GradleException(<span class="hljs-string">&quot;YAML config file not found: $&#123;configFile.absolutePath&#125;&quot;</span>)<br>        &#125;<br>        <span class="hljs-keyword">def</span> yaml = <span class="hljs-keyword">new</span> Yaml()<br>        <span class="hljs-keyword">def</span> config<br>        <span class="hljs-keyword">try</span> &#123;<br>            configFile.withReader &#123; reader -&gt;<br>                config = yaml.load(reader)<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GradleException(<span class="hljs-string">&quot;Failed to parse YAML file: $&#123;configFile.name&#125;&quot;</span>, e)<br>        &#125;<br>        <span class="hljs-keyword">return</span> config.asImmutable()<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">def</span> printlnRed(String msg) &#123;<br>    <span class="hljs-keyword">def</span> ANSI_RESET = <span class="hljs-string">&quot;\u001B[0m&quot;</span><br>    <span class="hljs-keyword">def</span> ANSI_RED = <span class="hljs-string">&quot;\u001B[31m&quot;</span><br>    println(<span class="hljs-string">&quot;$&#123;ANSI_RED&#125;$&#123;msg&#125;$&#123;ANSI_RESET&#125;&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">def</span> featureConfig = loadYamlConfig(<span class="hljs-string">&quot;feature_config.yaml&quot;</span>)<br>println(<span class="hljs-string">&quot;featureConfig: $&#123;featureConfig&#125;&quot;</span>)<br>afterEvaluate &#123;<br>    android.applicationVariants.configureEach &#123; variant -&gt;<br>        <span class="hljs-keyword">def</span> flavorCompanyName = variant.productFlavors.find &#123; it.dimension == <span class="hljs-string">&quot;COMPANY&quot;</span> &#125;?.name<br>        if (!flavorCompanyName) &#123;<br>            throw new GradleException(<span class="hljs-string">&quot;Variant $&#123;variant.name&#125; has no COMPANY flavor!&quot;</span>)<br>        &#125;<br>        println(<span class="hljs-string">&quot;variant.name:$&#123;variant.name&#125; variant.flavorName:$&#123;variant.flavorName&#125;&quot;</span>)<br>        featureConfig.features.each &#123; featureKey, defaultConfig  -&gt;<br>            def featureName = defaultConfig.name<br>            boolean isEnabled = defaultConfig.enable<br>            def enableFlavorsList = defaultConfig.enableFlavorsList<br>            def disableFlavorsList = defaultConfig.disableFlavorsList<br>            boolean hasFound = false<br>            for (flavor in enableFlavorsList) &#123;<br>                if (flavor == flavorCompanyName) &#123;<br>                    isEnabled = true<br>                    println(<span class="hljs-string">&quot;enable in enableFlavorsList&quot;</span>)<br>                    hasFound = true<br>                    break<br>                &#125;<br>            &#125;<br>            for (flavor in disableFlavorsList) &#123;<br>                if (flavor == flavorCompanyName) &#123;<br>                    if (hasFound) &#123;<br>                        throw new GradleException(<span class="hljs-string">&quot;Feature $featureKey in flavor $flavorCompanyName must not be in both enableFlavorsList and disableFlavorsList!&quot;</span>)<br>                    &#125;<br>                    isEnabled = false<br>                    printlnRed(<span class="hljs-string">&quot;disable in disableFlavorsList&quot;</span>)<br>                    break<br>                &#125;<br>            &#125;<br>            if (isEnabled) &#123;<br>                println(<span class="hljs-string">&quot;$&#123;flavorCompanyName&#125;Implementation $&#123;featureName&#125;&quot;</span>)<br>                <span class="hljs-comment">//动态依赖模块</span><br>                dependencies.add(<span class="hljs-string">&quot;$&#123;flavorCompanyName&#125;Implementation&quot;</span>, project(featureName))<br>            &#125; else &#123;<br>                printlnRed(<span class="hljs-string">&quot;$&#123;variant.name&#125; $&#123;flavorCompanyName&#125; Not Implementation $&#123;featureName&#125;&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模块实现"><a href="#模块实现" class="headerlink" title="模块实现"></a>模块实现</h3><h4 id="公共模块"><a href="#公共模块" class="headerlink" title="公共模块"></a>公共模块</h4><p>定义接口</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFeature</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个 Helper</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">object</span> FeatureHelper : IFeature &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> mFeature: IFeature? = <span class="hljs-literal">null</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setFeatureImpl</span><span class="hljs-params">(feature: <span class="hljs-type">IFeature</span>?)</span></span> &#123;<br>        mFeature = feature<br>    &#125;<br>    <br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span> &#123;<br>        mFeature?.doSomething()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Module</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">       采用java类 方便使用 java 的方式进行反射</span><br><span class="hljs-comment">     * 注意：包名和类名、方法名和参数不能随意修改，否则反射会找不到</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context Context</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> IFeature</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IFeature <span class="hljs-title function_">load</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-comment">//FeatureManager实现IFeature接口</span><br>        <span class="hljs-type">FeatureManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FeatureManager</span>(context);<br>        manager.init();<br>        <span class="hljs-keyword">return</span> manager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="app-模块"><a href="#app-模块" class="headerlink" title="app 模块"></a>app 模块</h4><p><a href="https://iwesley.top/article/ba67228f/">Java反射的优雅使用 - Wesley’s Blog</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">loadFeatureModule</span><span class="hljs-params">(application: <span class="hljs-type">Application</span>)</span></span>: IFeature? &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> &#123;<br>        Reflector.on(<span class="hljs-string">&quot;com.wesley.feature.Module&quot;</span>)<br>            .method(<span class="hljs-string">&quot;load&quot;</span>, Context::<span class="hljs-keyword">class</span>.java).call&lt;IFeature&gt;(application)<br>    &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>        <span class="hljs-literal">null</span> <span class="hljs-comment">// 模块未启用或未实现</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initModules</span><span class="hljs-params">(application: <span class="hljs-type">Application</span>)</span></span> &#123;<br>  FeatureHelper.setFeatureImpl(loadFeatureModule(application))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/97498337">Android 模块解耦和的实践</a></p><p><a href="https://blog.csdn.net/fesdgasdgasdg/article/details/106888077">Android 中使用 ServiceLoader、AutoService 摔坑记录</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;对于拥有不同渠道的 APP 来说，可能需要集成不同的功能模块，也可能同一个功能有不同实现。最简单的方法可能是通过接口、工厂模式、 flavorImplement</summary>
        
      
    
    
    
    <category term="AndroidAPP架构" scheme="https://iwesley.top/categories/AndroidAPP%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="gradle" scheme="https://iwesley.top/tags/gradle/"/>
    
    <category term="组件化" scheme="https://iwesley.top/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>DLNA库Platinum新增安卓64位so编译方法</title>
    <link href="https://iwesley.top/article/4339b418/"/>
    <id>https://iwesley.top/article/4339b418/</id>
    <published>2025-01-18T04:52:15.000Z</published>
    <updated>2025-01-18T11:12:45.426Z</updated>
    
    <content type="html"><![CDATA[<p>下载代码（该仓库我已经修改相关编译错误和支持安卓 64 位 so 编译）</p><p><code>git clone https://github.com/wesley666/Platinum -b master</code></p><p>下载Neptune</p><p><code>git submodule update --init</code></p><p>下载 ndk15：</p><p><a href="https://dl.google.com/android/repository/android-ndk-r15c-linux-x86_64.zip">https://dl.google.com/android/repository/android-ndk-r15c-linux-x86_64.zip</a></p><p>建议安装 conda 环境来进行编译</p><p><a href="https://www.anaconda.com/download/success">https://www.anaconda.com/download/success</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create -n dlna  python=2.7<br><br>pip install scons<br><br>conda activate dlna<br></code></pre></td></tr></table></figure><p>编译</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">以你的路径为准，如果出现路径错误，可以改成绝对路径</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">export</span> ANDROID_NDK_ROOT=/home/wesley/ndk/android-ndk-r15c/</span> <br>export ANDROID_NDK_ROOT=~/ndk/android-ndk-r15c/ <br>scons -c target=arm-android-linux build_config=Release<br>scons target=arm-android-linux build_config=Release<br>scons -c target=arm64-android-linux build_config=Release<br>scons target=arm64-android-linux build_config=Release<br>cd Source/Platform/Android/module/platinum<br>~/ndk/android-ndk-r15c/ndk-build clean<br>~/ndk/android-ndk-r15c/ndk-build NDK_DEBUG=0<br></code></pre></td></tr></table></figure><blockquote><p>(dlna) wesley@Wesley:~&#x2F;Project&#x2F;Platinum&#x2F;Source&#x2F;Platform&#x2F;Android&#x2F;module&#x2F;platinum$ ~&#x2F;ndk&#x2F;android-ndk-r15c&#x2F;ndk-build<br>Android NDK: Found platform level in .&#x2F;project.properties. Setting APP_PLATFORM to android-14.<br>jni&#x2F;Android.mk:5: “TARGET_ARCH_ABI:armeabi”<br>jni&#x2F;Android.mk:5: “TARGET_ARCH_ABI:armeabi-v7a”<br>jni&#x2F;Android.mk:5: “TARGET_ARCH_ABI:arm64-v8a”<br>jni&#x2F;Android.mk:15: “build arm64”<br>[armeabi] Compile++ thumb: platinum-jni &lt;&#x3D; platinum-jni.cpp<br>[armeabi] StaticLibrary  : libstdc++.a<br>[armeabi] SharedLibrary  : libplatinum-jni.so<br>[armeabi] Install        : libplatinum-jni.so &#x3D;&gt; libs&#x2F;armeabi&#x2F;libplatinum-jni.so<br>[armeabi-v7a] Compile++ thumb: platinum-jni &lt;&#x3D; platinum-jni.cpp<br>[armeabi-v7a] StaticLibrary  : libstdc++.a<br>[armeabi-v7a] SharedLibrary  : libplatinum-jni.so<br>[armeabi-v7a] Install        : libplatinum-jni.so &#x3D;&gt; libs&#x2F;armeabi-v7a&#x2F;libplatinum-jni.so<br>[arm64-v8a] Compile++      : platinum-jni &lt;&#x3D; platinum-jni.cpp<br>[arm64-v8a] StaticLibrary  : libstdc++.a<br>[arm64-v8a] SharedLibrary  : libplatinum-jni.so<br>[arm64-v8a] Install        : libplatinum-jni.so &#x3D;&gt; libs&#x2F;arm64-v8a&#x2F;libplatinum-jni.so</p></blockquote><p>obj和 libs目录区别：一个用于追溯和调试，一个用于正式版发布。</p><blockquote><p>(dlna) wesley@Wesley:~&#x2F;Project&#x2F;Platinum&#x2F;Source&#x2F;Platform&#x2F;Android&#x2F;module&#x2F;platinum$ file libs&#x2F;arm64-v8a&#x2F;libplatinum-jni.so<br>libs&#x2F;arm64-v8a&#x2F;libplatinum-jni.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]&#x3D;a8cdaa3a1288bd98c13556fbd4a1499e31005091, <strong>stripped</strong></p><p>(dlna) wesley@Wesley:~&#x2F;Project&#x2F;Platinum&#x2F;Source&#x2F;Platform&#x2F;Android&#x2F;module&#x2F;platinum$ file obj&#x2F;local&#x2F;arm64-v8a&#x2F;libplatinum-jni.so<br>obj&#x2F;local&#x2F;arm64-v8a&#x2F;libplatinum-jni.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]&#x3D;a8cdaa3a1288bd98c13556fbd4a1499e31005091, <strong>with debug_info, not stripped</strong></p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;下载代码（该仓库我已经修改相关编译错误和支持安卓 64 位 so 编译）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/wesley666/Platinum -b</summary>
        
      
    
    
    
    <category term="投屏" scheme="https://iwesley.top/categories/%E6%8A%95%E5%B1%8F/"/>
    
    
    <category term="投屏" scheme="https://iwesley.top/tags/%E6%8A%95%E5%B1%8F/"/>
    
    <category term="DLNA" scheme="https://iwesley.top/tags/DLNA/"/>
    
  </entry>
  
  <entry>
    <title>安卓Activity执行finish后onNewIntent也执行了</title>
    <link href="https://iwesley.top/article/88a54bc8/"/>
    <id>https://iwesley.top/article/88a54bc8/</id>
    <published>2025-01-04T09:34:44.000Z</published>
    <updated>2025-01-04T10:36:03.481Z</updated>
    
    <content type="html"><![CDATA[<p>测试反应投屏时下一集可能播放不成功。</p><p>首先看一下日志：</p><blockquote><p>onCompletion<br>onCast<br>handlerMessage: 2<br>finish: PlayerActivity@abc7fdc<br>onPause: PlayerActivity@abc7fdc<br>onNewIntent: PlayerActivity@abc7fdc<br>onResume: PlayerActivity@abc7fdc<br>onPause: PlayerActivity@abc7fdc<br>onResume: HomeActivity@71ec50a<br>onstop: PlayerActivity@abc7fdc<br>onDestroy:PlayerActivity@abc7fdc</p></blockquote><p>看到日志时很迷惑，为什么 finish 了，安卓还会执行onNewIntent，不应该是新建一个 activity 吗？</p><p>先来看一下场景描述：</p><p>视频播完后会发送一个 finish 信息，如果 3s 内没有下一个视频进来就会执行 finish，有视频进来就会在 onNewIntent 中 remove 掉这条信息。</p><p>经过实验和详细分析后，终于找到了问题原因：</p><p>首先因为视频播放结束发了一条finish消息，finish消息没有执行时突然来了下一集的消息，这时候执行startActivty会插入一条onNewIntent消息。结果，这时候finish因为时间到了，该执行了。然后 finish 执行完后，onNewIntent 也该执行了。执行完后因为 finish 的原因， onDestroy也执行了。结果就是下一集没播完就退出来了。</p><p>解决办法：在startActivity前remove掉finish消息，比onNewIntent 的时间节点还要提前。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>面试必备：Android（9.0）Activity启动流程(一) : <a href="https://juejin.cn/post/6844903959581163528">https://juejin.cn/post/6844903959581163528</a></p><p>面试必备：Android（9.0）Activity启动流程(二) : <a href="https://juejin.cn/post/6844903959589552142">https://juejin.cn/post/6844903959589552142</a></p><p><a href="https://stackoverflow.com/questions/24639272/onnewintent-called-after-finish-executed">android - onNewIntent called after finish() executed - Stack Overflow</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;测试反应投屏时下一集可能播放不成功。&lt;/p&gt;
&lt;p&gt;首先看一下日志：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;onCompletion&lt;br&gt;onCast&lt;br&gt;handlerMessage: 2&lt;br&gt;finish:</summary>
        
      
    
    
    
    <category term="AndroidBugFix" scheme="https://iwesley.top/categories/AndroidBugFix/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="AndroidActivity" scheme="https://iwesley.top/tags/AndroidActivity/"/>
    
  </entry>
  
  <entry>
    <title>安卓应用4字节不对齐导致so加载失败</title>
    <link href="https://iwesley.top/article/18f59983/"/>
    <id>https://iwesley.top/article/18f59983/</id>
    <published>2025-01-04T03:12:24.000Z</published>
    <updated>2025-01-04T08:32:28.983Z</updated>
    
    <content type="html"><![CDATA[<p>今天把一个apk给厂商签名后直接push到机器的&#x2F;system&#x2F;app,结果运行app时显示so找不到。报错：</p><blockquote><p> java stacktrace:<br>java.lang.UnsatisfiedLinkError: Library mmkv not found; tried [&#x2F;system&#x2F;lib&#x2F;libmmkv.so, &#x2F;product&#x2F;lib&#x2F;libmmkv.so]<br>at java.lang.Runtime.loadLibrary0(Runtime.java:1101)<br>at java.lang.System.loadLibrary(System.java:1669)<br>at com.tencent.mmkv.MMKV.doInitialize(MMKV.java:226)<br>at com.tencent.mmkv.MMKV.initialize(MMKV.java:208)<br>at com.tencent.mmkv.MMKV.initialize(MMKV.java:94)<br>at com.wesley.CustomApplication.onCreate(CustomApplication.kt:14)<br>at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1154)<br>at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5871)<br>at android.app.ActivityThread.access$1100(ActivityThread.java:199)<br>at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1650)<br>at android.os.Handler.dispatchMessage(Handler.java:106)<br>at android.os.Looper.loop(Looper.java:193)<br>at android.app.ActivityThread.main(ActivityThread.java:6669)<br>at java.lang.reflect.Method.invoke(Native Method)<br>at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)<br>at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:922)  </p></blockquote><p>日志（xcrash 自己有so异常捕获，所以直到加载 mmkv 才抛出异常）</p><blockquote><p> 12-27 14:58:04.840  9717  9717 E System  : ##loadLibrary0## &#x2F;system&#x2F;app&#x2F;demo&#x2F;demo_V1.0.0(2412261921)-release-signed.apk!&#x2F;lib&#x2F;armeabi-v7a&#x2F;libxcrash.so error: dlopen failed: library “&#x2F;system&#x2F;app&#x2F;demo&#x2F;demo_V1.0.0(2412261921)-release-signed.apk!&#x2F;lib&#x2F;armeabi-v7a&#x2F;libxcrash.so” not found, and try to find so file from the lib path<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper: xcrash: NativeHandler System.loadLibrary failed<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper: java.lang.UnsatisfiedLinkError: Library xcrash not found; tried [&#x2F;system&#x2F;lib&#x2F;libxcrash.so, &#x2F;product&#x2F;lib&#x2F;libxcrash.so]<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at java.lang.Runtime.loadLibrary0(Runtime.java:1101)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at java.lang.System.loadLibrary(System.java:1669)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at xcrash.NativeHandler.initialize(NativeHandler.java:89)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at xcrash.XCrash.init(XCrash.java:189)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.wesley.base.apm.XCrashWrapper.<init>(XCrashWrapper.kt:131)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.wesley.base.apm.XCrashWrapper.<init>(XCrashWrapper.kt:17)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.wesley.CastApplication.attachBaseContext(CastApplication.kt:43)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.Application.attach(Application.java:212)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.Instrumentation.newApplication(Instrumentation.java:1121)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.LoadedApk.makeApplication(LoadedApk.java:1065)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5842)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread.access$1100(ActivityThread.java:199)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1650)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.os.Handler.dispatchMessage(Handler.java:106)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.os.Looper.loop(Looper.java:193)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread.main(ActivityThread.java:6669)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at java.lang.reflect.Method.invoke(Native Method)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:922)  </p></blockquote><p>因为安卓6开始支持直接加载apk内部so，如果编译后的 apk 内部 so 是不压缩的，那么就不需要释放到目录了。所以排除是因为不解压 so 到&#x2F;system&#x2F;app&#x2F;demo&#x2F;lib&#x2F;arm 引起的问题，虽然这样也可以解决问题。</p><blockquote><p>如果apk的minSdkVersion &gt;&#x3D; 23 并且 Android Gradle plugin &gt;&#x3D; 3.6.0情况下，打包时android:extractNativeLibs&#x3D;false，apk的so默认是不压缩的。</p><p>在minSdkVersion &lt; 23 或 Android Gradle plugin &lt; 3.6.0情况下，打包时 android:extractNativeLibs&#x3D;true，apk的so默认是压缩的。</p></blockquote><p>然后，我尝试push没有给厂商签名前的版本 apk 到机器上是正常的，那么应该是厂商签名导致 apk 发生了变化。刚好前几天碰到安卓签名问题<a href="https://iwesley.top/article/133f2b7a/">安卓15预置第三方apk时签名报错问题解决 - Wesley’s Blog</a>。然后我就用命令看了一下：<code>zipalign -c -v  4 demo_sign.apk</code></p><p><a href="https://developer.android.com/tools/zipalign">zipalign  | Android Studio  | Android Developers</a></p><p>显示：<code>Verification FAILED</code>，那就是 4 字节没有对齐。</p><p>查看签名版本<code>apksigner verify -v demo_sign.apk | grep Verified</code></p><p>只有v1签名</p><blockquote><p>~&#x2F;Project$ apksigner verify -v demo_sign.apk | grep Verified</p><p>Verified using v1 scheme (JAR signing): true</p><p>Verified using v2 scheme (APK Signature Scheme v2): false</p><p>Verified using v3 scheme (APK Signature Scheme v3): false</p><p>Verified using v3.1 scheme (APK Signature Scheme v3.1): false</p><p>Verified using v4 scheme (APK Signature Scheme v4): false</p><p>Verified for SourceStamp: false</p></blockquote><p>因为是v1签名，执行<code>zipalign -v -p 4 demo_sign.apk  demo_sign_align.apk</code>对齐4 字节不会破坏厂商的签名信息，然后push进去果然好了。</p><p>然后我又试着安装没有对齐前的，结果直接报错了：</p><blockquote><p>PS C:\Users\Wesley&gt; adb  install Y:\Project\demo_sign.apk</p><p>Performing Streamed Install</p><p>adb: failed to install Y:\Project\demo_sign.apk: Failure [INSTALL_FAILED_INVALID_APK: Failed to extract native libraries, res&#x3D;-2]</p></blockquote><p>但是系统扫描安装却是可以通过的，所以很难发现是字节不对齐引起的。</p><h2 id="深究"><a href="#深究" class="headerlink" title="深究"></a>深究</h2><p>之前直接搜索安卓java.lang.UnsatisfiedLinkError是很难找到针对这种问题的解决方法的。因为现在有了解决办法，所以换成UnsatisfiedLinkError zipalign进行谷歌搜索。结果就出来了：</p><p><a href="https://stackoverflow.com/questions/72544099/java-lang-unsatisfiedlinkerror-when-installing-as-system-app">android - java.lang.UnsatisfiedLinkError when installing as system app - Stack Overflow</a></p><p><a href="https://ask.seowhy.com/question/175285">zipflinger导致的UnsatisfiedLinkError分析 - 搜外SEO问答</a></p><p><a href="https://blog.51cto.com/u_15075514/3336070">zipflinger导致的UnsatisfiedLinkError分析_mb5ff2f24b42377的技术博客_51CTO博客</a></p><p>用 AI大模型总结一下：</p><blockquote><p>这篇文章主要分析了在Android开发中，由于升级Android Gradle Plugin (AGP) 版本导致的UnsatisfiedLinkError问题，并提供了相应的解决方案。以下是文章的主要内容总结：</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><ul><li><strong>问题现象</strong>：在Android 9.0环境下，将AGP从3.6.1升级到4.1.0后，预装在&#x2F;system&#x2F;priv-app下的APP出现了UnsatisfiedLinkError崩溃。</li><li><strong>问题原因</strong>：升级AGP后，系统在加载so文件时失败，具体表现为so文件在APK中的对齐方式有问题。</li></ul><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ul><li><strong>so文件加载流程</strong>：系统使用“!&#x2F;”分隔符来定位so文件路径，并在APK中查找对应的entry。问题出在zipalign处理上，导致so文件的对齐不正确。</li><li><strong>zipalign的作用</strong>：确保APK中所有未压缩数据在4字节边界上对齐，以便使用mmap()直接访问，减少RAM消耗。</li><li><strong>系统编译处理</strong>：Android系统在编译时会对privileged app执行uncompress-dexs操作，将压缩存储的dex文件变为不压缩存储。之后还会进行align-package操作。</li></ul><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><ul><li><strong>zipflinger工具</strong>：从AGP 4.1开始，默认在构建release版本时启用zipflinger工具进行打包。zipflinger改变了APK的打包方式，导致uncompress-dexs操作后zipalign出现问题。</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><strong>禁用zipflinger</strong>：在app工程的gradle.properties中加入配置以禁用zipflinger。</li><li><strong>不解压 dex</strong>：DONT_UNCOMPRESS_PRIV_APPS_DEXS :&#x3D; true，可能会降低 dex 加载速度。</li><li><strong>使用zip2zip工具</strong>：在最新的AOSP源码中，使用zip2zip工具来处理dex文件的解压缩，以适配zipflinger打包的APK。</li><li><strong>其他方法</strong>：包括回退AGP版本、修改系统编译脚本等，但这些方法各有优缺点。</li></ul></blockquote><p>虽然引起问题的原因不一样，但都是因为字节不对齐引起的 so 找不到。</p><p>下面来分析一下具体原因：</p><p>so加载调用栈</p><blockquote><p>ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;lang&#x2F;System.java  –&gt; System.loadLibrary</p><p>ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;lang&#x2F;Runtime.java  –&gt; Runtime.loadLibrary0 -&gt; nativeLoad</p><p>ojluni&#x2F;src&#x2F;main&#x2F;native&#x2F;Runtime.c  –&gt; Runtime_nativeLoad</p><p>art&#x2F;openjdkjvm&#x2F;OpenjdkJvm.cc  –&gt; JVM_NativeLoad</p><p>art&#x2F;runtime&#x2F;java_vm_ext.cc –&gt; JavaVMExt::LoadNativeLibrary</p><p>system&#x2F;core&#x2F;libnativeloader&#x2F;native_loader.cpp –&gt; OpenNativeLibrary</p><p>bionic&#x2F;libdl&#x2F;libdl.cpp –&gt; android_dlopen_ext</p><p>bionic&#x2F;linker&#x2F;dlfcn.cpp –&gt; __loader_android_dlopen_ext</p><p>bionic&#x2F;linker&#x2F;dlfcn.cpp –&gt; dlopen_ext</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; do_dlopen</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; find_library</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; find_libraries</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; find_library_internal</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; load_library</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; open_library</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; open_library_in_zipfile</p></blockquote><p>重点看 <code>bionic/linker/linker.cpp --&gt; open_library_in_zipfile</code> 这个函数，导致加载失败的是以下条件 <code>entry.offset % PAGE_SIZE != 0</code></p><p><a href="http://xrefandroid.com/android-9.0.0_r61/xref/bionic/linker/linker.cpp#992">http://xrefandroid.com/android-9.0.0_r61/xref/bionic/linker/linker.cpp#992</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (entry.method != kCompressStored || (entry.offset % PAGE_SIZE) != <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结来说，就是签名的时候破坏了4字节对齐，导致 so 加载失败。所以，以后碰到此类问题时，可以执行<code>zipalign -c -v  4 xxx.apk</code>先看一下是否4字节对齐。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今天把一个apk给厂商签名后直接push到机器的&amp;#x2F;system&amp;#x2F;app,结果运行app时显示so找不到。报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; java</summary>
        
      
    
    
    
    <category term="Android Build System" scheme="https://iwesley.top/categories/Android-Build-System/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="aosp编译" scheme="https://iwesley.top/tags/aosp%E7%BC%96%E8%AF%91/"/>
    
    <category term="Android.mk" scheme="https://iwesley.top/tags/Android-mk/"/>
    
    <category term="Android.bp" scheme="https://iwesley.top/tags/Android-bp/"/>
    
  </entry>
  
  <entry>
    <title>安卓多渠道apk配置不同签名</title>
    <link href="https://iwesley.top/article/611fb416/"/>
    <id>https://iwesley.top/article/611fb416/</id>
    <published>2024-12-24T13:39:40.000Z</published>
    <updated>2024-12-29T07:06:02.588Z</updated>
    
    <content type="html"><![CDATA[<p>一般签名都是放在buildTypes里面：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs groovy">...<br>android &#123;<br>    ...<br>    defaultConfig &#123;...&#125;<br>    signingConfigs &#123;<br>        release &#123;<br>            storeFile file(<span class="hljs-string">&quot;myreleasekey.keystore&quot;</span>)<br>            storePassword <span class="hljs-string">&quot;password&quot;</span><br>            keyAlias <span class="hljs-string">&quot;MyReleaseKey&quot;</span><br>            keyPassword <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>    &#125;<br>    buildTypes &#123;<br>        release &#123;<br>            ...<br>            signingConfig signingConfigs.release<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是多渠道时，使用配置的优先级从高到低分别是buildTypes、productFlavor、defaultConfig，如果按上面配置的话，根本修改不了签名。所以修改成以下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    ...<br>    signingConfigs &#123;<br>        release &#123;<br>            storeFile file(<span class="hljs-string">&quot;myreleasekey.keystore&quot;</span>)<br>            storePassword <span class="hljs-string">&quot;password&quot;</span><br>            keyAlias <span class="hljs-string">&quot;MyReleaseKey&quot;</span><br>            keyPassword <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>        demo &#123;<br>            storeFile file(<span class="hljs-string">&quot;myreleasekey.keystore&quot;</span>)<br>            storePassword <span class="hljs-string">&quot;password&quot;</span><br>            keyAlias <span class="hljs-string">&quot;MyReleaseKey&quot;</span><br>            keyPassword <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>    &#125;<br>    defaultConfig &#123;<br>        signingConfig signingConfigs.release <span class="hljs-comment">//默认签名</span><br>    &#125;<br>    buildTypes &#123;<br>        debug&#123;<br>            signingConfig <span class="hljs-literal">null</span> <span class="hljs-comment">//这里一定要置null，否则gralde会插入默认签名</span><br>        &#125;<br>        release&#123;...&#125;<br>    &#125;<br>    <span class="hljs-comment">// Specifies one flavor dimension.</span><br>    flavorDimensions <span class="hljs-string">&quot;version&quot;</span><br>    productFlavors &#123;<br>        demo &#123;<br>            dimension <span class="hljs-string">&quot;version&quot;</span><br>            applicationIdSuffix <span class="hljs-string">&quot;.demo&quot;</span><br>            versionNameSuffix <span class="hljs-string">&quot;-demo&quot;</span><br>            signingConfig signingConfigs.demo <span class="hljs-comment">//渠道签名</span><br>        &#125;<br>        full &#123;<br>            dimension <span class="hljs-string">&quot;version&quot;</span><br>            applicationIdSuffix <span class="hljs-string">&quot;.full&quot;</span><br>            versionNameSuffix <span class="hljs-string">&quot;-full&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>按上面配置完后，渠道可以按照自己需求替换签名了。特别注意debug类型那里要置<code>signingConfig null</code>，否则编译debug版本时签名会不生效，因为gradle会插入默认签名，替换掉渠道的签名。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;一般签名都是放在buildTypes里面：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="AppBuild" scheme="https://iwesley.top/categories/AppBuild/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="Android多渠道" scheme="https://iwesley.top/tags/Android%E5%A4%9A%E6%B8%A0%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>安卓15预置第三方apk时签名报错问题解决</title>
    <link href="https://iwesley.top/article/133f2b7a/"/>
    <id>https://iwesley.top/article/133f2b7a/</id>
    <published>2024-12-24T13:13:45.000Z</published>
    <updated>2024-12-29T07:06:02.588Z</updated>
    
    <content type="html"><![CDATA[<p>有同事反馈集成apk时安装失败</p><blockquote><p>PackageManager: Failed to scan &#x2F;product&#x2F;app&#x2F;test: No APK Signature Scheme v2 signature in package &#x2F;product&#x2F;app&#x2F;test&#x2F;test.apk</p></blockquote><p>查看编译后的apk签名信息</p><blockquote><p>DOES NOT VERIFY</p><p>ERROR: JAR signer CERT.RSA: JAR signature META-INF&#x2F;CERT.SF indicates the APK is signed using APK Signature Scheme v2 but no such signature was found. Signature stripped?</p></blockquote><p>但是用命令查看我的apk是正常的<code>apksigner  verify -v  test.apk  | grep Verified</code></p><blockquote><p>Verified using v1 scheme (JAR signing): true</p><p>Verified using v2 scheme (APK Signature Scheme v2): true</p><p>Verified using v3 scheme (APK Signature Scheme v3): false</p><p>Verified using v3.1 scheme (APK Signature Scheme v3.1): false</p><p>Verified using v4 scheme (APK Signature Scheme v4): false</p><p>Verified for SourceStamp: false</p></blockquote><p>那么应该是编译过程做了某些变动。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h2 id="通过预编译的方法"><a href="#通过预编译的方法" class="headerlink" title="通过预编译的方法"></a>通过预编译的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">android_app_import &#123;<br>    name: <span class="hljs-string">&quot;test&quot;</span>,<br>    apk: <span class="hljs-string">&quot;test.apk&quot;</span>,<br>    <span class="hljs-comment">// 保留apk自己的签名</span><br>    presigned: <span class="hljs-literal">true</span>,<br>    preprocessed: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 打开将放到对应分区目录的priv-app文件夹下</span><br>    <span class="hljs-comment">// privileged: true,</span><br>    <span class="hljs-comment">// 打开将放到system_ext分区</span><br>    <span class="hljs-comment">// system_ext_specific: true,</span><br>    <span class="hljs-comment">// 打开将放到product分区</span><br>    <span class="hljs-comment">// product_specific: true,</span><br>    <span class="hljs-comment">// 打开将放到vendor分区</span><br>    <span class="hljs-comment">// proprietary: true,</span><br>    <span class="hljs-comment">// odm分区</span><br>    <span class="hljs-comment">// device_specific: true</span><br>    <span class="hljs-comment">// apk优化，内置三方apk时建议关闭</span><br>    dex_preopt: &#123;<br>        enabled: <span class="hljs-literal">false</span>,<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>在安卓15上新增了<a href="http://xrefandroid.com/android-15.0.0_r1/xref/build/soong/java/app_import.go#376">app_import.go - OpenGrok cross reference for &#x2F;build&#x2F;soong&#x2F;java&#x2F;app_import.go</a></p><p>validatePresignedApk检测</p><p>如果加了presigned，但不加preprocessed，同时targetSdk大于等于30就会编译报错，更加方便开发者定位问题：</p><blockquote><p>[100% 5&#x2F;5 0s remaining] Check presigned apkFAILED: out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stampbuild&#x2F;soong&#x2F;scripts&#x2F;check_prebuilt_presigned_apk.py –aapt2 out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;aapt2 –zipalign out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;zipalign packages&#x2F;test&#x2F;test.apk out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stamppackages&#x2F;test&#x2F;test.apk: Prebuilt, presigned apks with targetSdkVersion &gt;&#x3D; 30 (or a codename targetSdkVersion) must set <strong>preprocessed: true</strong> in the Android.bp definition (because they must be signed with signature v2, and the build system would wreck that signature otherwise)</p></blockquote><p>另外apk里面的so不能压缩，否则会报错</p><blockquote><p>FAILED: out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stamp</p><p>build&#x2F;soong&#x2F;scripts&#x2F;check_prebuilt_presigned_apk.py –aapt2 out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;aapt2 –zipalign out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;zipalign –preprocessed packages&#x2F;test&#x2F;test.apk out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stamp</p><p>packages&#x2F;test&#x2F;test.apk: <strong>Contains compressed JNI libraries</strong></p></blockquote><p>因为安卓6开始支持直接加载apk里面的so，如果压缩的话，预编译会在apk内部进行解压，那么就会破坏apk签名。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412242117760.png" alt="img"></p><p>其实，如果apk的minSdkVersion &gt;&#x3D; 23 并且 Android Gradle plugin &gt;&#x3D; 3.6.0情况下，打包时android:extractNativeLibs&#x3D;false，apk的so默认是不压缩的。</p><p>在minSdkVersion &lt; 23 或 Android Gradle plugin &lt; 3.6.0情况下，打包时 android:extractNativeLibs&#x3D;true，apk的so默认是压缩的。</p><p>参考：<a href="https://juejin.cn/post/6943920550125420558">https://juejin.cn/post/6943920550125420558</a></p><p><a href="https://blog.csdn.net/yzyeilin/article/details/139968840">Android13解决android_app_import内置第三方APK安装失败问题_but no such signature was found. signature strippe-CSDN博客</a></p><p><a href="https://blog.csdn.net/chuyouyinghe/article/details/131001532">浅谈extractNativeLibs</a></p><h2 id="通过直接拷贝的方法"><a href="#通过直接拷贝的方法" class="headerlink" title="通过直接拷贝的方法"></a>通过直接拷贝的方法</h2><p>参考：<a href="https://blog.csdn.net/wangwei6227/article/details/123727372">https://blog.csdn.net/wangwei6227/article/details/123727372</a></p><p>同样要注意apk so的压缩问题，如果是压缩过的，必须提取出来，并拷贝到apk机器目录。</p><h2 id="可能遇到的selinux权限问题"><a href="#可能遇到的selinux权限问题" class="headerlink" title="可能遇到的selinux权限问题"></a>可能遇到的selinux权限问题</h2><blockquote><p>01-01 12:00:39.520000  5326  5326 W om.skype.raider: type&#x3D;1400 audit(0.0:64): avc: denied { read } for name&#x3D;”libSkypeAndroid.so” dev&#x3D;”mmcblk0p22” ino&#x3D;770074 scontext&#x3D;u:r:untrusted_app:s0:c512,c768 tcontext&#x3D;u:object_r:system_data_file:s0 tclass&#x3D;file permissive&#x3D;0</p></blockquote><p>#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; untrusted_app.te &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>allow untrusted_app system_data_file:file r_file_perms;</p><p>参考：<a href="https://www.codeleading.com/article/6471686269/">采用Signature Scheme v2签名方式的APK预置失败 </a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;有同事反馈集成apk时安装失败&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PackageManager: Failed to scan &amp;#x2F;product&amp;#x2F;app&amp;#x2F;test: No APK Signature Scheme v2</summary>
        
      
    
    
    
    <category term="Android Build System" scheme="https://iwesley.top/categories/Android-Build-System/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="aosp编译" scheme="https://iwesley.top/tags/aosp%E7%BC%96%E8%AF%91/"/>
    
    <category term="Android.mk" scheme="https://iwesley.top/tags/Android-mk/"/>
    
    <category term="Android.bp" scheme="https://iwesley.top/tags/Android-bp/"/>
    
  </entry>
  
  <entry>
    <title>咪咕视频DLNA投屏跳集问题分析</title>
    <link href="https://iwesley.top/article/73728aea/"/>
    <id>https://iwesley.top/article/73728aea/</id>
    <published>2024-12-08T12:08:50.000Z</published>
    <updated>2024-12-24T12:51:46.756Z</updated>
    
    <content type="html"><![CDATA[<p>QA在测试公司投屏应用时，发现咪咕视频DLNA投剧集时有时候会跳过一集直接播下一集的问题。</p><p>尝试自行分析解决不了后，我决定分析一下竞品应用：当贝投屏，结果发现它是正常的。由于当贝投屏是个黑盒子，所以决定抓包看一下。</p><p><a href="https://www.androidtcpdump.com/android-tcpdump/downloads">Android tcpdump</a></p><p><code>tcpdump tcp -i any -p -s 0 -w /sdcard/capture.pcap</code></p><h2 id="当贝投屏抓包分析"><a href="#当贝投屏抓包分析" class="headerlink" title="当贝投屏抓包分析"></a>当贝投屏抓包分析</h2><p>运行命令后开始投剧集到当贝投屏并通过进度条操作触发切集，把抓包文件adb pull出来放到WireShark去分析。</p><p>由于DLNA建连后的命令交互是通过http的，所以这里只显示http协议，并通过搜索SetAVTransportURI定位到投屏时间点。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082026499-wireshark.jpg" alt="img_v3_02h8_65bf3dab-7966-48b1-bdaa-8343bca7898g"></p><p>首先看一下即将切集前手机端获取到的信息：</p><p>可以看到影片的时长和进度都有值，快播完了。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082039758-wireshark.jpg" alt="img_v3_02h8_fe3604f0-5242-41b8-b950-fab2c62663dg"></p><p>切集时：</p><p>手机端获取到的播放状态是stopped，影片时长和进度都是0</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082042875.jpg" alt="img_v3_02h8_954cb5c2-08c9-47ec-8d47-0c14b51b600g"></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082041740.jpg" alt="img_v3_02h8_613904b8-aa1e-4128-b904-164ff238ed3g"></p><p>切集后：</p><p>手机端获取的信息正常</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082044535.jpg" alt="img_v3_02h8_f8a5dc01-ae9d-47d8-9abc-0a395a68bd8g"></p><h2 id="我司投屏抓包分析"><a href="#我司投屏抓包分析" class="headerlink" title="我司投屏抓包分析"></a>我司投屏抓包分析</h2><p>切集前：</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082045162.jpg" alt="img_v3_02h8_ef543816-16f1-4e55-a74b-e703ef21e46g"></p><p>切集后：</p><p>获取到的影片进度和时长都是上个视频的信息，导致咪咕产生了误判断，认为这一集也播完了，造成跳集。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082045275.jpg" alt="img_v3_02h8_dac2eede-52f2-4137-8b42-18b7081eaaeg"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>收到手机端的stop指令后，立即将播放状态置stopped，同时将影片时长和进度也置0。此外，还要拦截播放器到手机端的状态同步直到新的视频起播。</p><p>另外还要注意处理线程调度延迟的问题，如果stop指令和setUri指令发送时间比较接近，虽然看起来是stop在前，setUri在后，但如果是在不同线程回调上来的，可能存在setUri先执行的情况，要注意处理这种情况，避免误退出。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;QA在测试公司投屏应用时，发现咪咕视频DLNA投剧集时有时候会跳过一集直接播下一集的问题。&lt;/p&gt;
&lt;p&gt;尝试自行分析解决不了后，我决定分析一下竞品应用：当贝投屏，结果发现它是正常的。由于当贝投屏是个黑盒子，所以决定抓包看一下。&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="投屏" scheme="https://iwesley.top/categories/%E6%8A%95%E5%B1%8F/"/>
    
    
    <category term="投屏" scheme="https://iwesley.top/tags/%E6%8A%95%E5%B1%8F/"/>
    
    <category term="DLNA" scheme="https://iwesley.top/tags/DLNA/"/>
    
  </entry>
  
  <entry>
    <title>Android.mk基础知识</title>
    <link href="https://iwesley.top/article/eaba12cd/"/>
    <id>https://iwesley.top/article/eaba12cd/</id>
    <published>2024-11-17T11:11:07.000Z</published>
    <updated>2024-12-24T12:51:46.755Z</updated>
    
    <content type="html"><![CDATA[<p>Android 浅度解析：mk预置AAR、SO文件、APP包和签名-阿里云开发者社区: <a href="https://developer.aliyun.com/article/1488469">https://developer.aliyun.com/article/1488469</a></p><p>android系统添加预置APP（so库自动释放) - 庚拓天下 - 博客园: <a href="https://www.cnblogs.com/genggeng/p/10563585.html">https://www.cnblogs.com/genggeng/p/10563585.html</a></p><p>使用@符号和不使用@符号的区别<br>在Android.mk中，使用@符号和不使用@符号有一些区别：<br>? 使用@符号可以提高性能，因为不需要解压和拷贝SO文件，也可以节省空间，因为不需要存储多余的SO文件。<br>? 不使用@符号可以提高兼容性，因为可以针对不同的平台提供相应的SO文件，而不需要考虑APK中是否有对应平台的SO文件。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Android 浅度解析：mk预置AAR、SO文件、APP包和签名-阿里云开发者社区: &lt;a</summary>
        
      
    
    
    
    <category term="Android Build System" scheme="https://iwesley.top/categories/Android-Build-System/"/>
    
    
    <category term="安卓Makefile" scheme="https://iwesley.top/tags/%E5%AE%89%E5%8D%93Makefile/"/>
    
  </entry>
  
  <entry>
    <title>Android APP drawable不同文件夹的用法</title>
    <link href="https://iwesley.top/article/b1dcee32/"/>
    <id>https://iwesley.top/article/b1dcee32/</id>
    <published>2024-11-17T10:33:19.000Z</published>
    <updated>2025-01-04T13:32:28.888Z</updated>
    
    <content type="html"><![CDATA[<p>Screen compatibility: <a href="https://developer.android.com/guide/practices/screens_support.html">https://developer.android.com/guide/practices/screens_support.html</a></p><p>App resources: <a href="https://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources">https://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources</a></p><p>Support different pixel densities: <a href="https://developer.android.com/training/multiscreen/screendensities">https://developer.android.com/training/multiscreen/screendensities</a></p><p>Drawable resources : <a href="https://developer.android.com/guide/topics/resources/drawable-resource">https://developer.android.com/guide/topics/resources/drawable-resource</a></p><p>res&#x2F;drawable&#x2F; is a legacy synonym for res&#x2F;drawable-mdpi&#x2F;, indicating that the drawables in that directory are set for mdpi density. If the device is running another density, those images will be downsampled (to ldpi) or upsampled (to anything else) to match the device density.</p><p>res&#x2F;drawable-nodpi&#x2F; says “these drawables should not be resampled for any density, but instead should be used as-is on all densities”.</p><p>drawable-nodpi will bypass scaling and drawable will use the default scaling:</p><p>mdpi &#x3D; 1x<br>hdpi &#x3D; 1.5x<br>xhdpi &#x3D; 2x<br>xxhdpi &#x3D; 3x<br>xxxhdpi &#x3D; 4x<br>drawable-nodpi is efficient if your code will be doing its own scaling (or no scaling) and you don’t want the image pre-scaled by Android.</p><p>There is also drawable-anydpi, just to make things more confusing.</p><p>drawable with no specifications will be used if an exact match on density and screen specifications does not exist. drawable-nodpi will be used after drawable.</p><p>UPDATE If you have both drawable and drawble-nodpi, the select order is either a more complex rule not documented or Android is broken. Through experimentation I confirmed that devices with screen density &lt; xhdpi will correctly select the drawable image. Devices with screen density &gt;&#x3D; xhdpi will select the drawable-nodpi.</p><p>Selection rule: 1. Pick match to screen density, one of these:</p><p>drawable-ldpi<br>drawable-mdpi<br>drawable-hdpi<br>drawable-xhdpi<br>drawable-xxhdpi<br>drawable-xxxhdpi<br>If no match on density, then select one of these<br>drawable (automatic scaling mdpi&#x3D;none… xxxhdpi&#x3D;4x)<br>drawable-nodpi (no scaling)<br>drawable-tvdpi<br>drawable-anydpi (no scaling)</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>android - Will a density qualified drawable folder or drawable-nodpi take precedence? - Stack Overflow: <a href="https://stackoverflow.com/questions/24682094/will-a-density-qualified-drawable-folder-or-drawable-nodpi-take-precedence">https://stackoverflow.com/questions/24682094/will-a-density-qualified-drawable-folder-or-drawable-nodpi-take-precedence</a></p><p>android - What is the difference between putting images in drawable and drawable-nodpi folder? - Stack Overflow: <a href="https://stackoverflow.com/questions/33631995/what-is-the-difference-between-putting-images-in-drawable-and-drawable-nodpi-fol">https://stackoverflow.com/questions/33631995/what-is-the-difference-between-putting-images-in-drawable-and-drawable-nodpi-fol</a></p><p>玩转Android drawable图片适配 - 漫思 - 博客园: <a href="https://www.cnblogs.com/sexintercourse/p/17020569.html">https://www.cnblogs.com/sexintercourse/p/17020569.html</a></p><p>Android 适配（drawable文件夹）图片适配（二） - 张亚楠 - 博客园: <a href="https://www.cnblogs.com/huihuizhang/p/9473698.html">https://www.cnblogs.com/huihuizhang/p/9473698.html</a></p><p>android（drawable文件夹）图片适配_drawable是什么文件-CSDN博客: <a href="https://blog.csdn.net/xuaho0907/article/details/72848520#:~:text=%E5%A6%82%E6%9E%9C%E5%9B%BE%E7%89%87%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95%E4%B8%BA,%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F%EF%BC%8C%E4%B8%8D%E8%BF%9B%E8%A1%8C%E7%BC%A9%E6%94%BE%E3%80%82&text=drawable%2Dnodpi%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E8%BF%99%E4%B8%AA,%E5%B0%B1%E4%BC%9A%E5%AE%9E%E9%99%85%E5%B1%95%E7%A4%BA%E5%A4%9A%E5%A4%A7%E3%80%82">https://blog.csdn.net/xuaho0907/article/details/72848520#:~:text=%E5%A6%82%E6%9E%9C%E5%9B%BE%E7%89%87%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95%E4%B8%BA,%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F%EF%BC%8C%E4%B8%8D%E8%BF%9B%E8%A1%8C%E7%BC%A9%E6%94%BE%E3%80%82&amp;text=drawable%2Dnodpi%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E8%BF%99%E4%B8%AA,%E5%B0%B1%E4%BC%9A%E5%AE%9E%E9%99%85%E5%B1%95%E7%A4%BA%E5%A4%9A%E5%A4%A7%E3%80%82</a></p><p>Android知识体系之drawable文件夹顺序 - 作业部落 Cmd Markdown 编辑阅读器: <a href="https://www.zybuluo.com/TryLoveCatch/note/590965">https://www.zybuluo.com/TryLoveCatch/note/590965</a></p><p>Android drawable文件夹那些事_安卓drawable文件夹的作用-CSDN博客: <a href="https://blog.csdn.net/qq_34341338/article/details/86706751">https://blog.csdn.net/qq_34341338/article/details/86706751</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Screen compatibility: &lt;a</summary>
        
      
    
    
    
    <category term="安卓APP" scheme="https://iwesley.top/categories/%E5%AE%89%E5%8D%93APP/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="AndroidAPPUI" scheme="https://iwesley.top/tags/AndroidAPPUI/"/>
    
  </entry>
  
</feed>
