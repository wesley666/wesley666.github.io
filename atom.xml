<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wesley&#39;s Blog</title>
  <icon>https://iwesley.top/icon.png</icon>
  <subtitle>我未曾珍惜的，我不再拥有。</subtitle>
  <link href="https://iwesley.top/atom.xml" rel="self"/>
  
  <link href="https://iwesley.top/"/>
  <updated>2025-05-02T09:30:00.285Z</updated>
  <id>https://iwesley.top/</id>
  
  <author>
    <name>Wesley</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>btrace1.0使用方法</title>
    <link href="https://iwesley.top/article/69f32e87/"/>
    <id>https://iwesley.top/article/69f32e87/</id>
    <published>2025-05-02T08:35:23.000Z</published>
    <updated>2025-05-02T09:30:00.285Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记于 2022 年 6 月 24 日</p></blockquote><p><strong>注意：目前仅限于macos和linux使用</strong></p><p><a href="https://github.com/bytedance/btrace/blob/master/README.zh-CN.md">btrace&#x2F;README.zh-CN.md at master · bytedance&#x2F;btrace · GitHub</a></p><p>btrace(又名 RheaTrace) 是一个基于 <a href="https://developer.android.com/topic/performance/tracing">Systrace</a> 实现的高性能 Android trace 工具，它支持在 App 编译期间自动注入自定义事件，并使用 <a href="https://github.com/bytedance/bhook">bhook</a> 额外提供 IO 等 native 事件。</p><h2 id="关键特征"><a href="#关键特征" class="headerlink" title="关键特征"></a>关键特征</h2><p>支持自动注入自定义事件，在编译 Apk 期间为 App 方法自动注入Trace#beginSection(String) 和 Trace#endSection()。</p><p>提供额外 IO 等 native 事件，方便定位耗时原因。</p><p>支持仅采集主线程 trace 事件。</p><p>使用便捷，稳定性高，性能优于 Systrace。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><strong>注意：存储权限要申请</strong></p><p>自定义的application必须有以下代码，否则会导致btrace插入初始化代码失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@OverRide</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachBaseContext</span><span class="hljs-params">(Context base)</span> &#123;<br>     <span class="hljs-built_in">super</span>.attachBaseContext(base);<br>&#125;<br></code></pre></td></tr></table></figure><p>在您项目根目录下 build.gradle 文件中增加 rhea-gradle-plugin 作为依赖。</p><p>注意：btrace版本号可以在这里查询：<a href="https://search.maven.org/">https://search.maven.org/</a> 如果打不开可以在阿里云查询：<a href="https://developer.aliyun.com/mvn/search">https://developer.aliyun.com/mvn/search</a></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250502163842049.png" alt="image-20250502163841997"></p><p>目前版本号是1.0.2</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Groovy">buildscript &#123;<br>    repositories &#123;<br>        ...<br>        mavenCentral()<br>        ...<br>    &#125;<br>    dependencies &#123;<br>        classpath <span class="hljs-string">&#x27;com.bytedance.btrace:rhea-gradle-plugin:1.0.2&#x27;</span><br>    &#125;<br>&#125;<br><br>allprojects &#123;<br>    repositories &#123;<br>        ...<br>        mavenCentral()<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着在 app&#x2F;build.gradle 文件中应用如下所示插件和依赖。</p><h3 id="androidx项目"><a href="#androidx项目" class="headerlink" title="androidx项目"></a>androidx项目</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Groovy">dependencies &#123;<br>    <span class="hljs-comment">//rheatrace core lib</span><br>    implementation <span class="hljs-string">&quot;com.bytedance.btrace:rhea-core:1.0.2&quot;</span><br>&#125;<br><br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;com.bytedance.rhea-trace&#x27;</span><br>rheaTrace &#123;<br><br>   compilation &#123;<br>      <span class="hljs-comment">//为减少 APK 体积, 你可以为 App 中需要跟踪的方法设置 id 以此来跟踪此自定义事件, 默认值 false。</span><br>      traceWithMethodID = <span class="hljs-literal">false</span> <br>      <span class="hljs-comment">//该文件配置决定哪些方法您不希望跟踪, 默认值 null。</span><br>      traceFilterFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/traceFilter.txt&quot;</span><br>      <span class="hljs-comment">//用特指定方法 id 来设置自定义事件名称, 默认值 null。</span><br>      applyMethodMappingFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/keep-method-id.txt&quot;</span><br>  &#125;<br><br>   runtime &#123;<br>      <span class="hljs-comment">//仅在主线程抓取跟踪事件, 默认值 false。</span><br>      mainThreadOnly <span class="hljs-literal">true</span> <br>      <span class="hljs-comment">//在 App 启动之初开始抓取跟踪事件, 默认值 true。</span><br>      startWhenAppLaunch <span class="hljs-literal">true</span><br>      <span class="hljs-comment">//指定内存存储 atrace 数据 ring buffer 的大小。</span><br>      atraceBufferSize <span class="hljs-string">&quot;500000&quot;</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="android-support项目"><a href="#android-support项目" class="headerlink" title="android-support项目"></a>android-support项目</h3><p><strong>本地需要依赖的文件：</strong> <a href="https://github.com/wesley666/source/blob/main/btrace-Android-support.zip">https://github.com/wesley666/source/blob/main/btrace-Android-support.zip</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Groovy">dependencies &#123;<br>    <span class="hljs-comment">//rheatrace core lib</span><br>    implementation <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-stdlib:1.3.72&quot;</span><br>    implementation files(<span class="hljs-string">&#x27;libs/rhea-common-1.0.2.jar&#x27;</span>)<br>    implementation files(<span class="hljs-string">&#x27;libs/rhea-core-release.aar&#x27;</span>)<br>    implementation files(<span class="hljs-string">&#x27;libs/rhea-atrace-release.aar&#x27;</span>)<br>    implementation <span class="hljs-string">&quot;com.bytedance:bytehook:1.0.3&quot;</span><br>&#125;<br><br>apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;com.bytedance.rhea-trace&#x27;</span><br>rheaTrace &#123;<br><br>   compilation &#123;<br>      <span class="hljs-comment">//为减少 APK 体积, 你可以为 App 中需要跟踪的方法设置 id 以此来跟踪此自定义事件, 默认值 false。</span><br>      traceWithMethodID = <span class="hljs-literal">false</span> <br>      <span class="hljs-comment">//该文件配置决定哪些方法您不希望跟踪, 默认值 null。</span><br>      traceFilterFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/traceFilter.txt&quot;</span><br>      <span class="hljs-comment">//用特指定方法 id 来设置自定义事件名称, 默认值 null。</span><br>      applyMethodMappingFilePath = <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/rhea-trace/keep-method-id.txt&quot;</span><br>  &#125;<br><br>   runtime &#123;<br>      <span class="hljs-comment">//仅在主线程抓取跟踪事件, 默认值 false。</span><br>      mainThreadOnly <span class="hljs-literal">true</span> <br>      <span class="hljs-comment">//在 App 启动之初开始抓取跟踪事件, 默认值 true。</span><br>      startWhenAppLaunch <span class="hljs-literal">true</span><br>      <span class="hljs-comment">//指定内存存储 atrace 数据 ring buffer 的大小。</span><br>      atraceBufferSize <span class="hljs-string">&quot;500000&quot;</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于 <code>rheaTrace </code>，从<a href="https://github.com/bytedance/btrace/blob/master/GRADLE_CONFIG.zh-CN.MD">RheaTrace Gradle Config</a>中了解更多信息。</p><p>最后，检测您电脑 python 版本，由于 Systrace 的关系 RheaTrace 仅支持 python 2.7 版本，请将 systrace 环境变量配置在 <em>~&#x2F;.bash_profile</em> 文件中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">export PATH=$&#123;PATH&#125;:/Users/$&#123;user_name&#125;/Library/Android/sdk/platform-tools/systrace<br></code></pre></td></tr></table></figure><p>RheaTrace使用方法请参考：</p><p><a href="https://github.com/bytedance/btrace/blob/master/README.zh-CN.md">btrace&#x2F;README.zh-CN.md at master · bytedance&#x2F;btrace · GitHub</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;记于 2022 年 6 月 24 日&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：目前仅限于macos和linux使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Android性能优化" scheme="https://iwesley.top/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="性能优化" scheme="https://iwesley.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="btrace" scheme="https://iwesley.top/tags/btrace/"/>
    
    <category term="systrace" scheme="https://iwesley.top/tags/systrace/"/>
    
  </entry>
  
  <entry>
    <title>音视频缓存数学模型</title>
    <link href="https://iwesley.top/article/36f6f986/"/>
    <id>https://iwesley.top/article/36f6f986/</id>
    <published>2025-03-16T09:55:28.000Z</published>
    <updated>2025-03-16T10:04:42.652Z</updated>
    
    <content type="html"><![CDATA[<p class="note note-success">2024年8月的笔记</p><p>播放器作为消费者，缓存作为生产者。</p><h2 id="进入缓冲一次"><a href="#进入缓冲一次" class="headerlink" title="进入缓冲一次"></a>进入缓冲一次</h2><p>设消费者速率为v1，生产者为v2，视频长度为l，x为生产者至少距离消费者多远才能保证在播完视频前两者重合。实际上就是一个追及问题。</p><p>v1<em>t &#x3D; v2</em>t + x，即 l &#x3D; v2*l&#x2F;v1 + x，因为播放器速度是1，继续简化得 x &#x3D; l(1 - v2)</p><p>如果v2大于1，即满足消费者需求时，可以流畅播放。</p><p>设l是一部45分钟的电视剧，即x &#x3D; 45<em>60</em>(1 - v2)</p><p>如果v2是1，即1s可以缓存1s时长视频，则x &#x3D; 0</p><p>v2是0.9，即1s可以缓存0.9s时长视频，则 x &#x3D; 270，意味着要提前缓存270s的视频才可以后续不进入缓冲状态。</p><p>同理，v2&#x3D;0.8，x&#x3D; 540</p><p>………….</p><p>v2 &#x3D; 0.1，x&#x3D;2430</p><p>斜率是-2700，意味着每变化百分之0.1，缓存长度都要增加270s。</p><p>拿v2&#x3D;0.9，x&#x3D; 270作为例子，要提前缓存270s，需要花费的时间是t&#x3D;270&#x2F;0.9&#x3D;300s</p><p>同理，v2&#x3D;0.8，x&#x3D; 540，t&#x3D;540&#x2F;0.8&#x3D;675s</p><p>……..</p><p>v2 &#x3D; 0.1，x&#x3D;2430,t&#x3D;2430&#x2F;0.1&#x3D;24300s&#x3D;405分钟</p><h2 id="进入缓冲多次"><a href="#进入缓冲多次" class="headerlink" title="进入缓冲多次"></a>进入缓冲多次</h2><p>实际上，用户是不能容忍等这么久的，所以意味着播放开始后会反复进入缓冲状态。</p><p>假设缓存1s播1s，</p><p>v2&#x3D;1，是可以正常播放</p><p>v2&#x3D;0.9，则用户要等待时长为 1&#x2F;0.9&#x3D;1.1111s，先缓存1s，则平均1&#x2F;（1-0.9）&#x3D;10s进入缓冲状态，每次1.1111s</p><p>v2&#x3D;0.8，则用户要等待时长为 1&#x2F;0.8&#x3D;1.25s，先缓存1s，则平均1&#x2F;（1-0.8）&#x3D;5s进入缓冲状态，每次1.25s</p><p>…….</p><p>v2&#x3D;0.1，则用户要等待时长为 1&#x2F;0.1&#x3D;10s，先缓存1s，则平均1&#x2F;（1-0.1）&#x3D;1.1111s进入缓冲状态，每次10s</p><p>同理每次缓存多1s再播放，都会增加一倍进入缓冲的时间和等待时间。</p><p>意味着，如果通过多线程不能显著提高v2速度超过1，对用户来说都是卡顿，无法忍受的。</p><p>当然，上面只是一个理论模型，实际上要复杂一些，因为每个ts包含的播放时间是不一样的。</p><h2 id="情况分析"><a href="#情况分析" class="headerlink" title="情况分析"></a>情况分析</h2><p>若带宽小于CDN速度，即v2总是小于v1，这样无论怎么优化都会卡顿。</p><p>若带宽大于CDN速度，若v2大于v1则可以正常播放；若单线程不能满足v2大于v1，多线程时v2大于v1，也可以正常播放。</p><h2 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h2><p>对于下载时间小于ts文件时长的，则串行下载，不需要并发。</p><p>以下是针对CDN速度小于网络带宽的：</p><h3 id="1-初始下载设置"><a href="#1-初始下载设置" class="headerlink" title="1. 初始下载设置"></a>1. <strong>初始下载设置</strong></h3><ul><li><strong>初始并发数</strong>：从1个文件开始下载。</li><li><strong>监控下载速度</strong>：监控下载速度和记录最大下载速度。</li></ul><h3 id="2-逐步增加并发"><a href="#2-逐步增加并发" class="headerlink" title="2. 逐步增加并发"></a>2. 逐步增加并发</h3><ul><li><strong>逐步增加</strong>：下载成功后，增加一个并发下载任务。</li><li><strong>监控变化</strong>：每次增加并发后，观察单个文件的下载速度变化。</li></ul><h3 id="3-检测瓶颈"><a href="#3-检测瓶颈" class="headerlink" title="3. 检测瓶颈"></a>3. <strong>检测瓶颈</strong></h3><ul><li><strong>观察限速</strong>：当下载速度达到某个稳定值（和最大下载速度相比不超过百分之十），或者单个文件下载速度显著下降时，说明可能触摸到了带宽上限或服务器限速。</li><li><strong>回退优化</strong>：如果发现并发数增加反而导致下载速度下降，要减少并发数，找到一个最佳的下载量。</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p class=&quot;note note-success&quot;&gt;2024年8月的笔记&lt;/p&gt;

&lt;p&gt;播放器作为消费者，缓存作为生产者。&lt;/p&gt;
&lt;h2 id=&quot;进入缓冲一次&quot;&gt;&lt;a href=&quot;#进入缓冲一次&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="音视频" scheme="https://iwesley.top/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
    <category term="音视频" scheme="https://iwesley.top/tags/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>安卓屏保调试</title>
    <link href="https://iwesley.top/article/98c55340/"/>
    <id>https://iwesley.top/article/98c55340/</id>
    <published>2025-03-15T06:37:37.000Z</published>
    <updated>2025-03-16T09:34:10.864Z</updated>
    
    <content type="html"><![CDATA[<p>先看一下在设置点击屏保预览后的调用链（Android 14）</p><pre><code class=" mermaid">sequenceDiagram    participant User    participant MaterialButton    participant View    participant DreamSettings    participant DreamBackend    User-&gt;&gt;MaterialButton: 点击按钮（ performClick()）    MaterialButton-&gt;&gt;View: performClick()    View-&gt;&gt;DreamSettings: 触发 onClick() (lambda 表达式)    DreamSettings-&gt;&gt;DreamBackend: 调用 preview()</code></pre><p>DreamController的打印信息</p><blockquote><p>Starting dream: name&#x3D;ComponentInfo{com.google.android.apps.tv.dreamx&#x2F;com.google.android.apps.tv.dreamx.service.Backdrop}, <strong>isPreviewMode&#x3D;true</strong>, canDoze&#x3D;false, userId&#x3D;0, reason&#x3D;’test dream’</p></blockquote><p>DreamActivity是一个不需要注册的Activity，运行在各个屏保进程。</p><p>屏保应用实现DreamService即可。</p><p>屏保状态时，后台起应用会进入 onStop 状态（该例子 onStop 里面调用了 finish）</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250315143803024.png" alt="img"></p><h2 id="退出屏保的方法"><a href="#退出屏保的方法" class="headerlink" title="退出屏保的方法"></a>退出屏保的方法</h2><h3 id="1、有触摸或者按键输入"><a href="#1、有触摸或者按键输入" class="headerlink" title="1、有触摸或者按键输入"></a>1、有触摸或者按键输入</h3><h3 id="2、配置config-dismissDreamOnActivityStart-为-true-则会在新-activity-起来后退出屏保"><a href="#2、配置config-dismissDreamOnActivityStart-为-true-则会在新-activity-起来后退出屏保" class="headerlink" title="2、配置config_dismissDreamOnActivityStart 为 true 则会在新 activity 起来后退出屏保"></a>2、配置config_dismissDreamOnActivityStart 为 true 则会在新 activity 起来后退出屏保</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!-- Whether to dismiss the active dream when an activity is started. Doesn&#x27;t apply to</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">          assistant activities (ACTIVITY_TYPE_ASSISTANT) --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bool</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;config_dismissDreamOnActivityStart&quot;</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">bool</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250315143803153.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250315143803189.png" alt="img"></p><h3 id="3、跨进程调用DreamManagerService-的awaken（需要系统签名）"><a href="#3、跨进程调用DreamManagerService-的awaken（需要系统签名）" class="headerlink" title="3、跨进程调用DreamManagerService 的awaken（需要系统签名）"></a>3、跨进程调用DreamManagerService 的awaken（需要系统签名）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> android.os.IBinder<br><span class="hljs-keyword">import</span> androidx.annotation.RequiresPermission<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DreamManager</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">val</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DreamManager&quot;</span><br>    <span class="hljs-comment">//private var mDreamManager: Any? = context.getSystemService(&quot;dream&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> mDreamManager: Any? = <span class="hljs-literal">null</span><br><br>    init &#123;<br>        mDreamManager = <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">val</span> <span class="hljs-variable">dream</span> <span class="hljs-operator">=</span> Reflector.on(<span class="hljs-string">&quot;android.os.ServiceManager&quot;</span>).method(<span class="hljs-string">&quot;getService&quot;</span>, String::class.java).call&lt;Any&gt;(<span class="hljs-string">&quot;dreams&quot;</span>)<br>            Reflector.on(<span class="hljs-string">&quot;android.service.dreams.IDreamManager\$Stub&quot;</span>).method(<span class="hljs-string">&quot;asInterface&quot;</span>, IBinder::class.java).call&lt;Any&gt;(dream)<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            <span class="hljs-literal">null</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@RequiresPermission(&quot;android.permission.READ_DREAM_STATE&quot;)</span><br>    fun <span class="hljs-title function_">isDreaming</span><span class="hljs-params">()</span>: Boolean &#123;<br>        <span class="hljs-keyword">if</span> (mDreamManager == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> &#123;<br>            Reflector.with(mDreamManager!!).method(<span class="hljs-string">&quot;isDreaming&quot;</span>).call()<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@RequiresPermission(&quot;android.permission.WRITE_DREAM_STATE&quot;)</span><br>    fun <span class="hljs-title function_">stopDream</span><span class="hljs-params">()</span> &#123;<br>        mDreamManager?.let &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Reflector.with(it).method(<span class="hljs-string">&quot;awaken&quot;</span>).call&lt;Unit&gt;()<br>            &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="屏保调试命令：cmd-dreams"><a href="#屏保调试命令：cmd-dreams" class="headerlink" title="屏保调试命令：cmd dreams"></a>屏保调试命令：cmd dreams</h2><blockquote><p>roc_rk3588s_pc:&#x2F; # cmd dreams -h</p><p>Dream manager (dreams) commands:</p><p>  help</p><p>​      Print this help text.</p><p>  start-dreaming</p><p>​      Start the currently configured dream.</p><p>  stop-dreaming</p><p>​      Stops any active dream</p></blockquote><p>cmd dreams start-dreaming</p><p>cmd dreams stop-dreaming</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;先看一下在设置点击屏保预览后的调用链（Android 14）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot; mermaid&quot;&gt;sequenceDiagram
    participant User
    participant MaterialButton
   </summary>
        
      
    
    
    
    <category term="AndroidFrameworkFeature" scheme="https://iwesley.top/categories/AndroidFrameworkFeature/"/>
    
    
    <category term="DreamManagerService" scheme="https://iwesley.top/tags/DreamManagerService/"/>
    
    <category term="Framework" scheme="https://iwesley.top/tags/Framework/"/>
    
    <category term="屏保" scheme="https://iwesley.top/tags/%E5%B1%8F%E4%BF%9D/"/>
    
  </entry>
  
  <entry>
    <title>安卓内存泄露之DMA-BUF异常增长:Android Studio镜像引起DMA内存泄露</title>
    <link href="https://iwesley.top/article/f148a913/"/>
    <id>https://iwesley.top/article/f148a913/</id>
    <published>2025-03-04T13:10:58.000Z</published>
    <updated>2025-03-04T13:40:23.876Z</updated>
    
    <content type="html"><![CDATA[<p>今天用着安卓 14 的板子的时候突然系统卡死。</p><p>查看日志发现launcher都被干掉了</p><blockquote><p>03-04 06:13:35.544 7872 8479 I ActivityManager: vis BFGS 18740: com.android.launcher3 (pid 8407) service</p><p>03-04 06:13:35.544 7872 8479 I ActivityManager: com.android.launcher3&#x2F;com.android.quickstep.TouchInteractionService&lt;&#x3D;Proc{8077:com.android.systemui&#x2F;u0a70}</p><p>03-04 06:13:36.155 277 277 I lowmemorykiller: Kill ‘com.android.launcher3’ (8407), uid 10071, oom_score_adj 100 to free 39504kB rss, 46224kB swap; reason: device is low on swap (91200kB &lt; 199552kB) and thrashing (200%)</p></blockquote><p>看<code>dumpsys meminfo</code>发现DMA-BUF占了3G多（4G设备），应用free ram基本没了。</p><p>刚开始以为是scrcpy的问题。后来经调查发现是android studio的屏幕镜像问题。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>开机一段时间后</p><blockquote><p>Total RAM: 3,991,080K (status normal)</p><p>Free RAM: 1,166,810K (  124,454K cached pss +   623,088K cached kernel +   419,268K free)</p><p><strong>DMA-BUF: 1,477,628K (      876K mapped + 1,476,752K unmapped)</strong></p><p>DMA-BUF Heaps: 1,477,628K</p><p>DMA-BUF Heaps pool:   249,088K</p><p>​      GPU:   202,320K</p><p> Used RAM: 2,763,593K (1,036,373K used pss + 1,727,220K kernel)</p><p> Lost RAM:   195,490K</p><p>​     ZRAM:    72,700K physical used for   215,296K in swap (1,995,536K total swap)</p><p>   Tuning: 192 (large 512), oom   322,560K, restore limit   107,520K (high-end-gfx)</p></blockquote><p><code>cat /sys/kernel/dmabuf/buffers/*/size</code>，发现有好多483328字节的 inode</p><p><code>cat /sys/kernel/dmabuf/buffers/*/size  | grep 483328 | wc -l</code></p><p>有2957个，计算：2957*483328&#x3D;1429200896&#x3D;1.4G，和上面的结果差不多。</p><p>随便查看一个inode</p><blockquote><p>roc_rk3588s_pc:&#x2F; # lsof | grep -w 7248</p><p><a href="mailto:&#x63;&#x32;&#64;&#x31;&#46;&#49;&#45;&#x73;&#x65;&#x72;&#x76;&#x69;&#x63;&#x65;">&#x63;&#x32;&#64;&#x31;&#46;&#49;&#45;&#x73;&#x65;&#x72;&#x76;&#x69;&#x63;&#x65;</a>   543 mediacodec 2553u     0000                0,8       0t0       7248 &#x2F;dmabuf:system</p><p>main       4146       root 5088u     0000                0,8       0t0       7248 &#x2F;dmabuf:system</p><p>main       4146       root 5089u     0000                0,8       0t0       7248 &#x2F;dmabuf:system</p></blockquote><p><code>lsof | grep &quot;4146&quot; | grep dmabuf  | wc -l</code></p><p>有2958条这样的条目</p><p><code>main       4146       root 5973u     0000                0,8       0t0       7690 /dmabuf:system</code></p><p>和上面的数目一一对应</p><p>查看是哪一个程序</p><blockquote><p>roc_rk3588s_pc:&#x2F; # cat &#x2F;proc&#x2F;543&#x2F;cmdline</p><p>&#x2F;vendor&#x2F;bin&#x2F;hw&#x2F;<a href="mailto:&#97;&#x6e;&#x64;&#x72;&#111;&#105;&#100;&#x2e;&#104;&#x61;&#x72;&#100;&#119;&#97;&#114;&#x65;&#x2e;&#109;&#x65;&#100;&#105;&#x61;&#46;&#x63;&#50;&#x40;&#49;&#x2e;&#49;&#x2d;&#x73;&#101;&#114;&#x76;&#105;&#x63;&#101;">&#97;&#x6e;&#x64;&#x72;&#111;&#105;&#100;&#x2e;&#104;&#x61;&#x72;&#100;&#119;&#97;&#114;&#x65;&#x2e;&#109;&#x65;&#100;&#105;&#x61;&#46;&#x63;&#50;&#x40;&#49;&#x2e;&#49;&#x2d;&#x73;&#101;&#114;&#x76;&#105;&#x63;&#101;</a></p><p>roc_rk3588s_pc:&#x2F; # cat &#x2F;proc&#x2F;4146&#x2F;cmdline</p><p>app_process&#x2F;data&#x2F;local&#x2F;tmp&#x2F;.studiocom.android.tools.screensharing.Main–socket&#x3D;screen-sharing-agent-8055–flags&#x3D;16</p></blockquote><p>发现是android studio镜像导致的：应该是因为一直黑屏导致反复申请内存导致DMA-BUF泄露。</p><p>关闭Android Studio的Device Mirroring功能后，后面使用设备就正常了。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2025/20250304211421729.png" alt="img"></p><h2 id="dmabuf-dump"><a href="#dmabuf-dump" class="headerlink" title="dmabuf_dump"></a>dmabuf_dump</h2><p>通过dmabuf_dump命令可以更快地查看异常程序</p><blockquote><p>roc_rk3588s_pc:&#x2F; # dmabuf_dump -h</p><p>Usage: dmabuf_dump [-abh] [per-process&#x2F;per-buffer stats]</p><p>-a       show all dma buffers (ion) in big table, [buffer x process] grid</p><p>-b       show DMA-BUF per-buffer, per-exporter and per-device statistics</p><p>-h       show this help</p><p>​         If PID is supplied, the dmabuf information for that process is shown.</p><p>​         Per-buffer DMA-BUF stats do not take an argument.</p></blockquote><p>通过<code>dmabuf_dump</code>就可以查看各个程序DMA-BUF的占用情况（包含程序名字、pid、inode等等）或者加其他参数输出不同结果。</p><blockquote><p>roc_rk3588s_pc:&#x2F; # dmabuf_dump 4146</p><p>​            main:4146</p><p>​                  Name              Rss              Pss         nr_procs            Inode</p><p>​                system           472 kB           472 kB                1             4735</p><p>​                system           472 kB           472 kB                1             4736</p><p>​                system           472 kB           472 kB                1             4737</p><p>​               </p><p>​               ——————（省略几千行）—————-</p><p>​          </p><p>​                system           472 kB           472 kB                1             7688</p><p>​                system           472 kB           472 kB                1             7689</p><p>​                system           472 kB           472 kB                1             7690</p><p>​         PROCESS TOTAL       1395232 kB       1395232 kB</p><p>-———————</p><p>dmabuf total: 1477628 kB kernel_rss: 82396 kB userspace_rss: 1395232 kB userspace_pss: 1395232 kB</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://source.android.com/docs/core/graphics/implement-dma-buf-gpu-mem">Implement DMABUF and GPU memory accounting in Android 12  |  Android Open Source Project</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今天用着安卓 14 的板子的时候突然系统卡死。&lt;/p&gt;
&lt;p&gt;查看日志发现launcher都被干掉了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;03-04 06:13:35.544 7872 8479 I ActivityManager: vis BFGS 18740:</summary>
        
      
    
    
    
    <category term="Android性能优化" scheme="https://iwesley.top/categories/Android%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="内存" scheme="https://iwesley.top/tags/%E5%86%85%E5%AD%98/"/>
    
    <category term="性能优化" scheme="https://iwesley.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>安卓组件化之动态依赖功能模块</title>
    <link href="https://iwesley.top/article/67ca89d4/"/>
    <id>https://iwesley.top/article/67ca89d4/</id>
    <published>2025-03-03T10:34:03.000Z</published>
    <updated>2025-03-03T12:42:15.461Z</updated>
    
    <content type="html"><![CDATA[<p>对于拥有不同渠道的 APP 来说，可能需要集成不同的功能模块，也可能同一个功能有不同实现。最简单的方法可能是通过接口、工厂模式、 flavorImplement 和渠道自定义代码的方法来实现了。但是，如果不想建那么多渠道代码目录，需要通过一套代码来初始化模块，那么上述方法就不行了。</p><p>那么如何在不依赖模块的前提下动态调用其功能呢？</p><p>有几种方法：</p><p>1、反射、接口隔离和工厂模式</p><p>2、动态功能模块（Dynamic Feature Module），国内不适用。</p><p>3、利用 Java 的 <code>ServiceLoader</code> 机制，通过配置文件声明接口实现类。</p><p>综合考虑后决定采用反射、接口隔离和工厂模式。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>环境：agp 8.7.0，grade：8.10.2</p><h3 id="gradle：实现模块动态加载"><a href="#gradle：实现模块动态加载" class="headerlink" title="gradle：实现模块动态加载"></a>gradle：实现模块动态加载</h3><p>采用yaml文件进行功能配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#功能定义</span><br><span class="hljs-attr">features:</span><br>  <span class="hljs-attr">featureA:</span><br>    <span class="hljs-comment">#默认配置</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;:feature:featureA&#x27;</span> <span class="hljs-comment">#模块名字</span><br>    <span class="hljs-comment">#两个列表优先级最高，但不能同时包含一样的flavor</span><br>    <span class="hljs-comment">#如果enable为true，则建议使用disableFlavorsList。反之，亦然。</span><br>    <span class="hljs-attr">enableFlavorsList:</span> [<span class="hljs-string">demo</span>, <span class="hljs-string">companyA</span>, <span class="hljs-string">companyB</span>]<br>    <span class="hljs-attr">disableFlavorsList:</span> []<br></code></pre></td></tr></table></figure><p>libs.versions.toml</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">snakeyaml</span> = <span class="hljs-string">&quot;1.33&quot;</span><br><span class="hljs-attr">snakeyaml</span> = &#123; module = <span class="hljs-string">&quot;org.yaml:snakeyaml&quot;</span>, version.ref = <span class="hljs-string">&quot;snakeyaml&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>根build.gradle</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br>buildscript &#123;<br>    <span class="hljs-comment">// 自定义 gradle 插件</span><br>    dependencies &#123;<br>        <span class="hljs-comment">//classpath(libs.plugin)</span><br>        classpath libs.snakeyaml <span class="hljs-comment">// 添加 YAML 解析库</span><br>    &#125;<br>&#125;<br><br>plugins &#123;<br>    alias(libs.plugins.android.application) apply <span class="hljs-literal">false</span><br>    alias(libs.plugins.kotlin.android) apply <span class="hljs-literal">false</span><br>    alias(libs.plugins.android.library) apply <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>app build.gradle （根据配置动态依赖模块实现）</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">//Yaml放在其他xxx.gradle import会报找不到</span><br><span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml<br>ext &#123;<br>    loadYamlConfig = &#123; String fileName -&gt;<br>        <span class="hljs-keyword">def</span> configFile = file(fileName)<br>        <span class="hljs-keyword">if</span> (!configFile.exists()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GradleException(<span class="hljs-string">&quot;YAML config file not found: $&#123;configFile.absolutePath&#125;&quot;</span>)<br>        &#125;<br>        <span class="hljs-keyword">def</span> yaml = <span class="hljs-keyword">new</span> Yaml()<br>        <span class="hljs-keyword">def</span> config<br>        <span class="hljs-keyword">try</span> &#123;<br>            configFile.withReader &#123; reader -&gt;<br>                config = yaml.load(reader)<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GradleException(<span class="hljs-string">&quot;Failed to parse YAML file: $&#123;configFile.name&#125;&quot;</span>, e)<br>        &#125;<br>        <span class="hljs-keyword">return</span> config.asImmutable()<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">def</span> printlnRed(String msg) &#123;<br>    <span class="hljs-keyword">def</span> ANSI_RESET = <span class="hljs-string">&quot;\u001B[0m&quot;</span><br>    <span class="hljs-keyword">def</span> ANSI_RED = <span class="hljs-string">&quot;\u001B[31m&quot;</span><br>    println(<span class="hljs-string">&quot;$&#123;ANSI_RED&#125;$&#123;msg&#125;$&#123;ANSI_RESET&#125;&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">def</span> featureConfig = loadYamlConfig(<span class="hljs-string">&quot;feature_config.yaml&quot;</span>)<br>println(<span class="hljs-string">&quot;featureConfig: $&#123;featureConfig&#125;&quot;</span>)<br>afterEvaluate &#123;<br>    android.applicationVariants.configureEach &#123; variant -&gt;<br>        <span class="hljs-keyword">def</span> flavorCompanyName = variant.productFlavors.find &#123; it.dimension == <span class="hljs-string">&quot;COMPANY&quot;</span> &#125;?.name<br>        if (!flavorCompanyName) &#123;<br>            throw new GradleException(<span class="hljs-string">&quot;Variant $&#123;variant.name&#125; has no COMPANY flavor!&quot;</span>)<br>        &#125;<br>        println(<span class="hljs-string">&quot;variant.name:$&#123;variant.name&#125; variant.flavorName:$&#123;variant.flavorName&#125;&quot;</span>)<br>        featureConfig.features.each &#123; featureKey, defaultConfig  -&gt;<br>            def featureName = defaultConfig.name<br>            boolean isEnabled = defaultConfig.enable<br>            def enableFlavorsList = defaultConfig.enableFlavorsList<br>            def disableFlavorsList = defaultConfig.disableFlavorsList<br>            boolean hasFound = false<br>            for (flavor in enableFlavorsList) &#123;<br>                if (flavor == flavorCompanyName) &#123;<br>                    isEnabled = true<br>                    println(<span class="hljs-string">&quot;enable in enableFlavorsList&quot;</span>)<br>                    hasFound = true<br>                    break<br>                &#125;<br>            &#125;<br>            for (flavor in disableFlavorsList) &#123;<br>                if (flavor == flavorCompanyName) &#123;<br>                    if (hasFound) &#123;<br>                        throw new GradleException(<span class="hljs-string">&quot;Feature $featureKey in flavor $flavorCompanyName must not be in both enableFlavorsList and disableFlavorsList!&quot;</span>)<br>                    &#125;<br>                    isEnabled = false<br>                    printlnRed(<span class="hljs-string">&quot;disable in disableFlavorsList&quot;</span>)<br>                    break<br>                &#125;<br>            &#125;<br>            if (isEnabled) &#123;<br>                println(<span class="hljs-string">&quot;$&#123;flavorCompanyName&#125;Implementation $&#123;featureName&#125;&quot;</span>)<br>                <span class="hljs-comment">//动态依赖模块</span><br>                dependencies.add(<span class="hljs-string">&quot;$&#123;flavorCompanyName&#125;Implementation&quot;</span>, project(featureName))<br>            &#125; else &#123;<br>                printlnRed(<span class="hljs-string">&quot;$&#123;variant.name&#125; $&#123;flavorCompanyName&#125; Not Implementation $&#123;featureName&#125;&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模块实现"><a href="#模块实现" class="headerlink" title="模块实现"></a>模块实现</h3><h4 id="公共模块"><a href="#公共模块" class="headerlink" title="公共模块"></a>公共模块</h4><p>定义接口</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IFeature</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个 Helper</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">object</span> FeatureHelper : IFeature &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> mFeature: IFeature? = <span class="hljs-literal">null</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setFeatureImpl</span><span class="hljs-params">(feature: <span class="hljs-type">IFeature</span>?)</span></span> &#123;<br>        mFeature = feature<br>    &#125;<br>    <br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span> &#123;<br>        mFeature?.doSomething()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Module</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">       采用java类 方便使用 java 的方式进行反射</span><br><span class="hljs-comment">     * 注意：包名和类名、方法名和参数不能随意修改，否则反射会找不到</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context Context</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> IFeature</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IFeature <span class="hljs-title function_">load</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-comment">//FeatureManager实现IFeature接口</span><br>        <span class="hljs-type">FeatureManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FeatureManager</span>(context);<br>        manager.init();<br>        <span class="hljs-keyword">return</span> manager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="app-模块"><a href="#app-模块" class="headerlink" title="app 模块"></a>app 模块</h4><p><a href="https://iwesley.top/article/ba67228f/">Java反射的优雅使用 - Wesley’s Blog</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">loadFeatureModule</span><span class="hljs-params">(application: <span class="hljs-type">Application</span>)</span></span>: IFeature? &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> &#123;<br>        Reflector.on(<span class="hljs-string">&quot;com.wesley.feature.Module&quot;</span>)<br>            .method(<span class="hljs-string">&quot;load&quot;</span>, Context::<span class="hljs-keyword">class</span>.java).call&lt;IFeature&gt;(application)<br>    &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>        <span class="hljs-literal">null</span> <span class="hljs-comment">// 模块未启用或未实现</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">initModules</span><span class="hljs-params">(application: <span class="hljs-type">Application</span>)</span></span> &#123;<br>  FeatureHelper.setFeatureImpl(loadFeatureModule(application))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/97498337">Android 模块解耦和的实践</a></p><p><a href="https://blog.csdn.net/fesdgasdgasdg/article/details/106888077">Android 中使用 ServiceLoader、AutoService 摔坑记录</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;对于拥有不同渠道的 APP 来说，可能需要集成不同的功能模块，也可能同一个功能有不同实现。最简单的方法可能是通过接口、工厂模式、 flavorImplement</summary>
        
      
    
    
    
    <category term="AndroidAPP架构" scheme="https://iwesley.top/categories/AndroidAPP%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="gradle" scheme="https://iwesley.top/tags/gradle/"/>
    
    <category term="组件化" scheme="https://iwesley.top/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>DLNA库Platinum新增安卓64位so编译方法</title>
    <link href="https://iwesley.top/article/4339b418/"/>
    <id>https://iwesley.top/article/4339b418/</id>
    <published>2025-01-18T04:52:15.000Z</published>
    <updated>2025-01-18T11:12:45.426Z</updated>
    
    <content type="html"><![CDATA[<p>下载代码（该仓库我已经修改相关编译错误和支持安卓 64 位 so 编译）</p><p><code>git clone https://github.com/wesley666/Platinum -b master</code></p><p>下载Neptune</p><p><code>git submodule update --init</code></p><p>下载 ndk15：</p><p><a href="https://dl.google.com/android/repository/android-ndk-r15c-linux-x86_64.zip">https://dl.google.com/android/repository/android-ndk-r15c-linux-x86_64.zip</a></p><p>建议安装 conda 环境来进行编译</p><p><a href="https://www.anaconda.com/download/success">https://www.anaconda.com/download/success</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create -n dlna  python=2.7<br><br>pip install scons<br><br>conda activate dlna<br></code></pre></td></tr></table></figure><p>编译</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">以你的路径为准，如果出现路径错误，可以改成绝对路径</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">export</span> ANDROID_NDK_ROOT=/home/wesley/ndk/android-ndk-r15c/</span> <br>export ANDROID_NDK_ROOT=~/ndk/android-ndk-r15c/ <br>scons -c target=arm-android-linux build_config=Release<br>scons target=arm-android-linux build_config=Release<br>scons -c target=arm64-android-linux build_config=Release<br>scons target=arm64-android-linux build_config=Release<br>cd Source/Platform/Android/module/platinum<br>~/ndk/android-ndk-r15c/ndk-build clean<br>~/ndk/android-ndk-r15c/ndk-build NDK_DEBUG=0<br></code></pre></td></tr></table></figure><blockquote><p>(dlna) wesley@Wesley:~&#x2F;Project&#x2F;Platinum&#x2F;Source&#x2F;Platform&#x2F;Android&#x2F;module&#x2F;platinum$ ~&#x2F;ndk&#x2F;android-ndk-r15c&#x2F;ndk-build<br>Android NDK: Found platform level in .&#x2F;project.properties. Setting APP_PLATFORM to android-14.<br>jni&#x2F;Android.mk:5: “TARGET_ARCH_ABI:armeabi”<br>jni&#x2F;Android.mk:5: “TARGET_ARCH_ABI:armeabi-v7a”<br>jni&#x2F;Android.mk:5: “TARGET_ARCH_ABI:arm64-v8a”<br>jni&#x2F;Android.mk:15: “build arm64”<br>[armeabi] Compile++ thumb: platinum-jni &lt;&#x3D; platinum-jni.cpp<br>[armeabi] StaticLibrary  : libstdc++.a<br>[armeabi] SharedLibrary  : libplatinum-jni.so<br>[armeabi] Install        : libplatinum-jni.so &#x3D;&gt; libs&#x2F;armeabi&#x2F;libplatinum-jni.so<br>[armeabi-v7a] Compile++ thumb: platinum-jni &lt;&#x3D; platinum-jni.cpp<br>[armeabi-v7a] StaticLibrary  : libstdc++.a<br>[armeabi-v7a] SharedLibrary  : libplatinum-jni.so<br>[armeabi-v7a] Install        : libplatinum-jni.so &#x3D;&gt; libs&#x2F;armeabi-v7a&#x2F;libplatinum-jni.so<br>[arm64-v8a] Compile++      : platinum-jni &lt;&#x3D; platinum-jni.cpp<br>[arm64-v8a] StaticLibrary  : libstdc++.a<br>[arm64-v8a] SharedLibrary  : libplatinum-jni.so<br>[arm64-v8a] Install        : libplatinum-jni.so &#x3D;&gt; libs&#x2F;arm64-v8a&#x2F;libplatinum-jni.so</p></blockquote><p>obj和 libs目录区别：一个用于追溯和调试，一个用于正式版发布。</p><blockquote><p>(dlna) wesley@Wesley:~&#x2F;Project&#x2F;Platinum&#x2F;Source&#x2F;Platform&#x2F;Android&#x2F;module&#x2F;platinum$ file libs&#x2F;arm64-v8a&#x2F;libplatinum-jni.so<br>libs&#x2F;arm64-v8a&#x2F;libplatinum-jni.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]&#x3D;a8cdaa3a1288bd98c13556fbd4a1499e31005091, <strong>stripped</strong></p><p>(dlna) wesley@Wesley:~&#x2F;Project&#x2F;Platinum&#x2F;Source&#x2F;Platform&#x2F;Android&#x2F;module&#x2F;platinum$ file obj&#x2F;local&#x2F;arm64-v8a&#x2F;libplatinum-jni.so<br>obj&#x2F;local&#x2F;arm64-v8a&#x2F;libplatinum-jni.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, BuildID[sha1]&#x3D;a8cdaa3a1288bd98c13556fbd4a1499e31005091, <strong>with debug_info, not stripped</strong></p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;下载代码（该仓库我已经修改相关编译错误和支持安卓 64 位 so 编译）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/wesley666/Platinum -b</summary>
        
      
    
    
    
    <category term="投屏" scheme="https://iwesley.top/categories/%E6%8A%95%E5%B1%8F/"/>
    
    
    <category term="投屏" scheme="https://iwesley.top/tags/%E6%8A%95%E5%B1%8F/"/>
    
    <category term="DLNA" scheme="https://iwesley.top/tags/DLNA/"/>
    
  </entry>
  
  <entry>
    <title>安卓Activity执行finish后onNewIntent也执行了</title>
    <link href="https://iwesley.top/article/88a54bc8/"/>
    <id>https://iwesley.top/article/88a54bc8/</id>
    <published>2025-01-04T09:34:44.000Z</published>
    <updated>2025-01-04T10:36:03.481Z</updated>
    
    <content type="html"><![CDATA[<p>测试反应投屏时下一集可能播放不成功。</p><p>首先看一下日志：</p><blockquote><p>onCompletion<br>onCast<br>handlerMessage: 2<br>finish: PlayerActivity@abc7fdc<br>onPause: PlayerActivity@abc7fdc<br>onNewIntent: PlayerActivity@abc7fdc<br>onResume: PlayerActivity@abc7fdc<br>onPause: PlayerActivity@abc7fdc<br>onResume: HomeActivity@71ec50a<br>onstop: PlayerActivity@abc7fdc<br>onDestroy:PlayerActivity@abc7fdc</p></blockquote><p>看到日志时很迷惑，为什么 finish 了，安卓还会执行onNewIntent，不应该是新建一个 activity 吗？</p><p>先来看一下场景描述：</p><p>视频播完后会发送一个 finish 信息，如果 3s 内没有下一个视频进来就会执行 finish，有视频进来就会在 onNewIntent 中 remove 掉这条信息。</p><p>经过实验和详细分析后，终于找到了问题原因：</p><p>首先因为视频播放结束发了一条finish消息，finish消息没有执行时突然来了下一集的消息，这时候执行startActivty会插入一条onNewIntent消息。结果，这时候finish因为时间到了，该执行了。然后 finish 执行完后，onNewIntent 也该执行了。执行完后因为 finish 的原因， onDestroy也执行了。结果就是下一集没播完就退出来了。</p><p>解决办法：在startActivity前remove掉finish消息，比onNewIntent 的时间节点还要提前。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>面试必备：Android（9.0）Activity启动流程(一) : <a href="https://juejin.cn/post/6844903959581163528">https://juejin.cn/post/6844903959581163528</a></p><p>面试必备：Android（9.0）Activity启动流程(二) : <a href="https://juejin.cn/post/6844903959589552142">https://juejin.cn/post/6844903959589552142</a></p><p><a href="https://stackoverflow.com/questions/24639272/onnewintent-called-after-finish-executed">android - onNewIntent called after finish() executed - Stack Overflow</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;测试反应投屏时下一集可能播放不成功。&lt;/p&gt;
&lt;p&gt;首先看一下日志：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;onCompletion&lt;br&gt;onCast&lt;br&gt;handlerMessage: 2&lt;br&gt;finish:</summary>
        
      
    
    
    
    <category term="AndroidBugFix" scheme="https://iwesley.top/categories/AndroidBugFix/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="AndroidActivity" scheme="https://iwesley.top/tags/AndroidActivity/"/>
    
  </entry>
  
  <entry>
    <title>安卓应用4字节不对齐导致so加载失败</title>
    <link href="https://iwesley.top/article/18f59983/"/>
    <id>https://iwesley.top/article/18f59983/</id>
    <published>2025-01-04T03:12:24.000Z</published>
    <updated>2025-01-04T08:32:28.983Z</updated>
    
    <content type="html"><![CDATA[<p>今天把一个apk给厂商签名后直接push到机器的&#x2F;system&#x2F;app,结果运行app时显示so找不到。报错：</p><blockquote><p> java stacktrace:<br>java.lang.UnsatisfiedLinkError: Library mmkv not found; tried [&#x2F;system&#x2F;lib&#x2F;libmmkv.so, &#x2F;product&#x2F;lib&#x2F;libmmkv.so]<br>at java.lang.Runtime.loadLibrary0(Runtime.java:1101)<br>at java.lang.System.loadLibrary(System.java:1669)<br>at com.tencent.mmkv.MMKV.doInitialize(MMKV.java:226)<br>at com.tencent.mmkv.MMKV.initialize(MMKV.java:208)<br>at com.tencent.mmkv.MMKV.initialize(MMKV.java:94)<br>at com.wesley.CustomApplication.onCreate(CustomApplication.kt:14)<br>at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1154)<br>at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5871)<br>at android.app.ActivityThread.access$1100(ActivityThread.java:199)<br>at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1650)<br>at android.os.Handler.dispatchMessage(Handler.java:106)<br>at android.os.Looper.loop(Looper.java:193)<br>at android.app.ActivityThread.main(ActivityThread.java:6669)<br>at java.lang.reflect.Method.invoke(Native Method)<br>at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)<br>at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:922)  </p></blockquote><p>日志（xcrash 自己有so异常捕获，所以直到加载 mmkv 才抛出异常）</p><blockquote><p> 12-27 14:58:04.840  9717  9717 E System  : ##loadLibrary0## &#x2F;system&#x2F;app&#x2F;demo&#x2F;demo_V1.0.0(2412261921)-release-signed.apk!&#x2F;lib&#x2F;armeabi-v7a&#x2F;libxcrash.so error: dlopen failed: library “&#x2F;system&#x2F;app&#x2F;demo&#x2F;demo_V1.0.0(2412261921)-release-signed.apk!&#x2F;lib&#x2F;armeabi-v7a&#x2F;libxcrash.so” not found, and try to find so file from the lib path<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper: xcrash: NativeHandler System.loadLibrary failed<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper: java.lang.UnsatisfiedLinkError: Library xcrash not found; tried [&#x2F;system&#x2F;lib&#x2F;libxcrash.so, &#x2F;product&#x2F;lib&#x2F;libxcrash.so]<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at java.lang.Runtime.loadLibrary0(Runtime.java:1101)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at java.lang.System.loadLibrary(System.java:1669)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at xcrash.NativeHandler.initialize(NativeHandler.java:89)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at xcrash.XCrash.init(XCrash.java:189)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.wesley.base.apm.XCrashWrapper.<init>(XCrashWrapper.kt:131)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.wesley.base.apm.XCrashWrapper.<init>(XCrashWrapper.kt:17)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.wesley.CastApplication.attachBaseContext(CastApplication.kt:43)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.Application.attach(Application.java:212)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.Instrumentation.newApplication(Instrumentation.java:1121)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.LoadedApk.makeApplication(LoadedApk.java:1065)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5842)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread.access$1100(ActivityThread.java:199)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1650)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.os.Handler.dispatchMessage(Handler.java:106)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.os.Looper.loop(Looper.java:193)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at android.app.ActivityThread.main(ActivityThread.java:6669)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at java.lang.reflect.Method.invoke(Native Method)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)<br>12-27 14:58:04.843  9717  9717 E demo-XCrashWrapper:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:922)  </p></blockquote><p>因为安卓6开始支持直接加载apk内部so，如果编译后的 apk 内部 so 是不压缩的，那么就不需要释放到目录了。所以排除是因为不解压 so 到&#x2F;system&#x2F;app&#x2F;demo&#x2F;lib&#x2F;arm 引起的问题，虽然这样也可以解决问题。</p><blockquote><p>如果apk的minSdkVersion &gt;&#x3D; 23 并且 Android Gradle plugin &gt;&#x3D; 3.6.0情况下，打包时android:extractNativeLibs&#x3D;false，apk的so默认是不压缩的。</p><p>在minSdkVersion &lt; 23 或 Android Gradle plugin &lt; 3.6.0情况下，打包时 android:extractNativeLibs&#x3D;true，apk的so默认是压缩的。</p></blockquote><p>然后，我尝试push没有给厂商签名前的版本 apk 到机器上是正常的，那么应该是厂商签名导致 apk 发生了变化。刚好前几天碰到安卓签名问题<a href="https://iwesley.top/article/133f2b7a/">安卓15预置第三方apk时签名报错问题解决 - Wesley’s Blog</a>。然后我就用命令看了一下：<code>zipalign -c -v  4 demo_sign.apk</code></p><p><a href="https://developer.android.com/tools/zipalign">zipalign  | Android Studio  | Android Developers</a></p><p>显示：<code>Verification FAILED</code>，那就是 4 字节没有对齐。</p><p>查看签名版本<code>apksigner verify -v demo_sign.apk | grep Verified</code></p><p>只有v1签名</p><blockquote><p>~&#x2F;Project$ apksigner verify -v demo_sign.apk | grep Verified</p><p>Verified using v1 scheme (JAR signing): true</p><p>Verified using v2 scheme (APK Signature Scheme v2): false</p><p>Verified using v3 scheme (APK Signature Scheme v3): false</p><p>Verified using v3.1 scheme (APK Signature Scheme v3.1): false</p><p>Verified using v4 scheme (APK Signature Scheme v4): false</p><p>Verified for SourceStamp: false</p></blockquote><p>因为是v1签名，执行<code>zipalign -v -p 4 demo_sign.apk  demo_sign_align.apk</code>对齐4 字节不会破坏厂商的签名信息，然后push进去果然好了。</p><p>然后我又试着安装没有对齐前的，结果直接报错了：</p><blockquote><p>PS C:\Users\Wesley&gt; adb  install Y:\Project\demo_sign.apk</p><p>Performing Streamed Install</p><p>adb: failed to install Y:\Project\demo_sign.apk: Failure [INSTALL_FAILED_INVALID_APK: Failed to extract native libraries, res&#x3D;-2]</p></blockquote><p>但是系统扫描安装却是可以通过的，所以很难发现是字节不对齐引起的。</p><h2 id="深究"><a href="#深究" class="headerlink" title="深究"></a>深究</h2><p>之前直接搜索安卓java.lang.UnsatisfiedLinkError是很难找到针对这种问题的解决方法的。因为现在有了解决办法，所以换成UnsatisfiedLinkError zipalign进行谷歌搜索。结果就出来了：</p><p><a href="https://stackoverflow.com/questions/72544099/java-lang-unsatisfiedlinkerror-when-installing-as-system-app">android - java.lang.UnsatisfiedLinkError when installing as system app - Stack Overflow</a></p><p><a href="https://ask.seowhy.com/question/175285">zipflinger导致的UnsatisfiedLinkError分析 - 搜外SEO问答</a></p><p><a href="https://blog.51cto.com/u_15075514/3336070">zipflinger导致的UnsatisfiedLinkError分析_mb5ff2f24b42377的技术博客_51CTO博客</a></p><p>用 AI大模型总结一下：</p><blockquote><p>这篇文章主要分析了在Android开发中，由于升级Android Gradle Plugin (AGP) 版本导致的UnsatisfiedLinkError问题，并提供了相应的解决方案。以下是文章的主要内容总结：</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><ul><li><strong>问题现象</strong>：在Android 9.0环境下，将AGP从3.6.1升级到4.1.0后，预装在&#x2F;system&#x2F;priv-app下的APP出现了UnsatisfiedLinkError崩溃。</li><li><strong>问题原因</strong>：升级AGP后，系统在加载so文件时失败，具体表现为so文件在APK中的对齐方式有问题。</li></ul><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ul><li><strong>so文件加载流程</strong>：系统使用“!&#x2F;”分隔符来定位so文件路径，并在APK中查找对应的entry。问题出在zipalign处理上，导致so文件的对齐不正确。</li><li><strong>zipalign的作用</strong>：确保APK中所有未压缩数据在4字节边界上对齐，以便使用mmap()直接访问，减少RAM消耗。</li><li><strong>系统编译处理</strong>：Android系统在编译时会对privileged app执行uncompress-dexs操作，将压缩存储的dex文件变为不压缩存储。之后还会进行align-package操作。</li></ul><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><ul><li><strong>zipflinger工具</strong>：从AGP 4.1开始，默认在构建release版本时启用zipflinger工具进行打包。zipflinger改变了APK的打包方式，导致uncompress-dexs操作后zipalign出现问题。</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><strong>禁用zipflinger</strong>：在app工程的gradle.properties中加入配置以禁用zipflinger。</li><li><strong>不解压 dex</strong>：DONT_UNCOMPRESS_PRIV_APPS_DEXS :&#x3D; true，可能会降低 dex 加载速度。</li><li><strong>使用zip2zip工具</strong>：在最新的AOSP源码中，使用zip2zip工具来处理dex文件的解压缩，以适配zipflinger打包的APK。</li><li><strong>其他方法</strong>：包括回退AGP版本、修改系统编译脚本等，但这些方法各有优缺点。</li></ul></blockquote><p>虽然引起问题的原因不一样，但都是因为字节不对齐引起的 so 找不到。</p><p>下面来分析一下具体原因：</p><p>so加载调用栈</p><blockquote><p>ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;lang&#x2F;System.java  –&gt; System.loadLibrary</p><p>ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;lang&#x2F;Runtime.java  –&gt; Runtime.loadLibrary0 -&gt; nativeLoad</p><p>ojluni&#x2F;src&#x2F;main&#x2F;native&#x2F;Runtime.c  –&gt; Runtime_nativeLoad</p><p>art&#x2F;openjdkjvm&#x2F;OpenjdkJvm.cc  –&gt; JVM_NativeLoad</p><p>art&#x2F;runtime&#x2F;java_vm_ext.cc –&gt; JavaVMExt::LoadNativeLibrary</p><p>system&#x2F;core&#x2F;libnativeloader&#x2F;native_loader.cpp –&gt; OpenNativeLibrary</p><p>bionic&#x2F;libdl&#x2F;libdl.cpp –&gt; android_dlopen_ext</p><p>bionic&#x2F;linker&#x2F;dlfcn.cpp –&gt; __loader_android_dlopen_ext</p><p>bionic&#x2F;linker&#x2F;dlfcn.cpp –&gt; dlopen_ext</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; do_dlopen</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; find_library</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; find_libraries</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; find_library_internal</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; load_library</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; open_library</p><p>bionic&#x2F;linker&#x2F;linker.cpp –&gt; open_library_in_zipfile</p></blockquote><p>重点看 <code>bionic/linker/linker.cpp --&gt; open_library_in_zipfile</code> 这个函数，导致加载失败的是以下条件 <code>entry.offset % PAGE_SIZE != 0</code></p><p><a href="http://xrefandroid.com/android-9.0.0_r61/xref/bionic/linker/linker.cpp#992">http://xrefandroid.com/android-9.0.0_r61/xref/bionic/linker/linker.cpp#992</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (entry.method != kCompressStored || (entry.offset % PAGE_SIZE) != <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">close</span>(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结来说，就是签名的时候破坏了4字节对齐，导致 so 加载失败。所以，以后碰到此类问题时，可以执行<code>zipalign -c -v  4 xxx.apk</code>先看一下是否4字节对齐。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今天把一个apk给厂商签名后直接push到机器的&amp;#x2F;system&amp;#x2F;app,结果运行app时显示so找不到。报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; java</summary>
        
      
    
    
    
    <category term="Android Build System" scheme="https://iwesley.top/categories/Android-Build-System/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="aosp编译" scheme="https://iwesley.top/tags/aosp%E7%BC%96%E8%AF%91/"/>
    
    <category term="Android.mk" scheme="https://iwesley.top/tags/Android-mk/"/>
    
    <category term="Android.bp" scheme="https://iwesley.top/tags/Android-bp/"/>
    
  </entry>
  
  <entry>
    <title>安卓多渠道apk配置不同签名</title>
    <link href="https://iwesley.top/article/611fb416/"/>
    <id>https://iwesley.top/article/611fb416/</id>
    <published>2024-12-24T13:39:40.000Z</published>
    <updated>2024-12-29T07:06:02.588Z</updated>
    
    <content type="html"><![CDATA[<p>一般签名都是放在buildTypes里面：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs groovy">...<br>android &#123;<br>    ...<br>    defaultConfig &#123;...&#125;<br>    signingConfigs &#123;<br>        release &#123;<br>            storeFile file(<span class="hljs-string">&quot;myreleasekey.keystore&quot;</span>)<br>            storePassword <span class="hljs-string">&quot;password&quot;</span><br>            keyAlias <span class="hljs-string">&quot;MyReleaseKey&quot;</span><br>            keyPassword <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>    &#125;<br>    buildTypes &#123;<br>        release &#123;<br>            ...<br>            signingConfig signingConfigs.release<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是多渠道时，使用配置的优先级从高到低分别是buildTypes、productFlavor、defaultConfig，如果按上面配置的话，根本修改不了签名。所以修改成以下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    ...<br>    signingConfigs &#123;<br>        release &#123;<br>            storeFile file(<span class="hljs-string">&quot;myreleasekey.keystore&quot;</span>)<br>            storePassword <span class="hljs-string">&quot;password&quot;</span><br>            keyAlias <span class="hljs-string">&quot;MyReleaseKey&quot;</span><br>            keyPassword <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>        demo &#123;<br>            storeFile file(<span class="hljs-string">&quot;myreleasekey.keystore&quot;</span>)<br>            storePassword <span class="hljs-string">&quot;password&quot;</span><br>            keyAlias <span class="hljs-string">&quot;MyReleaseKey&quot;</span><br>            keyPassword <span class="hljs-string">&quot;password&quot;</span><br>        &#125;<br>    &#125;<br>    defaultConfig &#123;<br>        signingConfig signingConfigs.release <span class="hljs-comment">//默认签名</span><br>    &#125;<br>    buildTypes &#123;<br>        debug&#123;<br>            signingConfig <span class="hljs-literal">null</span> <span class="hljs-comment">//这里一定要置null，否则gralde会插入默认签名</span><br>        &#125;<br>        release&#123;...&#125;<br>    &#125;<br>    <span class="hljs-comment">// Specifies one flavor dimension.</span><br>    flavorDimensions <span class="hljs-string">&quot;version&quot;</span><br>    productFlavors &#123;<br>        demo &#123;<br>            dimension <span class="hljs-string">&quot;version&quot;</span><br>            applicationIdSuffix <span class="hljs-string">&quot;.demo&quot;</span><br>            versionNameSuffix <span class="hljs-string">&quot;-demo&quot;</span><br>            signingConfig signingConfigs.demo <span class="hljs-comment">//渠道签名</span><br>        &#125;<br>        full &#123;<br>            dimension <span class="hljs-string">&quot;version&quot;</span><br>            applicationIdSuffix <span class="hljs-string">&quot;.full&quot;</span><br>            versionNameSuffix <span class="hljs-string">&quot;-full&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>按上面配置完后，渠道可以按照自己需求替换签名了。特别注意debug类型那里要置<code>signingConfig null</code>，否则编译debug版本时签名会不生效，因为gradle会插入默认签名，替换掉渠道的签名。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;一般签名都是放在buildTypes里面：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="AppBuild" scheme="https://iwesley.top/categories/AppBuild/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="Android多渠道" scheme="https://iwesley.top/tags/Android%E5%A4%9A%E6%B8%A0%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>安卓15预置第三方apk时签名报错问题解决</title>
    <link href="https://iwesley.top/article/133f2b7a/"/>
    <id>https://iwesley.top/article/133f2b7a/</id>
    <published>2024-12-24T13:13:45.000Z</published>
    <updated>2024-12-29T07:06:02.588Z</updated>
    
    <content type="html"><![CDATA[<p>有同事反馈集成apk时安装失败</p><blockquote><p>PackageManager: Failed to scan &#x2F;product&#x2F;app&#x2F;test: No APK Signature Scheme v2 signature in package &#x2F;product&#x2F;app&#x2F;test&#x2F;test.apk</p></blockquote><p>查看编译后的apk签名信息</p><blockquote><p>DOES NOT VERIFY</p><p>ERROR: JAR signer CERT.RSA: JAR signature META-INF&#x2F;CERT.SF indicates the APK is signed using APK Signature Scheme v2 but no such signature was found. Signature stripped?</p></blockquote><p>但是用命令查看我的apk是正常的<code>apksigner  verify -v  test.apk  | grep Verified</code></p><blockquote><p>Verified using v1 scheme (JAR signing): true</p><p>Verified using v2 scheme (APK Signature Scheme v2): true</p><p>Verified using v3 scheme (APK Signature Scheme v3): false</p><p>Verified using v3.1 scheme (APK Signature Scheme v3.1): false</p><p>Verified using v4 scheme (APK Signature Scheme v4): false</p><p>Verified for SourceStamp: false</p></blockquote><p>那么应该是编译过程做了某些变动。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><h2 id="通过预编译的方法"><a href="#通过预编译的方法" class="headerlink" title="通过预编译的方法"></a>通过预编译的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">android_app_import &#123;<br>    name: <span class="hljs-string">&quot;test&quot;</span>,<br>    apk: <span class="hljs-string">&quot;test.apk&quot;</span>,<br>    <span class="hljs-comment">// 保留apk自己的签名</span><br>    presigned: <span class="hljs-literal">true</span>,<br>    preprocessed: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// 打开将放到对应分区目录的priv-app文件夹下</span><br>    <span class="hljs-comment">// privileged: true,</span><br>    <span class="hljs-comment">// 打开将放到system_ext分区</span><br>    <span class="hljs-comment">// system_ext_specific: true,</span><br>    <span class="hljs-comment">// 打开将放到product分区</span><br>    <span class="hljs-comment">// product_specific: true,</span><br>    <span class="hljs-comment">// 打开将放到vendor分区</span><br>    <span class="hljs-comment">// proprietary: true,</span><br>    <span class="hljs-comment">// odm分区</span><br>    <span class="hljs-comment">// device_specific: true</span><br>    <span class="hljs-comment">// apk优化，内置三方apk时建议关闭</span><br>    dex_preopt: &#123;<br>        enabled: <span class="hljs-literal">false</span>,<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>在安卓15上新增了<a href="http://xrefandroid.com/android-15.0.0_r1/xref/build/soong/java/app_import.go#376">app_import.go - OpenGrok cross reference for &#x2F;build&#x2F;soong&#x2F;java&#x2F;app_import.go</a></p><p>validatePresignedApk检测</p><p>如果加了presigned，但不加preprocessed，同时targetSdk大于等于30就会编译报错，更加方便开发者定位问题：</p><blockquote><p>[100% 5&#x2F;5 0s remaining] Check presigned apkFAILED: out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stampbuild&#x2F;soong&#x2F;scripts&#x2F;check_prebuilt_presigned_apk.py –aapt2 out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;aapt2 –zipalign out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;zipalign packages&#x2F;test&#x2F;test.apk out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stamppackages&#x2F;test&#x2F;test.apk: Prebuilt, presigned apks with targetSdkVersion &gt;&#x3D; 30 (or a codename targetSdkVersion) must set <strong>preprocessed: true</strong> in the Android.bp definition (because they must be signed with signature v2, and the build system would wreck that signature otherwise)</p></blockquote><p>另外apk里面的so不能压缩，否则会报错</p><blockquote><p>FAILED: out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stamp</p><p>build&#x2F;soong&#x2F;scripts&#x2F;check_prebuilt_presigned_apk.py –aapt2 out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;aapt2 –zipalign out&#x2F;host&#x2F;linux-x86&#x2F;bin&#x2F;zipalign –preprocessed packages&#x2F;test&#x2F;test.apk out&#x2F;soong&#x2F;.intermediates&#x2F;packages&#x2F;test&#x2F;test&#x2F;android_common&#x2F;validated-prebuilt&#x2F;check.stamp</p><p>packages&#x2F;test&#x2F;test.apk: <strong>Contains compressed JNI libraries</strong></p></blockquote><p>因为安卓6开始支持直接加载apk里面的so，如果压缩的话，预编译会在apk内部进行解压，那么就会破坏apk签名。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412242117760.png" alt="img"></p><p>其实，如果apk的minSdkVersion &gt;&#x3D; 23 并且 Android Gradle plugin &gt;&#x3D; 3.6.0情况下，打包时android:extractNativeLibs&#x3D;false，apk的so默认是不压缩的。</p><p>在minSdkVersion &lt; 23 或 Android Gradle plugin &lt; 3.6.0情况下，打包时 android:extractNativeLibs&#x3D;true，apk的so默认是压缩的。</p><p>参考：<a href="https://juejin.cn/post/6943920550125420558">https://juejin.cn/post/6943920550125420558</a></p><p><a href="https://blog.csdn.net/yzyeilin/article/details/139968840">Android13解决android_app_import内置第三方APK安装失败问题_but no such signature was found. signature strippe-CSDN博客</a></p><p><a href="https://blog.csdn.net/chuyouyinghe/article/details/131001532">浅谈extractNativeLibs</a></p><h2 id="通过直接拷贝的方法"><a href="#通过直接拷贝的方法" class="headerlink" title="通过直接拷贝的方法"></a>通过直接拷贝的方法</h2><p>参考：<a href="https://blog.csdn.net/wangwei6227/article/details/123727372">https://blog.csdn.net/wangwei6227/article/details/123727372</a></p><p>同样要注意apk so的压缩问题，如果是压缩过的，必须提取出来，并拷贝到apk机器目录。</p><h2 id="可能遇到的selinux权限问题"><a href="#可能遇到的selinux权限问题" class="headerlink" title="可能遇到的selinux权限问题"></a>可能遇到的selinux权限问题</h2><blockquote><p>01-01 12:00:39.520000  5326  5326 W om.skype.raider: type&#x3D;1400 audit(0.0:64): avc: denied { read } for name&#x3D;”libSkypeAndroid.so” dev&#x3D;”mmcblk0p22” ino&#x3D;770074 scontext&#x3D;u:r:untrusted_app:s0:c512,c768 tcontext&#x3D;u:object_r:system_data_file:s0 tclass&#x3D;file permissive&#x3D;0</p></blockquote><p>#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; untrusted_app.te &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>allow untrusted_app system_data_file:file r_file_perms;</p><p>参考：<a href="https://www.codeleading.com/article/6471686269/">采用Signature Scheme v2签名方式的APK预置失败 </a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;有同事反馈集成apk时安装失败&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PackageManager: Failed to scan &amp;#x2F;product&amp;#x2F;app&amp;#x2F;test: No APK Signature Scheme v2</summary>
        
      
    
    
    
    <category term="Android Build System" scheme="https://iwesley.top/categories/Android-Build-System/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="aosp编译" scheme="https://iwesley.top/tags/aosp%E7%BC%96%E8%AF%91/"/>
    
    <category term="Android.mk" scheme="https://iwesley.top/tags/Android-mk/"/>
    
    <category term="Android.bp" scheme="https://iwesley.top/tags/Android-bp/"/>
    
  </entry>
  
  <entry>
    <title>咪咕视频DLNA投屏跳集问题分析</title>
    <link href="https://iwesley.top/article/73728aea/"/>
    <id>https://iwesley.top/article/73728aea/</id>
    <published>2024-12-08T12:08:50.000Z</published>
    <updated>2024-12-24T12:51:46.756Z</updated>
    
    <content type="html"><![CDATA[<p>QA在测试公司投屏应用时，发现咪咕视频DLNA投剧集时有时候会跳过一集直接播下一集的问题。</p><p>尝试自行分析解决不了后，我决定分析一下竞品应用：当贝投屏，结果发现它是正常的。由于当贝投屏是个黑盒子，所以决定抓包看一下。</p><p><a href="https://www.androidtcpdump.com/android-tcpdump/downloads">Android tcpdump</a></p><p><code>tcpdump tcp -i any -p -s 0 -w /sdcard/capture.pcap</code></p><h2 id="当贝投屏抓包分析"><a href="#当贝投屏抓包分析" class="headerlink" title="当贝投屏抓包分析"></a>当贝投屏抓包分析</h2><p>运行命令后开始投剧集到当贝投屏并通过进度条操作触发切集，把抓包文件adb pull出来放到WireShark去分析。</p><p>由于DLNA建连后的命令交互是通过http的，所以这里只显示http协议，并通过搜索SetAVTransportURI定位到投屏时间点。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082026499-wireshark.jpg" alt="img_v3_02h8_65bf3dab-7966-48b1-bdaa-8343bca7898g"></p><p>首先看一下即将切集前手机端获取到的信息：</p><p>可以看到影片的时长和进度都有值，快播完了。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082039758-wireshark.jpg" alt="img_v3_02h8_fe3604f0-5242-41b8-b950-fab2c62663dg"></p><p>切集时：</p><p>手机端获取到的播放状态是stopped，影片时长和进度都是0</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082042875.jpg" alt="img_v3_02h8_954cb5c2-08c9-47ec-8d47-0c14b51b600g"></p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082041740.jpg" alt="img_v3_02h8_613904b8-aa1e-4128-b904-164ff238ed3g"></p><p>切集后：</p><p>手机端获取的信息正常</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082044535.jpg" alt="img_v3_02h8_f8a5dc01-ae9d-47d8-9abc-0a395a68bd8g"></p><h2 id="我司投屏抓包分析"><a href="#我司投屏抓包分析" class="headerlink" title="我司投屏抓包分析"></a>我司投屏抓包分析</h2><p>切集前：</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082045162.jpg" alt="img_v3_02h8_ef543816-16f1-4e55-a74b-e703ef21e46g"></p><p>切集后：</p><p>获取到的影片进度和时长都是上个视频的信息，导致咪咕产生了误判断，认为这一集也播完了，造成跳集。</p><p><img src="https://cdn.jsdelivr.net/gh/wesley666/picgo/img2023/202412082045275.jpg" alt="img_v3_02h8_dac2eede-52f2-4137-8b42-18b7081eaaeg"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>收到手机端的stop指令后，立即将播放状态置stopped，同时将影片时长和进度也置0。此外，还要拦截播放器到手机端的状态同步直到新的视频起播。</p><p>另外还要注意处理线程调度延迟的问题，如果stop指令和setUri指令发送时间比较接近，虽然看起来是stop在前，setUri在后，但如果是在不同线程回调上来的，可能存在setUri先执行的情况，要注意处理这种情况，避免误退出。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;QA在测试公司投屏应用时，发现咪咕视频DLNA投剧集时有时候会跳过一集直接播下一集的问题。&lt;/p&gt;
&lt;p&gt;尝试自行分析解决不了后，我决定分析一下竞品应用：当贝投屏，结果发现它是正常的。由于当贝投屏是个黑盒子，所以决定抓包看一下。&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="投屏" scheme="https://iwesley.top/categories/%E6%8A%95%E5%B1%8F/"/>
    
    
    <category term="投屏" scheme="https://iwesley.top/tags/%E6%8A%95%E5%B1%8F/"/>
    
    <category term="DLNA" scheme="https://iwesley.top/tags/DLNA/"/>
    
  </entry>
  
  <entry>
    <title>Android.mk基础知识</title>
    <link href="https://iwesley.top/article/eaba12cd/"/>
    <id>https://iwesley.top/article/eaba12cd/</id>
    <published>2024-11-17T11:11:07.000Z</published>
    <updated>2024-12-24T12:51:46.755Z</updated>
    
    <content type="html"><![CDATA[<p>Android 浅度解析：mk预置AAR、SO文件、APP包和签名-阿里云开发者社区: <a href="https://developer.aliyun.com/article/1488469">https://developer.aliyun.com/article/1488469</a></p><p>android系统添加预置APP（so库自动释放) - 庚拓天下 - 博客园: <a href="https://www.cnblogs.com/genggeng/p/10563585.html">https://www.cnblogs.com/genggeng/p/10563585.html</a></p><p>使用@符号和不使用@符号的区别<br>在Android.mk中，使用@符号和不使用@符号有一些区别：<br>? 使用@符号可以提高性能，因为不需要解压和拷贝SO文件，也可以节省空间，因为不需要存储多余的SO文件。<br>? 不使用@符号可以提高兼容性，因为可以针对不同的平台提供相应的SO文件，而不需要考虑APK中是否有对应平台的SO文件。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Android 浅度解析：mk预置AAR、SO文件、APP包和签名-阿里云开发者社区: &lt;a</summary>
        
      
    
    
    
    <category term="Android Build System" scheme="https://iwesley.top/categories/Android-Build-System/"/>
    
    
    <category term="安卓Makefile" scheme="https://iwesley.top/tags/%E5%AE%89%E5%8D%93Makefile/"/>
    
  </entry>
  
  <entry>
    <title>Android APP drawable不同文件夹的用法</title>
    <link href="https://iwesley.top/article/b1dcee32/"/>
    <id>https://iwesley.top/article/b1dcee32/</id>
    <published>2024-11-17T10:33:19.000Z</published>
    <updated>2025-01-04T13:32:28.888Z</updated>
    
    <content type="html"><![CDATA[<p>Screen compatibility: <a href="https://developer.android.com/guide/practices/screens_support.html">https://developer.android.com/guide/practices/screens_support.html</a></p><p>App resources: <a href="https://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources">https://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources</a></p><p>Support different pixel densities: <a href="https://developer.android.com/training/multiscreen/screendensities">https://developer.android.com/training/multiscreen/screendensities</a></p><p>Drawable resources : <a href="https://developer.android.com/guide/topics/resources/drawable-resource">https://developer.android.com/guide/topics/resources/drawable-resource</a></p><p>res&#x2F;drawable&#x2F; is a legacy synonym for res&#x2F;drawable-mdpi&#x2F;, indicating that the drawables in that directory are set for mdpi density. If the device is running another density, those images will be downsampled (to ldpi) or upsampled (to anything else) to match the device density.</p><p>res&#x2F;drawable-nodpi&#x2F; says “these drawables should not be resampled for any density, but instead should be used as-is on all densities”.</p><p>drawable-nodpi will bypass scaling and drawable will use the default scaling:</p><p>mdpi &#x3D; 1x<br>hdpi &#x3D; 1.5x<br>xhdpi &#x3D; 2x<br>xxhdpi &#x3D; 3x<br>xxxhdpi &#x3D; 4x<br>drawable-nodpi is efficient if your code will be doing its own scaling (or no scaling) and you don’t want the image pre-scaled by Android.</p><p>There is also drawable-anydpi, just to make things more confusing.</p><p>drawable with no specifications will be used if an exact match on density and screen specifications does not exist. drawable-nodpi will be used after drawable.</p><p>UPDATE If you have both drawable and drawble-nodpi, the select order is either a more complex rule not documented or Android is broken. Through experimentation I confirmed that devices with screen density &lt; xhdpi will correctly select the drawable image. Devices with screen density &gt;&#x3D; xhdpi will select the drawable-nodpi.</p><p>Selection rule: 1. Pick match to screen density, one of these:</p><p>drawable-ldpi<br>drawable-mdpi<br>drawable-hdpi<br>drawable-xhdpi<br>drawable-xxhdpi<br>drawable-xxxhdpi<br>If no match on density, then select one of these<br>drawable (automatic scaling mdpi&#x3D;none… xxxhdpi&#x3D;4x)<br>drawable-nodpi (no scaling)<br>drawable-tvdpi<br>drawable-anydpi (no scaling)</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>android - Will a density qualified drawable folder or drawable-nodpi take precedence? - Stack Overflow: <a href="https://stackoverflow.com/questions/24682094/will-a-density-qualified-drawable-folder-or-drawable-nodpi-take-precedence">https://stackoverflow.com/questions/24682094/will-a-density-qualified-drawable-folder-or-drawable-nodpi-take-precedence</a></p><p>android - What is the difference between putting images in drawable and drawable-nodpi folder? - Stack Overflow: <a href="https://stackoverflow.com/questions/33631995/what-is-the-difference-between-putting-images-in-drawable-and-drawable-nodpi-fol">https://stackoverflow.com/questions/33631995/what-is-the-difference-between-putting-images-in-drawable-and-drawable-nodpi-fol</a></p><p>玩转Android drawable图片适配 - 漫思 - 博客园: <a href="https://www.cnblogs.com/sexintercourse/p/17020569.html">https://www.cnblogs.com/sexintercourse/p/17020569.html</a></p><p>Android 适配（drawable文件夹）图片适配（二） - 张亚楠 - 博客园: <a href="https://www.cnblogs.com/huihuizhang/p/9473698.html">https://www.cnblogs.com/huihuizhang/p/9473698.html</a></p><p>android（drawable文件夹）图片适配_drawable是什么文件-CSDN博客: <a href="https://blog.csdn.net/xuaho0907/article/details/72848520#:~:text=%E5%A6%82%E6%9E%9C%E5%9B%BE%E7%89%87%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95%E4%B8%BA,%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F%EF%BC%8C%E4%B8%8D%E8%BF%9B%E8%A1%8C%E7%BC%A9%E6%94%BE%E3%80%82&text=drawable%2Dnodpi%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E8%BF%99%E4%B8%AA,%E5%B0%B1%E4%BC%9A%E5%AE%9E%E9%99%85%E5%B1%95%E7%A4%BA%E5%A4%9A%E5%A4%A7%E3%80%82">https://blog.csdn.net/xuaho0907/article/details/72848520#:~:text=%E5%A6%82%E6%9E%9C%E5%9B%BE%E7%89%87%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95%E4%B8%BA,%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F%EF%BC%8C%E4%B8%8D%E8%BF%9B%E8%A1%8C%E7%BC%A9%E6%94%BE%E3%80%82&amp;text=drawable%2Dnodpi%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E8%BF%99%E4%B8%AA,%E5%B0%B1%E4%BC%9A%E5%AE%9E%E9%99%85%E5%B1%95%E7%A4%BA%E5%A4%9A%E5%A4%A7%E3%80%82</a></p><p>Android知识体系之drawable文件夹顺序 - 作业部落 Cmd Markdown 编辑阅读器: <a href="https://www.zybuluo.com/TryLoveCatch/note/590965">https://www.zybuluo.com/TryLoveCatch/note/590965</a></p><p>Android drawable文件夹那些事_安卓drawable文件夹的作用-CSDN博客: <a href="https://blog.csdn.net/qq_34341338/article/details/86706751">https://blog.csdn.net/qq_34341338/article/details/86706751</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Screen compatibility: &lt;a</summary>
        
      
    
    
    
    <category term="安卓APP" scheme="https://iwesley.top/categories/%E5%AE%89%E5%8D%93APP/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="AndroidAPPUI" scheme="https://iwesley.top/tags/AndroidAPPUI/"/>
    
  </entry>
  
  <entry>
    <title>Android ADB 常用命令</title>
    <link href="https://iwesley.top/article/dfa112ac/"/>
    <id>https://iwesley.top/article/dfa112ac/</id>
    <published>2024-11-17T10:27:15.000Z</published>
    <updated>2025-01-19T09:08:40.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="toybox和busybox"><a href="#toybox和busybox" class="headerlink" title="toybox和busybox"></a>toybox和busybox</h2><p><a href="https://blog.csdn.net/weixin_44311012/article/details/130203207">toybox 和 busybox 的作用</a></p><p>am monitor  可以持续监控App的包名，当切换应用时，如果包名有变化，就会在终端输出</p><h2 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h2><p>查看audio的全部信息（各音频流音量，焦点，策略等）</p><p>dumpsys audio</p><h3 id="音量"><a href="#音量" class="headerlink" title="音量"></a>音量</h3><h4 id="按键方式"><a href="#按键方式" class="headerlink" title="按键方式"></a>按键方式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">增加</span><br>input keyevent 24<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">减少</span><br>input keyevent 25<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">静音</span><br>input keyevent 164<br></code></pre></td></tr></table></figure><h4 id="media命令"><a href="#media命令" class="headerlink" title="media命令"></a>media命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设置音量并且显示音量UI</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">3 代表STREAM_SYSTEM</span><br>media volume --show --stream 3 --set 11 <br>media volume --show --stream 3 --adj raise<br>media volume --show --stream 0 --adj lower<br>media volume --show --stream 3 --get<br><span class="hljs-meta prompt_">#</span><span class="language-bash">控制播放暂停</span><br>media dispatch play<br>media dispatch pause<br></code></pre></td></tr></table></figure><p>安卓 11 开始 media 命令没有了，使用<code>cmd media_session</code> </p><p><code>cmd media_session  volume  --stream 3 --get</code></p><p><code>cmd media_session  volume --show --stream 3 --set 11</code></p><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p><code>service call audio</code></p><p><code>adb shell service call audio 9 i32 &lt;编号&gt; i32 &lt;类型&gt; i32 1</code></p><p>使用ADB调整Android设备音量及解决常见问题-CSDN博客: <a href="https://blog.csdn.net/run068/article/details/122824920">https://blog.csdn.net/run068/article/details/122824920</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;toybox和busybox&quot;&gt;&lt;a href=&quot;#toybox和busybox&quot; class=&quot;headerlink&quot; title=&quot;toybox和busybox&quot;&gt;&lt;/a&gt;toybox和busybox&lt;/h2&gt;&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Android调试相关" scheme="https://iwesley.top/categories/Android%E8%B0%83%E8%AF%95%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android APP组件化</title>
    <link href="https://iwesley.top/article/69eef408/"/>
    <id>https://iwesley.top/article/69eef408/</id>
    <published>2024-11-17T09:58:13.000Z</published>
    <updated>2024-12-24T12:51:46.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前导知识"><a href="#前导知识" class="headerlink" title="前导知识"></a>前导知识</h2><p>配置 build 变体 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/build/build-variants?hl=zh-cn#groovy">https://developer.android.com/build/build-variants?hl=zh-cn#groovy</a></p><p>Android模块化之MicroModule（微信Pins工程）相信你看过微信关于模块化的分享《微信Android模块化 - 掘金: <a href="https://juejin.cn/post/6844903647956959246?from=search-suggest">https://juejin.cn/post/6844903647956959246?from=search-suggest</a></p><p>怎么实现微信Android Pins工程结构？Pins工程结构是什么？ 如何做代码边界检查？ - 掘金: <a href="https://juejin.cn/post/6844903602645893128">https://juejin.cn/post/6844903602645893128</a></p><p>微信Android模块化架构重构实践: <a href="https://mp.weixin.qq.com/s/6Q818XA5FaHd7jJMFBG60w">https://mp.weixin.qq.com/s/6Q818XA5FaHd7jJMFBG60w</a></p><p>美团外卖Android平台化架构演进实践 - 美团技术团队: <a href="https://tech.meituan.com/2018/03/16/meituan-food-delivery-android-architecture-evolution.html">https://tech.meituan.com/2018/03/16/meituan-food-delivery-android-architecture-evolution.html</a></p><p>Android消息总线的演进之路：用LiveDataBus替代RxBus、EventBus - 美团技术团队: <a href="https://tech.meituan.com/2018/07/26/android-livedatabus.html">https://tech.meituan.com/2018/07/26/android-livedatabus.html</a></p><p>Android组件化方案及组件消息总线modular-event实战 - 美团技术团队: <a href="https://tech.meituan.com/2018/12/20/modular-event.html">https://tech.meituan.com/2018/12/20/modular-event.html</a></p><p>创建 Android 库 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/studio/projects/android-library?hl=zh-cn">https://developer.android.com/studio/projects/android-library?hl=zh-cn</a></p><p>添加 build 依赖项 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/build/dependencies?hl=zh-cn">https://developer.android.com/build/dependencies?hl=zh-cn</a></p><p>高级测试设置 ?|? Android Studio ?|? Android Developers: <a href="https://developer.android.com/studio/test/advanced-test-setup?hl=zh-cn#create-instrumented-test-for-build-variant">https://developer.android.com/studio/test/advanced-test-setup?hl=zh-cn#create-instrumented-test-for-build-variant</a></p><p>Andriod 多渠道分包，实用的module分层，开发代码混淆规Andriod studio 3.0 有必要重新学习更 - 掘金: <a href="https://juejin.cn/post/6844903518411702286">https://juejin.cn/post/6844903518411702286</a> （混淆规则）</p><h2 id="资源冲突"><a href="#资源冲突" class="headerlink" title="资源冲突"></a>资源冲突</h2><p>Android 组件资源覆盖冲突解决方案在 Android 的日常开发中，我们会使用到大量的第三方库或者自己编写的组件库 - 掘金: <a href="https://juejin.cn/post/6844903993894780942">https://juejin.cn/post/6844903993894780942</a></p><p><a href="https://github.com/hust201010701/CheckResourceConflict">https://github.com/hust201010701/CheckResourceConflict</a></p><p>Android Gradle Plugin 3.3 版本及其以上，提供了一个 API 可以获取编译所有的资源文件。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs groovy">variants.forEach &#123; variant -&gt;<br>    variant <span class="hljs-keyword">as</span> BaseVariantImpl<br>    <span class="hljs-comment">// files 即对应所有的编译资源</span><br>    <span class="hljs-keyword">def</span> files = variant.allRawAndroidResources.files<br><br></code></pre></td></tr></table></figure><p>终于理解～Android 模块化里的资源冲突? 前言 作为 Android 开发者，我们常常需要去管理非常多不同的资源文 - 掘金: <a href="https://juejin.cn/post/7170562275374268447">https://juejin.cn/post/7170562275374268447</a></p><p>利用Android Gradle进行自动化设置资源名命名规则一、背景描述： ????公司再不断推进组件化，多个Modul - 掘金: <a href="https://juejin.cn/post/7065889116780494855">https://juejin.cn/post/7065889116780494855</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;  <br>  <br>  flavorDimensions <span class="hljs-string">&quot;versionCode&quot;</span>  <br>  <br>  productFlavors &#123;  <br>      productFlavors.all &#123;<span class="hljs-comment">//遍历productFlavors多渠道，设置渠道号（xiaomi 、huawei）  </span><br>          flavor -&gt; flavor.manifestPlaceholders.put(<span class="hljs-string">&quot;CHANNEL&quot;</span>, name)  <br>      &#125;<br>  &#125;<br>  applicationVariants.all &#123; variant -&gt;  <br>      <span class="hljs-comment">// 打包完成后输出路径</span><br>      <span class="hljs-keyword">def</span> name = ((project.name != <span class="hljs-string">&quot;app&quot;</span>) ? project.name : rootProject.name.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>)) + <br>      <span class="hljs-string">&quot;_&quot;</span> + variant.flavorName + <br>      <span class="hljs-string">&quot;_&quot;</span> + variant.buildType.name + <br>      <span class="hljs-string">&quot;_&quot;</span> + variant.versionName + <br>      <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-keyword">new</span> Date().format(<span class="hljs-string">&#x27;yyyyMMddhhmm&#x27;</span>) + <span class="hljs-string">&quot;.apk&quot;</span>  <br>      <span class="hljs-comment">//相对路径app/build/outputs/apk/huawei/release/</span><br>      <span class="hljs-keyword">def</span> path = <span class="hljs-string">&quot;../../../../../apk/&quot;</span> <span class="hljs-comment">//相当于路径 app/apk/</span><br>      variant.outputs.each &#123; output -&gt;<br>          <span class="hljs-keyword">def</span> outputFile = output.outputFile<br>          <span class="hljs-keyword">if</span> (outputFile != <span class="hljs-literal">null</span> &amp;&amp; outputFile.name.endsWith(<span class="hljs-string">&#x27;.apk&#x27;</span>)) &#123;<br>               <span class="hljs-comment">//指定路径输出</span><br>               output.outputFileName = <span class="hljs-keyword">new</span> File(path, name)<br>          &#125;<br>      &#125; <br>      <span class="hljs-comment">// 在打包完成后还可以做一些别的操作，可以复制到指定目录，或者移动文件到指定目录</span><br>      variant.assemble.doLast &#123;  <br>          File out = <span class="hljs-keyword">new</span> File(“$&#123;project.rootDir&#125;/apk”)  <br>          variant.outputs.forEach &#123; file -&gt;  <br>            <span class="hljs-comment">//复制apk到指定文件夹</span><br>            <span class="hljs-comment">//copy &#123;  </span><br>            <span class="hljs-comment">//  from file.outputFile  </span><br>            <span class="hljs-comment">//  into out  </span><br>            <span class="hljs-comment">//&#125;</span><br>         <span class="hljs-comment">//把文件移动到指定文件夹  </span><br>          ant.move <span class="hljs-attr">file:</span> file.outputFile,  <br>                 <span class="hljs-symbol">todir:</span> <span class="hljs-string">&quot;$&#123;project.rootDir&#125;/apk&quot;</span><br>        &#125;  <br>      &#125; <br>  &#125;<br><span class="hljs-comment">//多渠道签名的配置</span><br>  signingConfigs &#123;<br>     test &#123;<br>        storeFile file(<span class="hljs-string">&quot;../test.keystore&quot;</span>)<br>        storePassword <span class="hljs-string">&#x27;test&#x27;</span><br>        keyAlias <span class="hljs-string">&#x27;test&#x27;</span><br>        keyPassword <span class="hljs-string">&#x27;test&#x27;</span><br>        v1SigningEnabled <span class="hljs-literal">true</span><br>        v2SigningEnabled <span class="hljs-literal">true</span><br>     &#125;<br>     xiaomi &#123;<br>        storeFile file(<span class="hljs-string">&quot;../xiaomi.keystore&quot;</span>)<br>        storePassword <span class="hljs-string">&#x27;xiaomi&#x27;</span><br>        keyAlias <span class="hljs-string">&#x27;xiaomi&#x27;</span><br>        keyPassword <span class="hljs-string">&#x27;xiaomi&#x27;</span><br>        v1SigningEnabled <span class="hljs-literal">true</span><br>        v2SigningEnabled <span class="hljs-literal">true</span><br>     &#125;<br>  &#125;<br>  buildTypes &#123;<br>       debug &#123;<br><span class="hljs-comment">//        debug这里设置不起作用，可能是编译器的问题？</span><br><span class="hljs-comment">//         productFlavors.xiaomi.signingConfig signingConfigs.test</span><br><span class="hljs-comment">//         productFlavors.huawei.signingConfig signingConfigs.test</span><br>       &#125;<br>       release &#123;<br>           productFlavors.xiaomi.signingConfig signingConfigs.xiaomi<br>           productFlavors.huawei.signingConfig signingConfigs.huawei<br>       &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs groovy">android &#123;<br>    variantFilter &#123; variant -&gt;<br>        <span class="hljs-keyword">if</span> (variant.buildType.name.equals(<span class="hljs-string">&#x27;debug&#x27;</span>)) &#123;<br>            variant.setIgnore(<span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">//执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。</span><br>    lintOptions &#123;<br>        checkReleaseBuilds <span class="hljs-literal">false</span><br>        abortOnError <span class="hljs-literal">false</span><br>        <span class="hljs-comment">// 防止在发布的时候出现因MissingTranslation导致Build Failed!</span><br>        disable <span class="hljs-string">&#x27;MissingTranslation&#x27;</span><br>    &#125;<br> <br>    dexOptions &#123;<br>        incremental <span class="hljs-literal">true</span><br>        javaMaxHeapSize <span class="hljs-string">&quot;8g&quot;</span><br>        jumboMode = <span class="hljs-literal">true</span><br>        preDexLibraries = <span class="hljs-literal">false</span><br>        threadCount =<span class="hljs-string">&quot;8&quot;</span><br>    &#125;<br><br></code></pre></td></tr></table></figure><p>missingDimensionStrategy </p><p>配置产品变种productFlavors matchingFallbacks missingDimensionStrategy - 简书: <a href="https://www.jianshu.com/p/4b311bd9840d">https://www.jianshu.com/p/4b311bd9840d</a></p><p>gradle - Android buildTypes vs. productFlavors error - Stack Overflow: <a href="https://stackoverflow.com/questions/64758477/android-buildtypes-vs-productflavors-error">https://stackoverflow.com/questions/64758477/android-buildtypes-vs-productflavors-error</a></p><p>ProductFlavor多渠道的神器 - 简书: <a href="https://www.jianshu.com/p/00ceb35b090b">https://www.jianshu.com/p/00ceb35b090b</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Android 多渠道打包多渠道配置（2 种方式） 1、可写在主模块（app）的 build.gradle 下 2、在项 - 掘金: <a href="https://juejin.cn/post/7023661293781385247">https://juejin.cn/post/7023661293781385247</a></p><p>Gradle多渠道打包(动态设定App名称，应用图标，替换常量，更改包名，变更渠道) - 简书: <a href="https://www.jianshu.com/p/533240d222d3">https://www.jianshu.com/p/533240d222d3</a></p><p>Android 官方模块化方案解读快速了解 Android 官方模块化方案。还有一些你可能不知道的实用小技巧。还有官方模 - 掘金: <a href="https://juejin.cn/post/7142884855091560479">https://juejin.cn/post/7142884855091560479</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;前导知识&quot;&gt;&lt;a href=&quot;#前导知识&quot; class=&quot;headerlink&quot; title=&quot;前导知识&quot;&gt;&lt;/a&gt;前导知识&lt;/h2&gt;&lt;p&gt;配置 build 变体 ?|? Android Studio ?|? Android Developers: &lt;a</summary>
        
      
    
    
    
    <category term="AndroidAPP架构" scheme="https://iwesley.top/categories/AndroidAPP%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="AndroidAPP" scheme="https://iwesley.top/tags/AndroidAPP/"/>
    
  </entry>
  
  <entry>
    <title>Tencent mars Xlog编译及使用方法</title>
    <link href="https://iwesley.top/article/ca471381/"/>
    <id>https://iwesley.top/article/ca471381/</id>
    <published>2024-11-17T09:40:51.000Z</published>
    <updated>2024-12-24T12:51:46.755Z</updated>
    
    <content type="html"><![CDATA[<p>Window11编译</p><blockquote><p>如果已经安装了cygwin，不需要卸载重装，只需要再次运行安装文件setup-x86_64.exe就可以下载或者卸载包。</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Window11编译&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果已经安装了cygwin，不需要卸载重装，只需要再次运行安装文件setup-x86_64.exe就可以下载或者卸载包。&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
        
      
    
    
    
    <category term="AndroidThirdPartSDK" scheme="https://iwesley.top/categories/AndroidThirdPartSDK/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="AndroidThirdPartySDK" scheme="https://iwesley.top/tags/AndroidThirdPartySDK/"/>
    
  </entry>
  
  <entry>
    <title>git常见问题</title>
    <link href="https://iwesley.top/article/ca7dd2f8/"/>
    <id>https://iwesley.top/article/ca7dd2f8/</id>
    <published>2024-11-17T09:20:38.000Z</published>
    <updated>2025-01-18T14:35:28.362Z</updated>
    
    <content type="html"><![CDATA[<p>gerrit draft and topic |: <a href="https://breezetemple.github.io/2019/08/30/gerrit-draft-and-topic/">https://breezetemple.github.io/2019/08/30/gerrit-draft-and-topic/</a></p><p>Gerrit相对Git提供了一个特有的命名空间refs&#x2F;for&#x2F;用来定义我们的提交上传到哪个branch，且可以用来区分我们的commit是提交到Gerrit进行审核还是直接提交到Git仓库，格式如下：</p><p>refs&#x2F;for&#x2F;<target-branch></p><p>Push 一个 Commit 到 Gerrit: git push origin HEAD:refs&#x2F;for&#x2F;master<br>直接 Push 一个 commit 到 Git 仓库：（默认配置成不允许） git push origin HEAD:master<br>当commit Push到Gerrit等待review时，Gerrit会将此commit保存在一个名为refs&#x2F;changes&#x2F;xx&#x2F;yy&#x2F;zz的一个暂存branch中。</p><p>zz为这个commit的patch set号<br>yy是change号<br>xx是change号的后两位</p><p>Draft<br>refs&#x2F;drafts&#x2F;<target branch></p><p>$ git push origin HEAD:refs&#x2F;drafts&#x2F;xxx<br>在Gerrit中点击Publish按钮转换为正式Change</p><p>Topic<br>refs&#x2F;for&#x2F;<target branch><br>refs&#x2F;for&#x2F;<target branch>&#x2F;<topic name></p><p>$ git push origin HEAD:refs&#x2F;for&#x2F;xxx%topic&#x3D;123<br>$ git push origin HEAD:refs&#x2F;for&#x2F;xxx&#x2F;123<br>Topic用于归类相关的提交，可以用上述的命令，同时可以在Gerrit中编辑Topic</p><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>为 http 设置代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">一次性代理</span><br>git clone -c http.proxy=&quot;http://127.0.0.1:1087&quot; https://github.com/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">全局设置代理</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">仅为github.com设置socks5代理</span><br>git config --global http.https://github.com.proxy socks5://127.0.0.1:1086<br><br>git config --global https.proxy http://127.0.0.1:1080<br><br>git config --global https.proxy https://127.0.0.1:1080<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">取消</span><br><br>git config --global --unset http.proxy<br><br>git config --global --unset https.proxy<br></code></pre></td></tr></table></figure><p>为 ssh 协议设置代理</p><blockquote><p>下文配置其中的ip和端口修改成你自己代理的参数</p></blockquote><p>windows</p><p>修改C:\Users${your username}.ssh目录下的config文件，若没有则新建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com                                                <br>    Hostname ssh.github.com                                    <br>    Port 443                                                  <br>    User git<br>    ProxyCommand connect -S 127.0.0.1:7890 %h %p<br></code></pre></td></tr></table></figure><p>Linux、MacOS</p><p>修改~&#x2F;.ssh目录下的config文件，若没有则新建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com<br>        Hostname ssh.github.com<br>        Port 443<br>        User git<br>        ProxyCommand nc -v -x 172.28.208.1:7890 %h %p<br></code></pre></td></tr></table></figure><p>验证</p><p><code>ssh -T git@github.com</code></p><p>若出现错误，则删除.ssh目录中known_hosts文件重试</p><p><a href="https://seepine.com/git/ssh-proxy/">Git 为 ssh 协议设置代理 - Seepine’s Blog</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;gerrit draft and topic |: &lt;a</summary>
        
      
    
    
    
    <category term="git" scheme="https://iwesley.top/categories/git/"/>
    
    
    <category term="git" scheme="https://iwesley.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Android Activity常见问题</title>
    <link href="https://iwesley.top/article/a218b21a/"/>
    <id>https://iwesley.top/article/a218b21a/</id>
    <published>2024-11-17T09:15:36.000Z</published>
    <updated>2025-01-04T13:33:26.143Z</updated>
    
    <content type="html"><![CDATA[<p>android finishAffinity()-CSDN博客: <a href="https://blog.csdn.net/mr_orange_klj/article/details/43244603">https://blog.csdn.net/mr_orange_klj/article/details/43244603</a></p><p>调用activity对象的finishiAffinity()方法，可以关闭当前activity所属的activity栈中所有的activity。如果所有activity都保存在默认栈中，则使用该方法会直接退出程序。如果要回到程序的主界面，则可以在manifest文件中将主界面的activity设置为单独的栈保存。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">activity</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.weishi.UserMain&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:taskAffinity</span>=<span class="hljs-string">&quot;:finish&quot;</span>//<span class="hljs-attr">该句用来指定栈</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:label</span>=<span class="hljs-string">&quot;@string/title_activity_user_main&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;android finishAffinity()-CSDN博客: &lt;a</summary>
        
      
    
    
    
    <category term="Android" scheme="https://iwesley.top/categories/Android/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="AndroidActivity" scheme="https://iwesley.top/tags/AndroidActivity/"/>
    
  </entry>
  
  <entry>
    <title>安卓常用工具方法</title>
    <link href="https://iwesley.top/article/bf556c88/"/>
    <id>https://iwesley.top/article/bf556c88/</id>
    <published>2024-11-17T08:17:32.000Z</published>
    <updated>2024-12-24T12:51:46.756Z</updated>
    
    <content type="html"><![CDATA[<p>获取进程名字</p><p>【Android】获取当前进程名的四种方法及效率对比_android获取当前进程名-CSDN博客: <a href="https://blog.csdn.net/qq_23049111/article/details/126097443">https://blog.csdn.net/qq_23049111/article/details/126097443</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getAppProcessName</span><span class="hljs-params">()</span></span>: String &#123;<br>    <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.P) &#123;<br>        <span class="hljs-keyword">return</span> Application.getProcessName()<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR2) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">val</span> processName =<br>                Reflector.on(<span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>).method(<span class="hljs-string">&quot;currentProcessName&quot;</span>)<br>                    .call&lt;String&gt;()<br>            Log.d(TAG, <span class="hljs-string">&quot;getAppProcessName: <span class="hljs-variable">$processName</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> processName<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;getAppProcessName error&quot;</span>, e)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//安卓4.2的的currentPackageName实际上就是currentProcessName</span><br>            <span class="hljs-comment">//http://xrefandroid.com/android-4.2.2_r1/xref/frameworks/base/core/java/android/app/ActivityThread.java</span><br>            <span class="hljs-keyword">val</span> processName =<br>                Reflector.on(<span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>).method(<span class="hljs-string">&quot;currentPackageName&quot;</span>)<br>                    .call&lt;String&gt;()<br>            Log.d(TAG, <span class="hljs-string">&quot;getAppProcessName: <span class="hljs-variable">$processName</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> processName<br>        &#125; <span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;getAppProcessName error&quot;</span>, e)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取应用名称</p><p>Android 获取应用的icon、名字、版本号_查看安卓app类名-CSDN博客: <a href="https://blog.csdn.net/LoveDou0816/article/details/78135201">https://blog.csdn.net/LoveDou0816/article/details/78135201</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> Context.<span class="hljs-title">getAppName</span><span class="hljs-params">(pkgName: <span class="hljs-type">String</span>)</span></span>: String &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">val</span> info: PackageInfo = packageManager.getPackageInfo(pkgName, <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">//resources.getString(info.applicationInfo.labelRes)</span><br>        info.applicationInfo.loadLabel(packageManager).toString() <span class="hljs-comment">//兼容android:label=&quot;$&#123;APP_NAME&#125;&quot;</span><br>    &#125; <span class="hljs-keyword">catch</span> (e: PackageManager.NameNotFoundException) &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;getAppName error&quot;</span>, e)<br>        <span class="hljs-string">&quot;&quot;</span><br>    &#125; <span class="hljs-keyword">catch</span> (e: Resources.NotFoundException) &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;getAppName error&quot;</span>, e)<br>        <span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;获取进程名字&lt;/p&gt;
&lt;p&gt;【Android】获取当前进程名的四种方法及效率对比_android获取当前进程名-CSDN博客: &lt;a</summary>
        
      
    
    
    
    <category term="Android" scheme="https://iwesley.top/categories/Android/"/>
    
    
    <category term="Android" scheme="https://iwesley.top/tags/Android/"/>
    
    <category term="AndroidUtils" scheme="https://iwesley.top/tags/AndroidUtils/"/>
    
  </entry>
  
  <entry>
    <title>gradle常见问题</title>
    <link href="https://iwesley.top/article/a7bee58f/"/>
    <id>https://iwesley.top/article/a7bee58f/</id>
    <published>2024-11-17T07:46:40.000Z</published>
    <updated>2025-01-04T13:22:42.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="aar相关"><a href="#aar相关" class="headerlink" title="aar相关"></a>aar相关</h1><h2 id="添加aar包依赖"><a href="#添加aar包依赖" class="headerlink" title="添加aar包依赖"></a>添加aar包依赖</h2><p>gradle - How to include different .aar depending on the android build variant - Stack Overflow: <a href="https://stackoverflow.com/questions/41373333/how-to-include-different-aar-depending-on-the-android-build-variant">https://stackoverflow.com/questions/41373333/how-to-include-different-aar-depending-on-the-android-build-variant</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs groovy">configurations.maybeCreate(<span class="hljs-string">&quot;default&quot;</span>)<br>artifacts.add(<span class="hljs-string">&quot;default&quot;</span>, file(<span class="hljs-string">&#x27;xyz.aar&#x27;</span>))<br></code></pre></td></tr></table></figure><blockquote><p>包装本地 aar 的模块中禁止包含任何代码和资源文件，包括库或 AndroidManifest。即使包含，也无法生效；如果有多个本地的aar需要引用，需要分别创建工程目录及build.gradle文件。</p></blockquote><p>AndroidStudio根据环境打包不同的aar文件 - 简书: <a href="https://www.jianshu.com/p/bc61ed8dcce3">https://www.jianshu.com/p/bc61ed8dcce3</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy">configurations.maybeCreate(<span class="hljs-string">&quot;default&quot;</span>)<br>artifacts.add(<span class="hljs-string">&quot;default&quot;</span>, file(<span class="hljs-string">&#x27;demolib_release.aar&#x27;</span>))<br>configurations.maybeCreate(<span class="hljs-string">&quot;debug&quot;</span>)<br>artifacts.add(<span class="hljs-string">&quot;debug&quot;</span>, file(<span class="hljs-string">&#x27;demolib_debug.aar&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>    implementation project(<span class="hljs-string">&#x27;:demolib&#x27;</span>)<br>    debugImplementation project(<span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;:demolib&#x27;</span>, <span class="hljs-attr">configuration:</span> <span class="hljs-string">&#x27;debug&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>【Android】如何引入本地 aar？ 原生集成常见问题 - 开发指南 - 开发文档 - 飞书开放平台: <a href="https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/native-integration/native-integration-qa">https://open.feishu.cn/document/uAjLw4CM/ukzMukzMukzM/native-integration/native-integration-qa</a></p><h2 id="编译成app后aar里面的资源找不到，实际上aar里面有"><a href="#编译成app后aar里面的资源找不到，实际上aar里面有" class="headerlink" title="编译成app后aar里面的资源找不到，实际上aar里面有"></a>编译成app后aar里面的资源找不到，实际上aar里面有</h2><p>把apk放到android studio 查看里面的资源情况，一般是由于资源冲突被其他module资源替换了</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;aar相关&quot;&gt;&lt;a href=&quot;#aar相关&quot; class=&quot;headerlink&quot; title=&quot;aar相关&quot;&gt;&lt;/a&gt;aar相关&lt;/h1&gt;&lt;h2 id=&quot;添加aar包依赖&quot;&gt;&lt;a href=&quot;#添加aar包依赖&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="AppBuild" scheme="https://iwesley.top/categories/AppBuild/"/>
    
    
    <category term="gradle" scheme="https://iwesley.top/tags/gradle/"/>
    
  </entry>
  
</feed>
